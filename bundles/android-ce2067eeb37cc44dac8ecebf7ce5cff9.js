var __DEV__=false,__BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),process=this.process||{};process.env=process.env||{};process.env.NODE_ENV='production';
(function (global) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  global.require = _require;
  global.__d = define;
  var modules = Object.create(null);

  function define(factory, moduleId, dependencyMap) {
    if (moduleId in modules) {
      return;
    }

    modules[moduleId] = {
      dependencyMap: dependencyMap,
      exports: undefined,
      factory: factory,
      hasError: false,
      isInitialized: false
    };
  }

  function _require(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue = void 0;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = ~0 >>> ID_MASK_SHIFT;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  _require.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return value.segmentId << ID_MASK_SHIFT + value.localId;
  }

  _require.packModuleId = packModuleId;

  function loadModuleImplementation(moduleId, module) {
    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId);

      var segmentId = _unpackModuleId.segmentId,
          localId = _unpackModuleId.localId;
      nativeRequire(localId, segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    module.isInitialized = true;
    var exports = module.exports = {};
    var _module = module;
    var factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    try {
      var moduleObject = {
        exports: exports
      };
      factory(global, _require, moduleObject, exports, dependencyMap);
      {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }
      return module.exports = moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.exports = undefined;
      throw e;
    }
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';
    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }
})(this);
(function (global) {
  Object.assign = function (target, sources) {
    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];

      if (nextSource == null) {
        continue;
      }

      for (var key in nextSource) {
        target[key] = nextSource[key];
      }
    }

    return target;
  };
})(this);
(function (global) {
  var inspect = function () {
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }

    function stylizeNoColor(str, styleType) {
      return str;
    }

    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }

    function formatValue(ctx, value, recurseTimes) {
      var primitive = formatPrimitive(ctx, value);

      if (primitive) {
        return primitive;
      }

      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }

        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }

        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }

        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '',
          array = false,
          braces = ['{', '}'];

      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);
      var output;

      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }

    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }

      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      if (isNull(value)) return ctx.stylize('null', 'null');
    }

    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }

    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];

      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }

      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }

    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };

      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }

      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }

      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }

          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }

      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }

        name = JSON.stringify('' + key);

        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }

    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    return inspect;
  }();

  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';
  var INSPECTOR_FRAMES_TO_SKIP = 1;

  if (global.nativeLoggingHook) {
    function getNativeLogFunction(level) {
      return function () {
        var str = void 0;

        if (arguments.length === 1 && typeof arguments[0] === 'string') {
          str = arguments[0];
        } else {
          str = Array.prototype.map.call(arguments, function (arg) {
            return inspect(arg, {
              depth: 10
            });
          }).join(', ');
        }

        var logLevel = level;

        if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
          logLevel = LOG_LEVELS.warn;
        }

        if (global.__inspectorLog) {
          global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
        }

        global.nativeLoggingHook(str, logLevel);
      };
    }

    function repeat(element, n) {
      return Array.apply(null, Array(n)).map(function () {
        return element;
      });
    }

    function consoleTablePolyfill(rows) {
      if (!Array.isArray(rows)) {
        var data = rows;
        rows = [];

        for (var key in data) {
          if (data.hasOwnProperty(key)) {
            var row = data[key];
            row[OBJECT_COLUMN_NAME] = key;
            rows.push(row);
          }
        }
      }

      if (rows.length === 0) {
        global.nativeLoggingHook('', LOG_LEVELS.info);
        return;
      }

      var columns = Object.keys(rows[0]).sort();
      var stringRows = [];
      var columnWidths = [];
      columns.forEach(function (k, i) {
        columnWidths[i] = k.length;

        for (var j = 0; j < rows.length; j++) {
          var cellStr = (rows[j][k] || '?').toString();
          stringRows[j] = stringRows[j] || [];
          stringRows[j][i] = cellStr;
          columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
        }
      });

      function joinRow(row, space) {
        var cells = row.map(function (cell, i) {
          var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
          return cell + extraSpaces;
        });
        space = space || ' ';
        return cells.join(space + '|' + space);
      }

      var separators = columnWidths.map(function (columnWidth) {
        return repeat('-', columnWidth).join('');
      });
      var separatorRow = joinRow(separators, '-');
      var header = joinRow(columns);
      var table = [header, separatorRow];

      for (var i = 0; i < rows.length; i++) {
        table.push(joinRow(stringRows[i]));
      }

      global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
    }

    var originalConsole = global.console;
    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill
    };
  } else if (!global.console) {
    var log = global.print || function consoleLoggingStub() {};

    global.console = {
      error: log,
      info: log,
      log: log,
      warn: log,
      trace: log,
      debug: log,
      table: log
    };
  }
})(this);
(function (global) {
  var _inGuard = 0;

  var _globalHandler = function onError(e) {
    throw e;
  };

  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error);
    },
    reportFatalError: function reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(fun, context, args) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }

      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }

      return null;
    },
    inGuard: function inGuard() {
      return _inGuard;
    },
    guard: function guard(fun, name, context) {
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }

      name = name || fun.name || '<generated guard>';

      function guarded() {
        return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
      }

      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(this);
(function (global) {
  if (Number.EPSILON === undefined) {
    Object.defineProperty(Number, 'EPSILON', {
      value: Math.pow(2, -52)
    });
  }

  if (Number.MAX_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
      value: Math.pow(2, 53) - 1
    });
  }

  if (Number.MIN_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
      value: -(Math.pow(2, 53) - 1)
    });
  }

  if (!Number.isNaN) {
    var globalIsNaN = global.isNaN;
    Object.defineProperty(Number, 'isNaN', {
      configurable: true,
      enumerable: false,
      value: function isNaN(value) {
        return typeof value === 'number' && globalIsNaN(value);
      },
      writable: true
    });
  }
})(this);
(function (global) {
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
      var start = Math.min(Math.max(pos, 0), string.length);
      return string.indexOf(String(search), pos) === start;
    };
  }

  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var stringLength = string.length;
      var searchString = String(search);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
      var end = Math.min(Math.max(pos, 0), stringLength);
      var start = end - searchString.length;

      if (start < 0) {
        return false;
      }

      return string.lastIndexOf(searchString, start) === start;
    };
  }

  if (!String.prototype.repeat) {
    String.prototype.repeat = function (count) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      count = Number(count) || 0;

      if (count < 0 || count === Infinity) {
        throw RangeError();
      }

      if (count === 1) {
        return string;
      }

      var result = '';

      while (count) {
        if (count & 1) {
          result += string;
        }

        if (count >>= 1) {
          string += string;
        }
      }

      return result;
    };
  }

  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
      'use strict';

      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > this.length) {
        return false;
      } else {
        return this.indexOf(search, start) !== -1;
      }
    };
  }

  if (!String.prototype.codePointAt) {
    String.prototype.codePointAt = function (position) {
      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var size = string.length;
      var index = position ? Number(position) : 0;

      if (Number.isNaN(index)) {
        index = 0;
      }

      if (index < 0 || index >= size) {
        return undefined;
      }

      var first = string.charCodeAt(index);
      var second;

      if (first >= 0xd800 && first <= 0xdbff && size > index + 1) {
          second = string.charCodeAt(index + 1);

          if (second >= 0xdc00 && second <= 0xdfff) {
            return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
          }
        }

      return first;
    };
  }
})(this);
(function (global) {
  function findIndex(predicate, context) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }

    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }

    var list = Object(this);
    var length = list.length >>> 0;

    for (var i = 0; i < length; i++) {
      if (predicate.call(context, list[i], i, list)) {
        return i;
      }
    }

    return -1;
  }

  if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: findIndex
    });
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(predicate, context) {
        if (this == null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }

        var index = findIndex.call(this, predicate, context);
        return index === -1 ? undefined : this[index];
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(searchElement) {
        var O = Object(this);
        var len = parseInt(O.length) || 0;

        if (len === 0) {
          return false;
        }

        var n = parseInt(arguments[1]) || 0;
        var k;

        if (n >= 0) {
          k = n;
        } else {
          k = len + n;

          if (k < 0) {
            k = 0;
          }
        }

        var currentElement;

        while (k < len) {
          currentElement = O[k];

          if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
            return true;
          }

          k++;
        }

        return false;
      }
    });
  }
})(this);
(function (global) {
  if (!Array.from) {
    Array.from = function (arrayLike) {
      if (arrayLike == null) {
        throw new TypeError('Object is null or undefined');
      }

      var mapFn = arguments[1];
      var thisArg = arguments[2];
      var C = this;
      var items = Object(arrayLike);
      var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';
      var mapping = typeof mapFn === 'function';
      var usingIterator = typeof items[symbolIterator] === 'function';
      var key = 0;
      var ret;
      var value;

      if (usingIterator) {
        ret = typeof C === 'function' ? new C() : [];
        var it = items[symbolIterator]();
        var next;

        while (!(next = it.next()).done) {
          value = next.value;

          if (mapping) {
            value = mapFn.call(thisArg, value, key);
          }

          ret[key] = value;
          key += 1;
        }

        ret.length = key;
        return ret;
      }

      var len = items.length;

      if (isNaN(len) || len < 0) {
        len = 0;
      }

      ret = typeof C === 'function' ? new C(len) : new Array(len);

      while (key < len) {
        value = items[key];

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    };
  }
})(this);
(function (global) {
  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }

        var entries = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }

        return entries;
      };
    }

    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }

        var values = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }

        return values;
      };
    }
  })();
})(this);
(function (global) {
  var babelHelpers = global.babelHelpers = {};
  babelHelpers.typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
  };

  babelHelpers.createRawReactElement = function () {
    var REACT_ELEMENT_TYPE = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 0xeac7;
    return function createRawReactElement(type, key, props) {
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        ref: null,
        props: props,
        _owner: null
      };
    };
  }();

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineEnumerableProperties = function (obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ('value' in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    return obj;
  };

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers._extends = babelHelpers.extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.interopRequireDefault = function (obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  };

  babelHelpers.interopRequireWildcard = function (obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  };

  babelHelpers.objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };

  babelHelpers.toArray = function (arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  };

  babelHelpers.toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  };
})(this);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _expo = _require(_dependencyMap[0]);

  var _expo2 = _interopRequireDefault(_expo);

  var _App = _require(_dependencyMap[1]);

  var _App2 = _interopRequireDefault(_App);

  var _react = _require(_dependencyMap[2]);

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[3]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  _expo2.default.registerRootComponent(_App2.default);
},11,[12,728,103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0]);

  _require(_dependencyMap[1]);

  _require(_dependencyMap[2]);

  var _reactNative = _require(_dependencyMap[3]);

  var _Constants = _require(_dependencyMap[4]);

  var _Constants2 = babelHelpers.interopRequireDefault(_Constants);

  if (typeof _Constants2.default.manifest.env === 'object') {
    babelHelpers.extends(process.env, _Constants2.default.manifest.env);
  }

  global.__old_console_warn = global.__old_console_warn || console.warn;

  global.console.warn = function (str) {
    var tst = (str || '') + '';

    if (tst.startsWith('Warning: isMounted(...) is deprecated')) {
      return;
    }

    return global.__old_console_warn.apply(console, [str]);
  };

  module.exports = {
    get Crypto() {
      return _reactNative.NativeModules.ExponentCrypto;
    },

    get Fabric() {
      return _reactNative.NativeModules.ExponentFabric;
    },

    get ImageCropper() {
      return _reactNative.NativeModules.ExponentImageCropper;
    },

    get apisAreAvailable() {
      return _require(_dependencyMap[5]).default;
    },

    get registerRootComponent() {
      return _require(_dependencyMap[6]).default;
    },

    get takeSnapshotAsync() {
      return _require(_dependencyMap[7]).default;
    },

    get Accelerometer() {
      return _require(_dependencyMap[8]).default;
    },

    get Asset() {
      return _require(_dependencyMap[9]).default;
    },

    get AuthSession() {
      return _require(_dependencyMap[10]).default;
    },

    get ErrorRecovery() {
      return _require(_dependencyMap[11]).default;
    },

    get GLView() {
      return _require(_dependencyMap[12]).default;
    },

    get Gyroscope() {
      return _require(_dependencyMap[13]).default;
    },

    get Magnetometer() {
      return _require(_dependencyMap[14]).default;
    },

    get MagnetometerUncalibrated() {
      return _require(_dependencyMap[15]).default;
    },

    get Notifications() {
      return _require(_dependencyMap[16]).default;
    },

    get SQLite() {
      return _require(_dependencyMap[17]).default;
    },

    get AdMobBanner() {
      return _require(_dependencyMap[18]).default;
    },

    get PublisherBanner() {
      return _require(_dependencyMap[19]).default;
    },

    get AdMobInterstitial() {
      return _require(_dependencyMap[20]);
    },

    get AdMobRewarded() {
      return _require(_dependencyMap[21]);
    },

    get AppLoading() {
      return _require(_dependencyMap[22]).default;
    },

    get BarCodeScanner() {
      return _require(_dependencyMap[23]).default;
    },

    get BlurView() {
      return _require(_dependencyMap[24]).default;
    },

    get Camera() {
      return _require(_dependencyMap[25]).default;
    },

    get FaceDetector() {
      return _require(_dependencyMap[26]).default;
    },

    get GestureHandler() {
      return _require(_dependencyMap[27]).default;
    },

    get KeepAwake() {
      return _require(_dependencyMap[28]).default;
    },

    get LinearGradient() {
      return _require(_dependencyMap[29]).default;
    },

    get MapView() {
      return _require(_dependencyMap[30]).default;
    },

    get Modal() {
      return _require(_dependencyMap[31]).default;
    },

    get Video() {
      return _require(_dependencyMap[32]).default;
    },

    get WebBrowser() {
      return _require(_dependencyMap[33]).default;
    },

    get Svg() {
      return _require(_dependencyMap[34]).default;
    },

    get Fingerprint() {
      return _require(_dependencyMap[35]);
    },

    get Amplitude() {
      return _require(_dependencyMap[36]).default;
    },

    get Audio() {
      return _require(_dependencyMap[37]);
    },

    get Brightness() {
      return _require(_dependencyMap[38]);
    },

    get Calendar() {
      return _require(_dependencyMap[39]);
    },

    get Constants() {
      return _require(_dependencyMap[4]).default;
    },

    get Contacts() {
      return _require(_dependencyMap[40]);
    },

    get DangerZone() {
      return _require(_dependencyMap[41]);
    },

    get DocumentPicker() {
      return _require(_dependencyMap[42]);
    },

    get FileSystem() {
      return _require(_dependencyMap[43]);
    },

    get Font() {
      return _require(_dependencyMap[44]);
    },

    get Google() {
      return _require(_dependencyMap[45]);
    },

    get Haptic() {
      return _require(_dependencyMap[46]);
    },

    get Icon() {
      return _require(_dependencyMap[47]).default;
    },

    get ImageManipulator() {
      return _require(_dependencyMap[48]);
    },

    get ImagePicker() {
      return _require(_dependencyMap[49]);
    },

    get Linking() {
      return _require(_dependencyMap[50]).default;
    },

    get Location() {
      return _require(_dependencyMap[2]).default;
    },

    get Logs() {
      return _require(_dependencyMap[51]).default;
    },

    get MailComposer() {
      return _require(_dependencyMap[52]);
    },

    get MediaLibrary() {
      return _require(_dependencyMap[53]);
    },

    get Pedometer() {
      return _require(_dependencyMap[54]);
    },

    get Permissions() {
      return _require(_dependencyMap[55]);
    },

    get Facebook() {
      return _require(_dependencyMap[56]).default;
    },

    get FacebookAds() {
      return _require(_dependencyMap[57]);
    },

    get IntentLauncherAndroid() {
      return _require(_dependencyMap[58]);
    },

    get ScreenOrientation() {
      return _require(_dependencyMap[59]);
    },

    get SecureStore() {
      return _require(_dependencyMap[60]);
    },

    get Segment() {
      return _require(_dependencyMap[61]).default;
    },

    get Speech() {
      return _require(_dependencyMap[62]);
    },

    get Updates() {
      return _require(_dependencyMap[63]);
    },

    get Util() {
      return _require(_dependencyMap[64]);
    }

  };

  if (global) {
    global.__exponent = module.exports;
    global.__expo = module.exports;
    global.Expo = module.exports;
  }
},12,[13,309,323,14,310,325,326,333,334,328,337,345,346,349,350,351,329,352,370,371,372,373,331,1105,1107,347,377,378,384,1109,386,400,404,344,407,479,480,481,484,485,486,487,503,504,327,505,506,507,709,710,343,311,711,712,713,324,714,715,721,722,723,724,725,726,727]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _reactNative = _require(_dependencyMap[0]);

  _reactNative.findNodeHandle;

  if (!_reactNative.NativeModules.ExponentConstants) {
    throw new Error("The Expo SDK requires Expo to run. It appears the native Expo modules are unavailable and this code is not running on Expo. Visit https://docs.expo.io to learn more about developing an Expo project.");
  }

  _reactNative.YellowBox.ignoreWarnings(['Warning: isMounted(...) is deprecated', 'Module RCTImageLoader']);
},13,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var ReactNative = {
    get AccessibilityInfo() {
      return _require(_dependencyMap[1]);
    },

    get ActivityIndicator() {
      return _require(_dependencyMap[2]);
    },

    get ART() {
      return _require(_dependencyMap[3]);
    },

    get Button() {
      return _require(_dependencyMap[4]);
    },

    get CheckBox() {
      return _require(_dependencyMap[5]);
    },

    get DatePickerIOS() {
      return _require(_dependencyMap[6]);
    },

    get DrawerLayoutAndroid() {
      return _require(_dependencyMap[7]);
    },

    get FlatList() {
      return _require(_dependencyMap[8]);
    },

    get Image() {
      return _require(_dependencyMap[9]);
    },

    get ImageBackground() {
      return _require(_dependencyMap[10]);
    },

    get ImageEditor() {
      return _require(_dependencyMap[11]);
    },

    get ImageStore() {
      return _require(_dependencyMap[12]);
    },

    get KeyboardAvoidingView() {
      return _require(_dependencyMap[13]);
    },

    get ListView() {
      return _require(_dependencyMap[14]);
    },

    get MaskedViewIOS() {
      return _require(_dependencyMap[15]);
    },

    get Modal() {
      return _require(_dependencyMap[16]);
    },

    get NavigatorIOS() {
      return _require(_dependencyMap[17]);
    },

    get Picker() {
      return _require(_dependencyMap[18]);
    },

    get PickerIOS() {
      return _require(_dependencyMap[19]);
    },

    get ProgressBarAndroid() {
      return _require(_dependencyMap[20]);
    },

    get ProgressViewIOS() {
      return _require(_dependencyMap[21]);
    },

    get SafeAreaView() {
      return _require(_dependencyMap[22]);
    },

    get ScrollView() {
      return _require(_dependencyMap[23]);
    },

    get SectionList() {
      return _require(_dependencyMap[24]);
    },

    get SegmentedControlIOS() {
      return _require(_dependencyMap[25]);
    },

    get Slider() {
      return _require(_dependencyMap[26]);
    },

    get SnapshotViewIOS() {
      return _require(_dependencyMap[27]);
    },

    get Switch() {
      return _require(_dependencyMap[28]);
    },

    get RefreshControl() {
      return _require(_dependencyMap[29]);
    },

    get StatusBar() {
      return _require(_dependencyMap[30]);
    },

    get SwipeableFlatList() {
      return _require(_dependencyMap[31]);
    },

    get SwipeableListView() {
      return _require(_dependencyMap[32]);
    },

    get TabBarIOS() {
      return _require(_dependencyMap[33]);
    },

    get Text() {
      return _require(_dependencyMap[34]);
    },

    get TextInput() {
      return _require(_dependencyMap[35]);
    },

    get ToastAndroid() {
      return _require(_dependencyMap[36]);
    },

    get ToolbarAndroid() {
      return _require(_dependencyMap[37]);
    },

    get Touchable() {
      return _require(_dependencyMap[38]);
    },

    get TouchableHighlight() {
      return _require(_dependencyMap[39]);
    },

    get TouchableNativeFeedback() {
      return _require(_dependencyMap[40]);
    },

    get TouchableOpacity() {
      return _require(_dependencyMap[41]);
    },

    get TouchableWithoutFeedback() {
      return _require(_dependencyMap[42]);
    },

    get View() {
      return _require(_dependencyMap[43]);
    },

    get ViewPagerAndroid() {
      return _require(_dependencyMap[44]);
    },

    get VirtualizedList() {
      return _require(_dependencyMap[45]);
    },

    get WebView() {
      return _require(_dependencyMap[46]);
    },

    get ActionSheetIOS() {
      return _require(_dependencyMap[47]);
    },

    get Alert() {
      return _require(_dependencyMap[48]);
    },

    get AlertIOS() {
      return _require(_dependencyMap[49]);
    },

    get Animated() {
      return _require(_dependencyMap[50]);
    },

    get AppRegistry() {
      return _require(_dependencyMap[51]);
    },

    get AppState() {
      return _require(_dependencyMap[52]);
    },

    get AsyncStorage() {
      return _require(_dependencyMap[53]);
    },

    get BackAndroid() {
      return _require(_dependencyMap[54]);
    },

    get BackHandler() {
      return _require(_dependencyMap[55]);
    },

    get CameraRoll() {
      return _require(_dependencyMap[56]);
    },

    get Clipboard() {
      return _require(_dependencyMap[57]);
    },

    get DatePickerAndroid() {
      return _require(_dependencyMap[58]);
    },

    get DeviceInfo() {
      return _require(_dependencyMap[59]);
    },

    get Dimensions() {
      return _require(_dependencyMap[60]);
    },

    get Easing() {
      return _require(_dependencyMap[61]);
    },

    get findNodeHandle() {
      return _require(_dependencyMap[62]).findNodeHandle;
    },

    get I18nManager() {
      return _require(_dependencyMap[63]);
    },

    get ImagePickerIOS() {
      return _require(_dependencyMap[64]);
    },

    get InteractionManager() {
      return _require(_dependencyMap[65]);
    },

    get Keyboard() {
      return _require(_dependencyMap[66]);
    },

    get LayoutAnimation() {
      return _require(_dependencyMap[67]);
    },

    get Linking() {
      return _require(_dependencyMap[68]);
    },

    get NativeEventEmitter() {
      return _require(_dependencyMap[69]);
    },

    get NetInfo() {
      return _require(_dependencyMap[70]);
    },

    get PanResponder() {
      return _require(_dependencyMap[71]);
    },

    get PermissionsAndroid() {
      return _require(_dependencyMap[72]);
    },

    get PixelRatio() {
      return _require(_dependencyMap[73]);
    },

    get PushNotificationIOS() {
      return _require(_dependencyMap[74]);
    },

    get Settings() {
      return _require(_dependencyMap[75]);
    },

    get Share() {
      return _require(_dependencyMap[76]);
    },

    get StatusBarIOS() {
      return _require(_dependencyMap[77]);
    },

    get StyleSheet() {
      return _require(_dependencyMap[78]);
    },

    get Systrace() {
      return _require(_dependencyMap[79]);
    },

    get TimePickerAndroid() {
      return _require(_dependencyMap[80]);
    },

    get TVEventHandler() {
      return _require(_dependencyMap[81]);
    },

    get UIManager() {
      return _require(_dependencyMap[82]);
    },

    get unstable_batchedUpdates() {
      return _require(_dependencyMap[62]).unstable_batchedUpdates;
    },

    get Vibration() {
      return _require(_dependencyMap[83]);
    },

    get VibrationIOS() {
      return _require(_dependencyMap[84]);
    },

    get YellowBox() {
      return _require(_dependencyMap[85]);
    },

    get DeviceEventEmitter() {
      return _require(_dependencyMap[86]);
    },

    get NativeAppEventEmitter() {
      return _require(_dependencyMap[87]);
    },

    get NativeModules() {
      return _require(_dependencyMap[88]);
    },

    get Platform() {
      return _require(_dependencyMap[89]);
    },

    get processColor() {
      return _require(_dependencyMap[90]);
    },

    get requireNativeComponent() {
      return _require(_dependencyMap[91]);
    },

    get takeSnapshot() {
      return _require(_dependencyMap[92]);
    },

    get ColorPropType() {
      return _require(_dependencyMap[93]);
    },

    get EdgeInsetsPropType() {
      return _require(_dependencyMap[94]);
    },

    get PointPropType() {
      return _require(_dependencyMap[95]);
    },

    get ViewPropTypes() {
      return _require(_dependencyMap[96]);
    },

    get Navigator() {
      invariant(false, "Navigator is deprecated and has been removed from this package. It can now be installed and imported from `react-native-deprecated-custom-components` instead of `react-native`. Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html");
    }

  };
  module.exports = ReactNative;
},14,[15,1075,42,160,166,1081,1082,1083,226,1080,239,241,242,243,228,1084,245,1085,250,1086,1078,1088,1089,208,255,1090,258,1091,260,233,261,262,266,1092,167,270,1094,1095,169,278,1079,177,221,134,1096,234,1097,281,85,86,178,282,288,289,290,1098,291,292,1099,115,114,203,46,247,294,186,212,213,295,70,296,264,89,113,297,1100,299,1101,112,21,1102,173,97,302,1103,304,37,93,17,1076,129,147,308,43,137,209,136]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},15,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0]);

  var RCTDeviceEventEmitter = _require(_dependencyMap[1]);

  var RCTAccessibilityInfo = NativeModules.AccessibilityInfo;
  var TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';

  var _subscriptions = new Map();

  var AccessibilityInfo = {
    fetch: function fetch() {
      return new Promise(function (resolve, reject) {
        RCTAccessibilityInfo.isTouchExplorationEnabled(function (resp) {
          resolve(resp);
        });
      });
    },
    addEventListener: function addEventListener(eventName, handler) {
      var listener = RCTDeviceEventEmitter.addListener(TOUCH_EXPLORATION_EVENT, function (enabled) {
        handler(enabled);
      });

      _subscriptions.set(handler, listener);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    }
  };
  module.exports = AccessibilityInfo;
},1075,[17,37]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0]);

  var invariant = _require(_dependencyMap[1]);

  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }

    var _config = babelHelpers.slicedToArray(config, 5),
        moduleName = _config[0],
        constants = _config[1],
        methods = _config[2],
        promiseMethods = _config[3],
        syncMethods = _config[4];

    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), "Module name prefixes should've been stripped by the native side but wasn't for " + moduleName);

    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }

    var module = {};
    methods && methods.forEach(function (methodName, methodID) {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
      var isSync = syncMethods && arrayContains(syncMethods, methodID);
      invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });
    babelHelpers.extends(module, constants);
    return {
      name: moduleName,
      module: module
    };
  }

  global.__fbGenNativeModule = genModule;

  function loadModule(name, moduleID) {
    invariant(global.nativeRequireModuleConfig, 'Can\'t lazily create module without nativeRequireModuleConfig');
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }

  function genMethod(moduleID, methodID, type) {
    var fn = null;

    if (type === 'promise') {
      fn = function fn() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new Promise(function (resolve, reject) {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
            return resolve(data);
          }, function (errorData) {
            return reject(createErrorFromErrorData(errorData));
          });
        });
      };
    } else if (type === 'sync') {
      fn = function fn() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return global.nativeCallSyncHook(moduleID, methodID, args);
      };
    } else {
      fn = function fn() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        args = args.slice(0, args.length - callbackCount);
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
      };
    }

    fn.type = type;
    return fn;
  }

  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }

  function createErrorFromErrorData(errorData) {
    var _ref = errorData || {},
        message = _ref.message,
        extraErrorInfo = babelHelpers.objectWithoutProperties(_ref, ["message"]);

    var error = new Error(message);
    error.framesToPop = 1;
    return babelHelpers.extends(error, extraErrorInfo);
  }

  var NativeModules = {};

  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

    var defineLazyObjectProperty = _require(_dependencyMap[2]);

    (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
      var info = genModule(config, moduleID);

      if (!info) {
        return;
      }

      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
          defineLazyObjectProperty(NativeModules, info.name, {
            get: function get() {
              return loadModule(info.name, moduleID);
            }
          });
        }
    });
  }

  module.exports = NativeModules;
},17,[18,15,31]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MessageQueue = _require(_dependencyMap[0]);

  var BatchedBridge = new MessageQueue(typeof __fbUninstallRNGlobalErrorHandler !== 'undefined' && __fbUninstallRNGlobalErrorHandler === true);
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},18,[19]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ErrorUtils = _require(_dependencyMap[0]);

  var Systrace = _require(_dependencyMap[1]);

  var deepFreezeAndThrowOnMutationInDev = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var stringifySafe = _require(_dependencyMap[4]);

  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 131072;
  var DEBUG_INFO_LIMIT = 32;
  var JSTimers = null;

  var MessageQueue = function () {
    function MessageQueue() {
      var shouldUninstallGlobalErrorHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, MessageQueue);
      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = [];
      this._failureCallbacks = [];
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = new Date().getTime();

      if (shouldUninstallGlobalErrorHandler) {
        this.uninstallGlobalErrorHandler();
      } else {
        this.installGlobalErrorHandler();
      }

      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }

    babelHelpers.createClass(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        var _this = this;

        this.__guard(function () {
          _this.__callFunction(module, method, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "callFunctionReturnResultAndFlushedQueue",
      value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
        var _this2 = this;

        var result = void 0;

        this.__guard(function () {
          result = _this2.__callFunction(module, method, args);
        });

        return [result, this.flushedQueue()];
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        var _this3 = this;

        this.__guard(function () {
          _this3.__invokeCallback(cbID, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        var _this4 = this;

        this.__guard(function () {
          _this4.__callImmediates();
        });

        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return new Date().getTime() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = function () {
          return module;
        };
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module = void 0;
        var getValue = factory;

        this._lazyCallableModules[name] = function () {
          if (getValue) {
            module = getValue();
            getValue = null;
          }

          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        if (onFail || onSucc) {
          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks[this._callID] = onSucc;
          this._failureCallbacks[this._callID] = onFail;
        }

        this._callID++;

        this._queue[MODULE_IDS].push(moduleID);

        this._queue[METHOD_IDS].push(methodID);

        this._queue[PARAMS].push(params);

        var now = new Date().getTime();

        if (global.nativeFlushQueueImmediate && (now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS || this._inCall === 0)) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }

        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

        if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {}
    }, {
      key: "uninstallGlobalErrorHandler",
      value: function uninstallGlobalErrorHandler() {
        this.__guard = this.__guardUnsafe;
      }
    }, {
      key: "installGlobalErrorHandler",
      value: function installGlobalErrorHandler() {
        this.__guard = this.__guardSafe;
      }
    }, {
      key: "__guardUnsafe",
      value: function __guardUnsafe(fn) {
        this._inCall++;
        fn();
        this._inCall--;
      }
    }, {
      key: "__guardSafe",
      value: function __guardSafe(fn) {
        this._inCall++;

        try {
          fn();
        } catch (error) {
          ErrorUtils.reportFatalError(error);
        } finally {
          this._inCall--;
        }
      }
    }, {
      key: "__callImmediates",
      value: function __callImmediates() {
        Systrace.beginEvent('JSTimers.callImmediates()');

        if (!JSTimers) {
          JSTimers = _require(_dependencyMap[5]);
        }

        JSTimers.callImmediates();
        Systrace.endEvent();
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        Systrace.beginEvent(module + "." + method + "()");

        if (this.__spy) {
          this.__spy({
            type: TO_JS,
            module: module,
            method: method,
            args: args
          });
        }

        var moduleMethods = this.getCallableModule(module);
        invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
        invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
        var result = moduleMethods[method].apply(moduleMethods, args);
        Systrace.endEvent();
        return result;
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

        if (!callback) {
          return;
        }

        this._successCallbacks[callID] = this._failureCallbacks[callID] = null;
        callback.apply(undefined, babelHelpers.toConsumableArray(args));
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = function (info) {
            console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);
    return MessageQueue;
  }();

  module.exports = MessageQueue;
},19,[20,21,22,15,23,24]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = global.ErrorUtils;
},20,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var TRACE_TAG_REACT_APPS = 131072;
  var TRACE_TAG_JS_VM_CALLS = 134217728;
  var _enabled = false;
  var _asyncCookie = 0;
  var _markStack = [];

  var _markStackIndex = -1;

  var _canInstallReactHook = false;
  var REACT_MARKER = "\u269B";
  var userTimingPolyfill = null;
  var Systrace = {
    installReactHook: function installReactHook() {
      if (_enabled) {}

      _canInstallReactHook = true;
    },
    setEnabled: function setEnabled(enabled) {
      if (_enabled !== enabled) {
        _enabled = enabled;
      }
    },
    isEnabled: function isEnabled() {
      return _enabled;
    },
    beginEvent: function beginEvent(profileName, args) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
      }
    },
    endEvent: function endEvent() {
      if (_enabled) {
        global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
      }
    },
    beginAsyncEvent: function beginAsyncEvent(profileName) {
      var cookie = _asyncCookie;

      if (_enabled) {
        _asyncCookie++;
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }

      return cookie;
    },
    endAsyncEvent: function endAsyncEvent(profileName, cookie) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }
    },
    counterEvent: function counterEvent(profileName, value) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
      }
    }
  };
  module.exports = Systrace;
},21,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function deepFreezeAndThrowOnMutationInDev(object) {
    return object;
  }

  function throwOnImmutableMutation(key, value) {
    throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
  }

  function identity(value) {
    return value;
  }

  module.exports = deepFreezeAndThrowOnMutationInDev;
},22,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function stringifySafe(arg) {
    var ret;
    var type = typeof arg;

    if (arg === undefined) {
      ret = 'undefined';
    } else if (arg === null) {
      ret = 'null';
    } else if (type === 'string') {
      ret = '"' + arg + '"';
    } else if (type === 'function') {
      try {
        ret = arg.toString();
      } catch (e) {
        ret = '[function unknown]';
      }
    } else {
      try {
        ret = JSON.stringify(arg);
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            ret = arg.toString();
          } catch (E) {}
        }
      }
    }

    return ret || '["' + type + '" failed to stringify]';
  }

  module.exports = stringifySafe;
},23,[]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require2(_dependencyMap[0]);

  var Systrace = _require2(_dependencyMap[1]);

  var invariant = _require2(_dependencyMap[2]);

  var _require = _require2(_dependencyMap[3]),
      Timing = _require.Timing;

  var _performanceNow = null;

  function performanceNow() {
    if (!_performanceNow) {
      _performanceNow = _require2(_dependencyMap[4]);
    }

    return _performanceNow();
  }

  var FRAME_DURATION = 16.666666666666668;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var MAX_TIMER_DURATION_MS = 60000;
  var IS_ANDROID = true;
  var ANDROID_LONG_TIMER_MESSAGE = "Setting a timer for a long period of time, i.e. multiple minutes, is a performance and correctness issue on Android as it keeps the timer module awake, and timers can only be called when the app is in the foreground. See https://github.com/facebook/react-native/issues/12981 for more info.";
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var immediates = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var identifiers = [];
  var GUID = 1;
  var errors = null;
  var hasEmittedTimeDriftWarning = false;

  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);

    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }

    return freeIndex;
  }

  function _allocateCallback(func, type) {
    var id = GUID++;

    var freeIndex = _getFreeIndex();

    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;
    return id;
  }

  function _callTimer(timerID, frameTime, didTimeout) {
    _require2(_dependencyMap[5])(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = timerIDs.indexOf(timerID);

    if (timerIndex === -1) {
      return;
    }

    var type = types[timerIndex];
    var callback = callbacks[timerIndex];

    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
      _clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!errors) {
        errors = [e];
      } else {
        errors.push(e);
      }
    }
  }

  function _callImmediatesPass() {
    if (immediates.length > 0) {
      var passImmediates = immediates.slice();
      immediates = [];

      for (var i = 0; i < passImmediates.length; ++i) {
        _callTimer(passImmediates[i], 0);
      }
    }

    return immediates.length > 0;
  }

  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
    identifiers[i] = null;
  }

  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }

    var index = timerIDs.indexOf(timerID);

    if (index !== -1) {
      _clearIndex(index);

      var type = types[index];

      if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
        Timing.deleteTimer(timerID);
      }
    }
  }

  var JSTimers = {
    setTimeout: function setTimeout(func, duration) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setTimeout');

      Timing.createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function setInterval(func, duration) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setInterval');

      Timing.createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    setImmediate: function setImmediate(func) {
      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setImmediate');

      immediates.push(id);
      return id;
    },
    requestAnimationFrame: function requestAnimationFrame(func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');

      Timing.createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function requestIdleCallback(func, options) {
      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(true);
      }

      var timeout = options && options.timeout;

      var id = _allocateCallback(timeout != null ? function (deadline) {
        var timeoutId = requestIdleCallbackTimeouts[id];

        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }

        return func(deadline);
      } : func, 'requestIdleCallback');

      requestIdleCallbacks.push(id);

      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(function () {
          var index = requestIdleCallbacks.indexOf(id);

          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);

            _callTimer(id, performanceNow(), true);
          }

          delete requestIdleCallbackTimeouts[id];

          if (requestIdleCallbacks.length === 0) {
            Timing.setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }

      return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
      _freeCallback(timerID);

      var index = requestIdleCallbacks.indexOf(timerID);

      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }

      var timeoutId = requestIdleCallbackTimeouts[timerID];

      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }
    },
    clearTimeout: function clearTimeout(timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
      _freeCallback(timerID);
    },
    clearImmediate: function clearImmediate(timerID) {
      _freeCallback(timerID);

      var index = immediates.indexOf(timerID);

      if (index !== -1) {
        immediates.splice(index, 1);
      }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
      _freeCallback(timerID);
    },
    callTimers: function callTimers(timersToCall) {
      invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors = null;

      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }

      if (errors) {
        var errorCount = errors.length;

        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout(function (error) {
              throw error;
            }.bind(null, errors[ii]), 0);
          }
        }

        throw errors[0];
      }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
      if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }

      errors = null;

      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks.slice();
        requestIdleCallbacks = [];

        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    callImmediates: function callImmediates() {
      errors = null;

      while (_callImmediatesPass()) {}

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }

      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };

  if (!Timing) {
    console.warn("Timing native module is not available, can't set timers.");
    module.exports = {
      callImmediates: JSTimers.callImmediates,
      setImmediate: JSTimers.setImmediate
    };
  } else {
    module.exports = JSTimers;
  }
},24,[1076,21,15,17,26,29]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0]);

  var Platform = {
    OS: 'android',

    get Version() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.Version;
    },

    get isTesting() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.isTesting;
    },

    get isTV() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.uiMode === 'tv';
    },

    select: function select(obj) {
      return 'android' in obj ? obj.android : obj.default;
    }
  };
  module.exports = Platform;
},1076,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var performance = _require(_dependencyMap[0]);

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},26,[27]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = _require(_dependencyMap[0]);

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},27,[28]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},28,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _require(_dependencyMap[0]);

  var warning = emptyFunction;
  module.exports = warning;
},29,[30]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},30,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value = void 0;
    var valueSet = false;

    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }

      return value;
    }

    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable: enumerable,
        writable: writable
      });
    }

    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable: enumerable
    });
  }

  module.exports = defineLazyObjectProperty;
},31,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = _require(_dependencyMap[0]);

  var EventSubscriptionVendor = _require(_dependencyMap[1]);

  function checkNativeEventModule(eventType) {
    if (eventType) {
      if (eventType.lastIndexOf('statusBar', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
      }

      if (eventType.lastIndexOf('keyboard', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
      }

      if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
        throw new Error('`' + eventType + '` event should be registered via the AppState module');
      }
    }
  }

  var RCTDeviceEventEmitter = function (_EventEmitter) {
    babelHelpers.inherits(RCTDeviceEventEmitter, _EventEmitter);

    function RCTDeviceEventEmitter() {
      babelHelpers.classCallCheck(this, RCTDeviceEventEmitter);
      var sharedSubscriber = new EventSubscriptionVendor();

      var _this = babelHelpers.possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

      _this.sharedSubscriber = sharedSubscriber;
      return _this;
    }

    babelHelpers.createClass(RCTDeviceEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (subscription.emitter !== this) {
          subscription.emitter.removeSubscription(subscription);
        } else {
          babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
        }
      }
    }]);
    return RCTDeviceEventEmitter;
  }(EventEmitter);

  module.exports = new RCTDeviceEventEmitter();
},37,[38,41]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EmitterSubscription = _require(_dependencyMap[0]);

  var EventSubscriptionVendor = _require(_dependencyMap[1]);

  var emptyFunction = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var EventEmitter = function () {
    function EventEmitter(subscriber) {
      babelHelpers.classCallCheck(this, EventEmitter);
      this._subscriber = subscriber || new EventSubscriptionVendor();
    }

    babelHelpers.createClass(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        var _this = this;

        return this.addListener(eventType, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this.removeCurrentListener();

          listener.apply(context, args);
        });
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._subscriber.removeAllSubscriptions(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
        this.removeSubscription(this._currentSubscription);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');

        this._subscriber.removeSubscription(subscription);
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
          return subscription.listener;
        }) : [];
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription) {
              this._currentSubscription = subscription;
              subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
            }
          }

          this._currentSubscription = null;
        }
      }
    }, {
      key: "removeListener",
      value: function removeListener(eventType, listener) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener === listener) {
              subscription.remove();
            }
          }
        }
      }
    }]);
    return EventEmitter;
  }();

  module.exports = EventEmitter;
},38,[39,41,30,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = _require(_dependencyMap[0]);

  var EmitterSubscription = function (_EventSubscription) {
    babelHelpers.inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(emitter, subscriber, listener, context) {
      babelHelpers.classCallCheck(this, EmitterSubscription);

      var _this = babelHelpers.possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

      _this.emitter = emitter;
      _this.listener = listener;
      _this.context = context;
      return _this;
    }

    babelHelpers.createClass(EmitterSubscription, [{
      key: "remove",
      value: function remove() {
        this.emitter.removeSubscription(this);
      }
    }]);
    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},39,[40]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      babelHelpers.classCallCheck(this, EventSubscription);
      this.subscriber = subscriber;
    }

    babelHelpers.createClass(EventSubscription, [{
      key: "remove",
      value: function remove() {
        this.subscriber.removeSubscription(this);
      }
    }]);
    return EventSubscription;
  }();

  module.exports = EventSubscription;
},40,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      babelHelpers.classCallCheck(this, EventSubscriptionVendor);
      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    babelHelpers.createClass(EventSubscriptionVendor, [{
      key: "addSubscription",
      value: function addSubscription(eventType, subscription) {
        invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

        if (!this._subscriptionsForType[eventType]) {
          this._subscriptionsForType[eventType] = [];
        }

        var key = this._subscriptionsForType[eventType].length;

        this._subscriptionsForType[eventType].push(subscription);

        subscription.eventType = eventType;
        subscription.key = key;
        return subscription;
      }
    }, {
      key: "removeAllSubscriptions",
      value: function removeAllSubscriptions(eventType) {
        if (eventType === undefined) {
          this._subscriptionsForType = {};
        } else {
          delete this._subscriptionsForType[eventType];
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var eventType = subscription.eventType;
        var key = subscription.key;
        var subscriptionsForType = this._subscriptionsForType[eventType];

        if (subscriptionsForType) {
          delete subscriptionsForType[key];
        }
      }
    }, {
      key: "getSubscriptionsForType",
      value: function getSubscriptionsForType(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }]);
    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},41,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0]);

  var NativeMethodsMixin = _require(_dependencyMap[1]);

  var Platform = _require(_dependencyMap[2]);

  var ProgressBarAndroid = _require(_dependencyMap[3]);

  var PropTypes = _require(_dependencyMap[4]);

  var React = _require(_dependencyMap[5]);

  var StyleSheet = _require(_dependencyMap[6]);

  var View = _require(_dependencyMap[7]);

  var ViewPropTypes = _require(_dependencyMap[8]);

  var createReactClass = _require(_dependencyMap[9]);

  var requireNativeComponent = _require(_dependencyMap[10]);

  var RCTActivityIndicator = void 0;
  var GRAY = '#999999';
  var ActivityIndicator = createReactClass({
    displayName: 'ActivityIndicator',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      animating: PropTypes.bool,
      color: ColorPropType,
      size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'large']), PropTypes.number]),
      hidesWhenStopped: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        animating: true,
        color: undefined,
        hidesWhenStopped: true,
        size: 'small'
      };
    },
    render: function render() {
      var _props = this.props,
          onLayout = _props.onLayout,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ["onLayout", "style"]);
      var sizeStyle = void 0;

      switch (props.size) {
        case 'small':
          sizeStyle = styles.sizeSmall;
          break;

        case 'large':
          sizeStyle = styles.sizeLarge;
          break;

        default:
          sizeStyle = {
            height: props.size,
            width: props.size
          };
          break;
      }

      var nativeProps = babelHelpers.extends({}, props, {
        style: sizeStyle,
        styleAttr: 'Normal',
        indeterminate: true
      });
      return React.createElement(
        View,
        {
          onLayout: onLayout,
          style: [styles.container, style]
        },
        React.createElement(ProgressBarAndroid, nativeProps)
      );
    }
  });
  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });
  module.exports = ActivityIndicator;
},42,[43,45,1076,1078,121,111,112,134,136,158,147]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = _require(_dependencyMap[0]);

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},43,[44]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }

    if (t < 0.5) {
      return q;
    }

    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = NUMBER + '%';

  function call() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var matchers = {
    rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
    rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
    hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
    hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
    hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#([0-9a-fA-F]{6})$/,
    hex8: /^#([0-9a-fA-F]{8})$/
  };

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},44,[]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  var NativeMethodsMixin = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  module.exports = NativeMethodsMixin;
},45,[46]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative = void 0;
  {
    ReactNative = _require(_dependencyMap[0]);
  }
  module.exports = ReactNative;
},46,[47]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  "use strict";

  _require2(_dependencyMap[0]);

  var invariant = _require2(_dependencyMap[1]),
      emptyFunction = _require2(_dependencyMap[2]),
      UIManager = _require2(_dependencyMap[3]),
      RCTEventEmitter = _require2(_dependencyMap[4]),
      TextInputState = _require2(_dependencyMap[5]),
      deepDiffer = _require2(_dependencyMap[6]),
      flattenStyle = _require2(_dependencyMap[7]),
      React = _require2(_dependencyMap[8]),
      emptyObject = _require2(_dependencyMap[9]),
      shallowEqual = _require2(_dependencyMap[10]),
      ExceptionsManager = _require2(_dependencyMap[11]);

  function _invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    this._hasCaughtError = false;
    this._caughtError = null;
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this._caughtError = error, this._hasCaughtError = true;
    }
  }

  var ReactErrorUtils = {
    _caughtError: null,
    _hasCaughtError: false,
    _rethrowError: null,
    _hasRethrowError: false,
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      _invokeGuardedCallback.apply(ReactErrorUtils, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

      if (ReactErrorUtils.hasCaughtError()) {
        var error = ReactErrorUtils.clearCaughtError();
        ReactErrorUtils._hasRethrowError || (ReactErrorUtils._hasRethrowError = true, ReactErrorUtils._rethrowError = error);
      }
    },
    rethrowCaughtError: function rethrowCaughtError() {
      return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
    },
    hasCaughtError: function hasCaughtError() {
      return ReactErrorUtils._hasCaughtError;
    },
    clearCaughtError: function clearCaughtError() {
      if (ReactErrorUtils._hasCaughtError) {
        var error = ReactErrorUtils._caughtError;
        ReactErrorUtils._caughtError = null;
        ReactErrorUtils._hasCaughtError = false;
        return error;
      }

      invariant(false, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
  };

  function _rethrowCaughtError() {
    if (ReactErrorUtils._hasRethrowError) {
      var error = ReactErrorUtils._rethrowError;
      ReactErrorUtils._rethrowError = null;
      ReactErrorUtils._hasRethrowError = false;
      throw error;
    }
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      invariant(-1 < pluginIndex, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName);

      if (!plugins[pluginIndex]) {
        invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName);
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = void 0;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName$jscomp$0);
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          invariant(JSCompiler_inline_result, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
  }

  function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
  }

  function executeDispatch(event, simulated, listener, inst) {
    simulated = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(simulated, listener, void 0, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, false, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, false, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];
          namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = true);
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    invariant(!listener || "function" === typeof listener, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst["return"];
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  var shouldBeReleasedProperties = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),
      EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
    return this;
  }

  babelHelpers.extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      for (Interface = 0; Interface < shouldBeReleasedProperties.length; Interface++) {
        this[shouldBeReleasedProperties[Interface]] = null;
      }
    }
  });
  SyntheticEvent.Interface = EventInterface;

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    babelHelpers.extends(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = babelHelpers.extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    invariant(event instanceof this, "Trying to release an event instance  into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  }),
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    invariant(null != _ref, "Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0,
      previousActiveTouches = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      }
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      }
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      }
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      }
    },
    responderStart: {
      registrationName: "onResponderStart"
    },
    responderMove: {
      registrationName: "onResponderMove"
    },
    responderEnd: {
      registrationName: "onResponderEnd"
    },
    responderRelease: {
      registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
      registrationName: "onResponderGrant"
    },
    responderReject: {
      registrationName: "onResponderReject"
    },
    responderTerminate: {
      registrationName: "onResponderTerminate"
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if (isEndish(topLevelType)) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = void 0, targetInst = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && isEndish(topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes.responderStart : targetInst ? eventTypes.responderMove : depthA ? eventTypes.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && isEndish(topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && void 0 !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      nativeEvent = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
      if (ResponderEventPlugin.GlobalInteractionHandler && nativeEvent !== previousActiveTouches) ResponderEventPlugin.GlobalInteractionHandler.onChange(nativeEvent);
      previousActiveTouches = nativeEvent;
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      },
      injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
        ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
      }
    }
  },
      customBubblingEventTypes = {},
      customDirectEventTypes = {},
      ReactNativeBridgeEventPlugin = {
    eventTypes: {},
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (null == targetInst) return null;
      var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
          directDispatchConfig = customDirectEventTypes[topLevelType];
      invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
      topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
      return topLevelType;
    },
    processEventTypes: function processEventTypes(viewConfig) {
      var bubblingEventTypes = viewConfig.bubblingEventTypes;
      viewConfig = viewConfig.directEventTypes;
      if (null != bubblingEventTypes) for (var _topLevelType in bubblingEventTypes) {
        null == customBubblingEventTypes[_topLevelType] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType]);
      }
      if (null != viewConfig) for (var _topLevelType2 in viewConfig) {
        null == customDirectEventTypes[_topLevelType2] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = viewConfig[_topLevelType2]);
      }
    }
  },
      instanceCache = {},
      instanceProps = {};

  function uncacheFiberNode(tag) {
    delete instanceCache[tag];
    delete instanceProps[tag];
  }

  function getInstanceFromTag(tag) {
    return "number" === typeof tag ? instanceCache[tag] || null : tag;
  }

  var ReactNativeComponentTree = Object.freeze({
    precacheFiberNode: function precacheFiberNode(hostInst, tag) {
      instanceCache[tag] = hostInst;
    },
    uncacheFiberNode: uncacheFiberNode,
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: function getNodeFromInstance(inst) {
      var tag = inst.stateNode._nativeTag;
      void 0 === tag && (tag = inst.stateNode.canonical._nativeTag);
      invariant(tag, "All native instances should have a tag.");
      return tag;
    },
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(stateNode) {
      return instanceProps[stateNode._nativeTag] || null;
    },
    updateFiberProps: function updateFiberProps(tag, props) {
      instanceProps[tag] = props;
    }
  });
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  getFiberCurrentPropsFromNode = ReactNativeComponentTree.getFiberCurrentPropsFromNode;
  getInstanceFromNode = ReactNativeComponentTree.getInstanceFromNode;
  getNodeFromInstance = ReactNativeComponentTree.getNodeFromInstance;
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : UIManager.clearJSResponder();
    }
  });
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
  });
  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (target = getInstanceFromNode(target)) {
      invariant(null, "Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var props = getFiberCurrentPropsFromNode(target.stateNode);
      null.restoreControlledState(target.stateNode, target.type, props);
    }
  }

  function _batchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function _flushInteractiveUpdates() {}

  var isBatching = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isBatching) return fn(bookkeeping);
    isBatching = true;

    try {
      return _batchedUpdates(fn, bookkeeping);
    } finally {
      if (isBatching = false, null !== restoreTarget || null !== restoreQueue) if (_flushInteractiveUpdates(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  var ReactNativeTagHandles = {
    tagsStartAt: 1,
    tagCount: 1,
    allocateTag: function allocateTag() {
      for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
        ReactNativeTagHandles.tagCount++;
      }

      var tag = ReactNativeTagHandles.tagCount;
      ReactNativeTagHandles.tagCount++;
      return tag;
    },
    assertRootTag: function assertRootTag(tag) {
      invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
      return 1 === reactTag % 10;
    }
  },
      EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;
      events && (forEachAccumulated(events, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."), ReactErrorUtils.rethrowCaughtError());
    });
  }

  var ReactNativeEventEmitter = Object.freeze({
    getListener: getListener,
    registrationNames: registrationNameModules,
    _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || void 0 === target || target < ReactNativeTagHandles.tagsStartAt || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    }
  });
  RCTEventEmitter.register(ReactNativeEventEmitter);
  var hasSymbol = "function" === typeof Symbol && Symbol["for"],
      REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 60103,
      REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 60104,
      REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 60105,
      REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]("react.strict_mode") : 60108,
      REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]("react.context") : 60110,
      REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]("react.async_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]("react.forward_ref") : 60112,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "undefined" === typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank,
          total = 0,
          count = 0;
      touchHistory = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
      if (null !== touchHistory) touchHistory.touchActive && touchHistory.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? touchHistory.currentPageX : ofCurrent && !isXAxis ? touchHistory.currentPageY : !ofCurrent && isXAxis ? touchHistory.previousPageX : touchHistory.previousPageY, count = 1);else for (touchHistory = 0; touchHistory < touchBank.length; touchHistory++) {
        var touchTrack = touchBank[touchHistory];
        null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter && (total += ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, count++);
      }
      return 0 < count ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
  },
      objects = {},
      uniqueID = 1,
      emptyObject$2 = {},
      ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
      if (!(this instanceof ReactNativePropRegistry)) throw new TypeError("Cannot call a class as a function");
    }

    ReactNativePropRegistry.register = function (object) {
      var id = ++uniqueID;
      objects[id] = object;
      return id;
    };

    ReactNativePropRegistry.getByID = function (id) {
      if (!id) return emptyObject$2;
      var object = objects[id];
      return object ? object : (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$2);
    };

    return ReactNativePropRegistry;
  }(),
      emptyObject$1 = {},
      removedKeys = null,
      removedKeyCount = 0;

  function resolveObject(idOrObject) {
    return "number" === typeof idOrObject ? ReactNativePropRegistry.getByID(idOrObject) : idOrObject;
  }

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in node = resolveObject(node), removedKeys) {
      if (removedKeys[i]) {
        var _nextProp = node[i];

        if (void 0 !== _nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof _nextProp && (_nextProp = true);
            "undefined" === typeof _nextProp && (_nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = _nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) _nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(_nextProp) : _nextProp, updatePayload[i] = _nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return nextProp = resolveObject(nextProp), diffProperties(updatePayload, emptyObject$1, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return prevProp = resolveObject(prevProp), diffProperties(updatePayload, prevProp, emptyObject$1, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && void 0 !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      void 0 === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && void 0 !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback(context, callback) {
    return function () {
      if (callback) {
        if ("boolean" === typeof context.__isMounted) {
          if (!context.__isMounted) return;
        } else if ("function" === typeof context.isMounted && !context.isMounted()) return;

        return callback.apply(context, arguments);
      }
    };
  }

  var ReactCurrentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;

  function getComponentName(fiber) {
    fiber = fiber.type;
    if ("function" === typeof fiber) return fiber.displayName || fiber.name;
    if ("string" === typeof fiber) return fiber;

    switch (fiber) {
      case REACT_FRAGMENT_TYPE:
        return "ReactFragment";

      case REACT_PORTAL_TYPE:
        return "ReactPortal";

      case REACT_CALL_TYPE:
        return "ReactCall";

      case REACT_RETURN_TYPE:
        return "ReactReturn";
    }

    return null;
  }

  function findHostInstance() {
    return null;
  }

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    var internalInstance = componentOrHandle._reactInternalFiber;
    if (internalInstance) return findHostInstance(internalInstance) || null;
    if (componentOrHandle) return componentOrHandle;
    invariant("object" === typeof componentOrHandle && "_nativeTag" in componentOrHandle || null != componentOrHandle.render && "function" === typeof componentOrHandle.render, "findNodeHandle(...): Argument is not a component (type: %s, keys: %s)", typeof componentOrHandle, Object.keys(componentOrHandle));
    invariant(false, "findNodeHandle(...): Unable to find node handle for unmounted component.");
  }

  function findNumericNodeHandleFiber(componentOrHandle) {
    componentOrHandle = findNodeHandle(componentOrHandle);
    return null == componentOrHandle || "number" === typeof componentOrHandle ? componentOrHandle : componentOrHandle._nativeTag;
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var ReactNativeComponent = function (_React$Component) {
    function ReactNativeComponent() {
      if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

      var call = _React$Component.apply(this, arguments);

      if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
    }

    _inherits(ReactNativeComponent, _React$Component);

    ReactNativeComponent.prototype.blur = function () {
      TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.focus = function () {
      TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.measure = function (callback) {
      UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
      var maybeInstance = void 0;

      try {
        maybeInstance = findNodeHandle(this);
      } catch (error) {}

      if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
        nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
        null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
      }
    };

    return ReactNativeComponent;
  }(React.Component);

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node["return"];) {
      node = node["return"];
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node["return"];) {
        if (node = node["return"], 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function isMounted(component) {
    return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
  }

  function assertIsMounted(fiber) {
    invariant(2 === isFiberMountedImpl(fiber), "Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) return alternate = isFiberMountedImpl(fiber), invariant(3 !== alternate, "Unable to find node on an unmounted component."), 1 === alternate ? null : fiber;

    for (var a = fiber, b = alternate;;) {
      var parentA = a["return"],
          parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) break;

      if (parentA.child === parentB.child) {
        for (var child = parentA.child; child;) {
          if (child === a) return assertIsMounted(parentA), fiber;
          if (child === b) return assertIsMounted(parentA), alternate;
          child = child.sibling;
        }

        invariant(false, "Unable to find node on an unmounted component.");
      }

      if (a["return"] !== b["return"]) a = parentA, b = parentB;else {
        child = false;

        for (var _child = parentA.child; _child;) {
          if (_child === a) {
            child = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            child = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!child) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              child = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              child = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          invariant(child, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      invariant(a.alternate === b, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    invariant(3 === a.tag, "Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  function findCurrentHostFiberWithNoPortals(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child && 4 !== node.tag) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.stateNode = this.type = null;
    this.sibling = this.child = this["return"] = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.expirationTime = 0;
    this.alternate = null;
  }

  function createWorkInProgress(current, pendingProps, expirationTime) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = new FiberNode(current.tag, pendingProps, current.key, current.mode), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.expirationTime = expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromElement(element, mode, expirationTime) {
    var type = element.type,
        key = element.key;
    element = element.props;
    var fiberTag = void 0;
    if ("function" === typeof type) fiberTag = type.prototype && type.prototype.isReactComponent ? 2 : 0;else if ("string" === typeof type) fiberTag = 5;else switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(element.children, mode, expirationTime, key);

      case REACT_ASYNC_MODE_TYPE:
        fiberTag = 11;
        mode |= 3;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 11;
        mode |= 2;
        break;

      case REACT_CALL_TYPE:
        fiberTag = 7;
        break;

      case REACT_RETURN_TYPE:
        fiberTag = 9;
        break;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 13;
            break;

          case REACT_CONTEXT_TYPE:
            fiberTag = 12;
            break;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 14;
            break;

          default:
            if ("number" === typeof type.tag) return mode = type, mode.pendingProps = element, mode.expirationTime = expirationTime, mode;
            throwOnInvalidElementType(type, null);
        } else throwOnInvalidElementType(type, null);
    }
    mode = new FiberNode(fiberTag, element, key, mode);
    mode.type = type;
    mode.expirationTime = expirationTime;
    return mode;
  }

  function throwOnInvalidElementType(type) {
    invariant(false, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, "");
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = new FiberNode(10, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = new FiberNode(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = new FiberNode(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {}
    };
  }

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {}

    return true;
  }

  function onCommitRoot(root) {
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(root);
  }

  function onCommitUnmount(fiber) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(fiber);
  }

  function getStackAddendumByWorkInProgressFiber(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 0:
        case 1:
        case 2:
        case 5:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource;
          var JSCompiler_inline_result = getComponentName(workInProgress);
          var ownerName = null;
          owner && (ownerName = getComponentName(owner));
          owner = source;
          JSCompiler_inline_result = "\n    in " + (JSCompiler_inline_result || "Unknown") + (owner ? " (at " + owner.fileName.replace(/^.*[\\\/]/, "") + ":" + owner.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
          break a;

        default:
          JSCompiler_inline_result = "";
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress["return"];
    } while (workInProgress);

    return info;
  }

  var _require = _require2(_dependencyMap[12]),
      enableGetDerivedStateFromCatch = _require.enableGetDerivedStateFromCatch,
      debugRenderPhaseSideEffects = _require.debugRenderPhaseSideEffects,
      debugRenderPhaseSideEffectsForStrictMode = _require.debugRenderPhaseSideEffectsForStrictMode;

  new Set();

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      expirationTime: 0,
      first: null,
      last: null,
      callbackList: null,
      hasForceUpdate: false,
      isInitialized: false,
      capturedValues: null
    };
  }

  function insertUpdateIntoQueue(queue, update) {
    null === queue.last ? queue.first = queue.last = update : (queue.last.next = update, queue.last = update);
    if (0 === queue.expirationTime || queue.expirationTime > update.expirationTime) queue.expirationTime = update.expirationTime;
  }

  var q1 = void 0,
      q2 = void 0;

  function ensureUpdateQueues(fiber) {
    q1 = q2 = null;
    var alternateFiber = fiber.alternate,
        queue1 = fiber.updateQueue;
    null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(null));
    null !== alternateFiber ? (fiber = alternateFiber.updateQueue, null === fiber && (fiber = alternateFiber.updateQueue = createUpdateQueue(null))) : fiber = null;
    q1 = queue1;
    q2 = fiber !== queue1 ? fiber : null;
  }

  function insertUpdateIntoFiber(fiber, update) {
    ensureUpdateQueues(fiber);
    fiber = q1;
    var queue2 = q2;
    null === queue2 ? insertUpdateIntoQueue(fiber, update) : null === fiber.last || null === queue2.last ? (insertUpdateIntoQueue(fiber, update), insertUpdateIntoQueue(queue2, update)) : (insertUpdateIntoQueue(fiber, update), queue2.last = update);
  }

  function getStateFromUpdate(update, instance, prevState, props) {
    update = update.partialState;
    return "function" === typeof update ? update.call(instance, prevState, props) : update;
  }

  function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
    null !== current && current.updateQueue === queue && (queue = workInProgress.updateQueue = {
      baseState: queue.baseState,
      expirationTime: queue.expirationTime,
      first: queue.first,
      last: queue.last,
      isInitialized: queue.isInitialized,
      capturedValues: queue.capturedValues,
      callbackList: null,
      hasForceUpdate: false
    });
    queue.expirationTime = 0;
    queue.isInitialized ? current = queue.baseState : (current = queue.baseState = workInProgress.memoizedState, queue.isInitialized = true);

    for (var dontMutatePrevState = true, update = queue.first, didSkip = false; null !== update;) {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime > renderExpirationTime) {
        var remainingExpirationTime = queue.expirationTime;
        if (0 === remainingExpirationTime || remainingExpirationTime > updateExpirationTime) queue.expirationTime = updateExpirationTime;
        didSkip || (didSkip = true, queue.baseState = current);
      } else {
        didSkip || (queue.first = update.next, null === queue.first && (queue.last = null));
        (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && getStateFromUpdate(update, instance, current, props);
        if (update.isReplace) current = getStateFromUpdate(update, instance, current, props), dontMutatePrevState = true;else if (updateExpirationTime = getStateFromUpdate(update, instance, current, props)) current = dontMutatePrevState ? babelHelpers.extends({}, current, updateExpirationTime) : babelHelpers.extends(current, updateExpirationTime), dontMutatePrevState = false;
        update.isForced && (queue.hasForceUpdate = true);
        null !== update.callback && (updateExpirationTime = queue.callbackList, null === updateExpirationTime && (updateExpirationTime = queue.callbackList = []), updateExpirationTime.push(update));
        null !== update.capturedValue && (updateExpirationTime = queue.capturedValues, null === updateExpirationTime ? queue.capturedValues = [update.capturedValue] : updateExpirationTime.push(update.capturedValue));
      }

      update = update.next;
    }

    null !== queue.callbackList ? workInProgress.effectTag |= 32 : null !== queue.first || queue.hasForceUpdate || null !== queue.capturedValues || (workInProgress.updateQueue = null);
    didSkip || (queue.baseState = current);
    return current;
  }

  function commitCallbacks(queue, context) {
    var callbackList = queue.callbackList;
    if (null !== callbackList) for (queue.callbackList = null, queue = 0; queue < callbackList.length; queue++) {
      var update = callbackList[queue],
          _callback = update.callback;
      update.callback = null;
      invariant("function" === typeof _callback, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback);

      _callback.call(context);
    }
  }

  function callGetDerivedStateFromCatch(ctor, capturedValues) {
    for (var resultState = {}, i = 0; i < capturedValues.length; i++) {
      var partialState = ctor.getDerivedStateFromCatch.call(null, capturedValues[i].value);
      null !== partialState && void 0 !== partialState && babelHelpers.extends(resultState, partialState);
    }

    return resultState;
  }

  function ReactFiberClassComponent(legacyContext, scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
    function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
      if (null === oldProps || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate) return true;
      var instance = workInProgress.stateNode;
      workInProgress = workInProgress.type;
      return "function" === typeof instance.shouldComponentUpdate ? instance.shouldComponentUpdate(newProps, newState, newContext) : workInProgress.prototype && workInProgress.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
    }

    function adoptClassInstance(workInProgress, instance) {
      instance.updater = updater;
      workInProgress.stateNode = instance;
      instance._reactInternalFiber = workInProgress;
    }

    function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
      workInProgress = instance.state;
      "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, newContext);
      "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, newContext);
      instance.state !== workInProgress && updater.enqueueReplaceState(instance, instance.state, null);
    }

    function callGetDerivedStateFromProps(workInProgress, instance, nextProps, prevState) {
      instance = workInProgress.type;
      if ("function" === typeof instance.getDerivedStateFromProps) return (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && instance.getDerivedStateFromProps.call(null, nextProps, prevState), instance.getDerivedStateFromProps.call(null, nextProps, prevState);
    }

    var cacheContext = legacyContext.cacheContext,
        getMaskedContext = legacyContext.getMaskedContext,
        getUnmaskedContext = legacyContext.getUnmaskedContext,
        isContextConsumer = legacyContext.isContextConsumer,
        hasContextChanged = legacyContext.hasContextChanged,
        updater = {
      isMounted: isMounted,
      enqueueSetState: function enqueueSetState(instance, partialState, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: partialState,
          callback: callback,
          isReplace: false,
          isForced: false,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: state,
          callback: callback,
          isReplace: true,
          isForced: false,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: null,
          callback: callback,
          isReplace: false,
          isForced: true,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      }
    };
    return {
      adoptClassInstance: adoptClassInstance,
      callGetDerivedStateFromProps: callGetDerivedStateFromProps,
      constructClassInstance: function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type,
            unmaskedContext = getUnmaskedContext(workInProgress),
            needsContext = isContextConsumer(workInProgress),
            context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
        (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && new ctor(props, context);
        ctor = new ctor(props, context);
        var state = null !== ctor.state && void 0 !== ctor.state ? ctor.state : null;
        adoptClassInstance(workInProgress, ctor);
        workInProgress.memoizedState = state;
        props = callGetDerivedStateFromProps(workInProgress, ctor, props, state);
        null !== props && void 0 !== props && (workInProgress.memoizedState = babelHelpers.extends({}, workInProgress.memoizedState, props));
        needsContext && cacheContext(workInProgress, unmaskedContext, context);
        return ctor;
      },
      mountClassInstance: function mountClassInstance(workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            current = workInProgress.alternate,
            instance = workInProgress.stateNode,
            props = workInProgress.pendingProps,
            unmaskedContext = getUnmaskedContext(workInProgress);
        instance.props = props;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyObject;
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
        "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && updater.enqueueReplaceState(instance, instance.state, null), ctor = workInProgress.updateQueue, null !== ctor && (instance.state = processUpdateQueue(current, workInProgress, ctor, instance, props, renderExpirationTime)));
        "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
      },
      resumeMountClassInstance: function resumeMountClassInstance(workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            instance = workInProgress.stateNode;
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps,
            oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext(workInProgress);
        newUnmaskedContext = getMaskedContext(workInProgress, newUnmaskedContext);
        var hasNewLifecycles = "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
        hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== newProps || oldContext !== newUnmaskedContext) && callComponentWillReceiveProps(workInProgress, instance, newProps, newUnmaskedContext);
        oldContext = workInProgress.memoizedState;
        var derivedStateFromCatch = void 0;

        if (null !== workInProgress.updateQueue) {
          renderExpirationTime = processUpdateQueue(null, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
          var updateQueue = workInProgress.updateQueue;
          null !== updateQueue && null !== updateQueue.capturedValues && enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch && (derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, updateQueue.capturedValues));
        } else renderExpirationTime = oldContext;

        ctor = void 0;
        oldProps !== newProps && (ctor = callGetDerivedStateFromProps(workInProgress, instance, newProps, renderExpirationTime));
        null !== ctor && void 0 !== ctor && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? ctor : babelHelpers.extends({}, renderExpirationTime, ctor), updateQueue = workInProgress.updateQueue, null !== updateQueue && (updateQueue.baseState = babelHelpers.extends({}, updateQueue.baseState, ctor)));
        null !== derivedStateFromCatch && void 0 !== derivedStateFromCatch && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? derivedStateFromCatch : babelHelpers.extends({}, renderExpirationTime, derivedStateFromCatch), ctor = workInProgress.updateQueue, null !== ctor && (ctor.baseState = babelHelpers.extends({}, ctor.baseState, derivedStateFromCatch)));
        if (!(oldProps !== newProps || oldContext !== renderExpirationTime || hasContextChanged() || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), false;
        (oldProps = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldContext, renderExpirationTime, newUnmaskedContext)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, renderExpirationTime));
        instance.props = newProps;
        instance.state = renderExpirationTime;
        instance.context = newUnmaskedContext;
        return oldProps;
      },
      updateClassInstance: function updateClassInstance(current, workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            instance = workInProgress.stateNode;
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps,
            oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext(workInProgress);
        newUnmaskedContext = getMaskedContext(workInProgress, newUnmaskedContext);
        var hasNewLifecycles = "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
        hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== newProps || oldContext !== newUnmaskedContext) && callComponentWillReceiveProps(workInProgress, instance, newProps, newUnmaskedContext);
        oldContext = workInProgress.memoizedState;
        var derivedStateFromCatch = void 0;

        if (null !== workInProgress.updateQueue) {
          renderExpirationTime = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
          var updateQueue = workInProgress.updateQueue;
          null !== updateQueue && null !== updateQueue.capturedValues && enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch && (derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, updateQueue.capturedValues));
        } else renderExpirationTime = oldContext;

        ctor = void 0;
        oldProps !== newProps && (ctor = callGetDerivedStateFromProps(workInProgress, instance, newProps, renderExpirationTime));
        null !== ctor && void 0 !== ctor && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? ctor : babelHelpers.extends({}, renderExpirationTime, ctor), updateQueue = workInProgress.updateQueue, null !== updateQueue && (updateQueue.baseState = babelHelpers.extends({}, updateQueue.baseState, ctor)));
        null !== derivedStateFromCatch && void 0 !== derivedStateFromCatch && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? derivedStateFromCatch : babelHelpers.extends({}, renderExpirationTime, derivedStateFromCatch), ctor = workInProgress.updateQueue, null !== ctor && (ctor.baseState = babelHelpers.extends({}, ctor.baseState, derivedStateFromCatch)));
        if (!(oldProps !== newProps || oldContext !== renderExpirationTime || hasContextChanged() || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 2048), false;
        (derivedStateFromCatch = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldContext, renderExpirationTime, newUnmaskedContext)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 2048)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 2048), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, renderExpirationTime));
        instance.props = newProps;
        instance.state = renderExpirationTime;
        instance.context = newUnmaskedContext;
        return derivedStateFromCatch;
      }
    };
  }

  var isArray$1 = Array.isArray;

  function coerceRef(returnFiber, current, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = void 0;
        element && (invariant(2 === element.tag, "Stateless function components cannot have refs."), inst = element.stateNode);
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", returnFiber);
        var stringRef = "" + returnFiber;
        if (null !== current && null !== current.ref && current.ref._stringRef === stringRef) return current.ref;

        current = function current(value) {
          var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current._stringRef = stringRef;
        return current;
      }

      invariant("string" === typeof returnFiber, "Expected ref to be a function or a string.");
      invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.", returnFiber);
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    "textarea" !== returnFiber.type && invariant(false, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current, textContent, expirationTime) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, textContent, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateElement(returnFiber, current, element, expirationTime) {
      if (null !== current && current.type === element.type) return expirationTime = useFiber(current, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current, element), expirationTime["return"] = returnFiber, expirationTime;
      expirationTime = createFiberFromElement(element, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current, element);
      expirationTime["return"] = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current, portal, expirationTime) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, portal.children || [], expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
      if (null === current || 10 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current["return"] = returnFiber, current;
      current = useFiber(current, fragment, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild["return"] = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime["return"] = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild["return"] = returnFiber, newChild;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild["return"] = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          if (oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)) currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber;
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        if (nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime)) {
          if (shouldTrackSideEffects && null !== nextOldFiber.alternate) oldFiber["delete"](null === nextOldFiber.key ? newIdx : nextOldFiber.key);
          currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx);
          null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber;
          previousNewFiber = nextOldFiber;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      invariant("function" === typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      invariant(null != newChildrenIterable, "An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          oldFiber || (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        if (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step) {
          if (shouldTrackSideEffects && null !== step.alternate) oldFiber["delete"](null === step.key ? newIdx : step.key);
          currentFirstChild = placeChild(step, currentFirstChild, newIdx);
          null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step;
          previousNewFiber = step;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            var key = newChild.key;

            for (isObject = currentFirstChild; null !== isObject;) {
              if (isObject.key === key) {
                if (10 === isObject.tag ? newChild.type === REACT_FRAGMENT_TYPE : isObject.type === newChild.type) {
                  deleteRemainingChildren(returnFiber, isObject.sibling);
                  currentFirstChild = useFiber(isObject, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isObject, newChild);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, isObject);
                  break;
                }
              } else deleteChild(returnFiber, isObject);
              isObject = isObject.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime["return"] = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isObject = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isObject) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild["return"] = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime)) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime)), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild, placeSingleChild(returnFiber);
      if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild) switch (returnFiber.tag) {
        case 2:
        case 1:
          expirationTime = returnFiber.type, invariant(false, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", expirationTime.displayName || expirationTime.name || "Component");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false);

  function ReactFiberBeginWork(config, hostContext, legacyContext, newContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
    function reconcileChildren(current, workInProgress, nextChildren) {
      reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
    }

    function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
      workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
    }

    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      if (null === current && null !== ref || null !== current && current.ref !== ref) workInProgress.effectTag |= 128;
    }

    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime) {
      markRef(current, workInProgress);
      if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, false), bailoutOnAlreadyFinishedWork(current, workInProgress);
      var ctor = workInProgress.type;
      shouldUpdate = workInProgress.stateNode;
      ReactCurrentOwner.current = workInProgress;
      !didCaptureError || enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch ? ((debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && shouldUpdate.render(), ctor = shouldUpdate.render()) : ctor = null;
      workInProgress.effectTag |= 1;
      didCaptureError && (reconcileChildrenAtExpirationTime(current, workInProgress, null, renderExpirationTime), workInProgress.child = null);
      reconcileChildrenAtExpirationTime(current, workInProgress, ctor, renderExpirationTime);
      workInProgress.memoizedState = shouldUpdate.state;
      workInProgress.memoizedProps = shouldUpdate.props;
      hasContext && invalidateContextProvider(workInProgress, true);
      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
      pushHostContainer(workInProgress, root.containerInfo);
    }

    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
      var fiber = workInProgress.child;

      for (null !== fiber && (fiber["return"] = workInProgress); null !== fiber;) {
        switch (fiber.tag) {
          case 12:
            var nextFiber = fiber.stateNode | 0;

            if (fiber.type === context && 0 !== (nextFiber & changedBits)) {
              for (nextFiber = fiber; null !== nextFiber;) {
                var alternate = nextFiber.alternate;
                if (0 === nextFiber.expirationTime || nextFiber.expirationTime > renderExpirationTime) nextFiber.expirationTime = renderExpirationTime, null !== alternate && (0 === alternate.expirationTime || alternate.expirationTime > renderExpirationTime) && (alternate.expirationTime = renderExpirationTime);else if (null !== alternate && (0 === alternate.expirationTime || alternate.expirationTime > renderExpirationTime)) alternate.expirationTime = renderExpirationTime;else break;
                nextFiber = nextFiber["return"];
              }

              nextFiber = null;
            } else nextFiber = fiber.child;

            break;

          case 13:
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            break;

          default:
            nextFiber = fiber.child;
        }

        if (null !== nextFiber) nextFiber["return"] = fiber;else for (nextFiber = fiber; null !== nextFiber;) {
          if (nextFiber === workInProgress) {
            nextFiber = null;
            break;
          }

          fiber = nextFiber.sibling;

          if (null !== fiber) {
            nextFiber = fiber;
            break;
          }

          nextFiber = nextFiber["return"];
        }
        fiber = nextFiber;
      }
    }

    function updateContextProvider(current, workInProgress, renderExpirationTime) {
      var context = workInProgress.type._context,
          newProps = workInProgress.pendingProps,
          oldProps = workInProgress.memoizedProps;
      if (!hasLegacyContextChanged() && oldProps === newProps) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
      var newValue = newProps.value;
      workInProgress.memoizedProps = newProps;
      if (null === oldProps) newValue = 1073741823;else if (oldProps.value === newProps.value) {
        if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
        newValue = 0;
      } else {
        var oldValue = oldProps.value;

        if (oldValue === newValue && (0 !== oldValue || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue) {
          if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
          newValue = 0;
        } else if (newValue = "function" === typeof context._calculateChangedBits ? context._calculateChangedBits(oldValue, newValue) : 1073741823, newValue |= 0, 0 === newValue) {
          if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
        } else propagateContextChange(workInProgress, context, newValue, renderExpirationTime);
      }
      workInProgress.stateNode = newValue;
      pushProvider(workInProgress);
      reconcileChildren(current, workInProgress, newProps.children);
      return workInProgress.child;
    }

    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
      invariant(null === current || workInProgress.child === current.child, "Resuming work not yet implemented.");

      if (null !== workInProgress.child) {
        current = workInProgress.child;
        var newChild = createWorkInProgress(current, current.pendingProps, current.expirationTime);
        workInProgress.child = newChild;

        for (newChild["return"] = workInProgress; null !== current.sibling;) {
          current = current.sibling, newChild = newChild.sibling = createWorkInProgress(current, current.pendingProps, current.expirationTime), newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      return workInProgress.child;
    }

    var shouldSetTextContent = config.shouldSetTextContent,
        shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree,
        pushHostContext = hostContext.pushHostContext,
        pushHostContainer = hostContext.pushHostContainer,
        pushProvider = newContext.pushProvider,
        getMaskedContext = legacyContext.getMaskedContext,
        getUnmaskedContext = legacyContext.getUnmaskedContext,
        hasLegacyContextChanged = legacyContext.hasContextChanged,
        pushLegacyContextProvider = legacyContext.pushContextProvider,
        pushTopLevelContextObject = legacyContext.pushTopLevelContextObject,
        invalidateContextProvider = legacyContext.invalidateContextProvider,
        enterHydrationState = hydrationContext.enterHydrationState,
        resetHydrationState = hydrationContext.resetHydrationState,
        tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;
    config = ReactFiberClassComponent(legacyContext, scheduleWork, computeExpirationForFiber, function (workInProgress, nextProps) {
      workInProgress.memoizedProps = nextProps;
    }, function (workInProgress, nextState) {
      workInProgress.memoizedState = nextState;
    });
    var adoptClassInstance = config.adoptClassInstance,
        callGetDerivedStateFromProps = config.callGetDerivedStateFromProps,
        constructClassInstance = config.constructClassInstance,
        mountClassInstance = config.mountClassInstance,
        resumeMountClassInstance = config.resumeMountClassInstance,
        updateClassInstance = config.updateClassInstance;
    return {
      beginWork: function beginWork(current, workInProgress, renderExpirationTime) {
        if (0 === workInProgress.expirationTime || workInProgress.expirationTime > renderExpirationTime) {
          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 2:
              pushLegacyContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 13:
              pushProvider(workInProgress);
          }

          return null;
        }

        switch (workInProgress.tag) {
          case 0:
            invariant(null === current, "An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.");
            var fn = workInProgress.type,
                props = workInProgress.pendingProps,
                unmaskedContext = getUnmaskedContext(workInProgress);
            unmaskedContext = getMaskedContext(workInProgress, unmaskedContext);
            fn = fn(props, unmaskedContext);
            workInProgress.effectTag |= 1;
            "object" === typeof fn && null !== fn && "function" === typeof fn.render && void 0 === fn.$$typeof ? (unmaskedContext = workInProgress.type, workInProgress.tag = 2, workInProgress.memoizedState = null !== fn.state && void 0 !== fn.state ? fn.state : null, "function" === typeof unmaskedContext.getDerivedStateFromProps && (props = callGetDerivedStateFromProps(workInProgress, fn, props, workInProgress.memoizedState), null !== props && void 0 !== props && (workInProgress.memoizedState = babelHelpers.extends({}, workInProgress.memoizedState, props))), props = pushLegacyContextProvider(workInProgress), adoptClassInstance(workInProgress, fn), mountClassInstance(workInProgress, renderExpirationTime), current = finishClassComponent(current, workInProgress, true, props, false, renderExpirationTime)) : (workInProgress.tag = 1, reconcileChildren(current, workInProgress, fn), workInProgress.memoizedProps = props, current = workInProgress.child);
            return current;

          case 1:
            return props = workInProgress.type, renderExpirationTime = workInProgress.pendingProps, hasLegacyContextChanged() || workInProgress.memoizedProps !== renderExpirationTime ? (fn = getUnmaskedContext(workInProgress), fn = getMaskedContext(workInProgress, fn), props = props(renderExpirationTime, fn), workInProgress.effectTag |= 1, reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 2:
            props = pushLegacyContextProvider(workInProgress);
            null === current ? null === workInProgress.stateNode ? (constructClassInstance(workInProgress, workInProgress.pendingProps), mountClassInstance(workInProgress, renderExpirationTime), fn = true) : fn = resumeMountClassInstance(workInProgress, renderExpirationTime) : fn = updateClassInstance(current, workInProgress, renderExpirationTime);
            unmaskedContext = false;
            var updateQueue = workInProgress.updateQueue;
            null !== updateQueue && null !== updateQueue.capturedValues && (unmaskedContext = fn = true);
            return finishClassComponent(current, workInProgress, fn, props, unmaskedContext, renderExpirationTime);

          case 3:
            a: if (pushHostRootContext(workInProgress), fn = workInProgress.updateQueue, null !== fn) {
              unmaskedContext = workInProgress.memoizedState;
              props = processUpdateQueue(current, workInProgress, fn, null, null, renderExpirationTime);
              workInProgress.memoizedState = props;
              fn = workInProgress.updateQueue;
              if (null !== fn && null !== fn.capturedValues) fn = null;else if (unmaskedContext === props) {
                resetHydrationState();
                current = bailoutOnAlreadyFinishedWork(current, workInProgress);
                break a;
              } else fn = props.element;
              unmaskedContext = workInProgress.stateNode;
              (null === current || null === current.child) && unmaskedContext.hydrate && enterHydrationState(workInProgress) ? (workInProgress.effectTag |= 2, workInProgress.child = mountChildFibers(workInProgress, null, fn, renderExpirationTime)) : (resetHydrationState(), reconcileChildren(current, workInProgress, fn));
              workInProgress.memoizedState = props;
              current = workInProgress.child;
            } else resetHydrationState(), current = bailoutOnAlreadyFinishedWork(current, workInProgress);

            return current;

          case 5:
            a: {
              pushHostContext(workInProgress);
              null === current && tryToClaimNextHydratableInstance(workInProgress);
              props = workInProgress.type;
              updateQueue = workInProgress.memoizedProps;
              fn = workInProgress.pendingProps;
              unmaskedContext = null !== current ? current.memoizedProps : null;

              if (!hasLegacyContextChanged() && updateQueue === fn) {
                if (updateQueue = workInProgress.mode & 1 && shouldDeprioritizeSubtree(props, fn)) workInProgress.expirationTime = 1073741823;

                if (!updateQueue || 1073741823 !== renderExpirationTime) {
                  current = bailoutOnAlreadyFinishedWork(current, workInProgress);
                  break a;
                }
              }

              updateQueue = fn.children;
              shouldSetTextContent(props, fn) ? updateQueue = null : unmaskedContext && shouldSetTextContent(props, unmaskedContext) && (workInProgress.effectTag |= 16);
              markRef(current, workInProgress);
              1073741823 !== renderExpirationTime && workInProgress.mode & 1 && shouldDeprioritizeSubtree(props, fn) ? (workInProgress.expirationTime = 1073741823, workInProgress.memoizedProps = fn, current = null) : (reconcileChildren(current, workInProgress, updateQueue), workInProgress.memoizedProps = fn, current = workInProgress.child);
            }

            return current;

          case 6:
            return null === current && tryToClaimNextHydratableInstance(workInProgress), workInProgress.memoizedProps = workInProgress.pendingProps, null;

          case 8:
            workInProgress.tag = 7;

          case 7:
            return props = workInProgress.pendingProps, hasLegacyContextChanged() || workInProgress.memoizedProps !== props || (props = workInProgress.memoizedProps), fn = props.children, workInProgress.stateNode = null === current ? mountChildFibers(workInProgress, workInProgress.stateNode, fn, renderExpirationTime) : reconcileChildFibers(workInProgress, current.stateNode, fn, renderExpirationTime), workInProgress.memoizedProps = props, workInProgress.stateNode;

          case 9:
            return null;

          case 4:
            return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), props = workInProgress.pendingProps, hasLegacyContextChanged() || workInProgress.memoizedProps !== props ? (null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, props, renderExpirationTime) : reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = props, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 14:
            return renderExpirationTime = workInProgress.type.render, renderExpirationTime = renderExpirationTime(workInProgress.pendingProps, workInProgress.ref), reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, workInProgress.child;

          case 10:
            return renderExpirationTime = workInProgress.pendingProps, hasLegacyContextChanged() || workInProgress.memoizedProps !== renderExpirationTime ? (reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 11:
            return renderExpirationTime = workInProgress.pendingProps.children, hasLegacyContextChanged() || null !== renderExpirationTime && workInProgress.memoizedProps !== renderExpirationTime ? (reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 13:
            return updateContextProvider(current, workInProgress, renderExpirationTime);

          case 12:
            fn = workInProgress.type;
            unmaskedContext = workInProgress.pendingProps;
            var oldProps = workInProgress.memoizedProps;
            props = fn._currentValue;
            updateQueue = fn._changedBits;

            if (hasLegacyContextChanged() || 0 !== updateQueue || oldProps !== unmaskedContext) {
              workInProgress.memoizedProps = unmaskedContext;
              oldProps = unmaskedContext.unstable_observedBits;
              if (void 0 === oldProps || null === oldProps) oldProps = 1073741823;
              workInProgress.stateNode = oldProps;
              0 !== (updateQueue & oldProps) && propagateContextChange(workInProgress, fn, updateQueue, renderExpirationTime);
              renderExpirationTime = unmaskedContext.children;
              renderExpirationTime = renderExpirationTime(props);
              reconcileChildren(current, workInProgress, renderExpirationTime);
              current = workInProgress.child;
            } else current = bailoutOnAlreadyFinishedWork(current, workInProgress);

            return current;

          default:
            invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    };
  }

  function ReactFiberCompleteWork(config, hostContext, legacyContext, newContext, hydrationContext) {
    function markUpdate(workInProgress) {
      workInProgress.effectTag |= 4;
    }

    var createInstance = config.createInstance,
        createTextInstance = config.createTextInstance,
        appendInitialChild = config.appendInitialChild,
        finalizeInitialChildren = config.finalizeInitialChildren,
        prepareUpdate = config.prepareUpdate,
        persistence = config.persistence,
        getRootHostContainer = hostContext.getRootHostContainer,
        popHostContext = hostContext.popHostContext,
        getHostContext = hostContext.getHostContext,
        popHostContainer = hostContext.popHostContainer,
        popLegacyContextProvider = legacyContext.popContextProvider,
        popTopLevelLegacyContextObject = legacyContext.popTopLevelContextObject,
        popProvider = newContext.popProvider,
        prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
        popHydrationState = hydrationContext.popHydrationState,
        updateHostContainer = void 0,
        updateHostComponent = void 0,
        updateHostText = void 0;
    config.mutation ? (updateHostContainer = function updateHostContainer() {}, updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload) {
      (workInProgress.updateQueue = updatePayload) && markUpdate(workInProgress);
    }, updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
      oldText !== newText && markUpdate(workInProgress);
    }) : persistence ? invariant(false, "Persistent reconciler is disabled.") : invariant(false, "Noop reconciler is disabled.");
    return {
      completeWork: function completeWork(current, workInProgress, renderExpirationTime) {
        var newProps = workInProgress.pendingProps;

        switch (workInProgress.tag) {
          case 1:
            return null;

          case 2:
            return popLegacyContextProvider(workInProgress), current = workInProgress.stateNode, newProps = workInProgress.updateQueue, null !== newProps && null !== newProps.capturedValues && (workInProgress.effectTag &= -65, "function" === typeof current.componentDidCatch ? workInProgress.effectTag |= 256 : newProps.capturedValues = null), null;

          case 3:
            popHostContainer(workInProgress);
            popTopLevelLegacyContextObject(workInProgress);
            newProps = workInProgress.stateNode;
            newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
            if (null === current || null === current.child) popHydrationState(workInProgress), workInProgress.effectTag &= -3;
            updateHostContainer(workInProgress);
            current = workInProgress.updateQueue;
            null !== current && null !== current.capturedValues && (workInProgress.effectTag |= 256);
            return null;

          case 5:
            popHostContext(workInProgress);
            renderExpirationTime = getRootHostContainer();
            var type = workInProgress.type;

            if (null !== current && null != workInProgress.stateNode) {
              var oldProps = current.memoizedProps,
                  _instance = workInProgress.stateNode,
                  currentHostContext = getHostContext();
              _instance = prepareUpdate(_instance, type, oldProps, newProps, renderExpirationTime, currentHostContext);
              updateHostComponent(current, workInProgress, _instance, type, oldProps, newProps, renderExpirationTime, currentHostContext);
              current.ref !== workInProgress.ref && (workInProgress.effectTag |= 128);
            } else {
              if (!newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getHostContext();
              if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, renderExpirationTime, current) && markUpdate(workInProgress);else {
                oldProps = createInstance(type, newProps, renderExpirationTime, current, workInProgress);

                a: for (currentHostContext = workInProgress.child; null !== currentHostContext;) {
                  if (5 === currentHostContext.tag || 6 === currentHostContext.tag) appendInitialChild(oldProps, currentHostContext.stateNode);else if (4 !== currentHostContext.tag && null !== currentHostContext.child) {
                    currentHostContext.child["return"] = currentHostContext;
                    currentHostContext = currentHostContext.child;
                    continue;
                  }
                  if (currentHostContext === workInProgress) break;

                  for (; null === currentHostContext.sibling;) {
                    if (null === currentHostContext["return"] || currentHostContext["return"] === workInProgress) break a;
                    currentHostContext = currentHostContext["return"];
                  }

                  currentHostContext.sibling["return"] = currentHostContext["return"];
                  currentHostContext = currentHostContext.sibling;
                }

                finalizeInitialChildren(oldProps, type, newProps, renderExpirationTime, current) && markUpdate(workInProgress);
                workInProgress.stateNode = oldProps;
              }
              null !== workInProgress.ref && (workInProgress.effectTag |= 128);
            }

            return null;

          case 6:
            if (current && null != workInProgress.stateNode) updateHostText(current, workInProgress, current.memoizedProps, newProps);else {
              if ("string" !== typeof newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getRootHostContainer();
              renderExpirationTime = getHostContext();
              popHydrationState(workInProgress) ? prepareToHydrateHostTextInstance(workInProgress) && markUpdate(workInProgress) : workInProgress.stateNode = createTextInstance(newProps, current, renderExpirationTime, workInProgress);
            }
            return null;

          case 7:
            newProps = workInProgress.memoizedProps;
            invariant(newProps, "Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.");
            workInProgress.tag = 8;
            type = [];

            a: for ((oldProps = workInProgress.stateNode) && (oldProps["return"] = workInProgress); null !== oldProps;) {
              if (5 === oldProps.tag || 6 === oldProps.tag || 4 === oldProps.tag) invariant(false, "A call cannot have host component children.");else if (9 === oldProps.tag) type.push(oldProps.pendingProps.value);else if (null !== oldProps.child) {
                oldProps.child["return"] = oldProps;
                oldProps = oldProps.child;
                continue;
              }

              for (; null === oldProps.sibling;) {
                if (null === oldProps["return"] || oldProps["return"] === workInProgress) break a;
                oldProps = oldProps["return"];
              }

              oldProps.sibling["return"] = oldProps["return"];
              oldProps = oldProps.sibling;
            }

            oldProps = newProps.handler;
            newProps = oldProps(newProps.props, type);
            workInProgress.child = reconcileChildFibers(workInProgress, null !== current ? current.child : null, newProps, renderExpirationTime);
            return workInProgress.child;

          case 8:
            return workInProgress.tag = 7, null;

          case 9:
            return null;

          case 14:
            return null;

          case 10:
            return null;

          case 11:
            return null;

          case 4:
            return popHostContainer(workInProgress), updateHostContainer(workInProgress), null;

          case 13:
            return popProvider(workInProgress), null;

          case 12:
            return null;

          case 0:
            invariant(false, "An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");

          default:
            invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    };
  }

  function ReactFiberUnwindWork(hostContext, legacyContext, newContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary) {
    var popHostContainer = hostContext.popHostContainer,
        popHostContext = hostContext.popHostContext,
        popLegacyContextProvider = legacyContext.popContextProvider,
        popTopLevelLegacyContextObject = legacyContext.popTopLevelContextObject,
        popProvider = newContext.popProvider;
    return {
      throwException: function throwException(returnFiber, sourceFiber, rawValue) {
        sourceFiber.effectTag |= 512;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        sourceFiber = {
          value: rawValue,
          source: sourceFiber,
          stack: getStackAddendumByWorkInProgressFiber(sourceFiber)
        };

        do {
          switch (returnFiber.tag) {
            case 3:
              ensureUpdateQueues(returnFiber);
              returnFiber.updateQueue.capturedValues = [sourceFiber];
              returnFiber.effectTag |= 1024;
              return;

            case 2:
              rawValue = returnFiber.type;
              var _instance = returnFiber.stateNode;

              if (0 === (returnFiber.effectTag & 64) && ("function" === typeof rawValue.getDerivedStateFromCatch && enableGetDerivedStateFromCatch || null !== _instance && "function" === typeof _instance.componentDidCatch && !isAlreadyFailedLegacyErrorBoundary(_instance))) {
                ensureUpdateQueues(returnFiber);
                rawValue = returnFiber.updateQueue;
                _instance = rawValue.capturedValues;
                null === _instance ? rawValue.capturedValues = [sourceFiber] : _instance.push(sourceFiber);
                returnFiber.effectTag |= 1024;
                return;
              }

          }

          returnFiber = returnFiber["return"];
        } while (null !== returnFiber);
      },
      unwindWork: function unwindWork(workInProgress) {
        switch (workInProgress.tag) {
          case 2:
            popLegacyContextProvider(workInProgress);
            var effectTag = workInProgress.effectTag;
            return effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

          case 3:
            return popHostContainer(workInProgress), popTopLevelLegacyContextObject(workInProgress), effectTag = workInProgress.effectTag, effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

          case 5:
            return popHostContext(workInProgress), null;

          case 4:
            return popHostContainer(workInProgress), null;

          case 13:
            return popProvider(workInProgress), null;

          default:
            return null;
        }
      },
      unwindInterruptedWork: function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case 2:
            popLegacyContextProvider(interruptedWork);
            break;

          case 3:
            popHostContainer(interruptedWork);
            popTopLevelLegacyContextObject(interruptedWork);
            break;

          case 5:
            popHostContext(interruptedWork);
            break;

          case 4:
            popHostContainer(interruptedWork);
            break;

          case 13:
            popProvider(interruptedWork);
        }
      }
    };
  }

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && (stack = getStackAddendumByWorkInProgressFiber(source));
    null !== source && getComponentName(source);
    source = null !== stack ? stack : "";
    errorInfo = errorInfo.value;
    null !== boundary && 2 === boundary.tag && getComponentName(boundary);

    try {
      if (errorInfo instanceof Error) {
        var message = errorInfo.message,
            name = errorInfo.name;
        var errorToHandle = errorInfo;

        try {
          errorToHandle.message = (message ? name + ": " + message : name) + "\n\nThis error is located at:" + source;
        } catch (e) {}
      } else errorToHandle = "string" === typeof errorInfo ? Error(errorInfo + "\n\nThis error is located at:" + source) : Error("Unspecified error at:" + source);

      ExceptionsManager.handleException(errorToHandle, false);
    } catch (e) {
      e && e.suppressReactErrorLogging || console.error(e);
    }
  }

  function ReactFiberCommitWork(config, captureError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed) {
    function safelyDetachRef(current) {
      var ref = current.ref;
      if (null !== ref) if ("function" === typeof ref) try {
        ref(null);
      } catch (refError) {
        captureError(current, refError);
      } else ref.current = null;
    }

    function commitUnmount(current) {
      "function" === typeof onCommitUnmount && onCommitUnmount(current);

      switch (current.tag) {
        case 2:
          safelyDetachRef(current);
          var _instance7 = current.stateNode;
          if ("function" === typeof _instance7.componentWillUnmount) try {
            _instance7.props = current.memoizedProps, _instance7.state = current.memoizedState, _instance7.componentWillUnmount();
          } catch (unmountError) {
            captureError(current, unmountError);
          }
          break;

        case 5:
          safelyDetachRef(current);
          break;

        case 7:
          commitNestedUnmounts(current.stateNode);
          break;

        case 4:
          mutation && unmountHostComponents(current);
      }
    }

    function commitNestedUnmounts(root) {
      for (var node = root;;) {
        if (commitUnmount(node), null === node.child || mutation && 4 === node.tag) {
          if (node === root) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === root) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        } else node.child["return"] = node, node = node.child;
      }
    }

    function isHostParent(fiber) {
      return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
    }

    function unmountHostComponents(current) {
      for (var node = current, currentParentIsValid = false, currentParent = void 0, currentParentIsContainer = void 0;;) {
        if (!currentParentIsValid) {
          currentParentIsValid = node["return"];

          a: for (;;) {
            invariant(null !== currentParentIsValid, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");

            switch (currentParentIsValid.tag) {
              case 5:
                currentParent = currentParentIsValid.stateNode;
                currentParentIsContainer = false;
                break a;

              case 3:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = true;
                break a;

              case 4:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = true;
                break a;
            }

            currentParentIsValid = currentParentIsValid["return"];
          }

          currentParentIsValid = true;
        }

        if (5 === node.tag || 6 === node.tag) commitNestedUnmounts(node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);else if (4 === node.tag ? currentParent = node.stateNode.containerInfo : commitUnmount(node), null !== node.child) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }
        if (node === current) break;

        for (; null === node.sibling;) {
          if (null === node["return"] || node["return"] === current) return;
          node = node["return"];
          4 === node.tag && (currentParentIsValid = false);
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    var getPublicInstance = config.getPublicInstance,
        mutation = config.mutation;
    config = config.persistence;
    mutation || (config ? invariant(false, "Persistent reconciler is disabled.") : invariant(false, "Noop reconciler is disabled."));
    var commitMount = mutation.commitMount,
        commitUpdate = mutation.commitUpdate,
        resetTextContent = mutation.resetTextContent,
        commitTextUpdate = mutation.commitTextUpdate,
        appendChild = mutation.appendChild,
        appendChildToContainer = mutation.appendChildToContainer,
        insertBefore = mutation.insertBefore,
        insertInContainerBefore = mutation.insertInContainerBefore,
        removeChild = mutation.removeChild,
        removeChildFromContainer = mutation.removeChildFromContainer;
    return {
      commitBeforeMutationLifeCycles: function commitBeforeMutationLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            if (finishedWork.effectTag & 2048 && null !== current) {
              var prevProps = current.memoizedProps,
                  prevState = current.memoizedState;
              current = finishedWork.stateNode;
              current.props = finishedWork.memoizedProps;
              current.state = finishedWork.memoizedState;
              finishedWork = current.getSnapshotBeforeUpdate(prevProps, prevState);
              current.__reactInternalSnapshotBeforeUpdate = finishedWork;
            }

            break;

          case 3:
          case 5:
          case 6:
          case 4:
            break;

          default:
            invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitResetTextContent: function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
      },
      commitPlacement: function commitPlacement(finishedWork) {
        a: {
          for (var parent = finishedWork["return"]; null !== parent;) {
            if (isHostParent(parent)) {
              var parentFiber = parent;
              break a;
            }

            parent = parent["return"];
          }

          invariant(false, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          parentFiber = void 0;
        }

        var isContainer = parent = void 0;

        switch (parentFiber.tag) {
          case 5:
            parent = parentFiber.stateNode;
            isContainer = false;
            break;

          case 3:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = true;
            break;

          case 4:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = true;
            break;

          default:
            invariant(false, "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }

        parentFiber.effectTag & 16 && (resetTextContent(parent), parentFiber.effectTag &= -17);

        a: b: for (parentFiber = finishedWork;;) {
          for (; null === parentFiber.sibling;) {
            if (null === parentFiber["return"] || isHostParent(parentFiber["return"])) {
              parentFiber = null;
              break a;
            }

            parentFiber = parentFiber["return"];
          }

          parentFiber.sibling["return"] = parentFiber["return"];

          for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag;) {
            if (parentFiber.effectTag & 2) continue b;
            if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child["return"] = parentFiber, parentFiber = parentFiber.child;
          }

          if (!(parentFiber.effectTag & 2)) {
            parentFiber = parentFiber.stateNode;
            break a;
          }
        }

        for (var node = finishedWork;;) {
          if (5 === node.tag || 6 === node.tag) parentFiber ? isContainer ? insertInContainerBefore(parent, node.stateNode, parentFiber) : insertBefore(parent, node.stateNode, parentFiber) : isContainer ? appendChildToContainer(parent, node.stateNode) : appendChild(parent, node.stateNode);else if (4 !== node.tag && null !== node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === finishedWork) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      },
      commitDeletion: function commitDeletion(current) {
        unmountHostComponents(current);
        current["return"] = null;
        current.child = null;
        current.alternate && (current.alternate.child = null, current.alternate["return"] = null);
      },
      commitWork: function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            break;

          case 5:
            var _instance8 = finishedWork.stateNode;

            if (null != _instance8) {
              var newProps = finishedWork.memoizedProps;
              current = null !== current ? current.memoizedProps : newProps;
              var type = finishedWork.type,
                  updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              null !== updatePayload && commitUpdate(_instance8, updatePayload, type, current, newProps, finishedWork);
            }

            break;

          case 6:
            invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            _instance8 = finishedWork.memoizedProps;
            commitTextUpdate(finishedWork.stateNode, null !== current ? current.memoizedProps : _instance8, _instance8);
            break;

          case 3:
            break;

          default:
            invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitLifeCycles: function commitLifeCycles(finishedRoot, current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            finishedRoot = finishedWork.stateNode;
            if (finishedWork.effectTag & 4) if (null === current) finishedRoot.props = finishedWork.memoizedProps, finishedRoot.state = finishedWork.memoizedState, finishedRoot.componentDidMount();else {
              var prevProps = current.memoizedProps;
              current = current.memoizedState;
              finishedRoot.props = finishedWork.memoizedProps;
              finishedRoot.state = finishedWork.memoizedState;
              finishedRoot.componentDidUpdate(prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate);
            }
            finishedWork = finishedWork.updateQueue;
            null !== finishedWork && commitCallbacks(finishedWork, finishedRoot);
            break;

          case 3:
            current = finishedWork.updateQueue;

            if (null !== current) {
              finishedRoot = null;
              if (null !== finishedWork.child) switch (finishedWork.child.tag) {
                case 5:
                  finishedRoot = getPublicInstance(finishedWork.child.stateNode);
                  break;

                case 2:
                  finishedRoot = finishedWork.child.stateNode;
              }
              commitCallbacks(current, finishedRoot);
            }

            break;

          case 5:
            finishedRoot = finishedWork.stateNode;
            null === current && finishedWork.effectTag & 4 && commitMount(finishedRoot, finishedWork.type, finishedWork.memoizedProps, finishedWork);
            break;

          case 6:
            break;

          case 4:
            break;

          default:
            invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitErrorLogging: function commitErrorLogging(finishedWork, onUncaughtError) {
        switch (finishedWork.tag) {
          case 2:
            var ctor = finishedWork.type;
            onUncaughtError = finishedWork.stateNode;
            var updateQueue = finishedWork.updateQueue;
            invariant(null !== updateQueue && null !== updateQueue.capturedValues, "An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");
            var capturedErrors = updateQueue.capturedValues;
            updateQueue.capturedValues = null;
            "function" !== typeof ctor.getDerivedStateFromCatch && markLegacyErrorBoundaryAsFailed(onUncaughtError);
            onUncaughtError.props = finishedWork.memoizedProps;
            onUncaughtError.state = finishedWork.memoizedState;

            for (ctor = 0; ctor < capturedErrors.length; ctor++) {
              updateQueue = capturedErrors[ctor];
              var _error = updateQueue.value,
                  stack = updateQueue.stack;
              logError(finishedWork, updateQueue);
              onUncaughtError.componentDidCatch(_error, {
                componentStack: null !== stack ? stack : ""
              });
            }

            break;

          case 3:
            ctor = finishedWork.updateQueue;
            invariant(null !== ctor && null !== ctor.capturedValues, "An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");
            capturedErrors = ctor.capturedValues;
            ctor.capturedValues = null;

            for (ctor = 0; ctor < capturedErrors.length; ctor++) {
              updateQueue = capturedErrors[ctor], logError(finishedWork, updateQueue), onUncaughtError(updateQueue.value);
            }

            break;

          default:
            invariant(false, "This unit of work tag cannot capture errors.  This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitAttachRef: function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (null !== ref) {
          var _instance6 = finishedWork.stateNode;

          switch (finishedWork.tag) {
            case 5:
              finishedWork = getPublicInstance(_instance6);
              break;

            default:
              finishedWork = _instance6;
          }

          "function" === typeof ref ? ref(finishedWork) : ref.current = finishedWork;
        }
      },
      commitDetachRef: function commitDetachRef(current) {
        current = current.ref;
        null !== current && ("function" === typeof current ? current(null) : current.current = null);
      }
    };
  }

  var NO_CONTEXT = {};

  function ReactFiberHostContext(config, stack) {
    function requiredContext(c) {
      invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return c;
    }

    var getChildHostContext = config.getChildHostContext,
        getRootHostContext = config.getRootHostContext;
    config = stack.createCursor;
    var push = stack.push,
        pop = stack.pop,
        contextStackCursor = config(NO_CONTEXT),
        contextFiberStackCursor = config(NO_CONTEXT),
        rootInstanceStackCursor = config(NO_CONTEXT);
    return {
      getHostContext: function getHostContext() {
        return requiredContext(contextStackCursor.current);
      },
      getRootHostContainer: function getRootHostContainer() {
        return requiredContext(rootInstanceStackCursor.current);
      },
      popHostContainer: function popHostContainer(fiber) {
        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      },
      popHostContext: function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
      },
      pushHostContainer: function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, NO_CONTEXT, fiber);
        nextRootInstance = getRootHostContext(nextRootInstance);
        pop(contextStackCursor, fiber);
        push(contextStackCursor, nextRootInstance, fiber);
      },
      pushHostContext: function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current),
            context = requiredContext(contextStackCursor.current);
        rootInstance = getChildHostContext(context, fiber.type, rootInstance);
        context !== rootInstance && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, rootInstance, fiber));
      }
    };
  }

  function ReactFiberHydrationContext(config) {
    function deleteHydratableInstance(returnFiber, instance) {
      var fiber = new FiberNode(5, null, null, 0);
      fiber.type = "DELETED";
      fiber.stateNode = instance;
      fiber["return"] = returnFiber;
      fiber.effectTag = 8;
      null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case 5:
          return nextInstance = canHydrateInstance(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

        case 6:
          return nextInstance = canHydrateTextInstance(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

        default:
          return false;
      }
    }

    function popToNextHostParent(fiber) {
      for (fiber = fiber["return"]; null !== fiber && 5 !== fiber.tag && 3 !== fiber.tag;) {
        fiber = fiber["return"];
      }

      hydrationParentFiber = fiber;
    }

    var shouldSetTextContent = config.shouldSetTextContent;
    config = config.hydration;
    if (!config) return {
      enterHydrationState: function enterHydrationState() {
        return false;
      },
      resetHydrationState: function resetHydrationState() {},
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
        invariant(false, "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
        invariant(false, "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      popHydrationState: function popHydrationState() {
        return false;
      }
    };
    var canHydrateInstance = config.canHydrateInstance,
        canHydrateTextInstance = config.canHydrateTextInstance,
        getNextHydratableSibling = config.getNextHydratableSibling,
        getFirstHydratableChild = config.getFirstHydratableChild,
        hydrateInstance = config.hydrateInstance,
        hydrateTextInstance = config.hydrateTextInstance,
        hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = false;
    return {
      enterHydrationState: function enterHydrationState(fiber) {
        nextHydratableInstance = getFirstHydratableChild(fiber.stateNode.containerInfo);
        hydrationParentFiber = fiber;
        return isHydrating = true;
      },
      resetHydrationState: function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        isHydrating = false;
      },
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
          var nextInstance = nextHydratableInstance;

          if (nextInstance) {
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(nextInstance);

              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                fiber.effectTag |= 2;
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }

              deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }

            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          } else fiber.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber;
        }
      },
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        rootContainerInstance = hydrateInstance(fiber.stateNode, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        fiber.updateQueue = rootContainerInstance;
        return null !== rootContainerInstance ? true : false;
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance(fiber) {
        return hydrateTextInstance(fiber.stateNode, fiber.memoizedProps, fiber);
      },
      popHydrationState: function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return false;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = true, false;
        var type = fiber.type;
        if (5 !== fiber.tag || "head" !== type && "body" !== type && !shouldSetTextContent(type, fiber.memoizedProps)) for (type = nextHydratableInstance; type;) {
          deleteHydratableInstance(fiber, type), type = getNextHydratableSibling(type);
        }
        popToNextHostParent(fiber);
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
      }
    };
  }

  function ReactFiberLegacyContext(stack) {
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      workInProgress = workInProgress.stateNode;
      workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      workInProgress.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }

    function isContextProvider(fiber) {
      return 2 === fiber.tag && null != fiber.type.childContextTypes;
    }

    function processChildContext(fiber, parentContext) {
      var instance = fiber.stateNode,
          childContextTypes = fiber.type.childContextTypes;
      if ("function" !== typeof instance.getChildContext) return parentContext;
      instance = instance.getChildContext();

      for (var contextKey in instance) {
        invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
      }

      return babelHelpers.extends({}, parentContext, instance);
    }

    var createCursor = stack.createCursor,
        push = stack.push,
        pop = stack.pop,
        contextStackCursor = createCursor(emptyObject),
        didPerformWorkStackCursor = createCursor(false),
        previousContext = emptyObject;
    return {
      getUnmaskedContext: function getUnmaskedContext(workInProgress) {
        return isContextProvider(workInProgress) ? previousContext : contextStackCursor.current;
      },
      cacheContext: cacheContext,
      getMaskedContext: function getMaskedContext(workInProgress, unmaskedContext) {
        var contextTypes = workInProgress.type.contextTypes;
        if (!contextTypes) return emptyObject;
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {},
            key;

        for (key in contextTypes) {
          context[key] = unmaskedContext[key];
        }

        instance && cacheContext(workInProgress, unmaskedContext, context);
        return context;
      },
      hasContextChanged: function hasContextChanged() {
        return didPerformWorkStackCursor.current;
      },
      isContextConsumer: function isContextConsumer(fiber) {
        return 2 === fiber.tag && null != fiber.type.contextTypes;
      },
      isContextProvider: isContextProvider,
      popContextProvider: function popContextProvider(fiber) {
        isContextProvider(fiber) && (pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber));
      },
      popTopLevelContextObject: function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      },
      pushTopLevelContextObject: function pushTopLevelContextObject(fiber, context, didChange) {
        invariant(null == contextStackCursor.cursor, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      },
      processChildContext: processChildContext,
      pushContextProvider: function pushContextProvider(workInProgress) {
        if (!isContextProvider(workInProgress)) return false;
        var instance = workInProgress.stateNode;
        instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, instance, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
      },
      invalidateContextProvider: function invalidateContextProvider(workInProgress, didChange) {
        var instance = workInProgress.stateNode;
        invariant(instance, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");

        if (didChange) {
          var mergedContext = processChildContext(workInProgress, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress);
          pop(contextStackCursor, workInProgress);
          push(contextStackCursor, mergedContext, workInProgress);
        } else pop(didPerformWorkStackCursor, workInProgress);

        push(didPerformWorkStackCursor, didChange, workInProgress);
      },
      findCurrentUnmaskedContext: function findCurrentUnmaskedContext(fiber) {
        for (invariant(2 === isFiberMountedImpl(fiber) && 2 === fiber.tag, "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."); 3 !== fiber.tag;) {
          if (isContextProvider(fiber)) return fiber.stateNode.__reactInternalMemoizedMergedChildContext;
          fiber = fiber["return"];
          invariant(fiber, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }

        return fiber.stateNode.context;
      }
    };
  }

  function ReactFiberNewContext(stack) {
    var createCursor = stack.createCursor,
        push = stack.push,
        pop = stack.pop,
        providerCursor = createCursor(null),
        valueCursor = createCursor(null),
        changedBitsCursor = createCursor(0);
    return {
      pushProvider: function pushProvider(providerFiber) {
        var context = providerFiber.type._context;
        push(changedBitsCursor, context._changedBits, providerFiber);
        push(valueCursor, context._currentValue, providerFiber);
        push(providerCursor, providerFiber, providerFiber);
        context._currentValue = providerFiber.pendingProps.value;
        context._changedBits = providerFiber.stateNode;
      },
      popProvider: function popProvider(providerFiber) {
        var changedBits = changedBitsCursor.current,
            currentValue = valueCursor.current;
        pop(providerCursor, providerFiber);
        pop(valueCursor, providerFiber);
        pop(changedBitsCursor, providerFiber);
        providerFiber = providerFiber.type._context;
        providerFiber._currentValue = currentValue;
        providerFiber._changedBits = changedBits;
      }
    };
  }

  function ReactFiberStack() {
    var valueStack = [],
        index = -1;
    return {
      createCursor: function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      },
      isEmpty: function isEmpty() {
        return -1 === index;
      },
      pop: function pop(cursor) {
        0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
      },
      push: function push(cursor, value) {
        index++;
        valueStack[index] = cursor.current;
        cursor.current = value;
      },
      checkThatStackIsEmpty: function checkThatStackIsEmpty() {},
      resetStackAfterFatalErrorInDev: function resetStackAfterFatalErrorInDev() {}
    };
  }

  function ReactFiberScheduler(config) {
    function resetStack() {
      if (null !== nextUnitOfWork) for (var interruptedWork = nextUnitOfWork["return"]; null !== interruptedWork;) {
        unwindInterruptedWork(interruptedWork), interruptedWork = interruptedWork["return"];
      }
      nextRoot = null;
      nextRenderExpirationTime = 0;
      nextUnitOfWork = null;
      isRootReadyForCommit = false;
    }

    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return null !== legacyErrorBoundariesThatAlreadyFailed && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }

    function completeUnitOfWork(workInProgress$jscomp$0) {
      for (;;) {
        var current = workInProgress$jscomp$0.alternate,
            returnFiber = workInProgress$jscomp$0["return"],
            siblingFiber = workInProgress$jscomp$0.sibling;

        if (0 === (workInProgress$jscomp$0.effectTag & 512)) {
          current = completeWork(current, workInProgress$jscomp$0, nextRenderExpirationTime);
          var workInProgress = workInProgress$jscomp$0;

          if (1073741823 === nextRenderExpirationTime || 1073741823 !== workInProgress.expirationTime) {
            b: switch (workInProgress.tag) {
              case 3:
              case 2:
                var newExpirationTime = workInProgress.updateQueue;
                newExpirationTime = null === newExpirationTime ? 0 : newExpirationTime.expirationTime;
                break b;

              default:
                newExpirationTime = 0;
            }

            for (var child = workInProgress.child; null !== child;) {
              0 !== child.expirationTime && (0 === newExpirationTime || newExpirationTime > child.expirationTime) && (newExpirationTime = child.expirationTime), child = child.sibling;
            }

            workInProgress.expirationTime = newExpirationTime;
          }

          if (null !== current) return current;
          null !== returnFiber && 0 === (returnFiber.effectTag & 512) && (null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress$jscomp$0.firstEffect), null !== workInProgress$jscomp$0.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0.firstEffect), returnFiber.lastEffect = workInProgress$jscomp$0.lastEffect), 1 < workInProgress$jscomp$0.effectTag && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0 : returnFiber.firstEffect = workInProgress$jscomp$0, returnFiber.lastEffect = workInProgress$jscomp$0));
          if (null !== siblingFiber) return siblingFiber;
          if (null !== returnFiber) workInProgress$jscomp$0 = returnFiber;else {
            isRootReadyForCommit = true;
            break;
          }
        } else {
          workInProgress$jscomp$0 = unwindWork(workInProgress$jscomp$0);
          if (null !== workInProgress$jscomp$0) return workInProgress$jscomp$0.effectTag &= 2559, workInProgress$jscomp$0;
          null !== returnFiber && (returnFiber.firstEffect = returnFiber.lastEffect = null, returnFiber.effectTag |= 512);
          if (null !== siblingFiber) return siblingFiber;
          if (null !== returnFiber) workInProgress$jscomp$0 = returnFiber;else break;
        }
      }

      return null;
    }

    function performUnitOfWork(workInProgress) {
      var next = beginWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
      null === next && (next = completeUnitOfWork(workInProgress));
      ReactCurrentOwner.current = null;
      return next;
    }

    function renderRoot(root, expirationTime, isAsync) {
      invariant(!isWorking, "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isWorking = true;
      if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || null === nextUnitOfWork) resetStack(), nextRoot = root, nextRenderExpirationTime = expirationTime, nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime), root.pendingCommitExpirationTime = 0;
      var didFatal = false;

      do {
        try {
          if (isAsync) for (; null !== nextUnitOfWork && !shouldYield();) {
            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
          } else for (; null !== nextUnitOfWork;) {
            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
          }
        } catch (thrownValue) {
          if (null === nextUnitOfWork) {
            didFatal = true;
            onUncaughtError(thrownValue);
            break;
          }

          isAsync = nextUnitOfWork;
          var returnFiber = isAsync["return"];

          if (null === returnFiber) {
            didFatal = true;
            onUncaughtError(thrownValue);
            break;
          }

          throwException(returnFiber, isAsync, thrownValue);
          nextUnitOfWork = completeUnitOfWork(isAsync);
        }

        break;
      } while (1);

      isWorking = false;
      if (didFatal || null !== nextUnitOfWork) return null;
      if (isRootReadyForCommit) return root.pendingCommitExpirationTime = expirationTime, root.current.alternate;
      invariant(false, "Expired work should have completed. This error is likely caused by a bug in React. Please file an issue.");
    }

    function scheduleCapture(sourceFiber, boundaryFiber, value, expirationTime) {
      sourceFiber = {
        value: value,
        source: sourceFiber,
        stack: getStackAddendumByWorkInProgressFiber(sourceFiber)
      };
      insertUpdateIntoFiber(boundaryFiber, {
        expirationTime: expirationTime,
        partialState: null,
        callback: null,
        isReplace: false,
        isForced: false,
        capturedValue: sourceFiber,
        next: null
      });
      scheduleWork(boundaryFiber, expirationTime);
    }

    function onCommitPhaseError(fiber$jscomp$0, error) {
      a: {
        invariant(!isWorking || isCommitting, "dispatch: Cannot dispatch during the render phase.");

        for (var fiber = fiber$jscomp$0["return"]; null !== fiber;) {
          switch (fiber.tag) {
            case 2:
              var instance = fiber.stateNode;

              if ("function" === typeof fiber.type.getDerivedStateFromCatch || "function" === typeof instance.componentDidCatch && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                scheduleCapture(fiber$jscomp$0, fiber, error, 1);
                fiber$jscomp$0 = void 0;
                break a;
              }

              break;

            case 3:
              scheduleCapture(fiber$jscomp$0, fiber, error, 1);
              fiber$jscomp$0 = void 0;
              break a;
          }

          fiber = fiber["return"];
        }

        3 === fiber$jscomp$0.tag && scheduleCapture(fiber$jscomp$0, fiber$jscomp$0, error, 1);
        fiber$jscomp$0 = void 0;
      }

      return fiber$jscomp$0;
    }

    function computeExpirationForFiber(fiber) {
      fiber = 0 !== expirationContext ? expirationContext : isWorking ? isCommitting ? 1 : nextRenderExpirationTime : fiber.mode & 1 ? isBatchingInteractiveUpdates ? 10 * (((recalculateCurrentTime() + 50) / 10 | 0) + 1) : 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1) : 1;
      isBatchingInteractiveUpdates && (0 === lowestPendingInteractiveExpirationTime || fiber > lowestPendingInteractiveExpirationTime) && (lowestPendingInteractiveExpirationTime = fiber);
      return fiber;
    }

    function scheduleWork(fiber, expirationTime) {
      a: {
        for (; null !== fiber;) {
          if (0 === fiber.expirationTime || fiber.expirationTime > expirationTime) fiber.expirationTime = expirationTime;
          null !== fiber.alternate && (0 === fiber.alternate.expirationTime || fiber.alternate.expirationTime > expirationTime) && (fiber.alternate.expirationTime = expirationTime);
          if (null === fiber["return"]) if (3 === fiber.tag) {
            var root = fiber.stateNode;
            !isWorking && 0 !== nextRenderExpirationTime && expirationTime < nextRenderExpirationTime && resetStack();
            isWorking && !isCommitting && nextRoot === root || requestWork(root, expirationTime);
            nestedUpdateCount > NESTED_UPDATE_LIMIT && invariant(false, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          } else {
            expirationTime = void 0;
            break a;
          }
          fiber = fiber["return"];
        }

        expirationTime = void 0;
      }

      return expirationTime;
    }

    function recalculateCurrentTime() {
      mostRecentCurrentTimeMs = now() - originalStartTimeMs;
      return mostRecentCurrentTime = (mostRecentCurrentTimeMs / 10 | 0) + 2;
    }

    function syncUpdates(fn, a, b, c, d) {
      var previousExpirationContext = expirationContext;
      expirationContext = 1;

      try {
        return fn(a, b, c, d);
      } finally {
        expirationContext = previousExpirationContext;
      }
    }

    function scheduleCallbackWithExpiration(expirationTime) {
      if (0 !== callbackExpirationTime) {
        if (expirationTime > callbackExpirationTime) return;
        cancelDeferredCallback(callbackID);
      }

      var currentMs = now() - originalStartTimeMs;
      callbackExpirationTime = expirationTime;
      callbackID = scheduleDeferredCallback(performAsyncWork, {
        timeout: 10 * (expirationTime - 2) - currentMs
      });
    }

    function requestWork(root, expirationTime) {
      if (null === root.nextScheduledRoot) root.remainingExpirationTime = expirationTime, null === lastScheduledRoot ? (firstScheduledRoot = lastScheduledRoot = root, root.nextScheduledRoot = root) : (lastScheduledRoot = lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot.nextScheduledRoot = firstScheduledRoot);else {
        var remainingExpirationTime = root.remainingExpirationTime;
        if (0 === remainingExpirationTime || expirationTime < remainingExpirationTime) root.remainingExpirationTime = expirationTime;
      }
      isRendering || (isBatchingUpdates ? isUnbatchingUpdates && (nextFlushedRoot = root, nextFlushedExpirationTime = 1, performWorkOnRoot(root, 1, false)) : 1 === expirationTime ? performSyncWork() : scheduleCallbackWithExpiration(expirationTime));
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = 0,
          highestPriorityRoot = null;
      if (null !== lastScheduledRoot) for (var previousScheduledRoot = lastScheduledRoot, root = firstScheduledRoot; null !== root;) {
        var remainingExpirationTime = root.remainingExpirationTime;

        if (0 === remainingExpirationTime) {
          invariant(null !== previousScheduledRoot && null !== lastScheduledRoot, "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.");

          if (root === root.nextScheduledRoot) {
            firstScheduledRoot = lastScheduledRoot = root.nextScheduledRoot = null;
            break;
          } else if (root === firstScheduledRoot) firstScheduledRoot = remainingExpirationTime = root.nextScheduledRoot, lastScheduledRoot.nextScheduledRoot = remainingExpirationTime, root.nextScheduledRoot = null;else if (root === lastScheduledRoot) {
            lastScheduledRoot = previousScheduledRoot;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            root.nextScheduledRoot = null;
            break;
          } else previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot, root.nextScheduledRoot = null;

          root = previousScheduledRoot.nextScheduledRoot;
        } else {
          if (0 === highestPriorityWork || remainingExpirationTime < highestPriorityWork) highestPriorityWork = remainingExpirationTime, highestPriorityRoot = root;
          if (root === lastScheduledRoot) break;
          previousScheduledRoot = root;
          root = root.nextScheduledRoot;
        }
      }
      previousScheduledRoot = nextFlushedRoot;
      null !== previousScheduledRoot && previousScheduledRoot === highestPriorityRoot && 1 === highestPriorityWork ? nestedUpdateCount++ : nestedUpdateCount = 0;
      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    }

    function performAsyncWork(dl) {
      performWork(0, true, dl);
    }

    function performSyncWork() {
      performWork(1, false, null);
    }

    function performWork(minExpirationTime, isAsync, dl) {
      deadline = dl;
      findHighestPriorityRoot();
      if (isAsync) for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || recalculateCurrentTime() >= nextFlushedExpirationTime);) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !deadlineDidExpire), findHighestPriorityRoot();
      } else for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime);) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false), findHighestPriorityRoot();
      }
      null !== deadline && (callbackExpirationTime = 0, callbackID = -1);
      0 !== nextFlushedExpirationTime && scheduleCallbackWithExpiration(nextFlushedExpirationTime);
      deadline = null;
      deadlineDidExpire = false;
      finishRendering();
    }

    function finishRendering() {
      nestedUpdateCount = 0;

      if (null !== completedBatches) {
        var batches = completedBatches;
        completedBatches = null;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          try {
            batch._onComplete();
          } catch (error) {
            hasUnhandledError || (hasUnhandledError = true, unhandledError = error);
          }
        }
      }

      if (hasUnhandledError) throw batches = unhandledError, unhandledError = null, hasUnhandledError = false, batches;
    }

    function performWorkOnRoot(root, expirationTime, isAsync) {
      invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isRendering = true;
      isAsync ? (isAsync = root.finishedWork, null !== isAsync ? completeRoot(root, isAsync, expirationTime) : (root.finishedWork = null, isAsync = renderRoot(root, expirationTime, true), null !== isAsync && (shouldYield() ? root.finishedWork = isAsync : completeRoot(root, isAsync, expirationTime)))) : (isAsync = root.finishedWork, null !== isAsync ? completeRoot(root, isAsync, expirationTime) : (root.finishedWork = null, isAsync = renderRoot(root, expirationTime, false), null !== isAsync && completeRoot(root, isAsync, expirationTime)));
      isRendering = false;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      var firstBatch = root.firstBatch;

      if (null !== firstBatch && firstBatch._expirationTime <= expirationTime && (null === completedBatches ? completedBatches = [firstBatch] : completedBatches.push(firstBatch), firstBatch._defer)) {
        root.finishedWork = finishedWork;
        root.remainingExpirationTime = 0;
        return;
      }

      root.finishedWork = null;
      isCommitting = isWorking = true;
      expirationTime = finishedWork.stateNode;
      invariant(expirationTime.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");
      firstBatch = expirationTime.pendingCommitExpirationTime;
      invariant(0 !== firstBatch, "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      expirationTime.pendingCommitExpirationTime = 0;
      var currentTime = recalculateCurrentTime();
      ReactCurrentOwner.current = null;
      if (1 < finishedWork.effectTag) {
        if (null !== finishedWork.lastEffect) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          var firstEffect = finishedWork.firstEffect;
        } else firstEffect = finishedWork;
      } else firstEffect = finishedWork.firstEffect;
      prepareForCommit(expirationTime.containerInfo);

      for (nextEffect = firstEffect; null !== nextEffect;) {
        var didError = false,
            error = void 0;

        try {
          for (; null !== nextEffect;) {
            nextEffect.effectTag & 2048 && commitBeforeMutationLifeCycles(nextEffect.alternate, nextEffect), nextEffect = nextEffect.nextEffect;
          }
        } catch (e) {
          didError = true, error = e;
        }

        didError && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), onCommitPhaseError(nextEffect, error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      for (nextEffect = firstEffect; null !== nextEffect;) {
        didError = false;
        error = void 0;

        try {
          for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            effectTag & 16 && commitResetTextContent(nextEffect);

            if (effectTag & 128) {
              var current = nextEffect.alternate;
              null !== current && commitDetachRef(current);
            }

            switch (effectTag & 14) {
              case 2:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                break;

              case 6:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                commitDeletion(nextEffect);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (e) {
          didError = true, error = e;
        }

        didError && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), onCommitPhaseError(nextEffect, error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      resetAfterCommit(expirationTime.containerInfo);
      expirationTime.current = finishedWork;

      for (nextEffect = firstEffect; null !== nextEffect;) {
        effectTag = false;
        current = void 0;

        try {
          for (firstEffect = expirationTime, didError = currentTime, error = firstBatch; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;
            effectTag$jscomp$0 & 36 && commitLifeCycles(firstEffect, nextEffect.alternate, nextEffect, didError, error);
            effectTag$jscomp$0 & 256 && commitErrorLogging(nextEffect, onUncaughtError);
            effectTag$jscomp$0 & 128 && commitAttachRef(nextEffect);
            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        } catch (e) {
          effectTag = true, current = e;
        }

        effectTag && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), onCommitPhaseError(nextEffect, current), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      isWorking = isCommitting = false;
      "function" === typeof onCommitRoot && onCommitRoot(finishedWork.stateNode);
      finishedWork = expirationTime.current.expirationTime;
      0 === finishedWork && (legacyErrorBoundariesThatAlreadyFailed = null);
      root.remainingExpirationTime = finishedWork;
    }

    function shouldYield() {
      return null === deadline || deadline.timeRemaining() > timeHeuristicForUnitOfWork ? false : deadlineDidExpire = true;
    }

    function onUncaughtError(error) {
      invariant(null !== nextFlushedRoot, "Should be working on a root. This error is likely caused by a bug in React. Please file an issue.");
      nextFlushedRoot.remainingExpirationTime = 0;
      hasUnhandledError || (hasUnhandledError = true, unhandledError = error);
    }

    var stack = ReactFiberStack(),
        hostContext = ReactFiberHostContext(config, stack),
        legacyContext = ReactFiberLegacyContext(stack);
    stack = ReactFiberNewContext(stack);
    var hydrationContext = ReactFiberHydrationContext(config),
        beginWork = ReactFiberBeginWork(config, hostContext, legacyContext, stack, hydrationContext, scheduleWork, computeExpirationForFiber).beginWork,
        completeWork = ReactFiberCompleteWork(config, hostContext, legacyContext, stack, hydrationContext).completeWork;
    hostContext = ReactFiberUnwindWork(hostContext, legacyContext, stack, scheduleWork, isAlreadyFailedLegacyErrorBoundary);
    var throwException = hostContext.throwException,
        unwindWork = hostContext.unwindWork,
        unwindInterruptedWork = hostContext.unwindInterruptedWork;
    hostContext = ReactFiberCommitWork(config, onCommitPhaseError, scheduleWork, computeExpirationForFiber, function (instance) {
      null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([instance]) : legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }, recalculateCurrentTime);
    var commitBeforeMutationLifeCycles = hostContext.commitBeforeMutationLifeCycles,
        commitResetTextContent = hostContext.commitResetTextContent,
        commitPlacement = hostContext.commitPlacement,
        commitDeletion = hostContext.commitDeletion,
        commitWork = hostContext.commitWork,
        commitLifeCycles = hostContext.commitLifeCycles,
        commitErrorLogging = hostContext.commitErrorLogging,
        commitAttachRef = hostContext.commitAttachRef,
        commitDetachRef = hostContext.commitDetachRef,
        now = config.now,
        scheduleDeferredCallback = config.scheduleDeferredCallback,
        cancelDeferredCallback = config.cancelDeferredCallback,
        prepareForCommit = config.prepareForCommit,
        resetAfterCommit = config.resetAfterCommit,
        originalStartTimeMs = now(),
        mostRecentCurrentTime = 2,
        mostRecentCurrentTimeMs = originalStartTimeMs,
        lastUniqueAsyncExpiration = 0,
        expirationContext = 0,
        isWorking = false,
        nextUnitOfWork = null,
        nextRoot = null,
        nextRenderExpirationTime = 0,
        nextEffect = null,
        isCommitting = false,
        isRootReadyForCommit = false,
        legacyErrorBoundariesThatAlreadyFailed = null,
        firstScheduledRoot = null,
        lastScheduledRoot = null,
        callbackExpirationTime = 0,
        callbackID = -1,
        isRendering = false,
        nextFlushedRoot = null,
        nextFlushedExpirationTime = 0,
        lowestPendingInteractiveExpirationTime = 0,
        deadlineDidExpire = false,
        hasUnhandledError = false,
        unhandledError = null,
        deadline = null,
        isBatchingUpdates = false,
        isUnbatchingUpdates = false,
        isBatchingInteractiveUpdates = false,
        completedBatches = null,
        NESTED_UPDATE_LIMIT = 1e3,
        nestedUpdateCount = 0,
        timeHeuristicForUnitOfWork = 1;
    return {
      recalculateCurrentTime: recalculateCurrentTime,
      computeExpirationForFiber: computeExpirationForFiber,
      scheduleWork: scheduleWork,
      requestWork: requestWork,
      flushRoot: function flushRoot(root, expirationTime) {
        invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.");
        nextFlushedRoot = root;
        nextFlushedExpirationTime = expirationTime;
        performWorkOnRoot(root, expirationTime, false);
        performSyncWork();
        finishRendering();
      },
      batchedUpdates: function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;

        try {
          return fn(a);
        } finally {
          (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performSyncWork();
        }
      },
      unbatchedUpdates: function unbatchedUpdates(fn, a) {
        if (isBatchingUpdates && !isUnbatchingUpdates) {
          isUnbatchingUpdates = true;

          try {
            return fn(a);
          } finally {
            isUnbatchingUpdates = false;
          }
        }

        return fn(a);
      },
      flushSync: function flushSync(fn, a) {
        invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;

        try {
          return syncUpdates(fn, a);
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates, performSyncWork();
        }
      },
      flushControlled: function flushControlled(fn) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;

        try {
          syncUpdates(fn);
        } finally {
          (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, false, null);
        }
      },
      deferredUpdates: function deferredUpdates(fn) {
        var previousExpirationContext = expirationContext;
        expirationContext = 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1);

        try {
          return fn();
        } finally {
          expirationContext = previousExpirationContext;
        }
      },
      syncUpdates: syncUpdates,
      interactiveUpdates: function interactiveUpdates(fn, a, b) {
        if (isBatchingInteractiveUpdates) return fn(a, b);
        isBatchingUpdates || isRendering || 0 === lowestPendingInteractiveExpirationTime || (performWork(lowestPendingInteractiveExpirationTime, false, null), lowestPendingInteractiveExpirationTime = 0);
        var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates,
            previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = isBatchingInteractiveUpdates = true;

        try {
          return fn(a, b);
        } finally {
          isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates, (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performSyncWork();
        }
      },
      flushInteractiveUpdates: function flushInteractiveUpdates() {
        isRendering || 0 === lowestPendingInteractiveExpirationTime || (performWork(lowestPendingInteractiveExpirationTime, false, null), lowestPendingInteractiveExpirationTime = 0);
      },
      computeUniqueAsyncExpiration: function computeUniqueAsyncExpiration() {
        var result = 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1);
        result <= lastUniqueAsyncExpiration && (result = lastUniqueAsyncExpiration + 1);
        return lastUniqueAsyncExpiration = result;
      },
      legacyContext: legacyContext
    };
  }

  function ReactFiberReconciler$1(config) {
    function _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback) {
      currentTime = container.current;

      if (parentComponent) {
        parentComponent = parentComponent._reactInternalFiber;
        var parentContext = findCurrentUnmaskedContext(parentComponent);
        parentComponent = isContextProvider(parentComponent) ? processChildContext(parentComponent, parentContext) : parentContext;
      } else parentComponent = emptyObject;

      null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
      container = callback;
      insertUpdateIntoFiber(currentTime, {
        expirationTime: expirationTime,
        partialState: {
          element: element
        },
        callback: void 0 === container ? null : container,
        isReplace: false,
        isForced: false,
        capturedValue: null,
        next: null
      });
      scheduleWork(currentTime, expirationTime);
      return expirationTime;
    }

    function findHostInstance(fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    }

    var getPublicInstance = config.getPublicInstance;
    config = ReactFiberScheduler(config);
    var recalculateCurrentTime = config.recalculateCurrentTime,
        computeExpirationForFiber = config.computeExpirationForFiber,
        scheduleWork = config.scheduleWork,
        legacyContext = config.legacyContext,
        findCurrentUnmaskedContext = legacyContext.findCurrentUnmaskedContext,
        isContextProvider = legacyContext.isContextProvider,
        processChildContext = legacyContext.processChildContext;
    return {
      createContainer: function createContainer(containerInfo, isAsync, hydrate) {
        isAsync = new FiberNode(3, null, null, isAsync ? 3 : 0);
        containerInfo = {
          current: isAsync,
          containerInfo: containerInfo,
          pendingChildren: null,
          pendingCommitExpirationTime: 0,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          remainingExpirationTime: 0,
          firstBatch: null,
          nextScheduledRoot: null
        };
        return isAsync.stateNode = containerInfo;
      },
      updateContainer: function updateContainer(element, container, parentComponent, callback) {
        var current = container.current,
            currentTime = recalculateCurrentTime();
        current = computeExpirationForFiber(current);
        return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, current, callback);
      },
      updateContainerAtExpirationTime: function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
        var currentTime = recalculateCurrentTime();
        return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
      },
      flushRoot: config.flushRoot,
      requestWork: config.requestWork,
      computeUniqueAsyncExpiration: config.computeUniqueAsyncExpiration,
      batchedUpdates: config.batchedUpdates,
      unbatchedUpdates: config.unbatchedUpdates,
      deferredUpdates: config.deferredUpdates,
      syncUpdates: config.syncUpdates,
      interactiveUpdates: config.interactiveUpdates,
      flushInteractiveUpdates: config.flushInteractiveUpdates,
      flushControlled: config.flushControlled,
      flushSync: config.flushSync,
      getPublicRootInstance: function getPublicRootInstance(container) {
        container = container.current;
        if (!container.child) return null;

        switch (container.child.tag) {
          case 5:
            return getPublicInstance(container.child.stateNode);

          default:
            return container.child.stateNode;
        }
      },
      findHostInstance: findHostInstance,
      findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
        fiber = findCurrentHostFiberWithNoPortals(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
        var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        return injectInternals(babelHelpers.extends({}, devToolsConfig, {
          findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
            return findHostInstance(fiber);
          },
          findFiberByHostInstance: function findFiberByHostInstance(instance) {
            return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
          }
        }));
      }
    };
  }

  var ReactFiberReconciler$2 = Object.freeze({
    default: ReactFiberReconciler$1
  }),
      ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2,
      reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3,
      viewConfigCallbacks = new Map(),
      viewConfigs = new Map(),
      ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject$1, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }(),
      now = "object" === typeof performance && "function" === typeof performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  },
      scheduledCallback = null,
      frameDeadline = 0,
      frameDeadlineObject = {
    timeRemaining: function timeRemaining() {
      return frameDeadline - now();
    },
    didTimeout: false
  };

  function setTimeoutCallback() {
    frameDeadline = now() + 5;
    var callback = scheduledCallback;
    scheduledCallback = null;
    null !== callback && callback(frameDeadlineObject);
  }

  function recursivelyUncacheFiberNode(node) {
    "number" === typeof node ? uncacheFiberNode(node) : (uncacheFiberNode(node._nativeTag), node._children.forEach(recursivelyUncacheFiberNode));
  }

  var NativeRenderer = reactReconciler({
    appendInitialChild: function appendInitialChild(parentInstance, child) {
      parentInstance._children.push(child);
    },
    createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      if (viewConfigs.has(type)) var viewConfig = viewConfigs.get(type);else viewConfig = viewConfigCallbacks.get(type), invariant("function" === typeof viewConfig, "View config not found for name %s", type), viewConfigCallbacks.set(type, null), viewConfig = viewConfig(), viewConfigs.set(type, viewConfig);
      invariant(viewConfig, "View config not found for name %s", type);
      type = viewConfig;
      viewConfig = diffProperties(null, emptyObject$1, props, type.validAttributes);
      UIManager.createView(hostContext, type.uiViewClassName, rootContainerInstance, viewConfig);
      rootContainerInstance = new ReactNativeFiberHostComponent(hostContext, type);
      instanceCache[hostContext] = internalInstanceHandle;
      instanceProps[hostContext] = props;
      return rootContainerInstance;
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      UIManager.createView(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      });
      instanceCache[hostContext] = internalInstanceHandle;
      return hostContext;
    },
    finalizeInitialChildren: function finalizeInitialChildren(parentInstance) {
      if (0 === parentInstance._children.length) return false;

      var nativeTags = parentInstance._children.map(function (child) {
        return "number" === typeof child ? child : child._nativeTag;
      });

      UIManager.setChildren(parentInstance._nativeTag, nativeTags);
      return false;
    },
    getRootHostContext: function getRootHostContext() {
      return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
      return emptyObject;
    },
    getPublicInstance: function getPublicInstance(instance) {
      return instance;
    },
    now: now,
    prepareForCommit: function prepareForCommit() {},
    prepareUpdate: function prepareUpdate() {
      return emptyObject;
    },
    resetAfterCommit: function resetAfterCommit() {},
    scheduleDeferredCallback: function scheduleDeferredCallback(callback) {
      scheduledCallback = callback;
      return setTimeout(setTimeoutCallback, 1);
    },
    cancelDeferredCallback: function cancelDeferredCallback(callbackID) {
      scheduledCallback = null;
      clearTimeout(callbackID);
    },
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree() {
      return false;
    },
    shouldSetTextContent: function shouldSetTextContent() {
      return false;
    },
    mutation: {
      appendChild: function appendChild(parentInstance, child) {
        var childTag = "number" === typeof child ? child : child._nativeTag,
            children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], [])) : (children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []));
      },
      appendChildToContainer: function appendChildToContainer(parentInstance, child) {
        UIManager.setChildren(parentInstance, ["number" === typeof child ? child : child._nativeTag]);
      },
      commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
        UIManager.updateView(textInstance, "RCTRawText", {
          text: newText
        });
      },
      commitMount: function commitMount() {},
      commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps) {
        updatePayloadTODO = instance.viewConfig;
        instanceProps[instance._nativeTag] = newProps;
        oldProps = diffProperties(null, oldProps, newProps, updatePayloadTODO.validAttributes);
        null != oldProps && UIManager.updateView(instance._nativeTag, updatePayloadTODO.uiViewClassName, oldProps);
      },
      insertBefore: function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [], [], ["number" === typeof child ? child : child._nativeTag], [index], []));
      },
      insertInContainerBefore: function insertInContainerBefore(parentInstance) {
        invariant("number" !== typeof parentInstance, "Container does not support insertBefore operation");
      },
      removeChild: function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children;
        child = children.indexOf(child);
        children.splice(child, 1);
        UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [child]);
      },
      removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
      },
      resetTextContent: function resetTextContent() {}
    }
  }),
      getInspectorDataForViewTag = void 0;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(false, "getInspectorDataForViewTag() is not available in production");
  };

  findHostInstance = NativeRenderer.findHostInstance;
  _batchedUpdates = NativeRenderer.batchedUpdates;
  _flushInteractiveUpdates = NativeRenderer.flushInteractiveUpdates;
  var roots = new Map(),
      ReactNativeRenderer = {
    NativeComponent: ReactNativeComponent,
    findNodeHandle: findNumericNodeHandleFiber,
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);
      root || (root = NativeRenderer.createContainer(containerTag, false, false), roots.set(containerTag, root));
      NativeRenderer.updateContainer(element, root, null, callback);
      return NativeRenderer.getPublicRootInstance(root);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && NativeRenderer.updateContainer(null, root, null, function () {
        roots["delete"](containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    flushSync: NativeRenderer.flushSync,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (null != maybeInstance) {
            var viewConfig = maybeInstance.viewConfig;
            nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
            null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      },
      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
      ReactNativeComponentTree: ReactNativeComponentTree,
      ReactNativePropRegistry: ReactNativePropRegistry,
      TouchHistoryMath: TouchHistoryMath,
      createReactNativeComponentClass: function createReactNativeComponentClass(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      },
      takeSnapshot: function takeSnapshot(view, options) {
        "number" !== typeof view && "window" !== view && (view = findNumericNodeHandleFiber(view) || "window");
        return UIManager.__takeSnapshot(view, options);
      }
    }
  };
  NativeRenderer.injectIntoDevTools({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.3.1",
    rendererPackageName: "react-native-renderer"
  });
  var ReactNativeRenderer$2 = Object.freeze({
    default: ReactNativeRenderer
  }),
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
},47,[48,15,30,97,98,99,100,101,103,106,107,56,108]);
__d(function (global, _require3, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require3(_dependencyMap[0]),
      polyfillObjectProperty = _require.polyfillObjectProperty,
      polyfillGlobal = _require.polyfillGlobal;

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  var _shouldPolyfillCollection = _require3(_dependencyMap[1]);

  if (_shouldPolyfillCollection('Map')) {
    polyfillGlobal('Map', function () {
      return _require3(_dependencyMap[2]);
    });
  }

  if (_shouldPolyfillCollection('Set')) {
    polyfillGlobal('Set', function () {
      return _require3(_dependencyMap[3]);
    });
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = 'production';
  }

  if (global.__RCTProfileIsProfiling) {
    var Systrace = _require3(_dependencyMap[4]);

    Systrace.installReactHook();
    Systrace.setEnabled(true);
  }

  var ExceptionsManager = _require3(_dependencyMap[5]);

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = _require3(_dependencyMap[6]);

    ErrorUtils.setGlobalHandler(handleError);
  }

  var ReactNativeVersionCheck = _require3(_dependencyMap[7]);

  ReactNativeVersionCheck.checkVersions();
  polyfillGlobal('Promise', function () {
    return _require3(_dependencyMap[8]);
  });
  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;

    _require3(_dependencyMap[9]);

    return global.regeneratorRuntime;
  });

  var defineLazyTimer = function defineLazyTimer(name) {
    polyfillGlobal(name, function () {
      return _require3(_dependencyMap[10])[name];
    });
  };

  defineLazyTimer('setTimeout');
  defineLazyTimer('setInterval');
  defineLazyTimer('setImmediate');
  defineLazyTimer('clearTimeout');
  defineLazyTimer('clearInterval');
  defineLazyTimer('clearImmediate');
  defineLazyTimer('requestAnimationFrame');
  defineLazyTimer('cancelAnimationFrame');
  defineLazyTimer('requestIdleCallback');
  defineLazyTimer('cancelIdleCallback');
  polyfillGlobal('XMLHttpRequest', function () {
    return _require3(_dependencyMap[11]);
  });
  polyfillGlobal('FormData', function () {
    return _require3(_dependencyMap[12]);
  });
  polyfillGlobal('fetch', function () {
    return _require3(_dependencyMap[13]).fetch;
  });
  polyfillGlobal('Headers', function () {
    return _require3(_dependencyMap[13]).Headers;
  });
  polyfillGlobal('Request', function () {
    return _require3(_dependencyMap[13]).Request;
  });
  polyfillGlobal('Response', function () {
    return _require3(_dependencyMap[13]).Response;
  });
  polyfillGlobal('WebSocket', function () {
    return _require3(_dependencyMap[14]);
  });
  polyfillGlobal('Blob', function () {
    return _require3(_dependencyMap[15]);
  });
  polyfillGlobal('File', function () {
    return _require3(_dependencyMap[16]);
  });
  polyfillGlobal('FileReader', function () {
    return _require3(_dependencyMap[17]);
  });
  polyfillGlobal('URL', function () {
    return _require3(_dependencyMap[18]);
  });

  if (!global.alert) {
    global.alert = function (text) {
      _require3(_dependencyMap[19]).alert('Alert', '' + text);
    };
  }

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  polyfillObjectProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
  polyfillObjectProperty(navigator, 'geolocation', function () {
    return _require3(_dependencyMap[20]);
  });

  var BatchedBridge = _require3(_dependencyMap[21]);

  BatchedBridge.registerLazyCallableModule('Systrace', function () {
    return _require3(_dependencyMap[4]);
  });
  BatchedBridge.registerLazyCallableModule('JSTimers', function () {
    return _require3(_dependencyMap[10]);
  });
  BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
    return _require3(_dependencyMap[22]);
  });
  BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
    return _require3(_dependencyMap[23]);
  });
  BatchedBridge.registerLazyCallableModule('RCTLog', function () {
    return _require3(_dependencyMap[24]);
  });
  BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
    return _require3(_dependencyMap[25]);
  });
  BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
    return _require3(_dependencyMap[26]);
  });
  BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
    return _require3(_dependencyMap[27]);
  });
  BatchedBridge.registerLazyCallableModule('JSDevSupportModule', function () {
    return _require3(_dependencyMap[28]);
  });

  global.__fetchSegment = function (segmentId, callback) {
    var _require2 = _require3(_dependencyMap[29]),
        SegmentFetcher = _require2.SegmentFetcher;

    if (!SegmentFetcher) {
      throw new Error("SegmentFetcher is missing. Please ensure that it is included as a NativeModule.");
    }

    SegmentFetcher.fetchSegment(segmentId, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  };
},48,[49,50,51,55,21,56,20,60,32,62,24,63,77,78,80,74,82,83,84,85,87,18,90,91,92,37,93,94,96,17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var defineLazyObjectProperty = _require(_dependencyMap[0]);

  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }

  module.exports = {
    polyfillObjectProperty: polyfillObjectProperty,
    polyfillGlobal: polyfillGlobal
  };
},49,[31]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _shouldActuallyPolyfillES6Collection(collectionName) {
    var Collection = global[collectionName];

    if (Collection == null) {
      return true;
    }

    if (typeof global.Symbol !== 'function') {
      return true;
    }

    var proto = Collection.prototype;
    return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
  }

  var cache = {};

  function _shouldPolyfillES6Collection(collectionName) {
    var result = cache[collectionName];

    if (result !== undefined) {
      return result;
    }

    result = _shouldActuallyPolyfillES6Collection(collectionName);
    cache[collectionName] = result;
    return result;
  }

  module.exports = _shouldPolyfillES6Collection;
},50,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _shouldPolyfillES6Collection = _require(_dependencyMap[0]);

  var guid = _require(_dependencyMap[1]);

  var isNode = _require(_dependencyMap[2]);

  var toIterator = _require(_dependencyMap[3]);

  module.exports = function (global, undefined) {
    if (!_shouldPolyfillES6Collection('Map')) {
      return global.Map;
    }

    var KIND_KEY = 'key';
    var KIND_VALUE = 'value';
    var KIND_KEY_VALUE = 'key+value';
    var KEY_PREFIX = '$map_';
    var SECRET_SIZE_PROP;
    var OLD_IE_HASH_PREFIX = 'IE_HASH_';

    var Map = function () {
      function Map(iterable) {
        babelHelpers.classCallCheck(this, Map);

        if (!isObject(this)) {
          throw new TypeError('Wrong map object type.');
        }

        initMap(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            if (!isObject(next.value)) {
              throw new TypeError('Expected iterable items to be pair objects.');
            }

            this.set(next.value[0], next.value[1]);
          }
        }
      }

      babelHelpers.createClass(Map, [{
        key: "clear",
        value: function clear() {
          initMap(this);
        }
      }, {
        key: "has",
        value: function has(key) {
          var index = getIndex(this, key);
          return !!(index != null && this._mapData[index]);
        }
      }, {
        key: "set",
        value: function set(key, value) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            this._mapData[index][1] = value;
          } else {
            index = this._mapData.push([key, value]) - 1;
            setIndex(this, key, index);
            {
              this.size += 1;
            }
          }

          return this;
        }
      }, {
        key: "get",
        value: function get(key) {
          var index = getIndex(this, key);

          if (index == null) {
            return undefined;
          } else {
            return this._mapData[index][1];
          }
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            setIndex(this, key, undefined);
            this._mapData[index] = undefined;
            {
              this.size -= 1;
            }
            return true;
          } else {
            return false;
          }
        }
      }, {
        key: "entries",
        value: function entries() {
          return new MapIterator(this, KIND_KEY_VALUE);
        }
      }, {
        key: "keys",
        value: function keys() {
          return new MapIterator(this, KIND_KEY);
        }
      }, {
        key: "values",
        value: function values() {
          return new MapIterator(this, KIND_VALUE);
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          if (typeof callback !== 'function') {
            throw new TypeError('Callback must be callable.');
          }

          var boundCallback = callback.bind(thisArg || undefined);
          var mapData = this._mapData;

          for (var i = 0; i < mapData.length; i++) {
            var entry = mapData[i];

            if (entry != null) {
              boundCallback(entry[1], entry[0], this);
            }
          }
        }
      }]);
      return Map;
    }();

    Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

    var MapIterator = function () {
      function MapIterator(map, kind) {
        babelHelpers.classCallCheck(this, MapIterator);

        if (!(isObject(map) && map._mapData)) {
          throw new TypeError('Object is not a map.');
        }

        if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
          throw new Error('Invalid iteration kind.');
        }

        this._map = map;
        this._nextIndex = 0;
        this._kind = kind;
      }

      babelHelpers.createClass(MapIterator, [{
        key: "next",
        value: function next() {
          if (!this instanceof Map) {
            throw new TypeError('Expected to be called on a MapIterator.');
          }

          var map = this._map;
          var index = this._nextIndex;
          var kind = this._kind;

          if (map == null) {
            return createIterResultObject(undefined, true);
          }

          var entries = map._mapData;

          while (index < entries.length) {
            var record = entries[index];
            index += 1;
            this._nextIndex = index;

            if (record) {
              if (kind === KIND_KEY) {
                return createIterResultObject(record[0], false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(record[1], false);
              } else if (kind) {
                return createIterResultObject(record, false);
              }
            }
          }

          this._map = undefined;
          return createIterResultObject(undefined, true);
        }
      }]);
      return MapIterator;
    }();

    MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
      return this;
    };

    function getIndex(map, key) {
      if (isObject(key)) {
        var hash = getHash(key);
        return map._objectIndex[hash];
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          return map._stringIndex[prefixedKey];
        } else {
          return map._otherIndex[prefixedKey];
        }
      }
    }

    function setIndex(map, key, index) {
      var shouldDelete = index == null;

      if (isObject(key)) {
        var hash = getHash(key);

        if (shouldDelete) {
          delete map._objectIndex[hash];
        } else {
          map._objectIndex[hash] = index;
        }
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          if (shouldDelete) {
            delete map._stringIndex[prefixedKey];
          } else {
            map._stringIndex[prefixedKey] = index;
          }
        } else {
          if (shouldDelete) {
            delete map._otherIndex[prefixedKey];
          } else {
            map._otherIndex[prefixedKey] = index;
          }
        }
      }
    }

    function initMap(map) {
      map._mapData = [];
      map._objectIndex = {};
      map._stringIndex = {};
      map._otherIndex = {};
      map.size = 0;
    }

    function isObject(o) {
      return o != null && (typeof o === 'object' || typeof o === 'function');
    }

    function createIterResultObject(value, done) {
      return {
        value: value,
        done: done
      };
    }

    var isES5 = function () {
      try {
        Object.defineProperty({}, 'x', {});
        return true;
      } catch (e) {
        return false;
      }
    }();

    function isExtensible(o) {
      if (!isES5) {
        return true;
      } else {
        return Object.isExtensible(o);
      }
    }

    function getIENodeHash(node) {
      var uniqueID;

      switch (node.nodeType) {
        case 1:
          uniqueID = node.uniqueID;
          break;

        case 9:
          uniqueID = node.documentElement.uniqueID;
          break;

        default:
          return null;
      }

      if (uniqueID) {
        return OLD_IE_HASH_PREFIX + uniqueID;
      } else {
        return null;
      }
    }

    var getHash = function () {
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      var hashProperty = guid();
      var hashCounter = 0;
      return function getHash(o) {
        if (o[hashProperty]) {
          return o[hashProperty];
        } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
          return o.propertyIsEnumerable[hashProperty];
        } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
          return getIENodeHash(o);
        } else if (!isES5 && o[hashProperty]) {
          return o[hashProperty];
        }

        if (isExtensible(o)) {
          hashCounter += 1;

          if (isES5) {
            Object.defineProperty(o, hashProperty, {
              enumerable: false,
              writable: false,
              configurable: false,
              value: hashCounter
            });
          } else if (o.propertyIsEnumerable) {
            o.propertyIsEnumerable = function () {
              return propIsEnumerable.apply(this, arguments);
            };

            o.propertyIsEnumerable[hashProperty] = hashCounter;
          } else if (isNode(o)) {
            o[hashProperty] = hashCounter;
          } else {
            throw new Error('Unable to set a non-enumerable property on object.');
          }

          return hashCounter;
        } else {
          throw new Error('Non-extensible objects are not allowed as keys.');
        }
      };
    }();

    return Map;
  }(Function('return this')());
},51,[50,52,53,54]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function guid() {
    return 'f' + (Math.random() * 1073741824).toString(16).replace('.', '');
  }

  module.exports = guid;
},52,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function isNode(object) {
    var doc = object ? object.ownerDocument || object : document;
    var defaultView = doc.defaultView || window;
    return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }

  module.exports = isNode;
},53,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VAL = 'key+value';
  var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';

  var toIterator = function () {
    if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
      return function () {
        var ArrayIterator = function () {
          function ArrayIterator(array, kind) {
            babelHelpers.classCallCheck(this, ArrayIterator);

            if (!Array.isArray(array)) {
              throw new TypeError('Object is not an Array');
            }

            this._iteratedObject = array;
            this._kind = kind;
            this._nextIndex = 0;
          }

          babelHelpers.createClass(ArrayIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof ArrayIterator) {
                throw new TypeError('Object is not an ArrayIterator');
              }

              if (this._iteratedObject == null) {
                return createIterResultObject(undefined, true);
              }

              var array = this._iteratedObject;
              var len = this._iteratedObject.length;
              var index = this._nextIndex;
              var kind = this._kind;

              if (index >= len) {
                this._iteratedObject = undefined;
                return createIterResultObject(undefined, true);
              }

              this._nextIndex = index + 1;

              if (kind === KIND_KEY) {
                return createIterResultObject(index, false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(array[index], false);
              } else if (kind === KIND_KEY_VAL) {
                return createIterResultObject([index, array[index]], false);
              }
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);
          return ArrayIterator;
        }();

        var StringIterator = function () {
          function StringIterator(string) {
            babelHelpers.classCallCheck(this, StringIterator);

            if (typeof string !== 'string') {
              throw new TypeError('Object is not a string');
            }

            this._iteratedString = string;
            this._nextIndex = 0;
          }

          babelHelpers.createClass(StringIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof StringIterator) {
                throw new TypeError('Object is not a StringIterator');
              }

              if (this._iteratedString == null) {
                return createIterResultObject(undefined, true);
              }

              var index = this._nextIndex;
              var s = this._iteratedString;
              var len = s.length;

              if (index >= len) {
                this._iteratedString = undefined;
                return createIterResultObject(undefined, true);
              }

              var ret;
              var first = s.charCodeAt(index);

              if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
                ret = s[index];
              } else {
                var second = s.charCodeAt(index + 1);

                if (second < 0xDC00 || second > 0xDFFF) {
                  ret = s[index];
                } else {
                  ret = s[index] + s[index + 1];
                }
              }

              this._nextIndex = index + ret.length;
              return createIterResultObject(ret, false);
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);
          return StringIterator;
        }();

        function createIterResultObject(value, done) {
          return {
            value: value,
            done: done
          };
        }

        return function (object, kind) {
          if (typeof object === 'string') {
            return new StringIterator(object);
          } else if (Array.isArray(object)) {
            return new ArrayIterator(object, kind || KIND_VALUE);
          } else {
            return object[ITERATOR_SYMBOL]();
          }
        };
      }();
    } else {
      return function (object) {
        return object[ITERATOR_SYMBOL]();
      };
    }
  }();

  babelHelpers.extends(toIterator, {
    KIND_KEY: KIND_KEY,
    KIND_VALUE: KIND_VALUE,
    KIND_KEY_VAL: KIND_KEY_VAL,
    ITERATOR_SYMBOL: ITERATOR_SYMBOL
  });
  module.exports = toIterator;
},54,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Map = _require(_dependencyMap[0]);

  var _shouldPolyfillES6Collection = _require(_dependencyMap[1]);

  var toIterator = _require(_dependencyMap[2]);

  module.exports = function (global) {
    if (!_shouldPolyfillES6Collection('Set')) {
      return global.Set;
    }

    var Set = function () {
      function Set(iterable) {
        babelHelpers.classCallCheck(this, Set);

        if (this == null || typeof this !== 'object' && typeof this !== 'function') {
          throw new TypeError('Wrong set object type.');
        }

        initSet(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            this.add(next.value);
          }
        }
      }

      babelHelpers.createClass(Set, [{
        key: "add",
        value: function add(value) {
          this._map.set(value, value);

          this.size = this._map.size;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          initSet(this);
        }
      }, {
        key: "delete",
        value: function _delete(value) {
          var ret = this._map.delete(value);

          this.size = this._map.size;
          return ret;
        }
      }, {
        key: "entries",
        value: function entries() {
          return this._map.entries();
        }
      }, {
        key: "forEach",
        value: function forEach(callback) {
          var thisArg = arguments[1];

          var it = this._map.keys();

          var next;

          while (!(next = it.next()).done) {
            callback.call(thisArg, next.value, next.value, this);
          }
        }
      }, {
        key: "has",
        value: function has(value) {
          return this._map.has(value);
        }
      }, {
        key: "values",
        value: function values() {
          return this._map.values();
        }
      }]);
      return Set;
    }();

    Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;
    Set.prototype.keys = Set.prototype.values;

    function initSet(set) {
      set._map = new Map();
      set.size = set._map.size;
    }

    return Set;
  }(Function('return this')());
},55,[51,50,54]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var exceptionID = 0;

  function reportException(e, isFatal) {
    var _require = _require2(_dependencyMap[0]),
        ExceptionsManager = _require.ExceptionsManager;

    if (ExceptionsManager) {
      var parseErrorStack = _require2(_dependencyMap[1]);

      var stack = parseErrorStack(e);
      var currentExceptionID = ++exceptionID;

      if (isFatal) {
        ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
      } else {
        ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
      }
    }
  }

  function handleException(e, isFatal) {
    if (!e.message) {
      e = new Error(e);
    }

    if (console._errorOriginal) {
      console._errorOriginal(e.message);
    } else {
      console.error(e.message);
    }

    reportException(e, isFatal);
  }

  function reactConsoleErrorHandler() {
    console._errorOriginal.apply(console, arguments);

    if (!console.reportErrorsAsExceptions) {
      return;
    }

    if (arguments[0] && arguments[0].stack) {
      reportException(arguments[0], false);
    } else {
      var stringifySafe = _require2(_dependencyMap[2]);

      var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');

      if (str.slice(0, 10) === '"Warning: ') {
        return;
      }

      var error = new Error('console.error: ' + str);
      error.framesToPop = 1;
      reportException(error, false);
    }
  }

  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }

    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;

    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }

  module.exports = {
    handleException: handleException,
    installConsoleErrorReporter: installConsoleErrorReporter
  };
},56,[17,57,23]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function parseErrorStack(e) {
    if (!e || !e.stack) {
      return [];
    }

    var stacktraceParser = _require(_dependencyMap[0]);

    var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);
    var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;

    while (framesToPop--) {
      stack.shift();
    }

    return stack;
  }

  module.exports = parseErrorStack;
},57,[58]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]);
},58,[59]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var UNKNOWN_FUNCTION = '<unknown>';
    var StackTraceParser = {
        parse: function parse(stackString) {
            var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
                node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                lines = stackString.split('\n'),
                stack = [],
                parts,
                element;

            for (var i = 0, j = lines.length; i < j; ++i) {
                if (parts = gecko.exec(lines[i])) {
                    element = {
                        'file': parts[3],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[4],
                        'column': parts[5] ? +parts[5] : null
                    };
                } else if (parts = chrome.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else if (parts = node.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else {
                    continue;
                }

                stack.push(element);
            }

            return stack;
        }
    };
    module.exports = StackTraceParser;
},59,[]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      PlatformConstants = _require.PlatformConstants;

  var ReactNativeVersion = _require2(_dependencyMap[1]);

  exports.checkVersions = function checkVersions() {
    if (!PlatformConstants) {
      return;
    }

    var nativeVersion = PlatformConstants.reactNativeVersion;

    if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {
      console.error("React Native version mismatch.\n\nJavaScript version: " + _formatVersion(ReactNativeVersion.version) + "\n" + ("Native version: " + _formatVersion(nativeVersion) + "\n\n") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');
    }
  };

  function _formatVersion(version) {
    return version.major + "." + version.minor + "." + version.patch + (version.prerelease !== null ? "-" + version.prerelease : '');
  }
},60,[17,61]);
__d(function (global, _require, module, exports, _dependencyMap) {
  exports.version = {
    major: 0,
    minor: 55,
    patch: 4,
    prerelease: null
  };
},61,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0]);

  module.exports = Promise;
},32,[33]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0]);

  _require(_dependencyMap[1]);

  Promise.prototype['finally'] = function (onSettled) {
    return this.then(onSettled, onSettled);
  };

  module.exports = Promise;
},33,[34,36]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0]);

  module.exports = Promise;
  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');

  function valuePromise(value) {
    var p = new Promise(Promise._61);
    p._65 = 1;
    p._55 = value;
    return p;
  }

  Promise.resolve = function (value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;

    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;

        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      }
    }

    return valuePromise(value);
  };

  Promise.all = function (arr) {
    var args = Array.prototype.slice.call(arr);
    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._65 === 3) {
              val = val._55;
            }

            if (val._65 === 1) return res(i, val._55);
            if (val._65 === 2) reject(val._55);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;

            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }

        args[i] = val;

        if (--remaining === 0) {
          resolve(args);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      values.forEach(function (value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
},34,[35]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  var LAST_ERROR = null;
  var IS_ERROR = {};

  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  module.exports = Promise;

  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }

    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }

    this._40 = 0;
    this._65 = 0;
    this._55 = null;
    this._72 = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }

  Promise._37 = null;
  Promise._87 = null;
  Promise._61 = noop;

  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }

    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };

  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }

  function handle(self, deferred) {
    while (self._65 === 3) {
      self = self._55;
    }

    if (Promise._37) {
      Promise._37(self);
    }

    if (self._65 === 0) {
      if (self._40 === 0) {
        self._40 = 1;
        self._72 = deferred;
        return;
      }

      if (self._40 === 1) {
        self._40 = 2;
        self._72 = [self._72, deferred];
        return;
      }

      self._72.push(deferred);

      return;
    }

    handleResolved(self, deferred);
  }

  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;

      if (cb === null) {
        if (self._65 === 1) {
          resolve(deferred.promise, self._55);
        } else {
          reject(deferred.promise, self._55);
        }

        return;
      }

      var ret = tryCallOne(cb, self._55);

      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }

  function resolve(self, newValue) {
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }

    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);

      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }

      if (then === self.then && newValue instanceof Promise) {
        self._65 = 3;
        self._55 = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }

    self._65 = 1;
    self._55 = newValue;
    finale(self);
  }

  function reject(self, newValue) {
    self._65 = 2;
    self._55 = newValue;

    if (Promise._87) {
      Promise._87(self, newValue);
    }

    finale(self);
  }

  function finale(self) {
    if (self._40 === 1) {
      handle(self, self._72);
      self._72 = null;
    }

    if (self._40 === 2) {
      for (var i = 0; i < self._72.length; i++) {
        handle(self, self._72[i]);
      }

      self._72 = null;
    }
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });

    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},35,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0]);

  module.exports = Promise;

  Promise.prototype.done = function (onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function (err) {
      setTimeout(function () {
        throw err;
      }, 0);
    });
  };
},36,[35]);
__d(function (global, _require, module, exports, _dependencyMap) {
  !function (global) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;

    if (runtime) {
      if (inModule) {
        module.exports = runtime;
      }

      return;
    }

    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    runtime.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    runtime.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    runtime.AsyncIterator = AsyncIterator;

    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    runtime.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(function () {
    return this;
  }() || Function("return this")());
},62,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class2, _temp;

  var EventTarget = _require(_dependencyMap[0]);

  var RCTNetworking = _require(_dependencyMap[1]);

  var base64 = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var warning = _require(_dependencyMap[4]);

  var BlobManager = _require(_dependencyMap[5]);

  if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
  }

  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

  var XMLHttpRequestEventTarget = function (_EventTarget) {
    babelHelpers.inherits(XMLHttpRequestEventTarget, _EventTarget);

    function XMLHttpRequestEventTarget() {
      babelHelpers.classCallCheck(this, XMLHttpRequestEventTarget);
      return babelHelpers.possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).apply(this, arguments));
    }

    return XMLHttpRequestEventTarget;
  }(EventTarget.apply(undefined, REQUEST_EVENTS));

  var XMLHttpRequest = (_temp = _class2 = function (_EventTarget2) {
    babelHelpers.inherits(XMLHttpRequest, _EventTarget2);
    babelHelpers.createClass(XMLHttpRequest, null, [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);

    function XMLHttpRequest() {
      babelHelpers.classCallCheck(this, XMLHttpRequest);

      var _this2 = babelHelpers.possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

      _this2.UNSENT = UNSENT;
      _this2.OPENED = OPENED;
      _this2.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this2.LOADING = LOADING;
      _this2.DONE = DONE;
      _this2.readyState = UNSENT;
      _this2.status = 0;
      _this2.timeout = 0;
      _this2.withCredentials = true;
      _this2.upload = new XMLHttpRequestEventTarget();
      _this2._aborted = false;
      _this2._hasError = false;
      _this2._method = null;
      _this2._response = '';
      _this2._url = null;
      _this2._timedOut = false;
      _this2._trackingName = 'unknown';
      _this2._incrementalEvents = false;

      _this2._reset();

      return _this2;
    }

    babelHelpers.createClass(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};

        this._clearSubscriptions();

        this._timedOut = false;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total: total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);

          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }

          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }

        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }

        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);

        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }

        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded: loaded,
          total: total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }

            this._hasError = true;

            if (timeOutError) {
              this._timedOut = true;
            }
          }

          this._clearSubscriptions();

          this._requestId = null;
          this.setReadyState(this.DONE);

          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function (sub) {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }

        var headers = this.responseHeaders || {};
        return Object.keys(headers).map(function (headerName) {
          return headerName + ': ' + headers[headerName];
        }).join('\r\n');
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];

        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }

        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }

        if (!url) {
          throw new Error('Cannot load an empty url');
        }

        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _this3 = this;

        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        if (this._sent) {
          throw new Error('Request has already been sent');
        }

        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
          return _this3.__didUploadProgress.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
          return _this3.__didReceiveResponse.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
          return _this3.__didReceiveData.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
          return _this3.__didReceiveIncrementalData.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
          return _this3.__didReceiveDataProgress.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
          return _this3.__didCompleteResponse.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        var nativeResponseType = 'text';

        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }

        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }

        invariant(this._method, 'Request method needs to be defined.');
        invariant(this._url, 'Request URL needs to be defined.');
        RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }

        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();

          this.setReadyState(this.DONE);
        }

        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }

        babelHelpers.get(XMLHttpRequest.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
      }
    }, {
      key: "responseType",
      get: function get() {
        return this._responseType;
      },
      set: function set(responseType) {
        if (this._sent) {
          throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The response type cannot be set after the request has been sent.");
        }

        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          warning(false, "The provided value '" + responseType + "' is not a valid 'responseType'.");
          return;
        }

        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', "The provided value '" + responseType + "' is unsupported in this environment.");

        if (responseType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
        }

        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function get() {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + ("is set to '' or 'text', but it is '" + this._responseType + "'."));
        }

        if (this.readyState < LOADING) {
          return '';
        }

        return this._response;
      }
    }, {
      key: "response",
      get: function get() {
        var responseType = this.responseType;

        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }

        if (this.readyState !== DONE) {
          return null;
        }

        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }

        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;

          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;

          case 'blob':
            if (typeof this._response === 'object' && this._response) {
              this._cachedResponse = BlobManager.createFromOptions(this._response);
            } else {
              throw new Error("Invalid response for blob: " + this._response);
            }

            break;

          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }

            break;

          default:
            this._cachedResponse = null;
        }

        return this._cachedResponse;
      }
    }]);
    return XMLHttpRequest;
  }(EventTarget.apply(undefined, babelHelpers.toConsumableArray(XHR_EVENTS))), _class2.UNSENT = UNSENT, _class2.OPENED = OPENED, _class2.HEADERS_RECEIVED = HEADERS_RECEIVED, _class2.LOADING = LOADING, _class2.DONE = DONE, _class2._interceptor = null, _temp);
  module.exports = XMLHttpRequest;
},63,[64,1077,73,15,29,75]);
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var Commons = _require(_dependencyMap[0]);

    var CustomEventTarget = _require(_dependencyMap[1]);

    var EventWrapper = _require(_dependencyMap[2]);

    var LISTENERS = Commons.LISTENERS;
    var CAPTURE = Commons.CAPTURE;
    var BUBBLE = Commons.BUBBLE;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;
    var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
    var createEventWrapper = EventWrapper.createEventWrapper;
    var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;
    var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

    var EventTarget = module.exports = function EventTarget() {
        if (this instanceof EventTarget) {
            Object.defineProperty(this, LISTENERS, {
                value: Object.create(null)
            });
        } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
            return defineCustomEventTarget(EventTarget, arguments[0]);
        } else if (arguments.length > 0) {
            var types = Array(arguments.length);

            for (var i = 0; i < arguments.length; ++i) {
                types[i] = arguments[i];
            }

            return defineCustomEventTarget(EventTarget, types);
        } else {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
        constructor: {
            value: EventTarget,
            writable: true,
            configurable: true
        },
        addEventListener: {
            value: function addEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                if (typeof listener !== "function" && typeof listener !== "object") {
                    throw new TypeError("\"listener\" is not an object.");
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var node = this[LISTENERS][type];

                if (node == null) {
                    this[LISTENERS][type] = newNode(listener, kind);
                    return true;
                }

                var prev = null;

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        return false;
                    }

                    prev = node;
                    node = node.next;
                }

                prev.next = newNode(listener, kind);
                return true;
            },
            configurable: true,
            writable: true
        },
        removeEventListener: {
            value: function removeEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var prev = null;
                var node = this[LISTENERS][type];

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        if (prev == null) {
                            this[LISTENERS][type] = node.next;
                        } else {
                            prev.next = node.next;
                        }

                        return true;
                    }

                    prev = node;
                    node = node.next;
                }

                return false;
            },
            configurable: true,
            writable: true
        },
        dispatchEvent: {
            value: function dispatchEvent(event) {
                var node = this[LISTENERS][event.type];

                if (node == null) {
                    return true;
                }

                var wrapped = createEventWrapper(event, this);

                while (node != null) {
                    if (typeof node.listener === "function") {
                        node.listener.call(this, wrapped);
                    } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                        node.listener.handleEvent(wrapped);
                    }

                    if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                        break;
                    }

                    node = node.next;
                }

                return !wrapped.defaultPrevented;
            },
            configurable: true,
            writable: true
        }
    });
},64,[65,66,67]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
    return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
  };
  exports.LISTENERS = createUniqueKey("listeners");
  exports.CAPTURE = 1;
  exports.BUBBLE = 2;
  exports.ATTRIBUTE = 3;

  exports.newNode = function newNode(listener, kind) {
    return {
      listener: listener,
      kind: kind,
      next: null
    };
  };
},65,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var Commons = _require(_dependencyMap[0]);

    var LISTENERS = Commons.LISTENERS;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;

    function getAttributeListener(eventTarget, type) {
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                return node.listener;
            }

            node = node.next;
        }

        return null;
    }

    function setAttributeListener(eventTarget, type, listener) {
        if (typeof listener !== "function" && typeof listener !== "object") {
            listener = null;
        }

        var prev = null;
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                if (prev == null) {
                    eventTarget[LISTENERS][type] = node.next;
                } else {
                    prev.next = node.next;
                }
            } else {
                prev = node;
            }

            node = node.next;
        }

        if (listener != null) {
            if (prev == null) {
                eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
            } else {
                prev.next = newNode(listener, ATTRIBUTE);
            }
        }
    }

    exports.defineCustomEventTarget = function (EventTargetBase, types) {
        function EventTarget() {
            EventTargetBase.call(this);
        }

        var descripter = {
            constructor: {
                value: EventTarget,
                configurable: true,
                writable: true
            }
        };
        types.forEach(function (type) {
            descripter["on" + type] = {
                get: function get() {
                    return getAttributeListener(this, type);
                },
                set: function set(listener) {
                    setAttributeListener(this, type, listener);
                },
                configurable: true,
                enumerable: true
            };
        });
        EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);
        return EventTarget;
    };
},66,[65]);
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var createUniqueKey = _require(_dependencyMap[0]).createUniqueKey;

    var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");
    var CANCELED_FLAG = createUniqueKey("canceled_flag");
    var ORIGINAL_EVENT = createUniqueKey("original_event");
    var wrapperPrototypeDefinition = Object.freeze({
        stopPropagation: Object.freeze({
            value: function stopPropagation() {
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopPropagation === "function") {
                    e.stopPropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        stopImmediatePropagation: Object.freeze({
            value: function stopImmediatePropagation() {
                this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopImmediatePropagation === "function") {
                    e.stopImmediatePropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        preventDefault: Object.freeze({
            value: function preventDefault() {
                if (this.cancelable === true) {
                    this[CANCELED_FLAG] = true;
                }

                var e = this[ORIGINAL_EVENT];

                if (typeof e.preventDefault === "function") {
                    e.preventDefault();
                }
            },
            writable: true,
            configurable: true
        }),
        defaultPrevented: Object.freeze({
            get: function defaultPrevented() {
                return this[CANCELED_FLAG];
            },
            enumerable: true,
            configurable: true
        })
    });
    exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

    exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
        var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
        var propertyDefinition = {
            type: {
                value: event.type,
                enumerable: true
            },
            target: {
                value: eventTarget,
                enumerable: true
            },
            currentTarget: {
                value: eventTarget,
                enumerable: true
            },
            eventPhase: {
                value: 2,
                enumerable: true
            },
            bubbles: {
                value: Boolean(event.bubbles),
                enumerable: true
            },
            cancelable: {
                value: Boolean(event.cancelable),
                enumerable: true
            },
            timeStamp: {
                value: timeStamp,
                enumerable: true
            },
            isTrusted: {
                value: false,
                enumerable: true
            }
        };
        propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[CANCELED_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[ORIGINAL_EVENT] = {
            value: event
        };

        if (typeof event.detail !== "undefined") {
            propertyDefinition.detail = {
                value: event.detail,
                enumerable: true
            };
        }

        return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
    };
},67,[65]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MissingNativeEventEmitterShim = _require(_dependencyMap[0]);

  var NativeEventEmitter = _require(_dependencyMap[1]);

  var RCTNetworkingNative = _require(_dependencyMap[2]).Networking;

  var convertRequestBody = _require(_dependencyMap[3]);

  function convertHeadersMapToArray(headers) {
    var headerArray = [];

    for (var name in headers) {
      headerArray.push([name, headers[name]]);
    }

    return headerArray;
  }

  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var RCTNetworking = function (_NativeEventEmitter) {
    babelHelpers.inherits(RCTNetworking, _NativeEventEmitter);

    function RCTNetworking() {
      babelHelpers.classCallCheck(this, RCTNetworking);

      var _this = babelHelpers.possibleConstructorReturn(this, (RCTNetworking.__proto__ || Object.getPrototypeOf(RCTNetworking)).call(this, RCTNetworkingNative));

      _this.isAvailable = true;
      return _this;
    }

    babelHelpers.createClass(RCTNetworking, [{
      key: "sendRequest",
      value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = convertRequestBody(data);

        if (body && body.formData) {
          body.formData = body.formData.map(function (part) {
            return babelHelpers.extends({}, part, {
              headers: convertHeadersMapToArray(part.headers)
            });
          });
        }

        var requestId = generateRequestId();
        RCTNetworkingNative.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), babelHelpers.extends({}, body, {
          trackingName: trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);
        callback(requestId);
      }
    }, {
      key: "abortRequest",
      value: function abortRequest(requestId) {
        RCTNetworkingNative.abortRequest(requestId);
      }
    }, {
      key: "clearCookies",
      value: function clearCookies(callback) {
        RCTNetworkingNative.clearCookies(callback);
      }
    }]);
    return RCTNetworking;
  }(NativeEventEmitter);

  {
    RCTNetworking = new RCTNetworking();
  }
  module.exports = RCTNetworking;
},1077,[69,70,17,71]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EmitterSubscription = _require(_dependencyMap[0]);

  var EventEmitter = _require(_dependencyMap[1]);

  var invariant = _require(_dependencyMap[2]);

  var MissingNativeEventEmitterShim = function (_EventEmitter) {
    babelHelpers.inherits(MissingNativeEventEmitterShim, _EventEmitter);

    function MissingNativeEventEmitterShim(nativeModuleName, nativeEventEmitterName) {
      babelHelpers.classCallCheck(this, MissingNativeEventEmitterShim);

      var _this = babelHelpers.possibleConstructorReturn(this, (MissingNativeEventEmitterShim.__proto__ || Object.getPrototypeOf(MissingNativeEventEmitterShim)).call(this, null));

      _this.isAvailable = false;
      _this._nativeModuleName = nativeModuleName;
      _this._nativeEventEmitterName = nativeEventEmitterName;
      return _this;
    }

    babelHelpers.createClass(MissingNativeEventEmitterShim, [{
      key: "throwMissingNativeModule",
      value: function throwMissingNativeModule() {
        invariant(false, "Cannot use '" + this._nativeEventEmitterName + "' module when " + ("native '" + this._nativeModuleName + "' is not included in the build. ") + ("Either include it, or check '" + this._nativeEventEmitterName + "'.isAvailable ") + 'before calling any methods.');
      }
    }, {
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        this.throwMissingNativeModule();
      }
    }]);
    return MissingNativeEventEmitterShim;
  }(EventEmitter);

  module.exports = MissingNativeEventEmitterShim;
},69,[39,38,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = _require(_dependencyMap[0]);

  var Platform = _require(_dependencyMap[1]);

  var RCTDeviceEventEmitter = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var NativeEventEmitter = function (_EventEmitter) {
    babelHelpers.inherits(NativeEventEmitter, _EventEmitter);

    function NativeEventEmitter(nativeModule) {
      babelHelpers.classCallCheck(this, NativeEventEmitter);

      var _this = babelHelpers.possibleConstructorReturn(this, (NativeEventEmitter.__proto__ || Object.getPrototypeOf(NativeEventEmitter)).call(this, RCTDeviceEventEmitter.sharedSubscriber));

      return _this;
    }

    babelHelpers.createClass(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (this._nativeModule != null) {
          this._nativeModule.addListener(eventType);
        }

        return babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        invariant(eventType, 'eventType argument is required.');
        var count = this.listeners(eventType).length;

        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(count);
        }

        babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(1);
        }

        babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }]);
    return NativeEventEmitter;
  }(EventEmitter);

  module.exports = NativeEventEmitter;
},70,[38,1076,37,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var binaryToBase64 = _require(_dependencyMap[0]);

  var Blob = _require(_dependencyMap[1]);

  var FormData = _require(_dependencyMap[2]);

  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }

    if (body instanceof Blob) {
      return {
        blob: body.data
      };
    }

    if (body instanceof FormData) {
      return {
        formData: body.getParts()
      };
    }

    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: binaryToBase64(body)
      };
    }

    return body;
  }

  module.exports = convertRequestBody;
},71,[72,74,77]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var base64 = _require(_dependencyMap[0]);

  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }

    if (data instanceof Uint8Array) {
      return base64.fromByteArray(data);
    }

    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }

    var _data = data,
        buffer = _data.buffer,
        byteOffset = _data.byteOffset,
        byteLength = _data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }

  module.exports = binaryToBase64;
},72,[73]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;

  function getLens(b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }

  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }

  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }

  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

    for (var i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 0xFF;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var parts = [];
    var maxChunkLength = 16383;

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }

    return parts.join('');
  }
},73,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Blob = function () {
    function Blob() {
      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments[1];
      babelHelpers.classCallCheck(this, Blob);

      var BlobManager = _require(_dependencyMap[0]);

      this.data = BlobManager.createFromParts(parts, options).data;
    }

    babelHelpers.createClass(Blob, [{
      key: "slice",
      value: function slice(start, end) {
        var BlobManager = _require(_dependencyMap[0]);

        var _data = this.data,
            offset = _data.offset,
            size = _data.size;

        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }

          offset += start;
          size -= start;

          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }

            size = end - start;
          }
        }

        return BlobManager.createFromOptions({
          blobId: this.data.blobId,
          offset: offset,
          size: size
        });
      }
    }, {
      key: "close",
      value: function close() {
        var BlobManager = _require(_dependencyMap[0]);

        BlobManager.release(this.data.blobId);
        this.data = null;
      }
    }, {
      key: "data",
      set: function set(data) {
        this._data = data;
      },
      get: function get() {
        if (!this._data) {
          throw new Error('Blob has been closed and is no longer available');
        }

        return this._data;
      }
    }, {
      key: "size",
      get: function get() {
        return this.data.size;
      }
    }, {
      key: "type",
      get: function get() {
        return this.data.type || '';
      }
    }]);
    return Blob;
  }();

  module.exports = Blob;
},74,[75]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var Blob = _require2(_dependencyMap[0]);

  var BlobRegistry = _require2(_dependencyMap[1]);

  var _require = _require2(_dependencyMap[2]),
      BlobModule = _require.BlobModule;

  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

  var BlobManager = (_temp = _class = function () {
    function BlobManager() {
      babelHelpers.classCallCheck(this, BlobManager);
    }

    babelHelpers.createClass(BlobManager, null, [{
      key: "createFromParts",
      value: function createFromParts(parts, options) {
        var blobId = uuidv4();
        var items = parts.map(function (part) {
          if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {
            throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
          }

          if (part instanceof Blob) {
            return {
              data: part.data,
              type: 'blob'
            };
          } else {
            return {
              data: String(part),
              type: 'string'
            };
          }
        });
        var size = items.reduce(function (acc, curr) {
          if (curr.type === 'string') {
            return acc + global.unescape(encodeURI(curr.data)).length;
          } else {
            return acc + curr.data.size;
          }
        }, 0);
        BlobModule.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
          blobId: blobId,
          offset: 0,
          size: size,
          type: options ? options.type : '',
          lastModified: options ? options.lastModified : Date.now()
        });
      }
    }, {
      key: "createFromOptions",
      value: function createFromOptions(options) {
        BlobRegistry.register(options.blobId);
        return babelHelpers.extends(Object.create(Blob.prototype), {
          data: options
        });
      }
    }, {
      key: "release",
      value: function release(blobId) {
        BlobRegistry.unregister(blobId);

        if (BlobRegistry.has(blobId)) {
          return;
        }

        BlobModule.release(blobId);
      }
    }, {
      key: "addNetworkingHandler",
      value: function addNetworkingHandler() {
        BlobModule.addNetworkingHandler();
      }
    }, {
      key: "addWebSocketHandler",
      value: function addWebSocketHandler(socketId) {
        BlobModule.addWebSocketHandler(socketId);
      }
    }, {
      key: "removeWebSocketHandler",
      value: function removeWebSocketHandler(socketId) {
        BlobModule.removeWebSocketHandler(socketId);
      }
    }, {
      key: "sendOverSocket",
      value: function sendOverSocket(blob, socketId) {
        BlobModule.sendOverSocket(blob.data, socketId);
      }
    }]);
    return BlobManager;
  }(), _class.isAvailable = !!BlobModule, _temp);
  module.exports = BlobManager;
},75,[74,76,17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var registry = {};

  var register = function register(id) {
    if (registry[id]) {
      registry[id]++;
    } else {
      registry[id] = 1;
    }
  };

  var unregister = function unregister(id) {
    if (registry[id]) {
      registry[id]--;

      if (registry[id] <= 0) {
        delete registry[id];
      }
    }
  };

  var has = function has(id) {
    return registry[id] && registry[id] > 0;
  };

  module.exports = {
    register: register,
    unregister: unregister,
    has: has
  };
},76,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var FormData = function () {
    function FormData() {
      babelHelpers.classCallCheck(this, FormData);
      this._parts = [];
    }

    babelHelpers.createClass(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(function (_ref) {
          var _ref2 = babelHelpers.slicedToArray(_ref, 2),
              name = _ref2[0],
              value = _ref2[1];

          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };

          if (typeof value === 'object' && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }

            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }

            return babelHelpers.extends({}, value, {
              headers: headers,
              fieldName: name
            });
          }

          return {
            string: String(value),
            headers: headers,
            fieldName: name
          };
        });
      }
    }]);
    return FormData;
  }();

  module.exports = FormData;
},77,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _whatwgFetch = _require(_dependencyMap[0]);

  var _whatwgFetch2 = babelHelpers.interopRequireDefault(_whatwgFetch);

  if (_whatwgFetch2.default && _whatwgFetch2.default.fetch) {
    module.exports = _whatwgFetch2.default;
  } else {
    module.exports = {
      fetch: fetch,
      Headers: Headers,
      Request: Request,
      Response: Response
    };
  }
},78,[79]);
__d(function (global, _require, module, exports, _dependencyMap) {
  (function (self) {
    'use strict';

    if (self.fetch) {
      return;
    }

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isDataView = function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      };

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var list = this.map[name];

      if (!list) {
        list = [];
        this.map[name] = list;
      }

      list.push(value);
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      var values = this.map[normalizeName(name)];
      return values ? values[0] : null;
    };

    Headers.prototype.getAll = function (name) {
      return this.map[normalizeName(name)] || [];
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = [normalizeValue(value)];
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      Object.getOwnPropertyNames(this.map).forEach(function (name) {
        this.map[name].forEach(function (value) {
          callback.call(thisArg, value, name, this);
        }, this);
      }, this);
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          throw new Error('unsupported BodyInit type');
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (typeof input === 'string') {
        this.url = input;
      } else {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      }

      this.credentials = options.credentials || this.credentials || 'omit';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      rawHeaders.split('\r\n').forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = 'status' in options ? options.status : 200;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;

    self.fetch = function (input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        var xhr = new XMLHttpRequest();

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    };

    self.fetch.polyfill = true;
  })(typeof self !== 'undefined' ? self : this);
},79,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var Blob = _require(_dependencyMap[0]);

  var EventTarget = _require(_dependencyMap[1]);

  var NativeEventEmitter = _require(_dependencyMap[2]);

  var BlobManager = _require(_dependencyMap[3]);

  var NativeModules = _require(_dependencyMap[4]);

  var Platform = _require(_dependencyMap[5]);

  var WebSocketEvent = _require(_dependencyMap[6]);

  var base64 = _require(_dependencyMap[7]);

  var binaryToBase64 = _require(_dependencyMap[8]);

  var invariant = _require(_dependencyMap[9]);

  var WebSocketModule = NativeModules.WebSocketModule;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;
  var WebSocket = (_temp = _class = function (_EventTarget) {
    babelHelpers.inherits(WebSocket, _EventTarget);

    function WebSocket(url, protocols, options) {
      babelHelpers.classCallCheck(this, WebSocket);

      var _this = babelHelpers.possibleConstructorReturn(this, (WebSocket.__proto__ || Object.getPrototypeOf(WebSocket)).call(this));

      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;

      if (typeof protocols === 'string') {
        protocols = [protocols];
      }

      var _ref = options || {},
          _ref$headers = _ref.headers,
          headers = _ref$headers === undefined ? {} : _ref$headers,
          unrecognized = babelHelpers.objectWithoutProperties(_ref, ["headers"]);

      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }

      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }

      if (!Array.isArray(protocols)) {
        protocols = null;
      }

      if (!WebSocket.isAvailable) {
        throw new Error("Cannot initialize WebSocket module. Native module WebSocketModule is missing.");
      }

      _this._eventEmitter = new NativeEventEmitter(WebSocketModule);
      _this._socketId = nextWebSocketId++;

      _this._registerEvents();

      WebSocketModule.connect(url, protocols, {
        headers: headers
      }, _this._socketId);
      return _this;
    }

    babelHelpers.createClass(WebSocket, [{
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }

        this.readyState = this.CLOSING;

        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        if (data instanceof Blob) {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
          BlobManager.sendOverSocket(data, this._socketId);
          return;
        }

        if (typeof data === 'string') {
          WebSocketModule.send(data, this._socketId);
          return;
        }

        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
          return;
        }

        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        WebSocketModule.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        {
          var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
          var closeReason = typeof reason === 'string' ? reason : '';
          WebSocketModule.close(statusCode, closeReason, this._socketId);
        }

        if (BlobManager.isAvailable && this._binaryType === 'blob') {
          BlobManager.removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        var _this2 = this;

        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          var data = ev.data;

          switch (ev.type) {
            case 'binary':
              data = base64.toByteArray(ev.data).buffer;
              break;

            case 'blob':
              data = BlobManager.createFromOptions(ev.data);
              break;
          }

          _this2.dispatchEvent(new WebSocketEvent('message', {
            data: data
          }));
        }), this._eventEmitter.addListener('websocketOpen', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.OPEN;

          _this2.dispatchEvent(new WebSocketEvent('open'));
        }), this._eventEmitter.addListener('websocketClosed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('close', {
            code: ev.code,
            reason: ev.reason
          }));

          _this2._unregisterEvents();

          _this2.close();
        }), this._eventEmitter.addListener('websocketFailed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('error', {
            message: ev.message
          }));

          _this2.dispatchEvent(new WebSocketEvent('close', {
            message: ev.message
          }));

          _this2._unregisterEvents();

          _this2.close();
        })];
      }
    }, {
      key: "binaryType",
      get: function get() {
        return this._binaryType;
      },
      set: function set(binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error('binaryType must be either \'blob\' or \'arraybuffer\'');
        }

        if (this._binaryType === 'blob' || binaryType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');

          if (binaryType === 'blob') {
            BlobManager.addWebSocketHandler(this._socketId);
          } else {
            BlobManager.removeWebSocketHandler(this._socketId);
          }
        }

        this._binaryType = binaryType;
      }
    }]);
    return WebSocket;
  }(EventTarget.apply(undefined, WEBSOCKET_EVENTS)), _class.CONNECTING = CONNECTING, _class.OPEN = OPEN, _class.CLOSING = CLOSING, _class.CLOSED = CLOSED, _class.isAvailable = !!WebSocketModule, _temp);
  module.exports = WebSocket;
},80,[74,64,70,75,17,1076,81,73,72,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    babelHelpers.classCallCheck(this, WebSocketEvent);
    this.type = type.toString();
    babelHelpers.extends(this, eventInitDict);
  };

  module.exports = WebSocketEvent;
},81,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Blob = _require(_dependencyMap[0]);

  var invariant = _require(_dependencyMap[1]);

  var File = function (_Blob) {
    babelHelpers.inherits(File, _Blob);

    function File(parts, name, options) {
      babelHelpers.classCallCheck(this, File);
      invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');

      var _this = babelHelpers.possibleConstructorReturn(this, (File.__proto__ || Object.getPrototypeOf(File)).call(this, parts, options));

      _this.data.name = name;
      return _this;
    }

    babelHelpers.createClass(File, [{
      key: "name",
      get: function get() {
        invariant(this.data.name != null, 'Files must have a name set.');
        return this.data.name;
      }
    }, {
      key: "lastModified",
      get: function get() {
        return this.data.lastModified || 0;
      }
    }]);
    return File;
  }(Blob);

  module.exports = File;
},82,[74,15]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var EventTarget = _require2(_dependencyMap[0]);

  var Blob = _require2(_dependencyMap[1]);

  var _require = _require2(_dependencyMap[2]),
      FileReaderModule = _require.FileReaderModule;

  var READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;
  var FileReader = (_temp = _class = function (_EventTarget) {
    babelHelpers.inherits(FileReader, _EventTarget);

    function FileReader() {
      babelHelpers.classCallCheck(this, FileReader);

      var _this = babelHelpers.possibleConstructorReturn(this, (FileReader.__proto__ || Object.getPrototypeOf(FileReader)).call(this));

      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._subscriptions = [];

      _this._reset();

      return _this;
    }

    babelHelpers.createClass(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        this._subscriptions.forEach(function (sub) {
          return sub.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._error) {
            this.dispatchEvent({
              type: 'error'
            });
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer() {
        throw new Error('FileReader.readAsArrayBuffer is not implemented');
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        var _this2 = this;

        this._aborted = false;
        FileReaderModule.readAsDataURL(blob.data).then(function (text) {
          if (_this2._aborted) {
            return;
          }

          _this2._result = text;

          _this2._setReadyState(DONE);
        }, function (error) {
          if (_this2._aborted) {
            return;
          }

          _this2._error = error;

          _this2._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var _this3 = this;

        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;
        FileReaderModule.readAsText(blob.data, encoding).then(function (text) {
          if (_this3._aborted) {
            return;
          }

          _this3._result = text;

          _this3._setReadyState(DONE);
        }, function (error) {
          if (_this3._aborted) {
            return;
          }

          _this3._error = error;

          _this3._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();

          this._setReadyState(DONE);
        }

        this._reset();
      }
    }, {
      key: "readyState",
      get: function get() {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function get() {
        return this._error;
      }
    }, {
      key: "result",
      get: function get() {
        return this._result;
      }
    }]);
    return FileReader;
  }(EventTarget.apply(undefined, READER_EVENTS)), _class.EMPTY = EMPTY, _class.LOADING = LOADING, _class.DONE = DONE, _temp);
  module.exports = FileReader;
},83,[64,74,17]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var Blob = _require2(_dependencyMap[0]);

  var _require = _require2(_dependencyMap[1]),
      BlobModule = _require.BlobModule;

  var BLOB_URL_PREFIX = null;

  if (BlobModule && typeof BlobModule.BLOB_URI_SCHEME === 'string') {
    BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';

    if (typeof BlobModule.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += "//" + BlobModule.BLOB_URI_HOST + "/";
    }
  }

  var URL = function () {
    function URL() {
      babelHelpers.classCallCheck(this, URL);
      throw new Error('Creating URL objects is not supported yet.');
    }

    babelHelpers.createClass(URL, null, [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }

        return "" + BLOB_URL_PREFIX + blob.data.blobId + "?offset=" + blob.data.offset + "&size=" + blob.size;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);
    return URL;
  }();

  module.exports = URL;
},84,[74,17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AlertIOS = _require(_dependencyMap[0]);

  var NativeModules = _require(_dependencyMap[1]);

  var Platform = _require(_dependencyMap[2]);

  var Alert = function () {
    function Alert() {
      babelHelpers.classCallCheck(this, Alert);
    }

    babelHelpers.createClass(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options, type) {
        {
          AlertAndroid.alert(title, message, buttons, options);
        }
      }
    }]);
    return Alert;
  }();

  var AlertAndroid = function () {
    function AlertAndroid() {
      babelHelpers.classCallCheck(this, AlertAndroid);
    }

    babelHelpers.createClass(AlertAndroid, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        var config = {
          title: title || '',
          message: message || ''
        };

        if (options) {
          config = babelHelpers.extends({}, config, {
            cancelable: options.cancelable
          });
        }

        var validButtons = buttons ? buttons.slice(0, 3) : [{
          text: 'OK'
        }];
        var buttonPositive = validButtons.pop();
        var buttonNegative = validButtons.pop();
        var buttonNeutral = validButtons.pop();

        if (buttonNeutral) {
          config = babelHelpers.extends({}, config, {
            buttonNeutral: buttonNeutral.text || ''
          });
        }

        if (buttonNegative) {
          config = babelHelpers.extends({}, config, {
            buttonNegative: buttonNegative.text || ''
          });
        }

        if (buttonPositive) {
          config = babelHelpers.extends({}, config, {
            buttonPositive: buttonPositive.text || ''
          });
        }

        NativeModules.DialogManagerAndroid.showAlert(config, function (errorMessage) {
          return console.warn(errorMessage);
        }, function (action, buttonKey) {
          if (action === NativeModules.DialogManagerAndroid.buttonClicked) {
            if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {
              buttonNeutral.onPress && buttonNeutral.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {
              buttonNegative.onPress && buttonNegative.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {
              buttonPositive.onPress && buttonPositive.onPress();
            }
          } else if (action === NativeModules.DialogManagerAndroid.dismissed) {
            options && options.onDismiss && options.onDismiss();
          }
        });
      }
    }]);
    return AlertAndroid;
  }();

  module.exports = Alert;
},85,[86,17,1076]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTAlertManager = _require(_dependencyMap[0]).AlertManager;

  var AlertIOS = function () {
    function AlertIOS() {
      babelHelpers.classCallCheck(this, AlertIOS);
    }

    babelHelpers.createClass(AlertIOS, null, [{
      key: "alert",
      value: function alert(title, message, callbackOrButtons, type) {
        if (typeof type !== 'undefined') {
          console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          this.prompt(title, message, callbackOrButtons, type);
          return;
        }

        this.prompt(title, message, callbackOrButtons, 'default');
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments[4];
        var keyboardType = arguments[5];

        if (typeof type === 'function') {
          console.warn("You passed a callback function as the \"type\" argument to AlertIOS.prompt(). React Native is assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, keyboardType) and the old syntax will be removed in a future version.");
          var callback = type;
          RCTAlertManager.alertWithArgs({
            title: title || '',
            type: 'plain-text',
            defaultValue: message
          }, function (id, value) {
            callback(value);
          });
          return;
        }

        var callbacks = [];
        var buttons = [];
        var cancelButtonKey;
        var destructiveButtonKey;

        if (typeof callbackOrButtons === 'function') {
          callbacks = [callbackOrButtons];
        } else if (callbackOrButtons instanceof Array) {
          callbackOrButtons.forEach(function (btn, index) {
            callbacks[index] = btn.onPress;

            if (btn.style === 'cancel') {
              cancelButtonKey = String(index);
            } else if (btn.style === 'destructive') {
              destructiveButtonKey = String(index);
            }

            if (btn.text || index < (callbackOrButtons || []).length - 1) {
              var btnDef = {};
              btnDef[index] = btn.text || '';
              buttons.push(btnDef);
            }
          });
        }

        RCTAlertManager.alertWithArgs({
          title: title || '',
          message: message || undefined,
          buttons: buttons,
          type: type || undefined,
          defaultValue: defaultValue,
          cancelButtonKey: cancelButtonKey,
          destructiveButtonKey: destructiveButtonKey,
          keyboardType: keyboardType
        }, function (id, value) {
          var cb = callbacks[id];
          cb && cb(value);
        });
      }
    }]);
    return AlertIOS;
  }();

  module.exports = AlertIOS;
},86,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = _require(_dependencyMap[0]);

  var RCTLocationObserver = _require(_dependencyMap[1]).LocationObserver;

  var invariant = _require(_dependencyMap[2]);

  var logError = _require(_dependencyMap[3]);

  var warning = _require(_dependencyMap[4]);

  var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

  var Platform = _require(_dependencyMap[5]);

  var PermissionsAndroid = _require(_dependencyMap[6]);

  var subscriptions = [];
  var updatesEnabled = false;
  var Geolocation = {
    setRNConfiguration: function setRNConfiguration(config) {
      if (RCTLocationObserver.setConfiguration) {
        RCTLocationObserver.setConfiguration(config);
      }
    },
    requestAuthorization: function requestAuthorization() {
      RCTLocationObserver.requestAuthorization();
    },
    getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
      var hasPermission, status;
      return regeneratorRuntime.async(function getCurrentPosition$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
              hasPermission = true;

              if (!(Platform.Version >= 23)) {
                _context.next = 11;
                break;
              }

              _context.next = 5;
              return regeneratorRuntime.awrap(PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 5:
              hasPermission = _context.sent;

              if (hasPermission) {
                _context.next = 11;
                break;
              }

              _context.next = 9;
              return regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 9:
              status = _context.sent;
              hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;

            case 11:
              if (hasPermission) {
                RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
              }

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    watchPosition: function watchPosition(success, error, options) {
      if (!updatesEnabled) {
        RCTLocationObserver.startObserving(options || {});
        updatesEnabled = true;
      }

      var watchID = subscriptions.length;
      subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
      return watchID;
    },
    clearWatch: function clearWatch(watchID) {
      var sub = subscriptions[watchID];

      if (!sub) {
        return;
      }

      sub[0].remove();
      var sub1 = sub[1];
      sub1 && sub1.remove();
      subscriptions[watchID] = undefined;
      var noWatchers = true;

      for (var ii = 0; ii < subscriptions.length; ii++) {
        if (subscriptions[ii]) {
          noWatchers = false;
        }
      }

      if (noWatchers) {
        Geolocation.stopObserving();
      }
    },
    stopObserving: function stopObserving() {
      if (updatesEnabled) {
        RCTLocationObserver.stopObserving();
        updatesEnabled = false;

        for (var ii = 0; ii < subscriptions.length; ii++) {
          var sub = subscriptions[ii];

          if (sub) {
            warning(false, 'Called stopObserving with existing subscriptions.');
            sub[0].remove();
            var sub1 = sub[1];
            sub1 && sub1.remove();
          }
        }

        subscriptions = [];
      }
    }
  };
  module.exports = Geolocation;
},87,[70,17,15,88,29,1076,89]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var logError = function logError() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };

  module.exports = logError;
},88,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0]);

  var PermissionsAndroid = function () {
    function PermissionsAndroid() {
      babelHelpers.classCallCheck(this, PermissionsAndroid);
      this.PERMISSIONS = {
        READ_CALENDAR: 'android.permission.READ_CALENDAR',
        WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
        CAMERA: 'android.permission.CAMERA',
        READ_CONTACTS: 'android.permission.READ_CONTACTS',
        WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
        GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
        ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
        ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
        RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
        READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
        CALL_PHONE: 'android.permission.CALL_PHONE',
        READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
        WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
        ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
        USE_SIP: 'android.permission.USE_SIP',
        PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
        BODY_SENSORS: 'android.permission.BODY_SENSORS',
        SEND_SMS: 'android.permission.SEND_SMS',
        RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
        READ_SMS: 'android.permission.READ_SMS',
        RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
        RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
        READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
        WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
      };
      this.RESULTS = {
        GRANTED: 'granted',
        DENIED: 'denied',
        NEVER_ASK_AGAIN: 'never_ask_again'
      };
    }

    babelHelpers.createClass(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function requestPermission(permission, rationale) {
        var response;
        return regeneratorRuntime.async(function requestPermission$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                _context.next = 3;
                return regeneratorRuntime.awrap(this.request(permission, rationale));

              case 3:
                response = _context.sent;
                return _context.abrupt("return", response === this.RESULTS.GRANTED);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "request",
      value: function request(permission, rationale) {
        var shouldShowRationale;
        return regeneratorRuntime.async(function request$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!rationale) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return regeneratorRuntime.awrap(NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission));

              case 3:
                shouldShowRationale = _context2.sent;

                if (!shouldShowRationale) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  NativeModules.DialogManagerAndroid.showAlert(rationale, function () {
                    return reject(new Error('Error showing rationale'));
                  }, function () {
                    return resolve(NativeModules.PermissionsAndroid.requestPermission(permission));
                  });
                }));

              case 6:
                return _context2.abrupt("return", NativeModules.PermissionsAndroid.requestPermission(permission));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);
      }
    }]);
    return PermissionsAndroid;
  }();

  PermissionsAndroid = new PermissionsAndroid();
  module.exports = PermissionsAndroid;
},89,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      _require(_dependencyMap[0]).JSCHeapCapture.captureComplete(path, error);
    }
  };
  module.exports = HeapCapture;
},90,[17]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var SamplingProfiler = {
    poke: function poke(token) {
      var error = null;
      var result = null;

      try {
        result = global.pokeSamplingProfiler();

        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occurred when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }

      var _require = _require2(_dependencyMap[0]),
          JSCSamplingProfiler = _require.JSCSamplingProfiler;

      JSCSamplingProfiler.operationComplete(token, result, error);
    }
  };
  module.exports = SamplingProfiler;
},91,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook: function logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, [level].concat(babelHelpers.toConsumableArray(args)));
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler.apply(undefined, babelHelpers.toConsumableArray(args));
        }
      }
    },
    logToConsole: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_console = console)[logFn].apply(_console, babelHelpers.toConsumableArray(args));
    },
    setWarningHandler: function setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},92,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTDeviceEventEmitter = _require(_dependencyMap[0]);

  var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;
  module.exports = RCTNativeAppEventEmitter;
},93,[37]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = _require(_dependencyMap[0]);

  var infoLog = _require(_dependencyMap[1]);

  var performanceNow = global.nativePerformanceNow || _require(_dependencyMap[2]);

  var timespans = {};
  var extras = {};
  var cookies = {};
  var PRINT_TO_CONSOLE = false;
  var PerformanceLogger = {
    addTimespan: function addTimespan(key, lengthInMs, description) {
      if (timespans[key]) {
        return;
      }

      timespans[key] = {
        description: description,
        totalTime: lengthInMs
      };
    },
    startTimespan: function startTimespan(key, description) {
      if (timespans[key]) {
        return;
      }

      timespans[key] = {
        description: description,
        startTime: performanceNow()
      };
      cookies[key] = Systrace.beginAsyncEvent(key);
    },
    stopTimespan: function stopTimespan(key) {
      var timespan = timespans[key];

      if (!timespan || !timespan.startTime) {
        return;
      }

      if (timespan.endTime) {
        return;
      }

      timespan.endTime = performanceNow();
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
      Systrace.endAsyncEvent(key, cookies[key]);
      delete cookies[key];
    },
    clear: function clear() {
      timespans = {};
      extras = {};
    },
    clearCompleted: function clearCompleted() {
      for (var _key in timespans) {
        if (timespans[_key].totalTime) {
          delete timespans[_key];
        }
      }

      extras = {};
    },
    clearExceptTimespans: function clearExceptTimespans(keys) {
      timespans = Object.keys(timespans).reduce(function (previous, key) {
        if (keys.indexOf(key) !== -1) {
          previous[key] = timespans[key];
        }

        return previous;
      }, {});
      extras = {};
    },
    currentTimestamp: function currentTimestamp() {
      return performanceNow();
    },
    getTimespans: function getTimespans() {
      return timespans;
    },
    hasTimespan: function hasTimespan(key) {
      return !!timespans[key];
    },
    logTimespans: function logTimespans() {
      for (var _key2 in timespans) {
        if (timespans[_key2].totalTime) {
          infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');
        }
      }
    },
    addTimespans: function addTimespans(newTimespans, labels) {
      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
        var label = labels[ii / 2];
        PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
      }
    },
    setExtra: function setExtra(key, value) {
      if (extras[key]) {
        return;
      }

      extras[key] = value;
    },
    getExtras: function getExtras() {
      return extras;
    }
  };
  module.exports = PerformanceLogger;
},94,[21,95,26]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  }

  module.exports = infoLog;
},95,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var JSDevSupportModule = {
    getJSHierarchy: function getJSHierarchy(tag) {
      var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
      var renderers = hook._renderers;
      var keys = Object.keys(renderers);
      var renderer = renderers[keys[0]];
      var result = renderer.getInspectorDataForViewTag(tag);
      var path = result.hierarchy.map(function (item) {
        return item.name;
      }).join(' -> ');

      _require(_dependencyMap[0]).JSDevSupport.setResult(path, null);
    }
  };
  module.exports = JSDevSupportModule;
},96,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0]);

  var Platform = _require(_dependencyMap[1]);

  var defineLazyObjectProperty = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var UIManager = NativeModules.UIManager;
  invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');
  UIManager.__takeSnapshot = UIManager.takeSnapshot;

  UIManager.takeSnapshot = function () {
    invariant(false, "UIManager.takeSnapshot should not be called directly. Use ReactNative.takeSnapshot instead.");
  };

  if (UIManager.ViewManagerNames) {
    UIManager.ViewManagerNames.forEach(function (viewManagerName) {
      defineLazyObjectProperty(UIManager, viewManagerName, {
        get: function get() {
          return UIManager.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }

  module.exports = UIManager;
},97,[17,1076,31,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0]);

  var RCTEventEmitter = {
    register: function register(eventEmitter) {
      BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
    }
  };
  module.exports = RCTEventEmitter;
},98,[18]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0]);

  var UIManager = _require(_dependencyMap[1]);

  var TextInputState = {
    _currentlyFocusedID: null,
    currentlyFocusedField: function currentlyFocusedField() {
      return this._currentlyFocusedID;
    },
    focusTextInput: function focusTextInput(textFieldID) {
      if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = textFieldID;
        {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
        }
      }
    },
    blurTextInput: function blurTextInput(textFieldID) {
      if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = null;
        {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
        }
      }
    }
  };
  module.exports = TextInputState;
},99,[1076,97]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var deepDiffer = function deepDiffer(one, two) {
    if (one === two) {
      return false;
    }

    if (typeof one === 'function' && typeof two === 'function') {
      return false;
    }

    if (typeof one !== 'object' || one === null) {
      return one !== two;
    }

    if (typeof two !== 'object' || two === null) {
      return true;
    }

    if (one.constructor !== two.constructor) {
      return true;
    }

    if (Array.isArray(one)) {
      var len = one.length;

      if (two.length !== len) {
        return true;
      }

      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii])) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key])) {
          return true;
        }
      }

      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }

    return false;
  };

  module.exports = deepDiffer;
},100,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativePropRegistry;

  function getStyle(style) {
    if (ReactNativePropRegistry === undefined) {
      ReactNativePropRegistry = _require(_dependencyMap[0]);
    }

    if (typeof style === 'number') {
      return ReactNativePropRegistry.getByID(style);
    }

    return style;
  }

  function flattenStyle(style) {
    if (style == null) {
      return undefined;
    }

    if (!Array.isArray(style)) {
      return getStyle(style);
    }

    var result = {};

    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);

      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }

    return result;
  }

  module.exports = flattenStyle;
},101,[102]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativePropRegistry;
},102,[46]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _require(_dependencyMap[0]);
  }
},103,[104]);
__d(function (global, _require, module, exports, _dependencyMap) {
  /** @license React v16.3.1
   * react.production.min.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  var m = _require(_dependencyMap[0]),
      n = _require(_dependencyMap[1]),
      p = _require(_dependencyMap[2]),
      q = "function" === typeof Symbol && Symbol["for"],
      r = q ? Symbol["for"]("react.element") : 60103,
      t = q ? Symbol["for"]("react.portal") : 60106,
      u = q ? Symbol["for"]("react.fragment") : 60107,
      v = q ? Symbol["for"]("react.strict_mode") : 60108,
      w = q ? Symbol["for"]("react.provider") : 60109,
      x = q ? Symbol["for"]("react.context") : 60110,
      y = q ? Symbol["for"]("react.async_mode") : 60111,
      z = q ? Symbol["for"]("react.forward_ref") : 60112,
      A = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function B(a) {
    for (var b = arguments.length - 1, e = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++) {
      e += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]);
    }

    b = Error(e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
    b.name = "Invariant Violation";
    b.framesToPop = 1;
    throw b;
  }

  var C = {
    isMounted: function isMounted() {
      return false;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  };

  function D(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || C;
  }

  D.prototype.isReactComponent = {};

  D.prototype.setState = function (a, b) {
    "object" !== typeof a && "function" !== typeof a && null != a ? B("85") : void 0;
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  D.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  function E() {}

  E.prototype = D.prototype;

  function F(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || C;
  }

  var G = F.prototype = new E();
  G.constructor = F;
  m(G, D.prototype);
  G.isPureReactComponent = true;
  var H = {
    current: null
  },
      I = Object.prototype.hasOwnProperty,
      J = {
    key: true,
    ref: true,
    __self: true,
    __source: true
  };

  function K(a, b, e) {
    var c = void 0,
        d = {},
        g = null,
        h = null;
    if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (g = "" + b.key), b) {
      I.call(b, c) && !J.hasOwnProperty(c) && (d[c] = b[c]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;else if (1 < f) {
      for (var k = Array(f), l = 0; l < f; l++) {
        k[l] = arguments[l + 2];
      }

      d.children = k;
    }
    if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
      void 0 === d[c] && (d[c] = f[c]);
    }
    return {
      $$typeof: r,
      type: a,
      key: g,
      ref: h,
      props: d,
      _owner: H.current
    };
  }

  function L(a) {
    return "object" === typeof a && null !== a && a.$$typeof === r;
  }

  function escape(a) {
    var b = {
      "\x3d": "\x3d0",
      ":": "\x3d2"
    };
    return "$" + ("" + a).replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  var M = /\/+/g,
      N = [];

  function O(a, b, e, c) {
    if (N.length) {
      var d = N.pop();
      d.result = a;
      d.keyPrefix = b;
      d.func = e;
      d.context = c;
      d.count = 0;
      return d;
    }

    return {
      result: a,
      keyPrefix: b,
      func: e,
      context: c,
      count: 0
    };
  }

  function P(a) {
    a.result = null;
    a.keyPrefix = null;
    a.func = null;
    a.context = null;
    a.count = 0;
    10 > N.length && N.push(a);
  }

  function Q(a, b, e, c) {
    var d = typeof a;
    if ("undefined" === d || "boolean" === d) a = null;
    var g = false;
    if (null === a) g = true;else switch (d) {
      case "string":
      case "number":
        g = true;
        break;

      case "object":
        switch (a.$$typeof) {
          case r:
          case t:
            g = true;
        }

    }
    if (g) return e(c, a, "" === b ? "." + R(a, 0) : b), 1;
    g = 0;
    b = "" === b ? "." : b + ":";
    if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
      d = a[h];
      var f = b + R(d, h);
      g += Q(d, f, e, c);
    } else if (null === a || "undefined" === typeof a ? f = null : (f = A && a[A] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), h = 0; !(d = a.next()).done;) {
      d = d.value, f = b + R(d, h++), g += Q(d, f, e, c);
    } else "object" === d && (e = "" + a, B("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
    return g;
  }

  function R(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
  }

  function S(a, b) {
    a.func.call(a.context, b, a.count++);
  }

  function T(a, b, e) {
    var c = a.result,
        d = a.keyPrefix;
    a = a.func.call(a.context, b, a.count++);
    Array.isArray(a) ? U(a, c, e, p.thatReturnsArgument) : null != a && (L(a) && (b = d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(M, "$\x26/") + "/") + e, a = {
      $$typeof: r,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    }), c.push(a));
  }

  function U(a, b, e, c, d) {
    var g = "";
    null != e && (g = ("" + e).replace(M, "$\x26/") + "/");
    b = O(b, g, c, d);
    null == a || Q(a, "", T, b);
    P(b);
  }

  var V = {
    Children: {
      map: function map(a, b, e) {
        if (null == a) return a;
        var c = [];
        U(a, c, null, b, e);
        return c;
      },
      forEach: function forEach(a, b, e) {
        if (null == a) return a;
        b = O(null, null, b, e);
        null == a || Q(a, "", S, b);
        P(b);
      },
      count: function count(a) {
        return null == a ? 0 : Q(a, "", p.thatReturnsNull, null);
      },
      toArray: function toArray(a) {
        var b = [];
        U(a, b, null, p.thatReturnsArgument);
        return b;
      },
      only: function only(a) {
        L(a) ? void 0 : B("143");
        return a;
      }
    },
    createRef: function createRef() {
      return {
        current: null
      };
    },
    Component: D,
    PureComponent: F,
    createContext: function createContext(a, b) {
      void 0 === b && (b = null);
      a = {
        $$typeof: x,
        _calculateChangedBits: b,
        _defaultValue: a,
        _currentValue: a,
        _changedBits: 0,
        Provider: null,
        Consumer: null
      };
      a.Provider = {
        $$typeof: w,
        _context: a
      };
      return a.Consumer = a;
    },
    forwardRef: function forwardRef(a) {
      return {
        $$typeof: z,
        render: a
      };
    },
    Fragment: u,
    StrictMode: v,
    unstable_AsyncMode: y,
    createElement: K,
    cloneElement: function cloneElement(a, b, e) {
      var c = void 0,
          d = m({}, a.props),
          g = a.key,
          h = a.ref,
          f = a._owner;

      if (null != b) {
        void 0 !== b.ref && (h = b.ref, f = H.current);
        void 0 !== b.key && (g = "" + b.key);
        var k = void 0;
        a.type && a.type.defaultProps && (k = a.type.defaultProps);

        for (c in b) {
          I.call(b, c) && !J.hasOwnProperty(c) && (d[c] = void 0 === b[c] && void 0 !== k ? k[c] : b[c]);
        }
      }

      c = arguments.length - 2;
      if (1 === c) d.children = e;else if (1 < c) {
        k = Array(c);

        for (var l = 0; l < c; l++) {
          k[l] = arguments[l + 2];
        }

        d.children = k;
      }
      return {
        $$typeof: r,
        type: a.type,
        key: g,
        ref: h,
        props: d,
        _owner: f
      };
    },
    createFactory: function createFactory(a) {
      var b = K.bind(null, a);
      b.type = a;
      return b;
    },
    isValidElement: L,
    version: "16.3.1",
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      ReactCurrentOwner: H,
      assign: m
    }
  },
      W = Object.freeze({
    default: V
  }),
      X = W && V || W;
  module.exports = X["default"] ? X["default"] : X;
},104,[105,106,30]);
__d(function (global, _require, module, exports, _dependencyMap) {
	/*
 object-assign
 (c) Sindre Sorhus
 @license MIT
 */'use strict';

	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			var test1 = new String('abc');
			test1[5] = 'de';

			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			var test2 = {};

			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}

			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});

			if (order2.join('') !== '0123456789') {
				return false;
			}

			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});

			if (Object.keys(babelHelpers.extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);

				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
},105,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyObject = {};
  module.exports = emptyObject;
},106,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  module.exports = shallowEqual;
},107,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactFeatureFlags = {
    debugRenderPhaseSideEffects: false,
    debugRenderPhaseSideEffectsForStrictMode: false,
    warnAboutDeprecatedLifecycles: false
  };
  module.exports = ReactFeatureFlags;
},108,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var ColorPropType = _require(_dependencyMap[0]);

  var PropTypes = _require(_dependencyMap[1]);

  var React = _require(_dependencyMap[2]);

  var ReactNative = _require(_dependencyMap[3]);

  var ViewPropTypes = _require(_dependencyMap[4]);

  var requireNativeComponent = _require(_dependencyMap[5]);

  var STYLE_ATTRIBUTES = ['Horizontal', 'Normal', 'Small', 'Large', 'Inverse', 'SmallInverse', 'LargeInverse'];

  var indeterminateType = function indeterminateType(props, propName, componentName) {
    var checker = function checker() {
      var indeterminate = props[propName];
      var styleAttr = props.styleAttr;

      if (!indeterminate && styleAttr !== 'Horizontal') {
        return new Error('indeterminate=false is only valid for styleAttr=Horizontal');
      }
    };

    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    return PropTypes.bool.apply(PropTypes, [props, propName, componentName].concat(rest)) || checker();
  };

  var ProgressBarAndroid = (_temp = _class = function (_ReactNative$NativeCo) {
    babelHelpers.inherits(ProgressBarAndroid, _ReactNative$NativeCo);

    function ProgressBarAndroid() {
      babelHelpers.classCallCheck(this, ProgressBarAndroid);
      return babelHelpers.possibleConstructorReturn(this, (ProgressBarAndroid.__proto__ || Object.getPrototypeOf(ProgressBarAndroid)).apply(this, arguments));
    }

    babelHelpers.createClass(ProgressBarAndroid, [{
      key: "render",
      value: function render() {
        return React.createElement(AndroidProgressBar, this.props);
      }
    }]);
    return ProgressBarAndroid;
  }(ReactNative.NativeComponent), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    styleAttr: PropTypes.oneOf(STYLE_ATTRIBUTES),
    animating: PropTypes.bool,
    indeterminate: indeterminateType,
    progress: PropTypes.number,
    color: ColorPropType,
    testID: PropTypes.string
  }), _class.defaultProps = {
    styleAttr: 'Normal',
    indeterminate: true,
    animating: true
  }, _temp);
  var AndroidProgressBar = requireNativeComponent('AndroidProgressBar', ProgressBarAndroid, {
    nativeOnly: {
      animating: true
    }
  });
  module.exports = ProgressBarAndroid;
},1078,[43,121,111,46,136,147]);
__d(function (global, _require, module, exports, _dependencyMap) {
  {
    module.exports = _require(_dependencyMap[0])();
  }
},121,[122]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = _require(_dependencyMap[0]);

  function emptyFunction() {}

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      err.name = 'Invariant Violation';
      throw err;
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim
    };
    ReactPropTypes.checkPropTypes = emptyFunction;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},122,[123]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},123,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0]);
},111,[103]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var React = _require2(_dependencyMap[0]);

  var EdgeInsetsPropType = _require2(_dependencyMap[1]);

  var PlatformViewPropTypes = _require2(_dependencyMap[2]);

  var PropTypes = _require2(_dependencyMap[3]);

  var StyleSheetPropType = _require2(_dependencyMap[4]);

  var ViewStylePropTypes = _require2(_dependencyMap[5]);

  var _require = _require2(_dependencyMap[6]),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var stylePropType = StyleSheetPropType(ViewStylePropTypes);
  module.exports = babelHelpers.extends({}, PlatformViewPropTypes, {
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
    accessibilityViewIsModal: PropTypes.bool,
    accessibilityElementsHidden: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: EdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  });
},136,[111,137,142,121,144,128,145]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0]);

  var createStrictShapeTypeChecker = _require(_dependencyMap[1]);

  var EdgeInsetsPropType = createStrictShapeTypeChecker({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = EdgeInsetsPropType;
},137,[121,138]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var merge = _require(_dependencyMap[1]);

  function createStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + key + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
        rest[_key2 - 4] = arguments[_key2];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = createStrictShapeTypeChecker;
},138,[15,139]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var mergeInto = _require(_dependencyMap[0]);

  var merge = function merge(one, two) {
    var result = {};
    mergeInto(result, one);
    mergeInto(result, two);
    return result;
  };

  module.exports = merge;
},139,[140]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var mergeHelpers = _require(_dependencyMap[0]);

  var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
  var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

  function mergeInto(one, two) {
    checkMergeIntoObjectArg(one);

    if (two != null) {
      checkMergeObjectArg(two);

      for (var key in two) {
        if (!two.hasOwnProperty(key)) {
          continue;
        }

        one[key] = two[key];
      }
    }
  }

  module.exports = mergeInto;
},140,[141]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var MAX_MERGE_DEPTH = 36;

  var isTerminal = function isTerminal(o) {
    return typeof o !== 'object' || o instanceof Date || o === null;
  };

  var mergeHelpers = {
    MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
    isTerminal: isTerminal,
    normalizeMergeArg: function normalizeMergeArg(arg) {
      return arg === undefined || arg === null ? {} : arg;
    },
    checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
      invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
    },
    checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
      mergeHelpers.checkMergeObjectArg(one);
      mergeHelpers.checkMergeObjectArg(two);
    },
    checkMergeObjectArg: function checkMergeObjectArg(arg) {
      invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
    },
    checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
      invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
    },
    checkMergeLevel: function checkMergeLevel(level) {
      invariant(level < MAX_MERGE_DEPTH, "Maximum deep merge depth exceeded. You may be attempting to merge circular structures in an unsupported way.");
    },
    checkArrayStrategy: function checkArrayStrategy(strategy) {
      invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, "You must provide an array strategy to deep merge functions to instruct the deep merge how to resolve merging two arrays.");
    },
    ArrayStrategies: {
      Clobber: 'Clobber',
      Concat: 'Concat',
      IndexByIndex: 'IndexByIndex'
    }
  };
  module.exports = mergeHelpers;
},141,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var Platform = _require(_dependencyMap[0]);

  var TVViewPropTypes = {};

  if (Platform.isTV || true) {
    TVViewPropTypes = _require(_dependencyMap[1]);
  }

  module.exports = TVViewPropTypes;
},142,[1076,143]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0]);

  var TVViewPropTypes = {
    isTVSelectable: PropTypes.bool,
    hasTVPreferredFocus: PropTypes.bool,
    tvParallaxProperties: PropTypes.object,
    tvParallaxShiftDistanceX: PropTypes.number,
    tvParallaxShiftDistanceY: PropTypes.number,
    tvParallaxTiltAngle: PropTypes.number,
    tvParallaxMagnification: PropTypes.number
  };
  module.exports = TVViewPropTypes;
},143,[121]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var createStrictShapeTypeChecker = _require(_dependencyMap[0]);

  var flattenStyle = _require(_dependencyMap[1]);

  function StyleSheetPropType(shape) {
    var shapePropType = createStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = StyleSheetPropType;
},144,[138,101]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0]);

  var LayoutPropTypes = _require(_dependencyMap[1]);

  var ReactPropTypes = _require(_dependencyMap[2]);

  var ShadowPropTypesIOS = _require(_dependencyMap[3]);

  var TransformPropTypes = _require(_dependencyMap[4]);

  var ViewStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderTopColor: ColorPropType,
    borderRightColor: ColorPropType,
    borderBottomColor: ColorPropType,
    borderLeftColor: ColorPropType,
    borderStartColor: ColorPropType,
    borderEndColor: ColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });
  module.exports = ViewStylePropTypes;
},128,[43,120,121,124,125]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _require(_dependencyMap[0]);

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},120,[121]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0]);

  var ReactPropTypes = _require(_dependencyMap[1]);

  var ShadowPropTypesIOS = {
    shadowColor: ColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = ShadowPropTypesIOS;
},124,[43,121]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _require(_dependencyMap[0]);

  var deprecatedPropType = _require(_dependencyMap[1]);

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The transformMatrix style property is deprecated. Use `transform: [{ matrix: ... }]` instead.");
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The decomposedMatrix style property is deprecated. Use `transform: [...]` instead.");
    }
  };

  var TransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = TransformPropTypes;
},125,[121,126]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var UIManager = _require(_dependencyMap[0]);

  function deprecatedPropType(propType, explanation) {
    return function validate(props, propName, componentName) {
      if (!UIManager[componentName] && props[propName] !== undefined) {
        console.warn("`" + propName + "` supplied to `" + componentName + "` has been deprecated. " + explanation);
      }

      for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      return propType.apply(undefined, [props, propName, componentName].concat(rest));
    };
  }

  module.exports = deprecatedPropType;
},126,[97]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    AccessibilityTraits: ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'],
    AccessibilityComponentTypes: ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked']
  };
},145,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0]);

  var ReactNativeBridgeEventPlugin = _require(_dependencyMap[1]);

  var ReactNativeStyleAttributes = _require(_dependencyMap[2]);

  var UIManager = _require(_dependencyMap[3]);

  var createReactNativeComponentClass = _require(_dependencyMap[4]);

  var insetsDiffer = _require(_dependencyMap[5]);

  var matricesDiffer = _require(_dependencyMap[6]);

  var pointsDiffer = _require(_dependencyMap[7]);

  var processColor = _require(_dependencyMap[8]);

  var resolveAssetSource = _require(_dependencyMap[9]);

  var sizesDiffer = _require(_dependencyMap[10]);

  var verifyPropTypes = _require(_dependencyMap[11]);

  var invariant = _require(_dependencyMap[12]);

  var warning = _require(_dependencyMap[13]);

  var hasAttachedDefaultEventTypes = false;

  function requireNativeComponent(viewName, componentInterface, extraConfig) {
    function attachDefaultEventTypes(viewConfig) {
      {
        if (UIManager.ViewManagerNames) {
          viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
        } else {
          viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, UIManager.genericBubblingEventTypes);
          viewConfig.directEventTypes = merge(viewConfig.directEventTypes, UIManager.genericDirectEventTypes);
        }
      }
    }

    function merge(destination, source) {
      if (!source) {
        return destination;
      }

      if (!destination) {
        return source;
      }

      for (var key in source) {
        if (!source.hasOwnProperty(key)) {
          continue;
        }

        var sourceValue = source[key];

        if (destination.hasOwnProperty(key)) {
          var destinationValue = destination[key];

          if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
            sourceValue = merge(destinationValue, sourceValue);
          }
        }

        destination[key] = sourceValue;
      }

      return destination;
    }

    function getViewConfig() {
      var viewConfig = UIManager[viewName];
      invariant(viewConfig != null && !viewConfig.NativeProps != null, 'Native component for "%s" does not exist', viewName);
      viewConfig.uiViewClassName = viewName;
      viewConfig.validAttributes = {};

      if (componentInterface) {
        viewConfig.propTypes = typeof componentInterface.__propTypesSecretDontUseThesePlease === 'object' ? componentInterface.__propTypesSecretDontUseThesePlease : componentInterface.propTypes;
      } else {
        viewConfig.propTypes = null;
      }

      var baseModuleName = viewConfig.baseModuleName;
      var bubblingEventTypes = viewConfig.bubblingEventTypes;
      var directEventTypes = viewConfig.directEventTypes;
      var nativeProps = viewConfig.NativeProps;

      while (baseModuleName) {
        var baseModule = UIManager[baseModuleName];

        if (!baseModule) {
          warning(false, 'Base module "%s" does not exist', baseModuleName);
          baseModuleName = null;
        } else {
          bubblingEventTypes = babelHelpers.extends({}, baseModule.bubblingEventTypes, bubblingEventTypes);
          directEventTypes = babelHelpers.extends({}, baseModule.directEventTypes, directEventTypes);
          nativeProps = babelHelpers.extends({}, baseModule.NativeProps, nativeProps);
          baseModuleName = baseModule.baseModuleName;
        }
      }

      viewConfig.bubblingEventTypes = bubblingEventTypes;
      viewConfig.directEventTypes = directEventTypes;

      for (var key in nativeProps) {
        var useAttribute = false;
        var attribute = {};
        var differ = TypeToDifferMap[nativeProps[key]];

        if (differ) {
          attribute.diff = differ;
          useAttribute = true;
        }

        var processor = TypeToProcessorMap[nativeProps[key]];

        if (processor) {
          attribute.process = processor;
          useAttribute = true;
        }

        viewConfig.validAttributes[key] = useAttribute ? attribute : true;
      }

      viewConfig.validAttributes.style = ReactNativeStyleAttributes;

      if (!hasAttachedDefaultEventTypes) {
        attachDefaultEventTypes(viewConfig);
        hasAttachedDefaultEventTypes = true;
      }

      ReactNativeBridgeEventPlugin.processEventTypes(viewConfig);
      return viewConfig;
    }

    return createReactNativeComponentClass(viewName, getViewConfig);
  }

  var TypeToDifferMap = {
    CATransform3D: matricesDiffer,
    CGPoint: pointsDiffer,
    CGSize: sizesDiffer,
    UIEdgeInsets: insetsDiffer
  };

  function processColorArray(colors) {
    return colors && colors.map(processColor);
  }

  var TypeToProcessorMap = {
    CGColor: processColor,
    CGColorArray: processColorArray,
    UIColor: processColor,
    UIColorArray: processColorArray,
    CGImage: resolveAssetSource,
    UIImage: resolveAssetSource,
    RCTImageSource: resolveAssetSource,
    Color: processColor,
    ColorArray: processColorArray
  };
  module.exports = requireNativeComponent;
},147,[1076,148,116,97,149,150,151,152,129,153,132,157,15,29]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeBridgeEventPlugin;
},148,[46]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ImageStylePropTypes = _require(_dependencyMap[0]);

  var TextStylePropTypes = _require(_dependencyMap[1]);

  var ViewStylePropTypes = _require(_dependencyMap[2]);

  var keyMirror = _require(_dependencyMap[3]);

  var processColor = _require(_dependencyMap[4]);

  var processTransform = _require(_dependencyMap[5]);

  var sizesDiffer = _require(_dependencyMap[6]);

  var ReactNativeStyleAttributes = babelHelpers.extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));
  ReactNativeStyleAttributes.transform = {
    process: processTransform
  };
  ReactNativeStyleAttributes.shadowOffset = {
    diff: sizesDiffer
  };
  var colorAttributes = {
    process: processColor
  };
  ReactNativeStyleAttributes.backgroundColor = colorAttributes;
  ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
  ReactNativeStyleAttributes.borderColor = colorAttributes;
  ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
  ReactNativeStyleAttributes.borderRightColor = colorAttributes;
  ReactNativeStyleAttributes.borderTopColor = colorAttributes;
  ReactNativeStyleAttributes.borderStartColor = colorAttributes;
  ReactNativeStyleAttributes.borderEndColor = colorAttributes;
  ReactNativeStyleAttributes.color = colorAttributes;
  ReactNativeStyleAttributes.shadowColor = colorAttributes;
  ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
  ReactNativeStyleAttributes.tintColor = colorAttributes;
  ReactNativeStyleAttributes.textShadowColor = colorAttributes;
  ReactNativeStyleAttributes.overlayColor = colorAttributes;
  module.exports = ReactNativeStyleAttributes;
},116,[117,127,128,119,129,130,132]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0]);

  var ImageResizeMode = _require(_dependencyMap[1]);

  var LayoutPropTypes = _require(_dependencyMap[2]);

  var ReactPropTypes = _require(_dependencyMap[3]);

  var ShadowPropTypesIOS = _require(_dependencyMap[4]);

  var TransformPropTypes = _require(_dependencyMap[5]);

  var ImageStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: ColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });
  module.exports = ImageStylePropTypes;
},117,[43,118,120,121,124,125]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var keyMirror = _require(_dependencyMap[0]);

  var ImageResizeMode = keyMirror({
    contain: null,
    cover: null,
    stretch: null,
    center: null,
    repeat: null
  });
  module.exports = ImageResizeMode;
},118,[119]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? invariant(false) : void 0;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},119,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0]);

  var ReactPropTypes = _require(_dependencyMap[1]);

  var ViewStylePropTypes = _require(_dependencyMap[2]);

  var TextStylePropTypes = babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: ColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: ColorPropType,
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });
  module.exports = TextStylePropTypes;
},127,[43,121,128]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0]);

  var normalizeColor = _require(_dependencyMap[1]);

  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }

    var int32Color = normalizeColor(color);

    if (int32Color === null || int32Color === undefined) {
      return undefined;
    }

    int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;
    {
      int32Color = int32Color | 0x0;
    }
    return int32Color;
  }

  module.exports = processColor;
},129,[1076,44]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MatrixMath = _require(_dependencyMap[0]);

  var Platform = _require(_dependencyMap[1]);

  var invariant = _require(_dependencyMap[2]);

  var stringifySafe = _require(_dependencyMap[3]);

  function processTransform(transform) {
    {
      return transform;
    }
    var result = MatrixMath.createIdentityMatrix();
    transform.forEach(function (transformation) {
      var key = Object.keys(transformation)[0];
      var value = transformation[key];

      switch (key) {
        case 'matrix':
          MatrixMath.multiplyInto(result, result, value);
          break;

        case 'perspective':
          _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);

          break;

        case 'rotateX':
          _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);

          break;

        case 'rotateY':
          _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);

          break;

        case 'rotate':
        case 'rotateZ':
          _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);

          break;

        case 'scale':
          _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);

          break;

        case 'scaleX':
          _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);

          break;

        case 'scaleY':
          _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);

          break;

        case 'translate':
          _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);

          break;

        case 'translateX':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);

          break;

        case 'translateY':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);

          break;

        case 'skewX':
          _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);

          break;

        case 'skewY':
          _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);

          break;

        default:
          throw new Error('Invalid transform name: ' + key);
      }
    });
    return result;
  }

  function _multiplyTransform(result, matrixMathFunction, args) {
    var matrixToApply = MatrixMath.createIdentityMatrix();
    var argsWithIdentity = [matrixToApply].concat(args);
    matrixMathFunction.apply(this, argsWithIdentity);
    MatrixMath.multiplyInto(result, result, matrixToApply);
  }

  function _convertToRadians(value) {
    var floatValue = parseFloat(value);
    return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
  }

  function _validateTransforms(transform) {
    transform.forEach(function (transformation) {
      var keys = Object.keys(transformation);
      invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
      var key = keys[0];
      var value = transformation[key];

      _validateTransform(key, value, transformation);
    });
  }

  function _validateTransform(key, value, transformation) {
    invariant(!value.getValue, "You passed an Animated.Value to a normal component. You need to wrap that component in an Animated. For example, replace <View /> by <Animated.View />.");
    var multivalueTransforms = ['matrix', 'translate'];

    if (multivalueTransforms.indexOf(key) !== -1) {
      invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
    }

    switch (key) {
      case 'matrix':
        invariant(value.length === 9 || value.length === 16, "Matrix transform must have a length of 9 (2d) or 16 (3d). Provided matrix has a length of %s: %s", value.length, stringifySafe(transformation));
        break;

      case 'translate':
        invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'rotateX':
      case 'rotateY':
      case 'rotateZ':
      case 'rotate':
      case 'skewX':
      case 'skewY':
        invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
        invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, "Rotate transform must be expressed in degrees (deg) or radians (rad): %s", stringifySafe(transformation));
        break;

      case 'perspective':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
        break;

      case 'translateX':
      case 'translateY':
      case 'scale':
      case 'scaleX':
      case 'scaleY':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        break;

      default:
        invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
    }
  }

  module.exports = processTransform;
},130,[131,1076,15,23]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var MatrixMath = {
    createIdentityMatrix: function createIdentityMatrix() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    createCopy: function createCopy(m) {
      return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
    },
    createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
      var a = 2 / (right - left);
      var b = 2 / (top - bottom);
      var c = -2 / (far - near);
      var tx = -(right + left) / (right - left);
      var ty = -(top + bottom) / (top - bottom);
      var tz = -(far + near) / (far - near);
      return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
    },
    createFrustum: function createFrustum(left, right, bottom, top, near, far) {
      var r_width = 1 / (right - left);
      var r_height = 1 / (top - bottom);
      var r_depth = 1 / (near - far);
      var x = 2 * (near * r_width);
      var y = 2 * (near * r_height);
      var A = (right + left) * r_width;
      var B = (top + bottom) * r_height;
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
    },
    createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
      var h = 1 / Math.tan(fovInRadians / 2);
      var r_depth = 1 / (near - far);
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
    },
    createTranslate2d: function createTranslate2d(x, y) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseTranslate2dCommand(mat, x, y);
      return mat;
    },
    reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
    },
    reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
      matrixCommand[14] = z;
    },
    createScale: function createScale(factor) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseScaleCommand(mat, factor);
      return mat;
    },
    reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
      matrixCommand[5] = factor;
    },
    reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
      matrixCommand[0] = x;
      matrixCommand[5] = y;
      matrixCommand[10] = z;
    },
    reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
      matrixCommand[11] = -1 / p;
    },
    reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
    },
    reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
      matrixCommand[5] = factor;
    },
    reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
      matrixCommand[10] = factor;
    },
    reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
      matrixCommand[5] = Math.cos(radians);
      matrixCommand[6] = Math.sin(radians);
      matrixCommand[9] = -Math.sin(radians);
      matrixCommand[10] = Math.cos(radians);
    },
    reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
      matrixCommand[0] = Math.cos(amount);
      matrixCommand[2] = -Math.sin(amount);
      matrixCommand[8] = Math.sin(amount);
      matrixCommand[10] = Math.cos(amount);
    },
    reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
      matrixCommand[0] = Math.cos(radians);
      matrixCommand[1] = Math.sin(radians);
      matrixCommand[4] = -Math.sin(radians);
      matrixCommand[5] = Math.cos(radians);
    },
    createRotateZ: function createRotateZ(radians) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseRotateZCommand(mat, radians);
      return mat;
    },
    reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
      matrixCommand[4] = Math.tan(radians);
    },
    reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
      matrixCommand[1] = Math.tan(radians);
    },
    multiplyInto: function multiplyInto(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11],
          a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    },
    determinant: function determinant(matrix) {
      var _matrix = babelHelpers.slicedToArray(matrix, 16),
          m00 = _matrix[0],
          m01 = _matrix[1],
          m02 = _matrix[2],
          m03 = _matrix[3],
          m10 = _matrix[4],
          m11 = _matrix[5],
          m12 = _matrix[6],
          m13 = _matrix[7],
          m20 = _matrix[8],
          m21 = _matrix[9],
          m22 = _matrix[10],
          m23 = _matrix[11],
          m30 = _matrix[12],
          m31 = _matrix[13],
          m32 = _matrix[14],
          m33 = _matrix[15];

      return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
    },
    inverse: function inverse(matrix) {
      var det = MatrixMath.determinant(matrix);

      if (!det) {
        return matrix;
      }

      var _matrix2 = babelHelpers.slicedToArray(matrix, 16),
          m00 = _matrix2[0],
          m01 = _matrix2[1],
          m02 = _matrix2[2],
          m03 = _matrix2[3],
          m10 = _matrix2[4],
          m11 = _matrix2[5],
          m12 = _matrix2[6],
          m13 = _matrix2[7],
          m20 = _matrix2[8],
          m21 = _matrix2[9],
          m22 = _matrix2[10],
          m23 = _matrix2[11],
          m30 = _matrix2[12],
          m31 = _matrix2[13],
          m32 = _matrix2[14],
          m33 = _matrix2[15];

      return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
    },
    transpose: function transpose(m) {
      return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
    },
    multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
      var _v = babelHelpers.slicedToArray(v, 4),
          vx = _v[0],
          vy = _v[1],
          vz = _v[2],
          vw = _v[3];

      return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
    },
    v3Length: function v3Length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    },
    v3Normalize: function v3Normalize(vector, v3Length) {
      var im = 1 / (v3Length || MatrixMath.v3Length(vector));
      return [vector[0] * im, vector[1] * im, vector[2] * im];
    },
    v3Dot: function v3Dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    },
    v3Combine: function v3Combine(a, b, aScale, bScale) {
      return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
    },
    v3Cross: function v3Cross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    },
    quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
      var _q = babelHelpers.slicedToArray(q, 4),
          qx = _q[0],
          qy = _q[1],
          qz = _q[2],
          qw = _q[3];

      var qw2 = qw * qw;
      var qx2 = qx * qx;
      var qy2 = qy * qy;
      var qz2 = qz * qz;
      var test = qx * qy + qz * qw;
      var unit = qw2 + qx2 + qy2 + qz2;
      var conv = 180 / Math.PI;

      if (test > 0.49999 * unit) {
        return [0, 2 * Math.atan2(qx, qw) * conv, 90];
      }

      if (test < -0.49999 * unit) {
        return [0, -2 * Math.atan2(qx, qw) * conv, -90];
      }

      return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
    },
    roundTo3Places: function roundTo3Places(n) {
      var arr = n.toString().split('e');
      return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
    },
    decomposeMatrix: function decomposeMatrix(transformMatrix) {
      invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);
      var perspective = [];
      var quaternion = [];
      var scale = [];
      var skew = [];
      var translation = [];

      if (!transformMatrix[15]) {
        return;
      }

      var matrix = [];
      var perspectiveMatrix = [];

      for (var i = 0; i < 4; i++) {
        matrix.push([]);

        for (var j = 0; j < 4; j++) {
          var value = transformMatrix[i * 4 + j] / transformMatrix[15];
          matrix[i].push(value);
          perspectiveMatrix.push(j === 3 ? 0 : value);
        }
      }

      perspectiveMatrix[15] = 1;

      if (!MatrixMath.determinant(perspectiveMatrix)) {
        return;
      }

      if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
        var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];
        var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
        var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
        var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
      } else {
        perspective[0] = perspective[1] = perspective[2] = 0;
        perspective[3] = 1;
      }

      for (var i = 0; i < 3; i++) {
        translation[i] = matrix[3][i];
      }

      var row = [];

      for (i = 0; i < 3; i++) {
        row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
      }

      scale[0] = MatrixMath.v3Length(row[0]);
      row[0] = MatrixMath.v3Normalize(row[0], scale[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      scale[1] = MatrixMath.v3Length(row[1]);
      row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
      skew[0] /= scale[1];
      skew[1] = MatrixMath.v3Dot(row[0], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
      skew[2] = MatrixMath.v3Dot(row[1], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);
      scale[2] = MatrixMath.v3Length(row[2]);
      row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
      skew[1] /= scale[2];
      skew[2] /= scale[2];
      var pdum3 = MatrixMath.v3Cross(row[1], row[2]);

      if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
        for (i = 0; i < 3; i++) {
          scale[i] *= -1;
          row[i][0] *= -1;
          row[i][1] *= -1;
          row[i][2] *= -1;
        }
      }

      quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
      quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
      quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
      quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

      if (row[2][1] > row[1][2]) {
        quaternion[0] = -quaternion[0];
      }

      if (row[0][2] > row[2][0]) {
        quaternion[1] = -quaternion[1];
      }

      if (row[1][0] > row[0][1]) {
        quaternion[2] = -quaternion[2];
      }

      var rotationDegrees;

      if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
        rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
      } else {
        rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
      }

      return {
        rotationDegrees: rotationDegrees,
        perspective: perspective,
        quaternion: quaternion,
        scale: scale,
        skew: skew,
        translation: translation,
        rotate: rotationDegrees[2],
        rotateX: rotationDegrees[0],
        rotateY: rotationDegrees[1],
        scaleX: scale[0],
        scaleY: scale[1],
        translateX: translation[0],
        translateY: translation[1]
      };
    }
  };
  module.exports = MatrixMath;
},131,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };

  var sizesDiffer = function sizesDiffer(one, two) {
    one = one || dummySize;
    two = two || dummySize;
    return one !== two && (one.width !== two.width || one.height !== two.height);
  };

  module.exports = sizesDiffer;
},132,[]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.createReactNativeComponentClass;
},149,[46]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };

  var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };

  module.exports = insetsDiffer;
},150,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }

    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };

  module.exports = matricesDiffer;
},151,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };

  var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };

  module.exports = pointsDiffer;
},152,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AssetRegistry = _require(_dependencyMap[0]);

  var AssetSourceResolver = _require(_dependencyMap[1]);

  var _customSourceTransformer = void 0,
      _serverURL = void 0,
      _scriptURL = void 0;

  var _sourceCodeScriptURL = void 0;

  function getDevServerURL() {
    if (_serverURL === undefined) {
      var match = _sourceCodeScriptURL && _sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }

    return _serverURL;
  }

  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        return null;
      }

      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

      if (!scriptURL.includes('://')) {
        scriptURL = 'file://' + scriptURL;
      }
    }

    return scriptURL;
  }

  function getScriptURL() {
    if (_scriptURL === undefined) {
      _scriptURL = _coerceLocalScriptURL(_sourceCodeScriptURL);
    }

    return _scriptURL;
  }

  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }

  function resolveAssetSource(source) {
    if (typeof source === 'object') {
      return source;
    }

    var asset = AssetRegistry.getAssetByID(source);

    if (!asset) {
      return null;
    }

    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }

    return resolver.defaultAsset();
  }

  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

  if (!sourceCode) {
    var NativeModules = _require(_dependencyMap[2]);

    sourceCode = NativeModules && NativeModules.SourceCode;
  }

  _sourceCodeScriptURL = sourceCode && sourceCode.scriptURL;
  module.exports = resolveAssetSource;
  module.exports.pickScale = AssetSourceResolver.pickScale;
  module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
},153,[154,155,17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var assets = [];

  function registerAsset(asset) {
    return assets.push(asset);
  }

  function getAssetByID(assetId) {
    return assets[assetId - 1];
  }

  module.exports = {
    registerAsset: registerAsset,
    getAssetByID: getAssetByID
  };
},154,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PixelRatio = _require(_dependencyMap[0]);

  var Platform = _require(_dependencyMap[1]);

  var assetPathUtils = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  function getScaledAssetPath(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = assetPathUtils.getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }

  function getAssetPathInDrawableFolder(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
    var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
    return drawbleFolder + '/' + fileName + '.' + asset.type;
  }

  var AssetSourceResolver = function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      babelHelpers.classCallCheck(this, AssetSourceResolver);
      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }

    babelHelpers.createClass(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }

        {
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        invariant(!!this.serverUrl, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + "android" + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        invariant(true, 'resource identifiers work on Android');
        return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
        };
      }
    }], [{
      key: "pickScale",
      value: function pickScale(scales, deviceScale) {
        for (var i = 0; i < scales.length; i++) {
          if (scales[i] >= deviceScale) {
            return scales[i];
          }
        }

        return scales[scales.length - 1] || 1;
      }
    }]);
    return AssetSourceResolver;
  }();

  module.exports = AssetSourceResolver;
},155,[113,1076,156,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = _require(_dependencyMap[0]);

  var PixelRatio = function () {
    function PixelRatio() {
      babelHelpers.classCallCheck(this, PixelRatio);
    }

    babelHelpers.createClass(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return Dimensions.get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);
    return PixelRatio;
  }();

  module.exports = PixelRatio;
},113,[114]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = _require(_dependencyMap[0]);

  var Platform = _require(_dependencyMap[1]);

  var RCTDeviceEventEmitter = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var eventEmitter = new EventEmitter();
  var dimensionsInitialized = false;
  var dimensions = {};

  var Dimensions = function () {
    function Dimensions() {
      babelHelpers.classCallCheck(this, Dimensions);
    }

    babelHelpers.createClass(Dimensions, null, [{
      key: "set",
      value: function set(dims) {
        if (dims && dims.windowPhysicalPixels) {
          dims = JSON.parse(JSON.stringify(dims));
          var windowPhysicalPixels = dims.windowPhysicalPixels;
          dims.window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };
          {
            var screenPhysicalPixels = dims.screenPhysicalPixels;
            dims.screen = {
              width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
              height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
              scale: screenPhysicalPixels.scale,
              fontScale: screenPhysicalPixels.fontScale
            };
            delete dims.screenPhysicalPixels;
          }
          delete dims.windowPhysicalPixels;
        }

        babelHelpers.extends(dimensions, dims);

        if (dimensionsInitialized) {
          eventEmitter.emit('change', {
            window: dimensions.window,
            screen: dimensions.screen
          });
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "get",
      value: function get(dim) {
        invariant(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        eventEmitter.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
        eventEmitter.removeListener(type, handler);
      }
    }]);
    return Dimensions;
  }();

  var dims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;
  var nativeExtensionsEnabled = true;

  if (!dims) {
    var DeviceInfo = _require(_dependencyMap[4]);

    dims = DeviceInfo.Dimensions;
    nativeExtensionsEnabled = false;
  }

  invariant(dims, 'Either DeviceInfo native extension or DeviceInfo Native Module must be registered');
  Dimensions.set(dims);

  if (!nativeExtensionsEnabled) {
    RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
      Dimensions.set(update);
    });
  }

  module.exports = Dimensions;
},114,[38,1076,37,15,115]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceInfo = _require(_dependencyMap[0]).DeviceInfo;

  var invariant = _require(_dependencyMap[1]);

  invariant(DeviceInfo, 'DeviceInfo native module is not installed correctly');
  module.exports = DeviceInfo;
},115,[17,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function getAndroidAssetSuffix(scale) {
    switch (scale) {
      case 0.75:
        return 'ldpi';

      case 1:
        return 'mdpi';

      case 1.5:
        return 'hdpi';

      case 2:
        return 'xhdpi';

      case 3:
        return 'xxhdpi';

      case 4:
        return 'xxxhdpi';
    }

    throw new Error('no such scale');
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error('Don\'t know which android drawable suffix to use for asset: ' + JSON.stringify(asset));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},156,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = _require(_dependencyMap[0]);

  function verifyPropTypes(componentInterface, viewConfig, nativePropsToIgnore) {
    if (!viewConfig) {
      return;
    }

    var componentName = componentInterface.displayName || componentInterface.name || 'unknown';
    var propTypes = componentInterface.__propTypesSecretDontUseThesePlease || componentInterface.propTypes;

    if (!propTypes) {
      return;
    }

    var nativeProps = viewConfig.NativeProps;

    for (var prop in nativeProps) {
      if (!propTypes[prop] && !ReactNativeStyleAttributes[prop] && (!nativePropsToIgnore || !nativePropsToIgnore[prop])) {
        var message;

        if (propTypes.hasOwnProperty(prop)) {
          message = '`' + componentName + '` has incorrectly defined propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop];
        } else {
          message = '`' + componentName + '` has no propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop] + '`';
        }

        message += "\nIf you haven't changed this prop yourself, this usually means that your versions of the native code and JavaScript code are out of sync. Updating both should make this error go away.";
        throw new Error(message);
      }
    }
  }

  module.exports = verifyPropTypes;
},157,[116]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PixelRatio = _require(_dependencyMap[0]);

  var ReactNativePropRegistry = _require(_dependencyMap[1]);

  var ReactNativeStyleAttributes = _require(_dependencyMap[2]);

  var StyleSheetValidation = _require(_dependencyMap[3]);

  var flatten = _require(_dependencyMap[4]);

  var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);

  if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
  }

  var absoluteFillObject = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
  module.exports = {
    hairlineWidth: hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFillObject,
    compose: function compose(style1, style2) {
      if (style1 != null && style2 != null) {
        return [style1, style2];
      } else {
        return style1 != null ? style1 : style2;
      }
    },
    flatten: flatten,
    setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
      var value = void 0;

      if (typeof ReactNativeStyleAttributes[property] === 'string') {
        value = {};
      } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
        value = ReactNativeStyleAttributes[property];
      } else {
        console.error(property + " is not a valid style attribute");
        return;
      }

      ReactNativeStyleAttributes[property] = babelHelpers.extends({}, value, {
        process: process
      });
    },
    create: function create(obj) {
      var result = {};

      for (var key in obj) {
        StyleSheetValidation.validateStyle(key, obj);
        result[key] = obj[key] && ReactNativePropRegistry.register(obj[key]);
      }

      return result;
    }
  };
},112,[113,102,116,133,101]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ImageStylePropTypes = _require(_dependencyMap[0]);

  var TextStylePropTypes = _require(_dependencyMap[1]);

  var ViewStylePropTypes = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var StyleSheetValidation = function () {
    function StyleSheetValidation() {
      babelHelpers.classCallCheck(this, StyleSheetValidation);
    }

    babelHelpers.createClass(StyleSheetValidation, null, [{
      key: "validateStyleProp",
      value: function validateStyleProp(prop, style, caller) {
        {
          return;
        }

        if (allStylePropTypes[prop] === undefined) {
          var message1 = '"' + prop + '" is not a valid style property.';
          var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
          styleError(message1, style, caller, message2);
        }

        var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

        if (error) {
          styleError(error.message, style, caller);
        }
      }
    }, {
      key: "validateStyle",
      value: function validateStyle(name, styles) {
        {
          return;
        }

        for (var prop in styles[name]) {
          StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
        }
      }
    }, {
      key: "addValidStylePropTypes",
      value: function addValidStylePropTypes(stylePropTypes) {
        for (var key in stylePropTypes) {
          allStylePropTypes[key] = stylePropTypes[key];
        }
      }
    }]);
    return StyleSheetValidation;
  }();

  var styleError = function styleError(message1, style, caller, message2) {
    invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
  };

  var allStylePropTypes = {};
  StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);
  module.exports = StyleSheetValidation;
},133,[117,127,128,15]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp2;

  var Platform = _require2(_dependencyMap[0]);

  var React = _require2(_dependencyMap[1]);

  var ReactNative = _require2(_dependencyMap[2]);

  var ReactNativeStyleAttributes = _require2(_dependencyMap[3]);

  var ReactNativeViewAttributes = _require2(_dependencyMap[4]);

  var ViewPropTypes = _require2(_dependencyMap[5]);

  var _require = _require2(_dependencyMap[6]),
      ViewContextTypes = _require.ViewContextTypes;

  var invariant = _require2(_dependencyMap[7]);

  var requireNativeComponent = _require2(_dependencyMap[8]);

  var View = (_temp2 = _class = function (_ReactNative$NativeCo) {
    babelHelpers.inherits(View, _ReactNative$NativeCo);

    function View() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, View);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = View.__proto__ || Object.getPrototypeOf(View)).call.apply(_ref, [this].concat(args))), _this), _this.viewConfig = {
        uiViewClassName: 'RCTView',
        validAttributes: ReactNativeViewAttributes.RCTView
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(View, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          isInAParentText: false
        };
      }
    }, {
      key: "render",
      value: function render() {
        invariant(!(this.context.isInAParentText && true), 'Nesting of <View> within <Text> is not supported on Android.');
        return React.createElement(RCTView, this.props);
      }
    }]);
    return View;
  }(ReactNative.NativeComponent), _class.propTypes = ViewPropTypes, _class.childContextTypes = ViewContextTypes, _temp2);
  var RCTView = requireNativeComponent('RCTView', View, {
    nativeOnly: {
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true
    }
  });
  var ViewToExport = RCTView;
  module.exports = ViewToExport;
},134,[1076,111,46,116,135,136,146,15,147]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = _require(_dependencyMap[0]);

  var ReactNativeViewAttributes = {};
  ReactNativeViewAttributes.UIView = {
    pointerEvents: true,
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityComponentType: true,
    accessibilityLiveRegion: true,
    accessibilityTraits: true,
    importantForAccessibility: true,
    nativeID: true,
    testID: true,
    renderToHardwareTextureAndroid: true,
    shouldRasterizeIOS: true,
    onLayout: true,
    onAccessibilityAction: true,
    onAccessibilityTap: true,
    onMagicTap: true,
    collapsable: true,
    needsOffscreenAlphaCompositing: true,
    style: ReactNativeStyleAttributes
  };
  ReactNativeViewAttributes.RCTView = babelHelpers.extends({}, ReactNativeViewAttributes.UIView, {
    removeClippedSubviews: true
  });
  module.exports = ReactNativeViewAttributes;
},135,[116]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var PropTypes = _require(_dependencyMap[0]);

  var ViewContextTypes = exports.ViewContextTypes = {
    isInAParentText: PropTypes.bool
  };
},146,[121]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0]);

  var factory = _require(_dependencyMap[1]);

  if (typeof React === 'undefined') {
    throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");
  }

  var ReactNoopUpdateQueue = new React.Component().updater;
  module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
},158,[103,159]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _assign = _require(_dependencyMap[0]);

  var emptyObject = _require(_dependencyMap[1]);

  var _invariant = _require(_dependencyMap[2]);

  var MIXINS_KEY = 'mixins';

  function identity(fn) {
    return fn;
  }

  var ReactPropTypeLocationNames;
  {
    ReactPropTypeLocationNames = {};
  }

  function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    var injectedMixins = [];
    var ReactClassInterface = {
      mixins: 'DEFINE_MANY',
      statics: 'DEFINE_MANY',
      propTypes: 'DEFINE_MANY',
      contextTypes: 'DEFINE_MANY',
      childContextTypes: 'DEFINE_MANY',
      getDefaultProps: 'DEFINE_MANY_MERGED',
      getInitialState: 'DEFINE_MANY_MERGED',
      getChildContext: 'DEFINE_MANY_MERGED',
      render: 'DEFINE_ONCE',
      componentWillMount: 'DEFINE_MANY',
      componentDidMount: 'DEFINE_MANY',
      componentWillReceiveProps: 'DEFINE_MANY',
      shouldComponentUpdate: 'DEFINE_ONCE',
      componentWillUpdate: 'DEFINE_MANY',
      componentDidUpdate: 'DEFINE_MANY',
      componentWillUnmount: 'DEFINE_MANY',
      UNSAFE_componentWillMount: 'DEFINE_MANY',
      UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
      UNSAFE_componentWillUpdate: 'DEFINE_MANY',
      updateComponent: 'OVERRIDE_BASE'
    };
    var ReactClassStaticInterface = {
      getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
    };
    var RESERVED_SPEC_KEYS = {
      displayName: function displayName(Constructor, _displayName) {
        Constructor.displayName = _displayName;
      },
      mixins: function mixins(Constructor, _mixins) {
        if (_mixins) {
          for (var i = 0; i < _mixins.length; i++) {
            mixSpecIntoComponent(Constructor, _mixins[i]);
          }
        }
      },
      childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
      },
      contextTypes: function contextTypes(Constructor, _contextTypes) {
        Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
      },
      getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
        } else {
          Constructor.getDefaultProps = _getDefaultProps;
        }
      },
      propTypes: function propTypes(Constructor, _propTypes) {
        Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
      },
      statics: function statics(Constructor, _statics) {
        mixStaticSpecIntoComponent(Constructor, _statics);
      },
      autobind: function autobind() {}
    };

    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {}
      }
    }

    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

      if (ReactClassMixin.hasOwnProperty(name)) {
        _invariant(specPolicy === 'OVERRIDE_BASE', "ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.", name);
      }

      if (isAlreadyDefined) {
        _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', "ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
      }
    }

    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        return;
      }

      _invariant(typeof spec !== 'function', "ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object.");

      _invariant(!isValidElement(spec), "ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");

      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;

      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }

      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }

        if (name === MIXINS_KEY) {
          continue;
        }

        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);

        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];

              _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), "ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.", specPolicy, name);

              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;
            }
          }
        }
      }
    }

    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }

      for (var name in statics) {
        var property = statics[name];

        if (!statics.hasOwnProperty(name)) {
          continue;
        }

        var isReserved = name in RESERVED_SPEC_KEYS;

        _invariant(!isReserved, "ReactClass: You are attempting to define a reserved property, `%s`, that shouldn't be on the \"statics\" key. Define it as an instance property instead; it will still be accessible on the constructor.", name);

        var isAlreadyDefined = name in Constructor;

        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

          _invariant(specPolicy === 'DEFINE_MANY_MERGED', "ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);

          Constructor[name] = createMergedResultFunction(Constructor[name], property);
          return;
        }

        Constructor[name] = property;
      }
    }

    function mergeIntoWithNoDuplicateKeys(one, two) {
      _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          _invariant(one[key] === undefined, "mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.", key);

          one[key] = two[key];
        }
      }

      return one;
    }

    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);

        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }

        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }

    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }

    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);
      return boundMethod;
    }

    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;

      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }

    var IsMountedPreMixin = {
      componentDidMount: function componentDidMount() {
        this.__isMounted = true;
      }
    };
    var IsMountedPostMixin = {
      componentWillUnmount: function componentWillUnmount() {
        this.__isMounted = false;
      }
    };
    var ReactClassMixin = {
      replaceState: function replaceState(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
      isMounted: function isMounted() {
        return !!this.__isMounted;
      }
    };

    var ReactClassComponent = function ReactClassComponent() {};

    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

    function createClass(spec) {
      var Constructor = identity(function (props, context, updater) {
        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState = this.getInitialState ? this.getInitialState() : null;

        _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);

      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      return Constructor;
    }

    return createClass;
  }

  module.exports = factory;
},159,[105,106,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp, _class2, _temp2;

  var Color = _require(_dependencyMap[0]);

  var Path = _require(_dependencyMap[1]);

  var Transform = _require(_dependencyMap[2]);

  var React = _require(_dependencyMap[3]);

  var PropTypes = _require(_dependencyMap[4]);

  var ReactNativeViewAttributes = _require(_dependencyMap[5]);

  var createReactNativeComponentClass = _require(_dependencyMap[6]);

  var merge = _require(_dependencyMap[7]);

  var invariant = _require(_dependencyMap[8]);

  function arrayDiffer(a, b) {
    if (a == null || b == null) {
      return true;
    }

    if (a.length !== b.length) {
      return true;
    }

    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return true;
      }
    }

    return false;
  }

  function fontAndLinesDiffer(a, b) {
    if (a === b) {
      return false;
    }

    if (a.font !== b.font) {
      if (a.font === null) {
        return true;
      }

      if (b.font === null) {
        return true;
      }

      if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
        return true;
      }
    }

    return arrayDiffer(a.lines, b.lines);
  }

  var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});
  var NodeAttributes = {
    transform: {
      diff: arrayDiffer
    },
    opacity: true
  };
  var GroupAttributes = merge(NodeAttributes, {
    clipping: {
      diff: arrayDiffer
    }
  });
  var RenderableAttributes = merge(NodeAttributes, {
    fill: {
      diff: arrayDiffer
    },
    stroke: {
      diff: arrayDiffer
    },
    strokeWidth: true,
    strokeCap: true,
    strokeJoin: true,
    strokeDash: {
      diff: arrayDiffer
    }
  });
  var ShapeAttributes = merge(RenderableAttributes, {
    d: {
      diff: arrayDiffer
    }
  });
  var TextAttributes = merge(RenderableAttributes, {
    alignment: true,
    frame: {
      diff: fontAndLinesDiffer
    },
    path: {
      diff: arrayDiffer
    }
  });
  var NativeSurfaceView = createReactNativeComponentClass('ARTSurfaceView', function () {
    return {
      validAttributes: SurfaceViewAttributes,
      uiViewClassName: 'ARTSurfaceView'
    };
  });
  var NativeGroup = createReactNativeComponentClass('ARTGroup', function () {
    return {
      validAttributes: GroupAttributes,
      uiViewClassName: 'ARTGroup'
    };
  });
  var NativeShape = createReactNativeComponentClass('ARTShape', function () {
    return {
      validAttributes: ShapeAttributes,
      uiViewClassName: 'ARTShape'
    };
  });
  var NativeText = createReactNativeComponentClass('ARTText', function () {
    return {
      validAttributes: TextAttributes,
      uiViewClassName: 'ARTText'
    };
  });

  function childrenAsString(children) {
    if (!children) {
      return '';
    }

    if (typeof children === 'string') {
      return children;
    }

    if (children.length) {
      return children.join('\n');
    }

    return '';
  }

  var Surface = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Surface, _React$Component);

    function Surface() {
      babelHelpers.classCallCheck(this, Surface);
      return babelHelpers.possibleConstructorReturn(this, (Surface.__proto__ || Object.getPrototypeOf(Surface)).apply(this, arguments));
    }

    babelHelpers.createClass(Surface, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          isInSurface: true
        };
      }
    }, {
      key: "render",
      value: function render() {
        var props = this.props;
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        return React.createElement(
          NativeSurfaceView,
          {
            style: [props.style, {
              width: w,
              height: h
            }]
          },
          this.props.children
        );
      }
    }]);
    return Surface;
  }(React.Component), _class.childContextTypes = {
    isInSurface: PropTypes.bool
  }, _temp);

  function extractNumber(value, defaultValue) {
    if (value == null) {
      return defaultValue;
    }

    return +value;
  }

  var pooledTransform = new Transform();

  function extractTransform(props) {
    var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
    var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;
    pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

    if (props.transform != null) {
      pooledTransform.transform(props.transform);
    }

    return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
  }

  function extractOpacity(props) {
    if (props.visible === false) {
      return 0;
    }

    if (props.opacity == null) {
      return 1;
    }

    return +props.opacity;
  }

  var Group = (_temp2 = _class2 = function (_React$Component2) {
    babelHelpers.inherits(Group, _React$Component2);

    function Group() {
      babelHelpers.classCallCheck(this, Group);
      return babelHelpers.possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
    }

    babelHelpers.createClass(Group, [{
      key: "render",
      value: function render() {
        var props = this.props;
        invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
        return React.createElement(
          NativeGroup,
          {
            opacity: extractOpacity(props),
            transform: extractTransform(props)
          },
          this.props.children
        );
      }
    }]);
    return Group;
  }(React.Component), _class2.contextTypes = {
    isInSurface: PropTypes.bool.isRequired
  }, _temp2);

  var ClippingRectangle = function (_React$Component3) {
    babelHelpers.inherits(ClippingRectangle, _React$Component3);

    function ClippingRectangle() {
      babelHelpers.classCallCheck(this, ClippingRectangle);
      return babelHelpers.possibleConstructorReturn(this, (ClippingRectangle.__proto__ || Object.getPrototypeOf(ClippingRectangle)).apply(this, arguments));
    }

    babelHelpers.createClass(ClippingRectangle, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var x = extractNumber(props.x, 0);
        var y = extractNumber(props.y, 0);
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        var clipping = [x, y, w, h];
        var propsExcludingXAndY = merge(props);
        delete propsExcludingXAndY.x;
        delete propsExcludingXAndY.y;
        return React.createElement(
          NativeGroup,
          {
            clipping: clipping,
            opacity: extractOpacity(props),
            transform: extractTransform(propsExcludingXAndY)
          },
          this.props.children
        );
      }
    }]);
    return ClippingRectangle;
  }(React.Component);

  var SOLID_COLOR = 0;
  var LINEAR_GRADIENT = 1;
  var RADIAL_GRADIENT = 2;
  var PATTERN = 3;

  function insertColorIntoArray(color, targetArray, atIndex) {
    var c = new Color(color);
    targetArray[atIndex + 0] = c.red / 255;
    targetArray[atIndex + 1] = c.green / 255;
    targetArray[atIndex + 2] = c.blue / 255;
    targetArray[atIndex + 3] = c.alpha;
  }

  function insertColorsIntoArray(stops, targetArray, atIndex) {
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
        i++;
      }
    } else {
      for (var offset in stops) {
        insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
        i++;
      }
    }

    return atIndex + i * 4;
  }

  function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
    var offsetNumber;
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        offsetNumber = i / (stops.length - 1) * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    } else {
      for (var offsetString in stops) {
        offsetNumber = +offsetString * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    }

    return atIndex + i;
  }

  function insertColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
  }

  function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
    lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
  }

  function applyBoundingBoxToBrushData(brushData, props) {
    var type = brushData[0];
    var width = +props.width;
    var height = +props.height;

    if (type === LINEAR_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
    } else if (type === RADIAL_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
      brushData[5] *= width;
      brushData[6] *= height;
    } else if (type === PATTERN) {}
  }

  function extractBrush(colorOrBrush, props) {
    if (colorOrBrush == null) {
      return null;
    }

    if (colorOrBrush._brush) {
      if (colorOrBrush._bb) {
        applyBoundingBoxToBrushData(colorOrBrush._brush, props);
        colorOrBrush._bb = false;
      }

      return colorOrBrush._brush;
    }

    var c = new Color(colorOrBrush);
    return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractColor(color) {
    if (color == null) {
      return null;
    }

    var c = new Color(color);
    return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractStrokeCap(strokeCap) {
    switch (strokeCap) {
      case 'butt':
        return 0;

      case 'square':
        return 2;

      default:
        return 1;
    }
  }

  function extractStrokeJoin(strokeJoin) {
    switch (strokeJoin) {
      case 'miter':
        return 0;

      case 'bevel':
        return 2;

      default:
        return 1;
    }
  }

  var Shape = function (_React$Component4) {
    babelHelpers.inherits(Shape, _React$Component4);

    function Shape() {
      babelHelpers.classCallCheck(this, Shape);
      return babelHelpers.possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));
    }

    babelHelpers.createClass(Shape, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.d || childrenAsString(props.children);
        var d = (path instanceof Path ? path : new Path(path)).toJSON();
        return React.createElement(NativeShape, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          d: d
        });
      }
    }]);
    return Shape;
  }(React.Component);

  var cachedFontObjectsFromString = {};
  var fontFamilyPrefix = /^[\s"']*/;
  var fontFamilySuffix = /[\s"']*$/;

  function extractSingleFontFamily(fontFamilyString) {
    return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
  }

  function parseFontString(font) {
    if (cachedFontObjectsFromString.hasOwnProperty(font)) {
      return cachedFontObjectsFromString[font];
    }

    var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
    var match = regexp.exec(font);

    if (!match) {
      return null;
    }

    var fontFamily = extractSingleFontFamily(match[3]);
    var fontSize = +match[2] || 12;
    var isBold = /bold/.exec(match[1]);
    var isItalic = /italic/.exec(match[1]);
    cachedFontObjectsFromString[font] = {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: isBold ? 'bold' : 'normal',
      fontStyle: isItalic ? 'italic' : 'normal'
    };
    return cachedFontObjectsFromString[font];
  }

  function extractFont(font) {
    if (font == null) {
      return null;
    }

    if (typeof font === 'string') {
      return parseFontString(font);
    }

    var fontFamily = extractSingleFontFamily(font.fontFamily);
    var fontSize = +font.fontSize || 12;
    var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
    return {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: font.fontStyle
    };
  }

  var newLine = /\n/g;

  function extractFontAndLines(font, text) {
    return {
      font: extractFont(font),
      lines: text.split(newLine)
    };
  }

  function extractAlignment(alignment) {
    switch (alignment) {
      case 'right':
        return 1;

      case 'center':
        return 2;

      default:
        return 0;
    }
  }

  var Text = function (_React$Component5) {
    babelHelpers.inherits(Text, _React$Component5);

    function Text() {
      babelHelpers.classCallCheck(this, Text);
      return babelHelpers.possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
    }

    babelHelpers.createClass(Text, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.path;
        var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;
        var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
        return React.createElement(NativeText, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          alignment: extractAlignment(props.alignment),
          frame: textFrame,
          path: textPath
        });
      }
    }]);
    return Text;
  }(React.Component);

  function LinearGradient(stops, x1, y1, x2, y2) {
    var type = LINEAR_GRADIENT;

    if (arguments.length < 5) {
      var angle = (x1 == null ? 270 : x1) * Math.PI / 180;
      var x = Math.cos(angle);
      var y = -Math.sin(angle);
      var l = (Math.abs(x) + Math.abs(y)) / 2;
      x *= l;
      y *= l;
      x1 = 0.5 - x;
      x2 = 0.5 + x;
      y1 = 0.5 - y;
      y2 = 0.5 + y;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [type, +x1, +y1, +x2, +y2];
    insertColorStopsIntoArray(stops, brushData, 5);
    this._brush = brushData;
  }

  function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
    if (ry == null) {
      ry = rx;
    }

    if (cx == null) {
      cx = fx;
    }

    if (cy == null) {
      cy = fy;
    }

    if (fx == null) {
      fx = fy = rx = ry = cx = cy = 0.5;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
    insertDoubleColorStopsIntoArray(stops, brushData, 7);
    this._brush = brushData;
  }

  function Pattern(url, width, height, left, top) {
    this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
  }

  var ReactART = {
    LinearGradient: LinearGradient,
    RadialGradient: RadialGradient,
    Pattern: Pattern,
    Transform: Transform,
    Path: Path,
    Surface: Surface,
    Group: Group,
    ClippingRectangle: ClippingRectangle,
    Shape: Shape,
    Text: Text
  };
  module.exports = ReactART;
},160,[161,162,165,111,121,135,149,139,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
	var colors = {
		maroon: '#800000',
		red: '#ff0000',
		orange: '#ffA500',
		yellow: '#ffff00',
		olive: '#808000',
		purple: '#800080',
		fuchsia: "#ff00ff",
		white: '#ffffff',
		lime: '#00ff00',
		green: '#008000',
		navy: '#000080',
		blue: '#0000ff',
		aqua: '#00ffff',
		teal: '#008080',
		black: '#000000',
		silver: '#c0c0c0',
		gray: '#808080'
	};

	var map = function map(array, fn) {
		var results = [];

		for (var i = 0, l = array.length; i < l; i++) {
			results[i] = fn(array[i], i);
		}

		return results;
	};

	var Color = function Color(color, type) {
		if (color.isColor) {
			this.red = color.red;
			this.green = color.green;
			this.blue = color.blue;
			this.alpha = color.alpha;
		} else {
			var namedColor = colors[color];

			if (namedColor) {
				color = namedColor;
				type = 'hex';
			}

			switch (typeof color) {
				case 'string':
					if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';
					break;

				case 'object':
					type = type || 'rgb';
					color = color.toString();
					break;

				case 'number':
					type = 'hex';
					color = color.toString(16);
					break;
			}

			color = Color['parse' + type.toUpperCase()](color);
			this.red = color[0];
			this.green = color[1];
			this.blue = color[2];
			this.alpha = color[3];
		}

		this.isColor = true;
	};

	var limit = function limit(number, min, max) {
		return Math.min(max, Math.max(min, number));
	};

	var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
	var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

	Color.parseRGB = function (color) {
		return map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
			return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
	};

	Color.parseHEX = function (color) {
		if (color.length == 1) color = color + color + color;
		return map(color.match(hexMatch).slice(1), function (bit, i) {
			if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
			return parseInt(bit.length == 1 ? bit + bit : bit, 16);
		});
	};

	Color.parseHSB = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var a = hsb[3];
		var br = Math.round(hsb[2] / 100 * 255);
		if (hsb[1] == 0) return [br, br, br, a];
		var hue = hsb[0];
		var f = hue % 60;
		var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
		var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
		var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

		switch (Math.floor(hue / 60)) {
			case 0:
				return [br, t, p, a];

			case 1:
				return [q, br, p, a];

			case 2:
				return [p, br, t, a];

			case 3:
				return [p, q, br, a];

			case 4:
				return [t, p, br, a];

			default:
				return [br, p, q, a];
		}
	};

	Color.parseHSL = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var h = hsb[0] / 60;
		var s = hsb[1] / 100;
		var l = hsb[2] / 100;
		var a = hsb[3];
		var c = (1 - Math.abs(2 * l - 1)) * s;
		var x = c * (1 - Math.abs(h % 2 - 1));
		var m = l - c / 2;
		var p = Math.round((c + m) * 255);
		var q = Math.round((x + m) * 255);
		var t = Math.round(m * 255);

		switch (Math.floor(h)) {
			case 0:
				return [p, q, t, a];

			case 1:
				return [q, p, t, a];

			case 2:
				return [t, p, q, a];

			case 3:
				return [t, q, p, a];

			case 4:
				return [q, t, p, a];

			default:
				return [p, t, q, a];
		}
	};

	var toString = function toString(type, array) {
		if (array[3] != 1) type += 'a';else array.pop();
		return type + '(' + array.join(', ') + ')';
	};

	Color.prototype = {
		toHSB: function toHSB(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / max : 0,
			    brightness = max / 255;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];
			return array ? hsb : toString('hsb', hsb);
		},
		toHSL: function toHSL(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
			    lightness = (max + min) / 512;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];
			return array ? hsl : toString('hsl', hsl);
		},
		toHEX: function toHEX(array) {
			var a = this.alpha;
			var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;
			var hex = map([this.red, this.green, this.blue], function (bit) {
				bit = bit.toString(16);
				return bit.length == 1 ? '0' + bit : bit;
			});
			return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
		},
		toRGB: function toRGB(array) {
			var rgb = [this.red, this.green, this.blue, this.alpha];
			return array ? rgb : toString('rgb', rgb);
		}
	};
	Color.prototype.toString = Color.prototype.toRGB;

	Color.hex = function (hex) {
		return new Color(hex, 'hex');
	};

	if (this.hex == null) this.hex = Color.hex;

	Color.hsb = function (h, s, b, a) {
		return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
	};

	if (this.hsb == null) this.hsb = Color.hsb;

	Color.hsl = function (h, s, l, a) {
		return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
	};

	if (this.hsl == null) this.hsl = Color.hsl;

	Color.rgb = function (r, g, b, a) {
		return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
	};

	if (this.rgb == null) this.rgb = Color.rgb;

	Color.detach = function (color) {
		color = new Color(color);
		return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
	};

	module.exports = Color;
},161,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Class = _require(_dependencyMap[0]);

  var Path = _require(_dependencyMap[1]);

  var MOVE_TO = 0;
  var CLOSE = 1;
  var LINE_TO = 2;
  var CURVE_TO = 3;
  var ARC = 4;
  var SerializablePath = Class(Path, {
    initialize: function initialize(path) {
      this.reset();

      if (path instanceof SerializablePath) {
        this.path = path.path.slice(0);
      } else if (path) {
        if (path.applyToPath) {
          path.applyToPath(this);
        } else {
          this.push(path);
        }
      }
    },
    onReset: function onReset() {
      this.path = [];
    },
    onMove: function onMove(sx, sy, x, y) {
      this.path.push(MOVE_TO, x, y);
    },
    onLine: function onLine(sx, sy, x, y) {
      this.path.push(LINE_TO, x, y);
    },
    onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
      this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
    },
    _arcToBezier: Path.prototype.onArc,
    onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
      if (rx !== ry || rotation) {
        return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
      }

      this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
    },
    onClose: function onClose() {
      this.path.push(CLOSE);
    },
    toJSON: function toJSON() {
      return this.path;
    }
  });
  module.exports = SerializablePath;
},162,[163,164]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = function (mixins) {
		var proto = {};

		for (var i = 0, l = arguments.length; i < l; i++) {
			var mixin = arguments[i];
			if (typeof mixin == 'function') mixin = mixin.prototype;

			for (var key in mixin) {
				proto[key] = mixin[key];
			}
		}

		if (!proto.initialize) proto.initialize = function () {};

		proto.constructor = function (a, b, c, d, e, f, g, h) {
			return new proto.initialize(a, b, c, d, e, f, g, h);
		};

		proto.constructor.prototype = proto.initialize.prototype = proto;
		return proto.constructor;
	};
},163,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	var Class = _require(_dependencyMap[0]);

	module.exports = Class({
		initialize: function initialize(path) {
			this.reset().push(path);
		},
		push: function push() {
			var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
			if (!p) return this;
			var last,
			    cmd = p[0],
			    i = 1;

			while (cmd) {
				switch (cmd) {
					case 'm':
						this.move(p[i++], p[i++]);
						break;

					case 'l':
						this.line(p[i++], p[i++]);
						break;

					case 'c':
						this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 's':
						this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'q':
						this.curve(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 't':
						this.curve(p[i++], p[i++]);
						break;

					case 'a':
						this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'h':
						this.line(p[i++], 0);
						break;

					case 'v':
						this.line(0, p[i++]);
						break;

					case 'M':
						this.moveTo(p[i++], p[i++]);
						break;

					case 'L':
						this.lineTo(p[i++], p[i++]);
						break;

					case 'C':
						this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'S':
						this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'Q':
						this.curveTo(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'T':
						this.curveTo(p[i++], p[i++]);
						break;

					case 'A':
						this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'H':
						this.lineTo(p[i++], this.penY);
						break;

					case 'V':
						this.lineTo(this.penX, p[i++]);
						break;

					case 'Z':
					case 'z':
						this.close();
						break;

					default:
						cmd = last;
						i--;
						continue;
				}

				last = cmd;
				if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
				cmd = p[i++];
			}

			return this;
		},
		reset: function reset() {
			this.penX = this.penY = 0;
			this.penDownX = this.penDownY = null;
			this._pivotX = this._pivotY = 0;
			this.onReset();
			return this;
		},
		move: function move(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
			return this;
		},
		moveTo: function moveTo(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		line: function line(x, y) {
			return this.lineTo(this.penX + +x, this.penY + +y);
		},
		lineTo: function lineTo(x, y) {
			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;
			return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
		},
		curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;

			if (c2x == null) {
				c2x = +c1x;
				c2y = +c1y;
				c1x = x * 2 - (this._pivotX || 0);
				c1y = y * 2 - (this._pivotY || 0);
			}

			if (ex == null) {
				this._pivotX = +c1x;
				this._pivotY = +c1y;
				ex = +c2x;
				ey = +c2y;
				c2x = (ex + +c1x * 2) / 3;
				c2y = (ey + +c1y * 2) / 3;
				c1x = (x + +c1x * 2) / 3;
				c1y = (y + +c1y * 2) / 3;
			} else {
				this._pivotX = +c2x;
				this._pivotY = +c2y;
			}

			if (this.penDownX == null) {
				this.penDownX = x;
				this.penDownY = y;
			}

			this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
			return this;
		},
		arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
			return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
		},
		arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
			ry = Math.abs(+ry || +rx || +y - this.penY);
			rx = Math.abs(+rx || +x - this.penX);
			if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);
			var tX = this.penX,
			    tY = this.penY,
			    clockwise = !+counterClockwise,
			    large = !!+outer;
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad);
			x -= tX;
			y -= tY;
			var cx = cos * x / 2 + sin * y / 2,
			    cy = -sin * x / 2 + cos * y / 2,
			    rxry = rx * rx * ry * ry,
			    rycx = ry * ry * cx * cx,
			    rxcy = rx * rx * cy * cy,
			    a = rxry - rxcy - rycx;

			if (a < 0) {
				a = Math.sqrt(1 - a / rxry);
				rx *= a;
				ry *= a;
				cx = x / 2;
				cy = y / 2;
			} else {
				a = Math.sqrt(a / (rxcy + rycx));
				if (large == clockwise) a = -a;
				var cxd = -a * cy * rx / ry,
				    cyd = a * cx * ry / rx;
				cx = cos * cxd - sin * cyd + x / 2;
				cy = sin * cxd + cos * cyd + y / 2;
			}

			var xx = cos / rx,
			    yx = sin / rx,
			    xy = -sin / ry,
			    yy = cos / ry;
			var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
			    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));
			cx += tX;
			cy += tY;
			x += tX;
			y += tY;

			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
			return this;
		},
		counterArc: function counterArc(x, y, rx, ry, outer) {
			return this.arc(x, y, rx, ry, outer, true);
		},
		counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
			return this.arcTo(x, y, rx, ry, outer, true);
		},
		close: function close() {
			if (this.penDownX != null) {
				this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
				this.penDownX = null;
			}

			return this;
		},
		onReset: function onReset() {},
		onMove: function onMove(sx, sy, ex, ey) {},
		onLine: function onLine(sx, sy, ex, ey) {
			this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
		},
		onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
			var gx = ex - sx,
			    gy = ey - sy,
			    g = gx * gx + gy * gy,
			    v1,
			    v2,
			    cx,
			    cy,
			    u;
			cx = c1x - sx;
			cy = c1y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v1 = cx * cx + cy * cy;
			cx = c2x - sx;
			cy = c2y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v2 = cx * cx + cy * cy;

			if (v1 < 0.01 && v2 < 0.01) {
				this.onLine(sx, sy, ex, ey);
				return;
			}

			if (isNaN(v1) || isNaN(v2)) {
				throw new Error('Bad input');
			}

			var s1x = (c1x + c2x) * 0.5,
			    s1y = (c1y + c2y) * 0.5,
			    l1x = (c1x + sx) * 0.5,
			    l1y = (c1y + sy) * 0.5,
			    l2x = (l1x + s1x) * 0.5,
			    l2y = (l1y + s1y) * 0.5,
			    r2x = (ex + c2x) * 0.5,
			    r2y = (ey + c2y) * 0.5,
			    r1x = (r2x + s1x) * 0.5,
			    r1y = (r2y + s1y) * 0.5,
			    l2r1x = (l2x + r1x) * 0.5,
			    l2r1y = (l2y + r1y) * 0.5;
			this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
			this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
		},
		onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad),
			    xx = cos * rx,
			    yx = -sin * ry,
			    xy = sin * rx,
			    yy = cos * ry;
			var arc = ea - sa;
			if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;
			var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
			    step = arc / n,
			    k = 1.3333333333333333 * Math.tan(step / 4);
			var x = Math.cos(sa),
			    y = Math.sin(sa);

			for (var i = 0; i < n; i++) {
				var cp1x = x - k * y,
				    cp1y = y + k * x;
				sa += step;
				x = Math.cos(sa);
				y = Math.sin(sa);
				var cp2x = x + k * y,
				    cp2y = y - k * x;
				this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
			}
		},
		onClose: function onClose(sx, sy, ex, ey) {
			this.onLine(sx, sy, ex, ey);
		}
	});
},164,[163]);
__d(function (global, _require, module, exports, _dependencyMap) {
	var Class = _require(_dependencyMap[0]);

	function Transform(xx, yx, xy, yy, x, y) {
		if (xx && typeof xx == 'object') {
			yx = xx.yx;
			yy = xx.yy;
			y = xx.y;
			xy = xx.xy;
			x = xx.x;
			xx = xx.xx;
		}

		this.xx = xx == null ? 1 : xx;
		this.yx = yx || 0;
		this.xy = xy || 0;
		this.yy = yy == null ? 1 : yy;
		this.x = (x == null ? this.x : x) || 0;
		this.y = (y == null ? this.y : y) || 0;

		this._transform();

		return this;
	}

	;
	module.exports = Class({
		initialize: Transform,
		_transform: function _transform() {},
		xx: 1,
		yx: 0,
		x: 0,
		xy: 0,
		yy: 1,
		y: 0,
		transform: function transform(xx, yx, xy, yy, x, y) {
			var m = this;

			if (xx && typeof xx == 'object') {
				yx = xx.yx;
				yy = xx.yy;
				y = xx.y;
				xy = xx.xy;
				x = xx.x;
				xx = xx.xx;
			}

			if (!x) x = 0;
			if (!y) y = 0;
			return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
		},
		transformTo: Transform,
		translate: function translate(x, y) {
			return this.transform(1, 0, 0, 1, x, y);
		},
		move: function move(x, y) {
			this.x += x || 0;
			this.y += y || 0;

			this._transform();

			return this;
		},
		scale: function scale(x, y) {
			if (y == null) y = x;
			return this.transform(x, 0, 0, y, 0, 0);
		},
		rotate: function rotate(deg, x, y) {
			if (x == null || y == null) {
				x = (this.left || 0) + (this.width || 0) / 2;
				y = (this.top || 0) + (this.height || 0) / 2;
			}

			var rad = deg * Math.PI / 180,
			    sin = Math.sin(rad),
			    cos = Math.cos(rad);
			this.transform(1, 0, 0, 1, x, y);
			var m = this;
			return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
		},
		moveTo: function moveTo(x, y) {
			var m = this;
			return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
		},
		rotateTo: function rotateTo(deg, x, y) {
			var m = this;
			var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
			if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
			return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
		},
		scaleTo: function scaleTo(x, y) {
			var m = this;
			var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
			m.xx /= h;
			m.yx /= h;
			h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
			m.yy /= h;
			m.xy /= h;
			return this.scale(x, y);
		},
		resizeTo: function resizeTo(width, height) {
			var w = this.width,
			    h = this.height;
			if (!w || !h) return this;
			return this.scaleTo(width / w, height / h);
		},
		inversePoint: function inversePoint(x, y) {
			var a = this.xx,
			    b = this.yx,
			    c = this.xy,
			    d = this.yy,
			    e = this.x,
			    f = this.y;
			var det = b * c - a * d;
			if (det == 0) return null;
			return {
				x: (d * (e - x) + c * (y - f)) / det,
				y: (a * (f - y) + b * (x - e)) / det
			};
		},
		point: function point(x, y) {
			var m = this;
			return {
				x: m.xx * x + m.xy * y + m.x,
				y: m.yx * x + m.yy * y + m.y
			};
		}
	});
},165,[163]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var ColorPropType = _require(_dependencyMap[0]);

  var Platform = _require(_dependencyMap[1]);

  var React = _require(_dependencyMap[2]);

  var PropTypes = _require(_dependencyMap[3]);

  var StyleSheet = _require(_dependencyMap[4]);

  var Text = _require(_dependencyMap[5]);

  var TouchableNativeFeedback = _require(_dependencyMap[6]);

  var TouchableOpacity = _require(_dependencyMap[7]);

  var View = _require(_dependencyMap[8]);

  var invariant = _require(_dependencyMap[9]);

  var Button = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Button, _React$Component);

    function Button() {
      babelHelpers.classCallCheck(this, Button);
      return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    babelHelpers.createClass(Button, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            accessibilityLabel = _props.accessibilityLabel,
            color = _props.color,
            onPress = _props.onPress,
            title = _props.title,
            hasTVPreferredFocus = _props.hasTVPreferredFocus,
            disabled = _props.disabled,
            testID = _props.testID;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];

        if (color) {
          {
            buttonStyles.push({
              backgroundColor: color
            });
          }
        }

        var accessibilityTraits = ['button'];

        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
          accessibilityTraits.push('disabled');
        }

        invariant(typeof title === 'string', 'The title prop of a Button must be a string');
        var formattedTitle = title.toUpperCase();
        var Touchable = TouchableNativeFeedback;
        return React.createElement(
          Touchable,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: accessibilityLabel,
            accessibilityTraits: accessibilityTraits,
            hasTVPreferredFocus: hasTVPreferredFocus,
            testID: testID,
            disabled: disabled,
            onPress: onPress
          },
          React.createElement(
            View,
            {
              style: buttonStyles
            },
            React.createElement(
              Text,
              {
                style: textStyles,
                disabled: disabled
              },
              formattedTitle
            )
          )
        );
      }
    }]);
    return Button;
  }(React.Component), _class.propTypes = {
    title: PropTypes.string.isRequired,
    accessibilityLabel: PropTypes.string,
    color: ColorPropType,
    disabled: PropTypes.bool,
    hasTVPreferredFocus: PropTypes.bool,
    onPress: PropTypes.func.isRequired,
    testID: PropTypes.string
  }, _temp);
  var styles = StyleSheet.create({
    button: {
      elevation: 4,
      backgroundColor: '#2196F3',
      borderRadius: 2
    },
    text: {
      color: 'white',
      textAlign: 'center',
      padding: 8,
      fontWeight: '500'
    },
    buttonDisabled: {
      elevation: 0,
      backgroundColor: '#dfdfdf'
    },
    textDisabled: {
      color: '#a1a1a1'
    }
  });
  module.exports = Button;
},166,[43,1076,111,121,112,167,1079,177,134,15]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var NativeMethodsMixin = _require2(_dependencyMap[0]);

  var React = _require2(_dependencyMap[1]);

  var ReactNativeViewAttributes = _require2(_dependencyMap[2]);

  var TextPropTypes = _require2(_dependencyMap[3]);

  var Touchable = _require2(_dependencyMap[4]);

  var UIManager = _require2(_dependencyMap[5]);

  var createReactClass = _require2(_dependencyMap[6]);

  var createReactNativeComponentClass = _require2(_dependencyMap[7]);

  var mergeFast = _require2(_dependencyMap[8]);

  var processColor = _require2(_dependencyMap[9]);

  var _require = _require2(_dependencyMap[10]),
      ViewContextTypes = _require.ViewContextTypes;

  var viewConfig = {
    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true
    }),
    uiViewClassName: 'RCTText'
  };
  var Text = createReactClass({
    displayName: 'Text',
    propTypes: TextPropTypes,
    getDefaultProps: function getDefaultProps() {
      return {
        accessible: true,
        allowFontScaling: true,
        ellipsizeMode: 'tail'
      };
    },
    getInitialState: function getInitialState() {
      return mergeFast(Touchable.Mixin.touchableGetInitialState(), {
        isHighlighted: false
      });
    },
    mixins: [NativeMethodsMixin],
    viewConfig: viewConfig,
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: ViewContextTypes,
    contextTypes: ViewContextTypes,
    _handlers: null,
    _hasPressHandler: function _hasPressHandler() {
      return !!this.props.onPress || !!this.props.onLongPress;
    },
    touchableHandleActivePressIn: null,
    touchableHandleActivePressOut: null,
    touchableHandlePress: null,
    touchableHandleLongPress: null,
    touchableGetPressRectOffset: null,
    render: function render() {
      var _this = this;

      var newProps = this.props;

      if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
        if (!this._handlers) {
          this._handlers = {
            onStartShouldSetResponder: function onStartShouldSetResponder() {
              var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();

              var setResponder = shouldSetFromProps || _this._hasPressHandler();

              if (setResponder && !_this.touchableHandleActivePressIn) {
                for (var key in Touchable.Mixin) {
                  if (typeof Touchable.Mixin[key] === 'function') {
                    _this[key] = Touchable.Mixin[key].bind(_this);
                  }
                }

                _this.touchableHandleActivePressIn = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: true
                  });
                };

                _this.touchableHandleActivePressOut = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: false
                  });
                };

                _this.touchableHandlePress = function (e) {
                  _this.props.onPress && _this.props.onPress(e);
                };

                _this.touchableHandleLongPress = function (e) {
                  _this.props.onLongPress && _this.props.onLongPress(e);
                };

                _this.touchableGetPressRectOffset = function () {
                  return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
                };
              }

              return setResponder;
            },
            onResponderGrant: function (e, dispatchID) {
              this.touchableHandleResponderGrant(e, dispatchID);
              this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
            }.bind(this),
            onResponderMove: function (e) {
              this.touchableHandleResponderMove(e);
              this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
            }.bind(this),
            onResponderRelease: function (e) {
              this.touchableHandleResponderRelease(e);
              this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
            }.bind(this),
            onResponderTerminate: function (e) {
              this.touchableHandleResponderTerminate(e);
              this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
            }.bind(this),
            onResponderTerminationRequest: function () {
              var allowTermination = this.touchableHandleResponderTerminationRequest();

              if (allowTermination && this.props.onResponderTerminationRequest) {
                allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
              }

              return allowTermination;
            }.bind(this)
          };
        }

        newProps = babelHelpers.extends({}, this.props, this._handlers, {
          isHighlighted: this.state.isHighlighted
        });
      }

      if (newProps.selectionColor != null) {
        newProps = babelHelpers.extends({}, newProps, {
          selectionColor: processColor(newProps.selectionColor)
        });
      }

      if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {
        newProps = babelHelpers.extends({}, newProps, {
          style: [this.props.style, {
            color: 'magenta'
          }]
        });
      }

      if (this.context.isInAParentText) {
        return React.createElement(RCTVirtualText, newProps);
      } else {
        return React.createElement(RCTText, newProps);
      }
    }
  });
  var PRESS_RECT_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {
    return viewConfig;
  });
  var RCTVirtualText = RCTText;

  if (UIManager.RCTVirtualText) {
    RCTVirtualText = createReactNativeComponentClass('RCTVirtualText', function () {
      return {
        validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
          isHighlighted: true
        }),
        uiViewClassName: 'RCTVirtualText'
      };
    });
  }

  module.exports = Text;
},167,[45,111,135,168,169,97,158,149,175,129,146]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0]);

  var EdgeInsetsPropType = _require(_dependencyMap[1]);

  var PropTypes = _require(_dependencyMap[2]);

  var StyleSheetPropType = _require(_dependencyMap[3]);

  var TextStylePropTypes = _require(_dependencyMap[4]);

  var stylePropType = StyleSheetPropType(TextStylePropTypes);
  module.exports = {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
    numberOfLines: PropTypes.number,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onLayout: PropTypes.func,
    onPress: PropTypes.func,
    onLongPress: PropTypes.func,
    pressRetentionOffset: EdgeInsetsPropType,
    selectable: PropTypes.bool,
    selectionColor: ColorPropType,
    suppressHighlighting: PropTypes.bool,
    style: stylePropType,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    allowFontScaling: PropTypes.bool,
    accessible: PropTypes.bool,
    adjustsFontSizeToFit: PropTypes.bool,
    minimumFontScale: PropTypes.number,
    disabled: PropTypes.bool
  };
},168,[43,137,121,144,127]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BoundingDimensions = _require(_dependencyMap[0]);

  var Platform = _require(_dependencyMap[1]);

  var Position = _require(_dependencyMap[2]);

  var React = _require(_dependencyMap[3]);

  var ReactNative = _require(_dependencyMap[4]);

  var TVEventHandler = _require(_dependencyMap[5]);

  var TouchEventUtils = _require(_dependencyMap[6]);

  var UIManager = _require(_dependencyMap[7]);

  var View = _require(_dependencyMap[8]);

  var keyMirror = _require(_dependencyMap[9]);

  var normalizeColor = _require(_dependencyMap[10]);

  var States = keyMirror({
    NOT_RESPONDER: null,
    RESPONDER_INACTIVE_PRESS_IN: null,
    RESPONDER_INACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_PRESS_IN: null,
    RESPONDER_ACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_LONG_PRESS_IN: null,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
    ERROR: null
  });
  var IsActive = {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  };
  var IsPressingIn = {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var IsLongPressingIn = {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var Signals = keyMirror({
    DELAY: null,
    RESPONDER_GRANT: null,
    RESPONDER_RELEASE: null,
    RESPONDER_TERMINATED: null,
    ENTER_PRESS_RECT: null,
    LEAVE_PRESS_RECT: null,
    LONG_PRESS_DETECTED: null
  });
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixin = {
    componentDidMount: function componentDidMount() {
      if (!Platform.isTV) {
        return;
      }

      this._tvEventHandler = new TVEventHandler();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        var myTag = ReactNative.findNodeHandle(cmp);
        evt.dispatchConfig = {};

        if (myTag === evt.tag) {
          if (evt.eventType === 'focus') {
            cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);
          } else if (evt.eventType === 'blur') {
            cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);
          } else if (evt.eventType === 'select') {
            cmp.touchableHandlePress && !cmp.props.disabled && cmp.touchableHandlePress(evt);
          }
        }
      });
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function touchableGetInitialState() {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
      return true;
    },
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;

      this._receiveSignal(Signals.RESPONDER_GRANT, e);

      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }

      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
        return;
      }

      if (!this.state.touchable.positionOnActivate) {
        return;
      }

      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

      if (hitSlop) {
        pressExpandLeft += hitSlop.left;
        pressExpandTop += hitSlop.top;
        pressExpandRight += hitSlop.right;
        pressExpandBottom += hitSlop.bottom;
      }

      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;

      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);

        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }

      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;

      if (isTouchWithinActive) {
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

        var curState = this.state.touchable.touchState;

        if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();

        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
      var tag = this.state.touchable.responderID;

      if (tag == null) {
        return;
      }

      UIManager.measure(tag, this._handleQueryLayout);
    },
    _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }

      this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
    },
    _handleDelay: function _handleDelay(e) {
      this.touchableDelayTimeout = null;

      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function _handleLongDelay(e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;

      if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
      } else {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function _receiveSignal(signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];

      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }

      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
      }

      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
      }

      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);

        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function _savePressInLocation(e) {
      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX: pageX,
        pageY: pageY,
        locationX: locationX,
        locationY: locationY
      };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);

      var newIsHighlight = this._isHighlight(nextState);

      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }

      if (!IsActive[curState] && IsActive[nextState]) {
        this._remeasureMetricsOnActivation();
      }

      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }

      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }

      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);

            this._endHighlight(e);
          }

          this.touchableHandlePress(e);
        }
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _startHighlight: function _startHighlight(e) {
      this._savePressInLocation(e);

      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function _endHighlight(e) {
      var _this = this;

      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(function () {
            _this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    }
  };
  var Touchable = {
    Mixin: TouchableMixin,
    TOUCH_TARGET_DEBUG: false,
    renderDebugView: function renderDebugView(_ref) {
      var color = _ref.color,
          hitSlop = _ref.hitSlop;

      if (!Touchable.TOUCH_TARGET_DEBUG) {
        return null;
      }

      {
        throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
      }
      var debugHitSlopStyle = {};
      hitSlop = hitSlop || {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };

      for (var key in hitSlop) {
        debugHitSlopStyle[key] = -hitSlop[key];
      }

      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
      return React.createElement(View, {
        pointerEvents: "none",
        style: babelHelpers.extends({
          position: 'absolute',
          borderColor: hexColor.slice(0, -2) + '55',
          borderWidth: 1,
          borderStyle: 'dashed',
          backgroundColor: hexColor.slice(0, -2) + '0F'
        }, debugHitSlopStyle)
      });
    }
  };
  module.exports = Touchable;
},169,[170,1076,172,111,46,173,174,97,134,119,44]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _require(_dependencyMap[0]);

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }

  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };

  PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  module.exports = BoundingDimensions;
},170,[171]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance = Klass.instancePool.pop();

      Klass.call(_instance, copyFieldsFrom);
      return _instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance2 = Klass.instancePool.pop();

      Klass.call(_instance2, a1, a2);
      return _instance2;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance3 = Klass.instancePool.pop();

      Klass.call(_instance3, a1, a2, a3);
      return _instance3;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance4 = Klass.instancePool.pop();

      Klass.call(_instance4, a1, a2, a3, a4);
      return _instance4;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  var standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();

    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;

    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }

    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},171,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _require(_dependencyMap[0]);

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function Position(left, top) {
    this.left = left;
    this.top = top;
  }

  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };

  PooledClass.addPoolingTo(Position, twoArgumentPooler);
  module.exports = Position;
},172,[171]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0]);

  var TVNavigationEventEmitter = _require(_dependencyMap[1]).TVNavigationEventEmitter;

  var NativeEventEmitter = _require(_dependencyMap[2]);

  function TVEventHandler() {
    this.__nativeTVNavigationEventListener = null;
    this.__nativeTVNavigationEventEmitter = null;
  }

  TVEventHandler.prototype.enable = function (component, callback) {
    this.__nativeTVNavigationEventEmitter = new NativeEventEmitter(TVNavigationEventEmitter);
    this.__nativeTVNavigationEventListener = this.__nativeTVNavigationEventEmitter.addListener('onHWKeyEvent', function (data) {
      if (callback) {
        callback(component, data);
      }
    });
  };

  TVEventHandler.prototype.disable = function () {
    if (this.__nativeTVNavigationEventListener) {
      this.__nativeTVNavigationEventListener.remove();

      delete this.__nativeTVNavigationEventListener;
    }

    if (this.__nativeTVNavigationEventEmitter) {
      delete this.__nativeTVNavigationEventEmitter;
    }
  };

  module.exports = TVEventHandler;
},173,[1076,17,70]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var TouchEventUtils = {
    extractSingleTouch: function extractSingleTouch(nativeEvent) {
      var touches = nativeEvent.touches;
      var changedTouches = nativeEvent.changedTouches;
      var hasTouches = touches && touches.length > 0;
      var hasChangedTouches = changedTouches && changedTouches.length > 0;
      return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
    }
  };
  module.exports = TouchEventUtils;
},174,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var mergeFast = function mergeFast(one, two) {
    var ret = {};

    for (var keyOne in one) {
      ret[keyOne] = one[keyOne];
    }

    for (var keyTwo in two) {
      ret[keyTwo] = two[keyTwo];
    }

    return ret;
  };

  module.exports = mergeFast;
},175,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0]);

  var React = _require(_dependencyMap[1]);

  var PropTypes = _require(_dependencyMap[2]);

  var ReactNative = _require(_dependencyMap[3]);

  var Touchable = _require(_dependencyMap[4]);

  var TouchableWithoutFeedback = _require(_dependencyMap[5]);

  var UIManager = _require(_dependencyMap[6]);

  var createReactClass = _require(_dependencyMap[7]);

  var ensurePositiveDelayProps = _require(_dependencyMap[8]);

  var processColor = _require(_dependencyMap[9]);

  var rippleBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['RippleAndroid']),
    color: PropTypes.number,
    borderless: PropTypes.bool
  });
  var themeAttributeBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['ThemeAttrAndroid']),
    attribute: PropTypes.string.isRequired
  });
  var backgroundPropType = PropTypes.oneOfType([rippleBackgroundPropType, themeAttributeBackgroundPropType]);
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableNativeFeedback = createReactClass({
    displayName: 'TouchableNativeFeedback',
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      background: backgroundPropType,
      hasTVPreferredFocus: PropTypes.bool,
      useForeground: PropTypes.bool
    }),
    statics: {
      SelectableBackground: function SelectableBackground() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackground'
        };
      },
      SelectableBackgroundBorderless: function SelectableBackgroundBorderless() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackgroundBorderless'
        };
      },
      Ripple: function Ripple(color, borderless) {
        return {
          type: 'RippleAndroid',
          color: processColor(color),
          borderless: borderless
        };
      },
      canUseNativeForeground: function canUseNativeForeground() {
        return Platform.Version >= 23;
      }
    },
    mixins: [Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return {
        background: this.SelectableBackground()
      };
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);

      this._dispatchPressedStateChange(true);

      if (this.pressInLocation) {
        this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);
      }
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);

      this._dispatchPressedStateChange(false);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _handleResponderMove: function _handleResponderMove(e) {
      this.touchableHandleResponderMove(e);

      this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);
    },
    _dispatchHotspotUpdate: function _dispatchHotspotUpdate(destX, destY) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.hotspotUpdate, [destX || 0, destY || 0]);
    },
    _dispatchPressedStateChange: function _dispatchPressedStateChange(pressed) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.setPressed, [pressed]);
    },
    render: function render() {
      var _babelHelpers$extends;

      var child = React.Children.only(this.props.children);
      var children = child.props.children;

      if (Touchable.TOUCH_TARGET_DEBUG && child.type.displayName === 'View') {
        if (!Array.isArray(children)) {
          children = [children];
        }

        children.push(Touchable.renderDebugView({
          color: 'brown',
          hitSlop: this.props.hitSlop
        }));
      }

      if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {
        console.warn("Requested foreground ripple, but it is not available on this version of Android. Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different Touchable if the result is false.");
      }

      var drawableProp = this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground() ? 'nativeForegroundAndroid' : 'nativeBackgroundAndroid';
      var childProps = babelHelpers.extends({}, child.props, (_babelHelpers$extends = {}, babelHelpers.defineProperty(_babelHelpers$extends, drawableProp, this.props.background), babelHelpers.defineProperty(_babelHelpers$extends, "accessible", this.props.accessible !== false), babelHelpers.defineProperty(_babelHelpers$extends, "accessibilityLabel", this.props.accessibilityLabel), babelHelpers.defineProperty(_babelHelpers$extends, "accessibilityComponentType", this.props.accessibilityComponentType), babelHelpers.defineProperty(_babelHelpers$extends, "accessibilityTraits", this.props.accessibilityTraits), babelHelpers.defineProperty(_babelHelpers$extends, "children", children), babelHelpers.defineProperty(_babelHelpers$extends, "testID", this.props.testID), babelHelpers.defineProperty(_babelHelpers$extends, "onLayout", this.props.onLayout), babelHelpers.defineProperty(_babelHelpers$extends, "hitSlop", this.props.hitSlop), babelHelpers.defineProperty(_babelHelpers$extends, "isTVSelectable", true), babelHelpers.defineProperty(_babelHelpers$extends, "hasTVPreferredFocus", this.props.hasTVPreferredFocus), babelHelpers.defineProperty(_babelHelpers$extends, "onStartShouldSetResponder", this.touchableHandleStartShouldSetResponder), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderTerminationRequest", this.touchableHandleResponderTerminationRequest), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderGrant", this.touchableHandleResponderGrant), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderMove", this._handleResponderMove), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderRelease", this.touchableHandleResponderRelease), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderTerminate", this.touchableHandleResponderTerminate), _babelHelpers$extends));
      return React.cloneElement(child, childProps);
    }
  });
  module.exports = TouchableNativeFeedback;
},1079,[1076,111,121,46,169,221,97,158,222,129]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = _require2(_dependencyMap[0]);

  var React = _require2(_dependencyMap[1]);

  var PropTypes = _require2(_dependencyMap[2]);

  var TimerMixin = _require2(_dependencyMap[3]);

  var Touchable = _require2(_dependencyMap[4]);

  var createReactClass = _require2(_dependencyMap[5]);

  var ensurePositiveDelayProps = _require2(_dependencyMap[6]);

  var warning = _require2(_dependencyMap[7]);

  var _require = _require2(_dependencyMap[8]),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableWithoutFeedback = createReactClass({
    displayName: 'TouchableWithoutFeedback',
    mixins: [TimerMixin, Touchable.Mixin],
    propTypes: {
      accessible: PropTypes.bool,
      accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
      accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
      disabled: PropTypes.bool,
      onPress: PropTypes.func,
      onPressIn: PropTypes.func,
      onPressOut: PropTypes.func,
      onLayout: PropTypes.func,
      onLongPress: PropTypes.func,
      delayPressIn: PropTypes.number,
      delayPressOut: PropTypes.number,
      delayLongPress: PropTypes.number,
      pressRetentionOffset: EdgeInsetsPropType,
      hitSlop: EdgeInsetsPropType
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut || 0;
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      var children = child.props.children;
      warning(!child.type || child.type.displayName !== 'Text', 'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' + (child._owner && child._owner.getName && child._owner.getName() || '<unknown>'));

      if (Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'View') {
        children = React.Children.toArray(children);
        children.push(Touchable.renderDebugView({
          color: 'red',
          hitSlop: this.props.hitSlop
        }));
      }

      var style = Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'Text' ? [child.props.style, {
        color: 'red'
      }] : child.props.style;
      return React.cloneElement(child, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        style: style,
        children: children
      });
    }
  });
  module.exports = TouchableWithoutFeedback;
},221,[137,111,121,220,169,158,222,29,145]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var GLOBAL = typeof window === 'undefined' ? global : window;

  var setter = function setter(_setter, _clearer, array) {
    return function (callback, delta) {
      var id = _setter(function () {
        _clearer.call(this, id);

        callback.apply(this, arguments);
      }.bind(this), delta);

      if (!this[array]) {
        this[array] = [id];
      } else {
        this[array].push(id);
      }

      return id;
    };
  };

  var clearer = function clearer(_clearer, array) {
    return function (id) {
      if (this[array]) {
        var index = this[array].indexOf(id);

        if (index !== -1) {
          this[array].splice(index, 1);
        }
      }

      _clearer(id);
    };
  };

  var _timeouts = 'TimerMixin_timeouts';

  var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);

  var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

  var _intervals = 'TimerMixin_intervals';

  var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);

  var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

  var _immediates = 'TimerMixin_immediates';

  var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);

  var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

  var _rafs = 'TimerMixin_rafs';

  var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);

  var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

  var TimerMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this[_timeouts] && this[_timeouts].forEach(function (id) {
        GLOBAL.clearTimeout(id);
      });
      this[_timeouts] = null;
      this[_intervals] && this[_intervals].forEach(function (id) {
        GLOBAL.clearInterval(id);
      });
      this[_intervals] = null;
      this[_immediates] && this[_immediates].forEach(function (id) {
        GLOBAL.clearImmediate(id);
      });
      this[_immediates] = null;
      this[_rafs] && this[_rafs].forEach(function (id) {
        GLOBAL.cancelAnimationFrame(id);
      });
      this[_rafs] = null;
    },
    setTimeout: _setTimeout,
    clearTimeout: _clearTimeout,
    setInterval: _setInterval,
    clearInterval: _clearInterval,
    setImmediate: _setImmediate,
    clearImmediate: _clearImmediate,
    requestAnimationFrame: _requestAnimationFrame,
    cancelAnimationFrame: _cancelAnimationFrame
  };
  module.exports = TimerMixin;
},220,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
    invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
  };

  module.exports = ensurePositiveDelayProps;
},222,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Animated = _require(_dependencyMap[0]);

  var Easing = _require(_dependencyMap[1]);

  var NativeMethodsMixin = _require(_dependencyMap[2]);

  var React = _require(_dependencyMap[3]);

  var PropTypes = _require(_dependencyMap[4]);

  var TimerMixin = _require(_dependencyMap[5]);

  var Touchable = _require(_dependencyMap[6]);

  var TouchableWithoutFeedback = _require(_dependencyMap[7]);

  var createReactClass = _require(_dependencyMap[8]);

  var ensurePositiveDelayProps = _require(_dependencyMap[9]);

  var flattenStyle = _require(_dependencyMap[10]);

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableOpacity = createReactClass({
    displayName: 'TouchableOpacity',
    mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        activeOpacity: 0.2
      };
    },
    getInitialState: function getInitialState() {
      return babelHelpers.extends({}, this.touchableGetInitialState(), {
        anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
      });
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
      if (this.props.disabled !== prevProps.disabled) {
        this._opacityInactive(250);
      }
    },
    setOpacityTo: function setOpacityTo(value, duration) {
      Animated.timing(this.state.anim, {
        toValue: value,
        duration: duration,
        easing: Easing.inOut(Easing.quad),
        useNativeDriver: true
      }).start();
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      if (e.dispatchConfig.registrationName === 'onResponderGrant') {
        this._opacityActive(0);
      } else {
        this._opacityActive(150);
      }

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this._opacityInactive(250);

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _opacityActive: function _opacityActive(duration) {
      this.setOpacityTo(this.props.activeOpacity, duration);
    },
    _opacityInactive: function _opacityInactive(duration) {
      this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
    },
    _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
      var childStyle = flattenStyle(this.props.style) || {};
      return childStyle.opacity == undefined ? 1 : childStyle.opacity;
    },
    render: function render() {
      return React.createElement(
        Animated.View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: [this.props.style, {
            opacity: this.state.anim
          }],
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          isTVSelectable: true,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hitSlop: this.props.hitSlop,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate
        },
        this.props.children,
        Touchable.renderDebugView({
          color: 'cyan',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableOpacity;
},177,[178,203,45,111,121,220,169,221,158,222,101]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedImplementation = _require(_dependencyMap[0]);

  var Image = _require(_dependencyMap[1]);

  var ScrollView = _require(_dependencyMap[2]);

  var Text = _require(_dependencyMap[3]);

  var View = _require(_dependencyMap[4]);

  var Animated = {
    View: AnimatedImplementation.createAnimatedComponent(View),
    Text: AnimatedImplementation.createAnimatedComponent(Text),
    Image: AnimatedImplementation.createAnimatedComponent(Image),
    ScrollView: AnimatedImplementation.createAnimatedComponent(ScrollView)
  };
  babelHelpers.extends(Animated, AnimatedImplementation);
  module.exports = Animated;
},178,[179,1080,208,167,134]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedAddition = _require2(_dependencyMap[1]);

  var AnimatedDiffClamp = _require2(_dependencyMap[2]);

  var AnimatedDivision = _require2(_dependencyMap[3]);

  var AnimatedInterpolation = _require2(_dependencyMap[4]);

  var AnimatedModulo = _require2(_dependencyMap[5]);

  var AnimatedMultiplication = _require2(_dependencyMap[6]);

  var AnimatedNode = _require2(_dependencyMap[7]);

  var AnimatedProps = _require2(_dependencyMap[8]);

  var AnimatedTracking = _require2(_dependencyMap[9]);

  var AnimatedValue = _require2(_dependencyMap[10]);

  var AnimatedValueXY = _require2(_dependencyMap[11]);

  var DecayAnimation = _require2(_dependencyMap[12]);

  var SpringAnimation = _require2(_dependencyMap[13]);

  var TimingAnimation = _require2(_dependencyMap[14]);

  var createAnimatedComponent = _require2(_dependencyMap[15]);

  var add = function add(a, b) {
    return new AnimatedAddition(a, b);
  };

  var divide = function divide(a, b) {
    return new AnimatedDivision(a, b);
  };

  var multiply = function multiply(a, b) {
    return new AnimatedMultiplication(a, b);
  };

  var modulo = function modulo(a, modulus) {
    return new AnimatedModulo(a, modulus);
  };

  var diffClamp = function diffClamp(a, min, max) {
    return new AnimatedDiffClamp(a, min, max);
  };

  var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete.apply(config, arguments);
        callback && callback.apply(undefined, arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };

  var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof AnimatedValueXY) {
      var configX = babelHelpers.extends({}, config);
      var configY = babelHelpers.extends({}, config);

      for (var key in config) {
        var _config$key = config[key],
            x = _config$key.x,
            y = _config$key.y;

        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }

      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    }

    return null;
  };

  var spring = function spring(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new SpringAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, spring) || {
      start: function (_start) {
        function start(_x) {
          return _start.apply(this, arguments);
        }

        start.toString = function () {
          return _start.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var timing = function timing(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new TimingAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, timing) || {
      start: function (_start2) {
        function start(_x2) {
          return _start2.apply(this, arguments);
        }

        start.toString = function () {
          return _start2.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var decay = function decay(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new DecayAnimation(singleConfig), callback);
    };

    return maybeVectorAnim(value, config, decay) || {
      start: function (_start3) {
        function start(_x3) {
          return _start3.apply(this, arguments);
        }

        start.toString = function () {
          return _start3.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var sequence = function sequence(animations) {
    var current = 0;
    return {
      start: function start(callback) {
        var onComplete = function onComplete(result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }

          current++;

          if (current === animations.length) {
            callback && callback(result);
            return;
          }

          animations[current].start(onComplete);
        };

        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function stop() {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
  };

  var parallel = function parallel(animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function start(callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }

        animations.forEach(function (animation, idx) {
          var cb = function cb(endResult) {
            hasEnded[idx] = true;
            doneCount++;

            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }

            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };

          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function stop() {
        animations.forEach(function (animation, idx) {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
    return result;
  };

  var delay = function delay(time) {
    return timing(new AnimatedValue(0), {
      toValue: 0,
      delay: time,
      duration: 0
    });
  };

  var stagger = function stagger(time, animations) {
    return parallel(animations.map(function (animation, i) {
      return sequence([delay(time * i), animation]);
    }));
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function start(callback) {
        var restart = function restart() {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };

          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            animation.reset();
            animation.start(restart);
          }
        };

        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function stop() {
        isFinished = true;
        animation.stop();
      },
      reset: function reset() {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return animation._isUsingNativeDriver();
      }
    };
  };

  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof AnimatedEvent) {
      event.__addListener(listener);

      return event;
    } else {
      return function () {
        typeof event === 'function' && event.apply(undefined, arguments);
        listener.apply(undefined, arguments);
      };
    }
  }

  function unforkEvent(event, listener) {
    if (event && event instanceof AnimatedEvent) {
      event.__removeListener(listener);
    }
  }

  var event = function event(argMapping, config) {
    var animatedEvent = new AnimatedEvent(argMapping, config);

    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: add,
    divide: divide,
    multiply: multiply,
    modulo: modulo,
    diffClamp: diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},179,[180,188,189,190,182,191,192,183,193,196,181,197,198,200,202,205]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = _require2(_dependencyMap[0]);

  var NativeAnimatedHelper = _require2(_dependencyMap[1]);

  var ReactNative = _require2(_dependencyMap[2]);

  var invariant = _require2(_dependencyMap[3]);

  var _require = _require2(_dependencyMap[1]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function attachNativeEvent(viewRef, eventName, argMapping) {
    var eventMappings = [];

    var traverse = function traverse(value, path) {
      if (value instanceof AnimatedValue) {
        value.__makeNative();

        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };

    invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = ReactNative.findNodeHandle(viewRef);
    eventMappings.forEach(function (mapping) {
      NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);
    });
    return {
      detach: function detach() {
        eventMappings.forEach(function (mapping) {
          NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
        });
      }
    };
  }

  var AnimatedEvent = function () {
    function AnimatedEvent(argMapping) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      babelHelpers.classCallCheck(this, AnimatedEvent);
      this._listeners = [];
      this._argMapping = argMapping;

      if (config.listener) {
        this.__addListener(config.listener);
      }

      this._callListeners = this._callListeners.bind(this);
      this._attachedEvent = null;
      this.__isNative = shouldUseNativeDriver(config);
    }

    babelHelpers.createClass(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this = this;

        if (this.__isNative) {
          return this._callListeners;
        }

        return function () {
          for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var traverse = function traverse(recMapping, recEvt, key) {
            if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
              recMapping.setValue(recEvt);
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
              }
            }
          };

          if (!_this.__isNative) {
            _this._argMapping.forEach(function (mapping, idx) {
              traverse(mapping, args[idx], 'arg' + idx);
            });
          }

          _this._callListeners.apply(_this, babelHelpers.toConsumableArray(args));
        };
      }
    }, {
      key: "_callListeners",
      value: function _callListeners() {
        for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._listeners.forEach(function (listener) {
          return listener.apply(undefined, args);
        });
      }
    }, {
      key: "_validateMapping",
      value: function _validateMapping() {
        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number') {
            invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
          }

          invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
          invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);

          for (var mappingKey in recMapping) {
            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
          }
        };
      }
    }]);
    return AnimatedEvent;
  }();

  module.exports = {
    AnimatedEvent: AnimatedEvent,
    attachNativeEvent: attachNativeEvent
  };
},180,[181,184,46,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0]);

  var AnimatedNode = _require(_dependencyMap[1]);

  var AnimatedWithChildren = _require(_dependencyMap[2]);

  var InteractionManager = _require(_dependencyMap[3]);

  var NativeAnimatedHelper = _require(_dependencyMap[4]);

  var NativeAnimatedAPI = NativeAnimatedHelper.API;
  var _uniqueId = 1;

  function _flush(rootNode) {
    var animatedStyles = new Set();

    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        animatedStyles.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }

    findAnimatedStyles(rootNode);
    animatedStyles.forEach(function (animatedStyle) {
      return animatedStyle.update();
    });
  }

  var AnimatedValue = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedValue, _AnimatedWithChildren);

    function AnimatedValue(value) {
      babelHelpers.classCallCheck(this, AnimatedValue);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      _this._listeners = {};
      return _this;
    }

    babelHelpers.createClass(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        this.stopAnimation();
        babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__makeNative", this).call(this);

        if (Object.keys(this._listeners).length) {
          this._startListeningToNativeValueUpdates();
        }
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();

          this._animation = null;
        }

        this._updateValue(value, !this.__isNative);

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;

        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }

        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];

        if (this.__isNative && Object.keys(this._listeners).length === 0) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};

        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        var _this2 = this;

        if (this.__nativeAnimatedValueListener) {
          return;
        }

        NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
          if (data.tag !== _this2.__getNativeTag()) {
            return;
          }

          _this2._updateValue(data.value, false);
        });
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }

        this.__nativeAnimatedValueListener.remove();

        this.__nativeAnimatedValueListener = null;
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var _this3 = this;

        var handle = null;

        if (animation.__isInteraction) {
          handle = InteractionManager.createInteractionHandle();
        }

        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function (value) {
          _this3._updateValue(value, true);
        }, function (result) {
          _this3._animation = null;

          if (handle !== null) {
            InteractionManager.clearInteractionHandle(handle);
          }

          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        this._value = value;

        if (flush) {
          _flush(this);
        }

        for (var _key in this._listeners) {
          this._listeners[_key]({
            value: this.__getValue()
          });
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);
    return AnimatedValue;
  }(AnimatedWithChildren);

  module.exports = AnimatedValue;
},181,[182,183,185,186,184]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var AnimatedNode = _require(_dependencyMap[0]);

  var AnimatedWithChildren = _require(_dependencyMap[1]);

  var NativeAnimatedHelper = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var normalizeColor = _require(_dependencyMap[4]);

  var linear = function linear(t) {
    return t;
  };

  function createInterpolation(config) {
    if (config.outputRange && typeof config.outputRange[0] === 'string') {
      return createInterpolationFromStringOutputRange(config);
    }

    var outputRange = config.outputRange;
    checkInfiniteRange('outputRange', outputRange);
    var inputRange = config.inputRange;
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
    var easing = config.easing || linear;
    var extrapolateLeft = 'extend';

    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }

    var extrapolateRight = 'extend';

    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }

    return function (input) {
      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }

  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;

    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }

    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }

    if (outputMin === outputMax) {
      return outputMin;
    }

    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }

      return outputMax;
    }

    if (inputMin === -Infinity) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }

    result = easing(result);

    if (outputMin === -Infinity) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }

    return result;
  }

  function colorToRgba(input) {
    var int32Color = normalizeColor(input);

    if (int32Color === null) {
      return input;
    }

    int32Color = int32Color || 0;
    var r = (int32Color & 0xff000000) >>> 24;
    var g = (int32Color & 0x00ff0000) >>> 16;
    var b = (int32Color & 0x0000ff00) >>> 8;
    var a = (int32Color & 0x000000ff) / 255;
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  }

  var stringShapeRegex = /[0-9\.-]+/g;

  function createInterpolationFromStringOutputRange(config) {
    var outputRange = config.outputRange;
    invariant(outputRange.length >= 2, 'Bad output range');
    outputRange = outputRange.map(colorToRgba);
    checkPattern(outputRange);
    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
      return [];
    });
    outputRange.forEach(function (value) {
      value.match(stringShapeRegex).forEach(function (number, i) {
        outputRanges[i].push(+number);
      });
    });
    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
      return createInterpolation(babelHelpers.extends({}, config, {
        outputRange: outputRanges[i]
      }));
    });
    var shouldRound = isRgbOrRgba(outputRange[0]);
    return function (input) {
      var i = 0;
      return outputRange[0].replace(stringShapeRegex, function () {
        var val = +interpolations[i++](input);
        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
        return String(rounded);
      });
    };
  }

  function isRgbOrRgba(range) {
    return typeof range === 'string' && range.startsWith('rgb');
  }

  function checkPattern(arr) {
    var pattern = arr[0].replace(stringShapeRegex, '');

    for (var i = 1; i < arr.length; ++i) {
      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
    }
  }

  function findRange(input, inputRange) {
    var i = void 0;

    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }

    return i - 1;
  }

  function checkValidInputRange(arr) {
    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');

    for (var i = 1; i < arr.length; ++i) {
      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);
    }
  }

  function checkInfiniteRange(name, arr) {
    invariant(arr.length >= 2, name + ' must have at least 2 elements');
    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
  }

  var AnimatedInterpolation = (_temp = _class = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedInterpolation, _AnimatedWithChildren);

    function AnimatedInterpolation(parent, config) {
      babelHelpers.classCallCheck(this, AnimatedInterpolation);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

      _this._parent = parent;
      _this._config = config;
      _this._interpolation = createInterpolation(config);
      return _this;
    }

    babelHelpers.createClass(AnimatedInterpolation, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._parent.__makeNative();

        babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();

        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._interpolation(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__transformDataType",
      value: function __transformDataType(range) {
        return range.map(function (value) {
          if (typeof value !== 'string') {
            return value;
          }

          if (/deg$/.test(value)) {
            var degrees = parseFloat(value) || 0;
            var radians = degrees * Math.PI / 180.0;
            return radians;
          } else {
            return parseFloat(value) || 0;
          }
        });
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          inputRange: this._config.inputRange,
          outputRange: this.__transformDataType(this._config.outputRange),
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);
    return AnimatedInterpolation;
  }(AnimatedWithChildren), _class.__createInterpolation = createInterpolation, _temp);
  module.exports = AnimatedInterpolation;
},182,[183,185,184,15,44]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedHelper = _require(_dependencyMap[0]);

  var invariant = _require(_dependencyMap[1]);

  var AnimatedNode = function () {
    function AnimatedNode() {
      babelHelpers.classCallCheck(this, AnimatedNode);
    }

    babelHelpers.createClass(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this.__nativeTag != null) {
          NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        NativeAnimatedHelper.assertNativeAnimatedModule();
        invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');

        if (this.__nativeTag == null) {
          var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
          NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());
          this.__nativeTag = nativeTag;
        }

        return this.__nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }]);
    return AnimatedNode;
  }();

  module.exports = AnimatedNode;
},183,[184,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedModule = _require(_dependencyMap[0]).NativeAnimatedModule;

  var NativeEventEmitter = _require(_dependencyMap[1]);

  var invariant = _require(_dependencyMap[2]);

  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter = void 0;
  var API = {
    createAnimatedNode: function createAnimatedNode(tag, config) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.createAnimatedNode(tag, config);
    },
    startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation: function stopAnimation(animationId) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopAnimation(animationId);
    },
    setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    dropAnimatedNode: function dropAnimatedNode(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.dropAnimatedNode(tag);
    },
    addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
  };
  var STYLES_WHITELIST = {
    opacity: true,
    transform: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var TRANSFORM_WHITELIST = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    perspective: true
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };

  function addWhitelistedStyleProp(prop) {
    STYLES_WHITELIST[prop] = true;
  }

  function addWhitelistedTransformProp(prop) {
    TRANSFORM_WHITELIST[prop] = true;
  }

  function addWhitelistedInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }

  function validateTransform(configs) {
    configs.forEach(function (config) {
      if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
        throw new Error("Property '" + config.property + "' is not supported by native animated module");
      }
    });
  }

  function validateStyles(styles) {
    for (var key in styles) {
      if (!STYLES_WHITELIST.hasOwnProperty(key)) {
        throw new Error("Style property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function validateInterpolation(config) {
    for (var key in config) {
      if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
        throw new Error("Interpolation property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }

  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }

  function assertNativeAnimatedModule() {
    invariant(NativeAnimatedModule, 'Native animated module is not available');
  }

  var _warnedMissingNativeAnimated = false;

  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver && !NativeAnimatedModule) {
      if (!_warnedMissingNativeAnimated) {
        console.warn("Animated: `useNativeDriver` is not supported because the native animated module is missing. Falling back to JS-based animation. To resolve this, add `RCTAnimation` module to this app, or remove `useNativeDriver`. More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420");
        _warnedMissingNativeAnimated = true;
      }

      return false;
    }

    return config.useNativeDriver || false;
  }

  module.exports = {
    API: API,
    addWhitelistedStyleProp: addWhitelistedStyleProp,
    addWhitelistedTransformProp: addWhitelistedTransformProp,
    addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
    validateStyles: validateStyles,
    validateTransform: validateTransform,
    validateInterpolation: validateInterpolation,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,

    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
      }

      return nativeEventEmitter;
    }

  };
},184,[17,70,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = _require(_dependencyMap[0]);

  var NativeAnimatedHelper = _require(_dependencyMap[1]);

  var AnimatedWithChildren = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedWithChildren, _AnimatedNode);

    function AnimatedWithChildren() {
      babelHelpers.classCallCheck(this, AnimatedWithChildren);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

      _this._children = [];
      return _this;
    }

    babelHelpers.createClass(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var child = _ref;

            child.__makeNative();

            NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
          }
        }
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }

        this._children.push(child);

        if (this.__isNative) {
          child.__makeNative();

          NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        if (this.__isNative && child.__isNative) {
          NativeAnimatedHelper.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }

        this._children.splice(index, 1);

        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }]);
    return AnimatedWithChildren;
  }(AnimatedNode);

  module.exports = AnimatedWithChildren;
},185,[183,184]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0]);

  var EventEmitter = _require(_dependencyMap[1]);

  var Set = _require(_dependencyMap[2]);

  var TaskQueue = _require(_dependencyMap[3]);

  var infoLog = _require(_dependencyMap[4]);

  var invariant = _require(_dependencyMap[5]);

  var keyMirror = _require(_dependencyMap[6]);

  var _emitter = new EventEmitter();

  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManager = {
    Events: keyMirror({
      interactionStart: true,
      interactionComplete: true
    }),
    runAfterInteractions: function runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(function (resolve) {
        _scheduleUpdate();

        if (task) {
          tasks.push(task);
        }

        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });

        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        done: function done() {
          if (promise.done) {
            return promise.done.apply(promise, arguments);
          } else {
            console.warn('Tried to call done when not supported by current Promise implementation.');
          }
        },
        cancel: function cancel() {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle: function createInteractionHandle() {
      DEBUG && infoLog('create interaction handle');

      _scheduleUpdate();

      var handle = ++_inc;

      _addInteractionSet.add(handle);

      return handle;
    },
    clearInteractionHandle: function clearInteractionHandle(handle) {
      DEBUG && infoLog('clear interaction handle');
      invariant(!!handle, 'Must provide a handle to clear.');

      _scheduleUpdate();

      _addInteractionSet.delete(handle);

      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline: function setDeadline(deadline) {
      _deadline = deadline;
    }
  };

  var _interactionSet = new Set();

  var _addInteractionSet = new Set();

  var _deleteInteractionSet = new Set();

  var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
  });

  var _nextUpdateHandle = 0;
  var _inc = 0;

  var _deadline = -1;

  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }

  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;

    _addInteractionSet.forEach(function (handle) {
      return _interactionSet.add(handle);
    });

    _deleteInteractionSet.forEach(function (handle) {
      return _interactionSet.delete(handle);
    });

    var nextInteractionCount = _interactionSet.size;

    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }

    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();

        if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();

          break;
        }
      }
    }

    _addInteractionSet.clear();

    _deleteInteractionSet.clear();
  }

  module.exports = InteractionManager;
},186,[18,38,55,187,95,15,119]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var infoLog = _require(_dependencyMap[0]);

  var invariant = _require(_dependencyMap[1]);

  var DEBUG = false;

  var TaskQueue = function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;
      babelHelpers.classCallCheck(this, TaskQueue);
      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }

    babelHelpers.createClass(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        var _this = this;

        tasks.forEach(function (task) {
          return _this.enqueue(task);
        });
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(function (queue) {
          return babelHelpers.extends({}, queue, {
            tasks: queue.tasks.filter(function (task) {
              return tasksToCancel.indexOf(task) === -1;
            })
          });
        }).filter(function (queue, idx) {
          return queue.tasks.length > 0 || idx === 0;
        });
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();

        if (queue.length) {
          var task = queue.shift();

          try {
            if (task.gen) {
              DEBUG && infoLog('genPromise for task ' + task.name);

              this._genPromise(task);
            } else if (task.run) {
              DEBUG && infoLog('run task ' + task.name);
              task.run();
            } else {
              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG && infoLog('run anonymous task');
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];

        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();

          DEBUG && infoLog('popped queue: ', {
            stackIdx: stackIdx,
            queueStackSize: this._queueStack.length
          });
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        var _this2 = this;

        this._queueStack.push({
          tasks: [],
          popable: false
        });

        var stackIdx = this._queueStack.length - 1;
        DEBUG && infoLog('push new queue: ', {
          stackIdx: stackIdx
        });
        DEBUG && infoLog('exec gen task ' + task.name);
        task.gen().then(function () {
          DEBUG && infoLog('onThen for gen task ' + task.name, {
            stackIdx: stackIdx,
            queueStackSize: _this2._queueStack.length
          });
          _this2._queueStack[stackIdx].popable = true;
          _this2.hasTasksToProcess() && _this2._onMoreTasks();
        }).catch(function (ex) {
          ex.message = "TaskQueue: Error resolving Promise in task " + task.name + ": " + ex.message;
          throw ex;
        }).done();
      }
    }]);
    return TaskQueue;
  }();

  module.exports = TaskQueue;
},187,[95,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0]);

  var AnimatedNode = _require(_dependencyMap[1]);

  var AnimatedValue = _require(_dependencyMap[2]);

  var AnimatedWithChildren = _require(_dependencyMap[3]);

  var AnimatedAddition = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedAddition, _AnimatedWithChildren);

    function AnimatedAddition(a, b) {
      babelHelpers.classCallCheck(this, AnimatedAddition);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedAddition;
  }(AnimatedWithChildren);

  module.exports = AnimatedAddition;
},188,[182,183,181,185]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0]);

  var AnimatedNode = _require(_dependencyMap[1]);

  var AnimatedWithChildren = _require(_dependencyMap[2]);

  var AnimatedDiffClamp = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedDiffClamp, _AnimatedWithChildren);

    function AnimatedDiffClamp(a, min, max) {
      babelHelpers.classCallCheck(this, AnimatedDiffClamp);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedDiffClamp.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp)).call(this));

      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }

    babelHelpers.createClass(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();

        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);
    return AnimatedDiffClamp;
  }(AnimatedWithChildren);

  module.exports = AnimatedDiffClamp;
},189,[182,183,185]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0]);

  var AnimatedNode = _require(_dependencyMap[1]);

  var AnimatedValue = _require(_dependencyMap[2]);

  var AnimatedWithChildren = _require(_dependencyMap[3]);

  var AnimatedDivision = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedDivision, _AnimatedWithChildren);

    function AnimatedDivision(a, b) {
      babelHelpers.classCallCheck(this, AnimatedDivision);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedDivision.__proto__ || Object.getPrototypeOf(AnimatedDivision)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();

        var b = this._b.__getValue();

        if (b === 0) {
          console.error('Detected division by zero in AnimatedDivision');
        }

        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedDivision;
  }(AnimatedWithChildren);

  module.exports = AnimatedDivision;
},190,[182,183,181,185]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0]);

  var AnimatedNode = _require(_dependencyMap[1]);

  var AnimatedWithChildren = _require(_dependencyMap[2]);

  var AnimatedModulo = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedModulo, _AnimatedWithChildren);

    function AnimatedModulo(a, modulus) {
      babelHelpers.classCallCheck(this, AnimatedModulo);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }

    babelHelpers.createClass(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);
    return AnimatedModulo;
  }(AnimatedWithChildren);

  module.exports = AnimatedModulo;
},191,[182,183,185]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0]);

  var AnimatedNode = _require(_dependencyMap[1]);

  var AnimatedValue = _require(_dependencyMap[2]);

  var AnimatedWithChildren = _require(_dependencyMap[3]);

  var AnimatedMultiplication = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedMultiplication, _AnimatedWithChildren);

    function AnimatedMultiplication(a, b) {
      babelHelpers.classCallCheck(this, AnimatedMultiplication);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedMultiplication;
  }(AnimatedWithChildren);

  module.exports = AnimatedMultiplication;
},192,[182,183,181,185]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedNode = _require2(_dependencyMap[1]);

  var AnimatedStyle = _require2(_dependencyMap[2]);

  var NativeAnimatedHelper = _require2(_dependencyMap[3]);

  var ReactNative = _require2(_dependencyMap[4]);

  var invariant = _require2(_dependencyMap[5]);

  var AnimatedProps = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, callback) {
      babelHelpers.classCallCheck(this, AnimatedProps);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

      if (props.style) {
        props = babelHelpers.extends({}, props, {
          style: new AnimatedStyle(props.style)
        });
      }

      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    babelHelpers.createClass(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative || value instanceof AnimatedStyle) {
              props[key] = value.__getValue();
            }
          } else if (value instanceof AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }

        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            props[key] = value.__getAnimatedValue();
          }
        }

        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        babelHelpers.get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var key in this._props) {
            var value = this._props[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }

          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;

        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};

        for (var propKey in this._props) {
          var value = this._props[propKey];

          if (value instanceof AnimatedNode) {
            propsConfig[propKey] = value.__getNativeTag();
          }
        }

        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);
    return AnimatedProps;
  }(AnimatedNode);

  module.exports = AnimatedProps;
},193,[180,183,194,184,46,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = _require(_dependencyMap[0]);

  var AnimatedTransform = _require(_dependencyMap[1]);

  var AnimatedWithChildren = _require(_dependencyMap[2]);

  var NativeAnimatedHelper = _require(_dependencyMap[3]);

  var flattenStyle = _require(_dependencyMap[4]);

  var AnimatedStyle = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedStyle, _AnimatedWithChildren);

    function AnimatedStyle(style) {
      babelHelpers.classCallCheck(this, AnimatedStyle);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

      style = flattenStyle(style) || {};

      if (style.transform) {
        style = babelHelpers.extends({}, style, {
          transform: new AnimatedTransform(style.transform)
        });
      }

      _this._style = style;
      return _this;
    }

    babelHelpers.createClass(AnimatedStyle, [{
      key: "_walkStyleAndGetValues",
      value: function _walkStyleAndGetValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative) {
              updatedStyle[key] = value.__getValue();
            }
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetValues(value);
          } else {
            updatedStyle[key] = value;
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._walkStyleAndGetValues(this._style);
      }
    }, {
      key: "_walkStyleAndGetAnimatedValues",
      value: function _walkStyleAndGetAnimatedValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            updatedStyle[key] = value.__getAnimatedValue();
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__makeNative", this).call(this);

        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};

        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof AnimatedNode) {
            styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
          }
        }

        NativeAnimatedHelper.validateStyles(styleConfig);
        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);
    return AnimatedStyle;
  }(AnimatedWithChildren);

  module.exports = AnimatedStyle;
},194,[183,195,185,184,101]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = _require(_dependencyMap[0]);

  var AnimatedWithChildren = _require(_dependencyMap[1]);

  var NativeAnimatedHelper = _require(_dependencyMap[2]);

  var AnimatedTransform = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedTransform, _AnimatedWithChildren);

    function AnimatedTransform(transforms) {
      babelHelpers.classCallCheck(this, AnimatedTransform);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

      _this._transforms = transforms;
      return _this;
    }

    babelHelpers.createClass(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__makeNative", this).call(this);

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }
        });
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getAnimatedValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__addChild(_this2);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__removeChild(_this3);
            }
          }
        });

        babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: value
              });
            }
          }
        });

        NativeAnimatedHelper.validateTransform(transConfigs);
        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }]);
    return AnimatedTransform;
  }(AnimatedWithChildren);

  module.exports = AnimatedTransform;
},195,[183,185,184]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = _require2(_dependencyMap[0]);

  var AnimatedNode = _require2(_dependencyMap[1]);

  var _require = _require2(_dependencyMap[2]),
      generateNewAnimationId = _require.generateNewAnimationId,
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var AnimatedTracking = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedTracking, _AnimatedNode);

    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      babelHelpers.classCallCheck(this, AnimatedTracking);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._useNativeDriver = shouldUseNativeDriver(animationConfig);
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    babelHelpers.createClass(AnimatedTracking, [{
      key: "__makeNative",
      value: function __makeNative() {
        this.__isNative = true;

        this._parent.__makeNative();

        babelHelpers.get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), "__makeNative", this).call(this);

        this._value.__makeNative();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);

        if (this._useNativeDriver) {
          this.__makeNative();
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        babelHelpers.get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass(babelHelpers.extends({}, this._animationConfig, {
          toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var animation = new this._animationClass(babelHelpers.extends({}, this._animationConfig, {
          toValue: undefined
        }));

        var animationConfig = animation.__getNativeAnimationConfig();

        return {
          type: 'tracking',
          animationId: generateNewAnimationId(),
          animationConfig: animationConfig,
          toValue: this._parent.__getNativeTag(),
          value: this._value.__getNativeTag()
        };
      }
    }]);
    return AnimatedTracking;
  }(AnimatedNode);

  module.exports = AnimatedTracking;
},196,[181,183,184]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = _require(_dependencyMap[0]);

  var AnimatedWithChildren = _require(_dependencyMap[1]);

  var invariant = _require(_dependencyMap[2]);

  var _uniqueId = 1;

  var AnimatedValueXY = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedValueXY, _AnimatedWithChildren);

    function AnimatedValueXY(valueIn) {
      babelHelpers.classCallCheck(this, AnimatedValueXY);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

      var value = valueIn || {
        x: 0,
        y: 0
      };

      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new AnimatedValue(value.x);
        _this.y = new AnimatedValue(value.y);
      } else {
        invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, "AnimatedValueXY must be initialized with an object of numbers or AnimatedValues.");
        _this.x = value.x;
        _this.y = value.y;
      }

      _this._listeners = {};
      return _this;
    }

    babelHelpers.createClass(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback(_ref) {
          var number = _ref.value;
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }]);
    return AnimatedValueXY;
  }(AnimatedWithChildren);

  module.exports = AnimatedValueXY;
},197,[181,185,15]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var Animation = _require2(_dependencyMap[0]);

  var _require = _require2(_dependencyMap[1]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var DecayAnimation = function (_Animation) {
    babelHelpers.inherits(DecayAnimation, _Animation);

    function DecayAnimation(config) {
      babelHelpers.classCallCheck(this, DecayAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

      _this._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      return _this;
    }

    babelHelpers.createClass(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();

        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

        this._onUpdate(value);

        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._lastValue = value;

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return DecayAnimation;
  }(Animation);

  module.exports = DecayAnimation;
},198,[199,184]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedHelper = _require(_dependencyMap[0]);

  var Animation = function () {
    function Animation() {
      babelHelpers.classCallCheck(this, Animation);
    }

    babelHelpers.createClass(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        animatedValue.__makeNative();

        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      }
    }]);
    return Animation;
  }();

  module.exports = Animation;
},199,[184]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = _require2(_dependencyMap[0]);

  var AnimatedValueXY = _require2(_dependencyMap[1]);

  var Animation = _require2(_dependencyMap[2]);

  var SpringConfig = _require2(_dependencyMap[3]);

  var invariant = _require2(_dependencyMap[4]);

  var _require = _require2(_dependencyMap[5]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function withDefault(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    }

    return value;
  }

  var SpringAnimation = function (_Animation) {
    babelHelpers.inherits(SpringAnimation, _Animation);

    function SpringAnimation(config) {
      babelHelpers.classCallCheck(this, SpringAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

      _this._overshootClamping = withDefault(config.overshootClamping, false);
      _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
      _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
      _this._initialVelocity = withDefault(config.velocity, 0);
      _this._lastVelocity = withDefault(config.velocity, 0);
      _this._toValue = config.toValue;
      _this._delay = withDefault(config.delay, 0);
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = withDefault(config.stiffness, 100);
        _this._damping = withDefault(config.damping, 10);
        _this._mass = withDefault(config.mass, 1);
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      invariant(_this._damping > 0, 'Damping value must be greater than 0');
      invariant(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }

    babelHelpers.createClass(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;

        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }

        var start = function start() {
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2.onUpdate();
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();

        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }

        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;

        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);

          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }

        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;

        this._onUpdate(position);

        if (!this.__active) {
          return;
        }

        var isOvershooting = false;

        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }

        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;

        var isDisplacement = true;

        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }

        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;

            this._onUpdate(this._toValue);
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(SpringAnimation.prototype.__proto__ || Object.getPrototypeOf(SpringAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return SpringAnimation;
  }(Animation);

  module.exports = SpringAnimation;
},200,[181,197,199,201,15,184]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }

  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }

  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }

  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }

    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }

    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }

    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }

    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }

    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }

    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }

    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }

    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }

  module.exports = {
    fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
    fromBouncinessAndSpeed: fromBouncinessAndSpeed
  };
},201,[]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = _require2(_dependencyMap[0]);

  var AnimatedValueXY = _require2(_dependencyMap[1]);

  var Animation = _require2(_dependencyMap[2]);

  var _require = _require2(_dependencyMap[3]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var _easeInOut = void 0;

  function easeInOut() {
    if (!_easeInOut) {
      var Easing = _require2(_dependencyMap[4]);

      _easeInOut = Easing.inOut(Easing.ease);
    }

    return _easeInOut;
  }

  var TimingAnimation = function (_Animation) {
    babelHelpers.inherits(TimingAnimation, _Animation);

    function TimingAnimation(config) {
      babelHelpers.classCallCheck(this, TimingAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

      _this._toValue = config.toValue;
      _this._easing = config.easing !== undefined ? config.easing : easeInOut();
      _this._duration = config.duration !== undefined ? config.duration : 500;
      _this._delay = config.delay !== undefined ? config.delay : 0;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      return _this;
    }

    babelHelpers.createClass(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 16.666666666666668;
        var frames = [];

        for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
          frames.push(this._easing(dt / this._duration));
        }

        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames: frames,
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;

        var start = function start() {
          if (_this2._duration === 0 && !_this2._useNativeDriver) {
            _this2._onUpdate(_this2._toValue);

            _this2.__debouncedOnEnd({
              finished: true
            });
          } else {
            _this2._startTime = Date.now();

            if (_this2._useNativeDriver) {
              _this2.__startNativeAnimation(animatedValue);
            } else {
              _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
            }
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();

        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return TimingAnimation;
  }(Animation);

  module.exports = TimingAnimation;
},202,[181,197,199,184,203]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _ease = void 0;

  var Easing = function () {
    function Easing() {
      babelHelpers.classCallCheck(this, Easing);
    }

    babelHelpers.createClass(Easing, null, [{
      key: "step0",
      value: function step0(n) {
        return n > 0 ? 1 : 0;
      }
    }, {
      key: "step1",
      value: function step1(n) {
        return n >= 1 ? 1 : 0;
      }
    }, {
      key: "linear",
      value: function linear(t) {
        return t;
      }
    }, {
      key: "ease",
      value: function ease(t) {
        if (!_ease) {
          _ease = Easing.bezier(0.42, 0, 1, 1);
        }

        return _ease(t);
      }
    }, {
      key: "quad",
      value: function quad(t) {
        return t * t;
      }
    }, {
      key: "cubic",
      value: function cubic(t) {
        return t * t * t;
      }
    }, {
      key: "poly",
      value: function poly(n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }
    }, {
      key: "sin",
      value: function sin(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, {
      key: "circle",
      value: function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
    }, {
      key: "exp",
      value: function exp(t) {
        return Math.pow(2, 10 * (t - 1));
      }
    }, {
      key: "elastic",
      value: function elastic() {
        var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
        };
      }
    }, {
      key: "back",
      value: function back(s) {
        if (s === undefined) {
          s = 1.70158;
        }

        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      }
    }, {
      key: "bounce",
      value: function bounce(t) {
        if (t < 0.36363636363636365) {
          return 7.5625 * t * t;
        }

        if (t < 0.7272727272727273) {
          t -= 0.5454545454545454;
          return 7.5625 * t * t + 0.75;
        }

        if (t < 0.9090909090909091) {
          t -= 0.8181818181818182;
          return 7.5625 * t * t + 0.9375;
        }

        t -= 0.9545454545454546;
        return 7.5625 * t * t + 0.984375;
      }
    }, {
      key: "bezier",
      value: function bezier(x1, y1, x2, y2) {
        var _bezier = _require(_dependencyMap[0]);

        return _bezier(x1, y1, x2, y2);
      }
    }, {
      key: "in",
      value: function _in(easing) {
        return easing;
      }
    }, {
      key: "out",
      value: function out(easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }
    }, {
      key: "inOut",
      value: function inOut(easing) {
        return function (t) {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }

          return 1 - easing((1 - t) * 2) / 2;
        };
      }
    }]);
    return Easing;
  }();

  module.exports = Easing;
},203,[204]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  module.exports = function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0) {
        return 0;
      }

      if (x === 1) {
        return 1;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  };
},204,[]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedProps = _require2(_dependencyMap[1]);

  var React = _require2(_dependencyMap[2]);

  var ViewStylePropTypes = _require2(_dependencyMap[3]);

  var invariant = _require2(_dependencyMap[4]);

  function createAnimatedComponent(Component) {
    var _class, _temp;

    invariant(typeof Component === 'string' || Component.prototype && Component.prototype.isReactComponent, "`createAnimatedComponent` does not support stateless functional components; use a class component instead.");
    var AnimatedComponent = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(AnimatedComponent, _React$Component);

      function AnimatedComponent(props) {
        babelHelpers.classCallCheck(this, AnimatedComponent);

        var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

        _this._invokeAnimatedPropsCallbackOnMount = false;
        _this._eventDetachers = [];

        _this._animatedPropsCallback = function () {
          if (_this._component == null) {
            _this._invokeAnimatedPropsCallbackOnMount = true;
          } else if (AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY || typeof _this._component.setNativeProps !== 'function') {
            _this.forceUpdate();
          } else if (!_this._propsAnimated.__isNative) {
            _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
          } else {
            throw new Error("Attempting to run JS driven animation on animated node that has been moved to \"native\" earlier by starting an animation with `useNativeDriver: true`");
          }
        };

        _this._setComponentRef = _this._setComponentRef.bind(_this);
        return _this;
      }

      babelHelpers.createClass(AnimatedComponent, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._propsAnimated && this._propsAnimated.__detach();

          this._detachNativeEvents();
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          this._component.setNativeProps(props);
        }
      }, {
        key: "UNSAFE_componentWillMount",
        value: function UNSAFE_componentWillMount() {
          this._attachProps(this.props);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this._invokeAnimatedPropsCallbackOnMount) {
            this._invokeAnimatedPropsCallbackOnMount = false;

            this._animatedPropsCallback();
          }

          this._propsAnimated.setNativeView(this._component);

          this._attachNativeEvents();
        }
      }, {
        key: "_attachNativeEvents",
        value: function _attachNativeEvents() {
          var _this2 = this;

          var scrollableNode = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

          var _loop = function _loop(key) {
            var prop = _this2.props[key];

            if (prop instanceof AnimatedEvent && prop.__isNative) {
              prop.__attach(scrollableNode, key);

              _this2._eventDetachers.push(function () {
                return prop.__detach(scrollableNode, key);
              });
            }
          };

          for (var key in this.props) {
            _loop(key);
          }
        }
      }, {
        key: "_detachNativeEvents",
        value: function _detachNativeEvents() {
          this._eventDetachers.forEach(function (remove) {
            return remove();
          });

          this._eventDetachers = [];
        }
      }, {
        key: "_attachProps",
        value: function _attachProps(nextProps) {
          var oldPropsAnimated = this._propsAnimated;
          this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);
          oldPropsAnimated && oldPropsAnimated.__detach();
        }
      }, {
        key: "UNSAFE_componentWillReceiveProps",
        value: function UNSAFE_componentWillReceiveProps(newProps) {
          this._attachProps(newProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this._component !== this._prevComponent) {
            this._propsAnimated.setNativeView(this._component);
          }

          if (this._component !== this._prevComponent || prevProps !== this.props) {
            this._detachNativeEvents();

            this._attachNativeEvents();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props = this._propsAnimated.__getValue();

          return React.createElement(Component, babelHelpers.extends({}, props, {
            ref: this._setComponentRef,
            collapsable: this._propsAnimated.__isNative ? false : props.collapsable
          }));
        }
      }, {
        key: "_setComponentRef",
        value: function _setComponentRef(c) {
          this._prevComponent = this._component;
          this._component = c;
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this._component;
        }
      }]);
      return AnimatedComponent;
    }(React.Component), _class.__skipSetNativeProps_FOR_TESTS_ONLY = false, _temp);
    var propTypes = Component.propTypes;
    AnimatedComponent.propTypes = {
      style: function style(props, propName, componentName) {
        if (!propTypes) {
          return;
        }

        for (var key in ViewStylePropTypes) {
          if (!propTypes[key] && props[key] !== undefined) {
            console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
          }
        }
      }
    };
    return AnimatedComponent;
  }

  module.exports = createAnimatedComponent;
},205,[180,193,111,128,15]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var ImageResizeMode = _require2(_dependencyMap[0]);

  var ImageStylePropTypes = _require2(_dependencyMap[1]);

  var NativeMethodsMixin = _require2(_dependencyMap[2]);

  var NativeModules = _require2(_dependencyMap[3]);

  var React = _require2(_dependencyMap[4]);

  var PropTypes = _require2(_dependencyMap[5]);

  var ReactNativeViewAttributes = _require2(_dependencyMap[6]);

  var StyleSheet = _require2(_dependencyMap[7]);

  var StyleSheetPropType = _require2(_dependencyMap[8]);

  var ViewPropTypes = _require2(_dependencyMap[9]);

  var createReactClass = _require2(_dependencyMap[10]);

  var flattenStyle = _require2(_dependencyMap[11]);

  var merge = _require2(_dependencyMap[12]);

  var requireNativeComponent = _require2(_dependencyMap[13]);

  var resolveAssetSource = _require2(_dependencyMap[14]);

  var _require = _require2(_dependencyMap[15]),
      ViewContextTypes = _require.ViewContextTypes;

  var ImageLoader = NativeModules.ImageLoader;
  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var Image = createReactClass({
    displayName: 'Image',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      style: StyleSheetPropType(ImageStylePropTypes),
      source: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string,
        headers: PropTypes.objectOf(PropTypes.string)
      }), PropTypes.number, PropTypes.arrayOf(PropTypes.shape({
        uri: PropTypes.string,
        width: PropTypes.number,
        height: PropTypes.number,
        headers: PropTypes.objectOf(PropTypes.string)
      }))]),
      blurRadius: PropTypes.number,
      loadingIndicatorSource: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string
      }), PropTypes.number]),
      progressiveRenderingEnabled: PropTypes.bool,
      fadeDuration: PropTypes.number,
      onLoadStart: PropTypes.func,
      onError: PropTypes.func,
      onLoad: PropTypes.func,
      onLoadEnd: PropTypes.func,
      testID: PropTypes.string,
      resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),
      resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'center'])
    }),
    statics: {
      resizeMode: ImageResizeMode,
      getSize: function getSize(url, success, failure) {
        return ImageLoader.getSize(url).then(function (sizes) {
          success(sizes.width, sizes.height);
        }).catch(failure || function () {
          console.warn('Failed to get size for image: ' + url);
        });
      },
      prefetch: function prefetch(url, callback) {
        var requestId = generateRequestId();
        callback && callback(requestId);
        return ImageLoader.prefetchImage(url, requestId);
      },
      abortPrefetch: function abortPrefetch(requestId) {
        ImageLoader.abortRequest(requestId);
      },
      queryCache: function queryCache(urls) {
        return regeneratorRuntime.async(function queryCache$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return regeneratorRuntime.awrap(ImageLoader.queryCache(urls));

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      },
      resolveAssetSource: resolveAssetSource
    },
    mixins: [NativeMethodsMixin],
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    contextTypes: ViewContextTypes,
    render: function render() {
      var source = resolveAssetSource(this.props.source);
      var loadingIndicatorSource = resolveAssetSource(this.props.loadingIndicatorSource);

      if (source && source.uri === '') {
        console.warn('source.uri should not be an empty string');
      }

      if (this.props.src) {
        console.warn('The <Image> component requires a `source` property rather than `src`.');
      }

      if (this.props.children) {
        throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
      }

      if (source && (source.uri || Array.isArray(source))) {
        var style = void 0;
        var sources = void 0;

        if (source.uri) {
          var _width = source.width,
              _height = source.height;
          style = flattenStyle([{
            width: _width,
            height: _height
          }, styles.base, this.props.style]);
          sources = [{
            uri: source.uri
          }];
        } else {
          style = flattenStyle([styles.base, this.props.style]);
          sources = source;
        }

        var _props = this.props,
            onLoadStart = _props.onLoadStart,
            onLoad = _props.onLoad,
            onLoadEnd = _props.onLoadEnd,
            onError = _props.onError;
        var nativeProps = merge(this.props, {
          style: style,
          shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
          src: sources,
          headers: source.headers,
          loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null
        });

        if (this.context.isInAParentText) {
          return React.createElement(RCTTextInlineImage, nativeProps);
        } else {
          return React.createElement(RKImage, nativeProps);
        }
      }

      return null;
    }
  });
  var styles = StyleSheet.create({
    base: {
      overflow: 'hidden'
    }
  });
  var cfg = {
    nativeOnly: {
      src: true,
      headers: true,
      loadingIndicatorSrc: true,
      shouldNotifyLoadEvents: true
    }
  };
  var RKImage = requireNativeComponent('RCTImageView', Image, cfg);
  var RCTTextInlineImage = requireNativeComponent('RCTTextInlineImage', Image, cfg);
  module.exports = Image;
},1080,[118,117,45,17,111,121,135,112,144,136,158,101,139,147,153,146]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedImplementation = _require(_dependencyMap[0]);

  var ColorPropType = _require(_dependencyMap[1]);

  var EdgeInsetsPropType = _require(_dependencyMap[2]);

  var Platform = _require(_dependencyMap[3]);

  var PointPropType = _require(_dependencyMap[4]);

  var PropTypes = _require(_dependencyMap[5]);

  var React = _require(_dependencyMap[6]);

  var ReactNative = _require(_dependencyMap[7]);

  var ScrollResponder = _require(_dependencyMap[8]);

  var ScrollViewStickyHeader = _require(_dependencyMap[9]);

  var StyleSheet = _require(_dependencyMap[10]);

  var StyleSheetPropType = _require(_dependencyMap[11]);

  var View = _require(_dependencyMap[12]);

  var ViewPropTypes = _require(_dependencyMap[13]);

  var ViewStylePropTypes = _require(_dependencyMap[14]);

  var createReactClass = _require(_dependencyMap[15]);

  var dismissKeyboard = _require(_dependencyMap[16]);

  var flattenStyle = _require(_dependencyMap[17]);

  var invariant = _require(_dependencyMap[18]);

  var processDecelerationRate = _require(_dependencyMap[19]);

  var requireNativeComponent = _require(_dependencyMap[20]);

  var warning = _require(_dependencyMap[21]);

  var resolveAssetSource = _require(_dependencyMap[22]);

  var ScrollView = createReactClass({
    displayName: 'ScrollView',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      automaticallyAdjustContentInsets: PropTypes.bool,
      contentInset: EdgeInsetsPropType,
      contentOffset: PointPropType,
      bounces: PropTypes.bool,
      bouncesZoom: PropTypes.bool,
      alwaysBounceHorizontal: PropTypes.bool,
      alwaysBounceVertical: PropTypes.bool,
      centerContent: PropTypes.bool,
      contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),
      decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),
      horizontal: PropTypes.bool,
      indicatorStyle: PropTypes.oneOf(['default', 'black', 'white']),
      invertStickyHeaders: PropTypes.bool,
      directionalLockEnabled: PropTypes.bool,
      canCancelContentTouches: PropTypes.bool,
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag', 'interactive']),
      keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),
      maintainVisibleContentPosition: PropTypes.shape({
        minIndexForVisible: PropTypes.number.isRequired,
        autoscrollToTopThreshold: PropTypes.number
      }),
      maximumZoomScale: PropTypes.number,
      minimumZoomScale: PropTypes.number,
      onMomentumScrollBegin: PropTypes.func,
      onMomentumScrollEnd: PropTypes.func,
      onScroll: PropTypes.func,
      onScrollBeginDrag: PropTypes.func,
      onScrollEndDrag: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      pagingEnabled: PropTypes.bool,
      pinchGestureEnabled: PropTypes.bool,
      scrollEnabled: PropTypes.bool,
      scrollEventThrottle: PropTypes.number,
      scrollIndicatorInsets: EdgeInsetsPropType,
      scrollsToTop: PropTypes.bool,
      showsHorizontalScrollIndicator: PropTypes.bool,
      showsVerticalScrollIndicator: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),
      snapToInterval: PropTypes.number,
      snapToAlignment: PropTypes.oneOf(['start', 'center', 'end']),
      removeClippedSubviews: PropTypes.bool,
      zoomScale: PropTypes.number,
      contentInsetAdjustmentBehavior: PropTypes.oneOf(['automatic', 'scrollableAxes', 'never', 'always']),
      refreshControl: PropTypes.element,
      endFillColor: ColorPropType,
      scrollPerfTag: PropTypes.string,
      overScrollMode: PropTypes.oneOf(['auto', 'always', 'never']),
      DEPRECATED_sendUpdatedChildFrames: PropTypes.bool,
      scrollBarThumbImage: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string
      }), PropTypes.number])
    }),
    mixins: [ScrollResponder.Mixin],
    _scrollAnimatedValue: new AnimatedImplementation.Value(0),
    _scrollAnimatedValueAttachment: null,
    _stickyHeaderRefs: new Map(),
    _headerLayoutYs: new Map(),
    getInitialState: function getInitialState() {
      return babelHelpers.extends({}, this.scrollResponderMixinGetInitialState(), {
        layoutHeight: null
      });
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._scrollAnimatedValue = new AnimatedImplementation.Value(this.props.contentOffset ? this.props.contentOffset.y : 0);

      this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);

      this._stickyHeaderRefs = new Map();
      this._headerLayoutYs = new Map();
    },
    componentDidMount: function componentDidMount() {
      this._updateAnimatedNodeAttachment();
    },
    componentDidUpdate: function componentDidUpdate() {
      this._updateAnimatedNodeAttachment();
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    },
    setNativeProps: function setNativeProps(props) {
      this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
    },
    getScrollResponder: function getScrollResponder() {
      return this;
    },
    getScrollableNode: function getScrollableNode() {
      return ReactNative.findNodeHandle(this._scrollViewRef);
    },
    getInnerViewNode: function getInnerViewNode() {
      return ReactNative.findNodeHandle(this._innerViewRef);
    },
    scrollTo: function scrollTo(y, x, animated) {
      if (typeof y === 'number') {
        console.warn("`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.");
      } else {
        var _ref = y || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      this.getScrollResponder().scrollResponderScrollTo({
        x: x || 0,
        y: y || 0,
        animated: animated !== false
      });
    },
    scrollToEnd: function scrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      this.getScrollResponder().scrollResponderScrollToEnd({
        animated: animated
      });
    },
    scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
      var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
      this.scrollTo({
        x: x,
        y: y,
        animated: false
      });
    },
    flashScrollIndicators: function flashScrollIndicators() {
      this.getScrollResponder().scrollResponderFlashScrollIndicators();
    },
    _getKeyForIndex: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    },
    _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }

      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    },
    _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs.delete(key);
      }
    },
    _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
      if (!this.props.stickyHeaderIndices) {
        return;
      }

      var childArray = React.Children.toArray(this.props.children);

      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }

      var layoutY = event.nativeEvent.layout.y;

      this._headerLayoutYs.set(key, layoutY);

      var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];

      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

        previousHeader && previousHeader.setNextHeaderY(layoutY);
      }
    },
    _handleScroll: function _handleScroll(e) {
      {
        if (this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }
      this.scrollResponderHandleScroll(e);
    },
    _handleLayout: function _handleLayout(e) {
      if (this.props.invertStickyHeaders) {
        this.setState({
          layoutHeight: e.nativeEvent.layout.height
        });
      }

      if (this.props.onLayout) {
        this.props.onLayout(e);
      }
    },
    _handleContentOnLayout: function _handleContentOnLayout(e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _scrollViewRef: null,
    _setScrollViewRef: function _setScrollViewRef(ref) {
      this._scrollViewRef = ref;
    },
    _innerViewRef: null,
    _setInnerViewRef: function _setInnerViewRef(ref) {
      this._innerViewRef = ref;
    },
    render: function render() {
      var _this = this;

      var ScrollViewClass = void 0;
      var ScrollContentContainerViewClass = void 0;
      {
        if (this.props.horizontal) {
          ScrollViewClass = AndroidHorizontalScrollView;
          ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
        } else {
          ScrollViewClass = AndroidScrollView;
          ScrollContentContainerViewClass = View;
        }
      }
      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');
      invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');
      var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
      var style = void 0,
          childLayoutProps = void 0;
      var contentSizeChangeProps = {};

      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout
        };
      }

      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
      var childArray = hasStickyHeaders && React.Children.toArray(this.props.children);
      var children = hasStickyHeaders ? childArray.map(function (child, index) {
        var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

        if (indexOfIndex > -1) {
          var key = child.key;
          var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
          return React.createElement(
            ScrollViewStickyHeader,
            {
              key: key,
              ref: function ref(_ref2) {
                return _this._setStickyHeaderRef(key, _ref2);
              },
              nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),
              onLayout: function onLayout(event) {
                return _this._onStickyHeaderLayout(index, event, key);
              },
              scrollAnimatedValue: _this._scrollAnimatedValue,
              inverted: _this.props.invertStickyHeaders,
              scrollViewHeight: _this.state.layoutHeight
            },
            child
          );
        } else {
          return child;
        }
      }) : this.props.children;
      var contentContainer = React.createElement(
        ScrollContentContainerViewClass,
        babelHelpers.extends({}, contentSizeChangeProps, {
          ref: this._setInnerViewRef,
          style: contentContainerStyle,
          removeClippedSubviews: hasStickyHeaders ? false : this.props.removeClippedSubviews,
          collapsable: false
        }),
        children
      );
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
      var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;
      var props = babelHelpers.extends({}, this.props, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],
        onContentSizeChange: null,
        onLayout: this._handleLayout,
        onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this.scrollResponderHandleResponderGrant,
        onResponderReject: this.scrollResponderHandleResponderReject,
        onResponderRelease: this.scrollResponderHandleResponderRelease,
        onResponderTerminate: this.scrollResponderHandleTerminate,
        onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
        onScroll: this._handleScroll,
        onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this.scrollResponderHandleTouchEnd,
        onTouchMove: this.scrollResponderHandleTouchMove,
        onTouchStart: this.scrollResponderHandleTouchStart,
        onTouchCancel: this.scrollResponderHandleTouchCancel,
        scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames
      });
      var decelerationRate = this.props.decelerationRate;

      if (decelerationRate) {
        props.decelerationRate = processDecelerationRate(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        {
          return React.cloneElement(refreshControl, {
            style: props.style
          }, React.createElement(
            ScrollViewClass,
            babelHelpers.extends({}, props, {
              style: baseStyle,
              ref: this._setScrollViewRef
            }),
            contentContainer
          ));
        }
      }

      return React.createElement(
        ScrollViewClass,
        babelHelpers.extends({}, props, {
          ref: this._setScrollViewRef
        }),
        contentContainer
      );
    }
  });
  var styles = StyleSheet.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  var nativeOnlyProps = void 0,
      AndroidScrollView = void 0,
      AndroidHorizontalScrollContentView = void 0,
      AndroidHorizontalScrollView = void 0,
      RCTScrollView = void 0,
      RCTScrollContentView = void 0;
  {
    nativeOnlyProps = {
      nativeOnly: {
        sendMomentumEvents: true
      }
    };
    AndroidScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollContentView = requireNativeComponent('AndroidHorizontalScrollContentView');
  }
  module.exports = ScrollView;
},208,[179,43,137,1076,209,121,111,46,210,218,112,144,134,136,128,158,214,101,15,219,147,29,153]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0]);

  var createStrictShapeTypeChecker = _require(_dependencyMap[1]);

  var PointPropType = createStrictShapeTypeChecker({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},209,[121,138]);
__d(function (global, _require3, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = _require3(_dependencyMap[0]);

  var FrameRateLogger = _require3(_dependencyMap[1]);

  var Keyboard = _require3(_dependencyMap[2]);

  var ReactNative = _require3(_dependencyMap[3]);

  var Subscribable = _require3(_dependencyMap[4]);

  var TextInputState = _require3(_dependencyMap[5]);

  var UIManager = _require3(_dependencyMap[6]);

  var invariant = _require3(_dependencyMap[7]);

  var nullthrows = _require3(_dependencyMap[8]);

  var performanceNow = _require3(_dependencyMap[9]);

  var warning = _require3(_dependencyMap[10]);

  var _require = _require3(_dependencyMap[11]),
      ScrollViewManager = _require.ScrollViewManager;

  var _require2 = _require3(_dependencyMap[12]),
      getInstanceFromNode = _require2.getInstanceFromNode;

  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

  function isTagInstanceOfTextInput(tag) {
    var instance = getInstanceFromNode(tag);
    return instance && instance.viewConfig && (instance.viewConfig.uiViewClassName === 'AndroidTextInput' || instance.viewConfig.uiViewClassName === 'RCTMultilineTextInputView' || instance.viewConfig.uiViewClassName === 'RCTSinglelineTextInputView');
  }

  var ScrollResponderMixin = {
    mixins: [Subscribable.Mixin],
    scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
      return {
        isTouching: false,
        lastMomentumScrollBeginTime: 0,
        lastMomentumScrollEndTime: 0,
        observedScrollSinceBecomingResponder: false,
        becameResponderWhileAnimating: false
      };
    },
    scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
      return this.state.isTouching;
    },
    scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
        return true;
      }

      return false;
    },
    scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

      if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !isTagInstanceOfTextInput(e.target)) {
        return true;
      }

      return this.scrollResponderIsAnimating();
    },
    scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
    scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
      return !this.state.observedScrollSinceBecomingResponder;
    },
    scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
      var nativeEvent = e.nativeEvent;
      this.state.isTouching = nativeEvent.touches.length !== 0;
      this.props.onTouchEnd && this.props.onTouchEnd(e);
    },
    scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
      this.state.isTouching = false;
      this.props.onTouchCancel && this.props.onTouchCancel(e);
    },
    scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
      this.props.onResponderRelease && this.props.onResponderRelease(e);
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
        TextInputState.blurTextInput(currentlyFocusedTextInput);
      }
    },
    scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
      this.state.observedScrollSinceBecomingResponder = true;
      this.props.onScroll && this.props.onScroll(e);
    },
    scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
      this.state.observedScrollSinceBecomingResponder = false;
      this.props.onResponderGrant && this.props.onResponderGrant(e);
      this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
    },
    scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
      FrameRateLogger.beginScroll();
      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
    },
    scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
      var velocity = e.nativeEvent.velocity;

      if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
        FrameRateLogger.endScroll();
      }

      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
    },
    scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
      this.state.lastMomentumScrollBeginTime = performanceNow();
      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
    },
    scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
      FrameRateLogger.endScroll();
      this.state.lastMomentumScrollEndTime = performanceNow();
      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
    },
    scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
      this.state.isTouching = true;
      this.props.onTouchStart && this.props.onTouchStart(e);
    },
    scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
      this.props.onTouchMove && this.props.onTouchMove(e);
    },
    scrollResponderIsAnimating: function scrollResponderIsAnimating() {
      var now = performanceNow();
      var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
      return isAnimating;
    },
    scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
      return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
    },
    scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
      if (typeof x === 'number') {
        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
      } else {
        var _ref = x || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
    },
    scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
    },
    scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
      console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
      this.scrollResponderScrollTo({
        x: offsetX,
        y: offsetY,
        animated: false
      });
    },
    scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
      invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');

      if ('animated' in rect) {
        animated = rect.animated;
        delete rect.animated;
      } else if (typeof animated !== 'undefined') {
        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
      }

      ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
    },
    scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.flashScrollIndicators, []);
    },
    scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
      this.additionalScrollOffset = additionalOffset || 0;
      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
      UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
    },
    scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
      var keyboardScreenY = Dimensions.get('window').height;

      if (this.keyboardWillOpenTo) {
        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
      }

      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

      if (this.preventNegativeScrollOffset) {
        scrollOffsetY = Math.max(0, scrollOffsetY);
      }

      this.scrollResponderScrollTo({
        x: 0,
        y: scrollOffsetY,
        animated: true
      });
      this.additionalOffset = 0;
      this.preventNegativeScrollOffset = false;
    },
    scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
      console.error('Error measuring text field: ', e);
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      warning(typeof keyboardShouldPersistTaps !== 'boolean', "'keyboardShouldPersistTaps={" + keyboardShouldPersistTaps + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
      this.keyboardWillOpenTo = null;
      this.additionalScrollOffset = 0;
      this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
      this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
      this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
      this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
    },
    scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
      this.keyboardWillOpenTo = e;
      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
    },
    scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
    },
    scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
      if (e) {
        this.keyboardWillOpenTo = e;
      }

      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
    },
    scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
    }
  };
  var ScrollResponder = {
    Mixin: ScrollResponderMixin
  };
  module.exports = ScrollResponder;
},210,[114,211,212,46,215,99,97,15,216,26,29,17,217]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0]);

  var invariant = _require(_dependencyMap[1]);

  var FrameRateLogger = {
    setGlobalOptions: function setGlobalOptions(options) {
      if (options.debug !== undefined) {
        invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
      }

      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);
    },
    setContext: function setContext(context) {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
    },
    beginScroll: function beginScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
    },
    endScroll: function endScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},211,[17,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var LayoutAnimation = _require(_dependencyMap[0]);

  var invariant = _require(_dependencyMap[1]);

  var NativeEventEmitter = _require(_dependencyMap[2]);

  var KeyboardObserver = _require(_dependencyMap[3]).KeyboardObserver;

  var dismissKeyboard = _require(_dependencyMap[4]);

  var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);
  var Keyboard = {
    addListener: function addListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeListener: function removeListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeAllListeners: function removeAllListeners(eventName) {
      invariant(false, 'Dummy method used for documentation');
    },
    dismiss: function dismiss() {
      invariant(false, 'Dummy method used for documentation');
    },
    scheduleLayoutAnimation: function scheduleLayoutAnimation(event) {
      invariant(false, 'Dummy method used for documentation');
    }
  };
  Keyboard = KeyboardEventEmitter;
  Keyboard.dismiss = dismissKeyboard;

  Keyboard.scheduleLayoutAnimation = function (event) {
    var duration = event.duration,
        easing = event.easing;

    if (duration) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: easing && LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
  };

  module.exports = Keyboard;
},212,[213,15,70,17,214]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0]);

  var UIManager = _require(_dependencyMap[1]);

  var keyMirror = _require(_dependencyMap[2]);

  var checkPropTypes = PropTypes.checkPropTypes;
  var TypesEnum = {
    spring: true,
    linear: true,
    easeInEaseOut: true,
    easeIn: true,
    easeOut: true,
    keyboard: true
  };
  var Types = keyMirror(TypesEnum);
  var PropertiesEnum = {
    opacity: true,
    scaleXY: true
  };
  var Properties = keyMirror(PropertiesEnum);
  var animType = PropTypes.shape({
    duration: PropTypes.number,
    delay: PropTypes.number,
    springDamping: PropTypes.number,
    initialVelocity: PropTypes.number,
    type: PropTypes.oneOf(Object.keys(Types)).isRequired,
    property: PropTypes.oneOf(Object.keys(Properties))
  });
  var configType = PropTypes.shape({
    duration: PropTypes.number.isRequired,
    create: animType,
    update: animType,
    delete: animType
  });

  function checkConfig(config, location, name) {
    checkPropTypes({
      config: configType
    }, {
      config: config
    }, location, name);
  }

  function configureNext(config, onAnimationDidEnd) {
    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
  }

  function create(duration, type, creationProp) {
    return {
      duration: duration,
      create: {
        type: type,
        property: creationProp
      },
      update: {
        type: type
      },
      delete: {
        type: type,
        property: creationProp
      }
    };
  }

  var Presets = {
    easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
    linear: create(500, Types.linear, Properties.opacity),
    spring: {
      duration: 700,
      create: {
        type: Types.linear,
        property: Properties.opacity
      },
      update: {
        type: Types.spring,
        springDamping: 0.4
      },
      delete: {
        type: Types.linear,
        property: Properties.opacity
      }
    }
  };
  var LayoutAnimation = {
    configureNext: configureNext,
    create: create,
    Types: Types,
    Properties: Properties,
    checkConfig: checkConfig,
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring)
  };
  module.exports = LayoutAnimation;
},213,[121,97,119]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var TextInputState = _require(_dependencyMap[0]);

  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
  }

  module.exports = dismissKeyboard;
},214,[99]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Subscribable = {};
  Subscribable.Mixin = {
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._subscribableSubscriptions = [];
    },
    componentWillUnmount: function componentWillUnmount() {
      this._subscribableSubscriptions && this._subscribableSubscriptions.forEach(function (subscription) {
        return subscription.remove();
      });
      this._subscribableSubscriptions = null;
    },
    addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
      this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
    }
  };
  module.exports = Subscribable;
},215,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var nullthrows = function nullthrows(x) {
    if (x != null) {
      return x;
    }

    throw new Error("Got unexpected null or undefined");
  };

  module.exports = nullthrows;
},216,[]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeComponentTree;
},217,[46]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedImplementation = _require(_dependencyMap[0]);

  var React = _require(_dependencyMap[1]);

  var StyleSheet = _require(_dependencyMap[2]);

  var View = _require(_dependencyMap[3]);

  var AnimatedView = AnimatedImplementation.createAnimatedComponent(View);

  var ScrollViewStickyHeader = function (_React$Component) {
    babelHelpers.inherits(ScrollViewStickyHeader, _React$Component);

    function ScrollViewStickyHeader() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ScrollViewStickyHeader);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ScrollViewStickyHeader.__proto__ || Object.getPrototypeOf(ScrollViewStickyHeader)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        measured: false,
        layoutY: 0,
        layoutHeight: 0,
        nextHeaderLayoutY: _this.props.nextHeaderLayoutY
      }, _this._onLayout = function (event) {
        _this.setState({
          measured: true,
          layoutY: event.nativeEvent.layout.y,
          layoutHeight: event.nativeEvent.layout.height
        });

        _this.props.onLayout(event);

        var child = React.Children.only(_this.props.children);

        if (child.props.onLayout) {
          child.props.onLayout(event);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ScrollViewStickyHeader, [{
      key: "setNextHeaderY",
      value: function setNextHeaderY(y) {
        this.setState({
          nextHeaderLayoutY: y
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            inverted = _props.inverted,
            scrollViewHeight = _props.scrollViewHeight;
        var _state = this.state,
            measured = _state.measured,
            layoutHeight = _state.layoutHeight,
            layoutY = _state.layoutY,
            nextHeaderLayoutY = _state.nextHeaderLayoutY;
        var inputRange = [-1, 0];
        var outputRange = [0, 0];

        if (measured) {
          if (inverted) {
            if (scrollViewHeight != null) {
              var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;

              if (stickStartPoint > 0) {
                inputRange.push(stickStartPoint);
                outputRange.push(0);
                inputRange.push(stickStartPoint + 1);
                outputRange.push(1);
                var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;

                if (collisionPoint > stickStartPoint) {
                  inputRange.push(collisionPoint, collisionPoint + 1);
                  outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
                }
              }
            }
          } else {
            inputRange.push(layoutY);
            outputRange.push(0);

            var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;

            if (_collisionPoint >= layoutY) {
              inputRange.push(_collisionPoint, _collisionPoint + 1);
              outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
            } else {
              inputRange.push(layoutY + 1);
              outputRange.push(1);
            }
          }
        }

        var translateY = this.props.scrollAnimatedValue.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var child = React.Children.only(this.props.children);
        return React.createElement(
          AnimatedView,
          {
            collapsable: false,
            onLayout: this._onLayout,
            style: [child.props.style, styles.header, {
              transform: [{
                translateY: translateY
              }]
            }]
          },
          React.cloneElement(child, {
            style: styles.fill,
            onLayout: undefined
          })
        );
      }
    }]);
    return ScrollViewStickyHeader;
  }(React.Component);

  var styles = StyleSheet.create({
    header: {
      zIndex: 10
    },
    fill: {
      flex: 1
    }
  });
  module.exports = ScrollViewStickyHeader;
},218,[179,111,112,134]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      decelerationRate = 0.998;
    } else if (decelerationRate === 'fast') {
      decelerationRate = 0.99;
    }

    return decelerationRate;
  }

  module.exports = processDecelerationRate;
},219,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeMethodsMixin = _require(_dependencyMap[0]);

  var PropTypes = _require(_dependencyMap[1]);

  var React = _require(_dependencyMap[2]);

  var StyleSheet = _require(_dependencyMap[3]);

  var ViewPropTypes = _require(_dependencyMap[4]);

  var createReactClass = _require(_dependencyMap[5]);

  var requireNativeComponent = _require(_dependencyMap[6]);

  var CheckBox = createReactClass({
    displayName: 'CheckBox',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onChange: PropTypes.func,
      onValueChange: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctCheckBox: {},
    _onChange: function _onChange(event) {
      this._rctCheckBox.setNativeProps({
        value: this.props.value
      });

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = babelHelpers.extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      props.enabled = !this.props.disabled;
      props.on = this.props.value;
      props.style = [styles.rctCheckBox, this.props.style];
      return React.createElement(RCTCheckBox, babelHelpers.extends({}, props, {
        ref: function ref(_ref) {
          _this._rctCheckBox = _ref;
        },
        onChange: this._onChange
      }));
    }
  });
  var styles = StyleSheet.create({
    rctCheckBox: {
      height: 32,
      width: 32
    }
  });
  var RCTCheckBox = requireNativeComponent('AndroidCheckBox', CheckBox, {
    nativeOnly: {
      onChange: true,
      on: true,
      enabled: true
    }
  });
  module.exports = CheckBox;
},1081,[45,121,111,112,136,158,147]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0]);

  var StyleSheet = _require(_dependencyMap[1]);

  var Text = _require(_dependencyMap[2]);

  var View = _require(_dependencyMap[3]);

  var DummyDatePickerIOS = function (_React$Component) {
    babelHelpers.inherits(DummyDatePickerIOS, _React$Component);

    function DummyDatePickerIOS() {
      babelHelpers.classCallCheck(this, DummyDatePickerIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummyDatePickerIOS.__proto__ || Object.getPrototypeOf(DummyDatePickerIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyDatePickerIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummyDatePickerIOS, this.props.style]
          },
          React.createElement(
            Text,
            {
              style: styles.datePickerText
            },
            "DatePickerIOS is not supported on this platform!"
          )
        );
      }
    }]);
    return DummyDatePickerIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummyDatePickerIOS: {
      height: 100,
      width: 300,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center',
      margin: 10
    },
    datePickerText: {
      color: '#333333',
      margin: 20
    }
  });
  module.exports = DummyDatePickerIOS;
},1082,[111,112,167,134]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0]);

  var NativeMethodsMixin = _require(_dependencyMap[1]);

  var Platform = _require(_dependencyMap[2]);

  var React = _require(_dependencyMap[3]);

  var PropTypes = _require(_dependencyMap[4]);

  var ReactNative = _require(_dependencyMap[5]);

  var StatusBar = _require(_dependencyMap[6]);

  var StyleSheet = _require(_dependencyMap[7]);

  var UIManager = _require(_dependencyMap[8]);

  var View = _require(_dependencyMap[9]);

  var ViewPropTypes = _require(_dependencyMap[10]);

  var DrawerConsts = UIManager.AndroidDrawerLayout.Constants;

  var createReactClass = _require(_dependencyMap[11]);

  var dismissKeyboard = _require(_dependencyMap[12]);

  var requireNativeComponent = _require(_dependencyMap[13]);

  var RK_DRAWER_REF = 'drawerlayout';
  var INNERVIEW_REF = 'innerView';
  var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];
  var DrawerLayoutAndroid = createReactClass({
    displayName: 'DrawerLayoutAndroid',
    statics: {
      positions: DrawerConsts.DrawerPosition
    },
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
      drawerBackgroundColor: ColorPropType,
      drawerPosition: PropTypes.oneOf([DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right]),
      drawerWidth: PropTypes.number,
      drawerLockMode: PropTypes.oneOf(['unlocked', 'locked-closed', 'locked-open']),
      onDrawerSlide: PropTypes.func,
      onDrawerStateChanged: PropTypes.func,
      onDrawerOpen: PropTypes.func,
      onDrawerClose: PropTypes.func,
      renderNavigationView: PropTypes.func.isRequired,
      statusBarBackgroundColor: ColorPropType
    }),
    mixins: [NativeMethodsMixin],
    getDefaultProps: function getDefaultProps() {
      return {
        drawerBackgroundColor: 'white'
      };
    },
    getInitialState: function getInitialState() {
      return {
        statusBarBackgroundColor: undefined
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this.refs[INNERVIEW_REF].getInnerViewNode();
    },
    render: function render() {
      var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;
      var drawerViewWrapper = React.createElement(
        View,
        {
          style: [styles.drawerSubview, {
            width: this.props.drawerWidth,
            backgroundColor: this.props.drawerBackgroundColor
          }],
          collapsable: false
        },
        this.props.renderNavigationView(),
        drawStatusBar && React.createElement(View, {
          style: styles.drawerStatusBar
        })
      );
      var childrenWrapper = React.createElement(
        View,
        {
          ref: INNERVIEW_REF,
          style: styles.mainSubview,
          collapsable: false
        },
        drawStatusBar && React.createElement(StatusBar, {
          translucent: true,
          backgroundColor: this.props.statusBarBackgroundColor
        }),
        drawStatusBar && React.createElement(View, {
          style: [styles.statusBar, {
            backgroundColor: this.props.statusBarBackgroundColor
          }]
        }),
        this.props.children
      );
      return React.createElement(
        AndroidDrawerLayout,
        babelHelpers.extends({}, this.props, {
          ref: RK_DRAWER_REF,
          drawerWidth: this.props.drawerWidth,
          drawerPosition: this.props.drawerPosition,
          drawerLockMode: this.props.drawerLockMode,
          style: [styles.base, this.props.style],
          onDrawerSlide: this._onDrawerSlide,
          onDrawerOpen: this._onDrawerOpen,
          onDrawerClose: this._onDrawerClose,
          onDrawerStateChanged: this._onDrawerStateChanged
        }),
        childrenWrapper,
        drawerViewWrapper
      );
    },
    _onDrawerSlide: function _onDrawerSlide(event) {
      if (this.props.onDrawerSlide) {
        this.props.onDrawerSlide(event);
      }

      if (this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    },
    _onDrawerOpen: function _onDrawerOpen() {
      if (this.props.onDrawerOpen) {
        this.props.onDrawerOpen();
      }
    },
    _onDrawerClose: function _onDrawerClose() {
      if (this.props.onDrawerClose) {
        this.props.onDrawerClose();
      }
    },
    _onDrawerStateChanged: function _onDrawerStateChanged(event) {
      if (this.props.onDrawerStateChanged) {
        this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
      }
    },
    openDrawer: function openDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.openDrawer, null);
    },
    closeDrawer: function closeDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.closeDrawer, null);
    },
    _getDrawerLayoutHandle: function _getDrawerLayoutHandle() {
      return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);
    }
  });
  var styles = StyleSheet.create({
    base: {
      flex: 1,
      elevation: 16
    },
    mainSubview: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    drawerSubview: {
      position: 'absolute',
      top: 0,
      bottom: 0
    },
    statusBar: {
      height: StatusBar.currentHeight
    },
    drawerStatusBar: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: StatusBar.currentHeight,
      backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
  });
  var AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout', DrawerLayoutAndroid);
  module.exports = DrawerLayoutAndroid;
},1083,[43,45,1076,111,121,46,261,112,97,134,136,158,214,147]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp2;

  var React = _require(_dependencyMap[0]);

  var PropTypes = _require(_dependencyMap[1]);

  var ColorPropType = _require(_dependencyMap[2]);

  var Platform = _require(_dependencyMap[3]);

  var processColor = _require(_dependencyMap[4]);

  var StatusBarManager = _require(_dependencyMap[5]).StatusBarManager;

  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function (prev, cur) {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }

      return prev;
    }, babelHelpers.extends({}, defaultValues));
  }

  function createStackEntry(props) {
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated: props.animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated: props.animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated: props.animated,
        transition: props.showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }

  var StatusBar = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(StatusBar, _React$Component);

    function StatusBar() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, StatusBar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = StatusBar.__proto__ || Object.getPrototypeOf(StatusBar)).call.apply(_ref, [this].concat(args))), _this), _this._stackEntry = null, _this._updatePropsStack = function () {
        clearImmediate(StatusBar._updateImmediate);
        StatusBar._updateImmediate = setImmediate(function () {
          var oldProps = StatusBar._currentValues;
          var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);
          {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value);
            }

            if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
              StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value);
            }

            if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
              StatusBarManager.setTranslucent(mergedProps.translucent);
            }
          }
          StatusBar._currentValues = mergedProps;
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = createStackEntry(this.props);

        StatusBar._propsStack.push(this._stackEntry);

        this._updatePropsStack();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        StatusBar._propsStack.splice(index, 1);

        this._updatePropsStack();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        this._stackEntry = createStackEntry(this.props);
        StatusBar._propsStack[index] = this._stackEntry;

        this._updatePropsStack();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;
        {
          StatusBarManager.setHidden(hidden);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;
        {
          StatusBarManager.setStyle(style);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        {
          console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
          return;
        }
        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        StatusBarManager.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        StatusBarManager.setColor(processColor(color), animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        StatusBar._defaultProps.translucent = translucent;
        StatusBarManager.setTranslucent(translucent);
      }
    }]);
    return StatusBar;
  }(React.Component), _class._propsStack = [], _class._defaultProps = createStackEntry({
    animated: false,
    showHideTransition: 'fade',
    backgroundColor: 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  }), _class._updateImmediate = null, _class._currentValues = null, _class.currentHeight = StatusBarManager.HEIGHT, _class.propTypes = {
    hidden: PropTypes.bool,
    animated: PropTypes.bool,
    backgroundColor: ColorPropType,
    translucent: PropTypes.bool,
    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),
    networkActivityIndicatorVisible: PropTypes.bool,
    showHideTransition: PropTypes.oneOf(['fade', 'slide'])
  }, _class.defaultProps = {
    animated: false,
    showHideTransition: 'fade'
  }, _temp2);
  module.exports = StatusBar;
},261,[111,121,43,1076,129,17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var MetroListView = _require(_dependencyMap[0]);

  var React = _require(_dependencyMap[1]);

  var View = _require(_dependencyMap[2]);

  var VirtualizedList = _require(_dependencyMap[3]);

  var ListView = _require(_dependencyMap[4]);

  var invariant = _require(_dependencyMap[5]);

  var defaultProps = babelHelpers.extends({}, VirtualizedList.defaultProps, {
    numColumns: 1
  });
  var FlatList = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(FlatList, _React$PureComponent);
    babelHelpers.createClass(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        this._checkProps(this.props);
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        invariant(nextProps.numColumns === this.props.numColumns, "Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component.");
        invariant(nextProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');
        invariant(nextProps.viewabilityConfig === this.props.viewabilityConfig, 'Changing viewabilityConfig on the fly is not supported');
        invariant(nextProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');

        this._checkProps(nextProps);
      }
    }]);

    function FlatList(props) {
      babelHelpers.classCallCheck(this, FlatList);

      var _this = babelHelpers.possibleConstructorReturn(this, (FlatList.__proto__ || Object.getPrototypeOf(FlatList)).call(this, props));

      _this._hasWarnedLegacy = false;
      _this._virtualizedListPairs = [];

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._getItem = function (data, index) {
        var numColumns = _this.props.numColumns;

        if (numColumns > 1) {
          var ret = [];

          for (var kk = 0; kk < numColumns; kk++) {
            var _item = data[index * numColumns + kk];
            _item && ret.push(_item);
          }

          return ret;
        } else {
          return data[index];
        }
      };

      _this._getItemCount = function (data) {
        return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
      };

      _this._keyExtractor = function (items, index) {
        var _this$props = _this.props,
            keyExtractor = _this$props.keyExtractor,
            numColumns = _this$props.numColumns;

        if (numColumns > 1) {
          invariant(Array.isArray(items), "FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.", numColumns);
          return items.map(function (it, kk) {
            return keyExtractor(it, index * numColumns + kk);
          }).join(':');
        } else {
          return keyExtractor(items, index);
        }
      };

      _this._renderItem = function (info) {
        var _this$props2 = _this.props,
            renderItem = _this$props2.renderItem,
            numColumns = _this$props2.numColumns,
            columnWrapperStyle = _this$props2.columnWrapperStyle;

        if (numColumns > 1) {
          var _item2 = info.item,
              _index = info.index;
          invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
          return React.createElement(
            View,
            {
              style: [{
                flexDirection: 'row'
              }, columnWrapperStyle]
            },
            _item2.map(function (it, kk) {
              var element = renderItem({
                item: it,
                index: _index * numColumns + kk,
                separators: info.separators
              });
              return element && React.cloneElement(element, {
                key: kk
              });
            })
          );
        } else {
          return renderItem(info);
        }
      };

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityConfig: pair.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)
        });
      }

      return _this;
    }

    babelHelpers.createClass(FlatList, [{
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
            getItemCount = props.getItemCount,
            horizontal = props.horizontal,
            legacyImplementation = props.legacyImplementation,
            numColumns = props.numColumns,
            columnWrapperStyle = props.columnWrapperStyle,
            onViewableItemsChanged = props.onViewableItemsChanged,
            viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');

        if (numColumns > 1) {
          invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
          invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }

        if (legacyImplementation) {
          invariant(numColumns === 1, 'Legacy list does not support multiple columns.');

          if (!this._hasWarnedLegacy) {
            console.warn("FlatList: Using legacyImplementation - some features not supported and performance may suffer");
            this._hasWarnedLegacy = true;
          }
        }

        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), "FlatList does not support setting both onViewableItemsChanged and viewabilityConfigCallbackPairs.");
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var _props = this.props,
            numColumns = _props.numColumns,
            keyExtractor = _props.keyExtractor;
        v.item.forEach(function (item, ii) {
          invariant(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push(babelHelpers.extends({}, v, {
            item: item,
            key: keyExtractor(item, index),
            index: index
          }));
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        var _this2 = this;

        return function (info) {
          var numColumns = _this2.props.numColumns;

          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var _changed = [];
              var _viewableItems = [];
              info.viewableItems.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_viewableItems, v);
              });
              info.changed.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_changed, v);
              });
              onViewableItemsChanged({
                viewableItems: _viewableItems,
                changed: _changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.legacyImplementation) {
          return React.createElement(MetroListView, babelHelpers.extends({}, this.props, {
            items: this.props.data,
            ref: this._captureRef
          }));
        } else {
          return React.createElement(VirtualizedList, babelHelpers.extends({}, this.props, {
            renderItem: this._renderItem,
            getItem: this._getItem,
            getItemCount: this._getItemCount,
            keyExtractor: this._keyExtractor,
            ref: this._captureRef,
            viewabilityConfigCallbackPairs: this._virtualizedListPairs
          }));
        }
      }
    }]);
    return FlatList;
  }(React.PureComponent), _class.defaultProps = defaultProps, _temp);
  module.exports = FlatList;
},226,[227,111,134,234,228,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp2;

  var ListView = _require(_dependencyMap[0]);

  var React = _require(_dependencyMap[1]);

  var RefreshControl = _require(_dependencyMap[2]);

  var ScrollView = _require(_dependencyMap[3]);

  var invariant = _require(_dependencyMap[4]);

  var MetroListView = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(MetroListView, _React$Component);

    function MetroListView() {
      var _ref,
          _this2 = this;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, MetroListView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = MetroListView.__proto__ || Object.getPrototypeOf(MetroListView)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this._computeState(_this.props, {
        ds: new ListView.DataSource({
          rowHasChanged: function rowHasChanged(itemA, itemB) {
            return true;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged() {
            return true;
          },
          getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
            return _this.state.sectionHeaderData[sectionID];
          }
        }),
        sectionHeaderData: {}
      }), _this._captureRef = function (ref) {
        _this._listRef = ref;
      }, _this._renderFooter = function () {
        return React.createElement(_this2.props.FooterComponent, {
          key: "$footer"
        });
      }, _this._renderRow = function (item, sectionID, rowID, highlightRow) {
        return _this.props.renderItem({
          item: item,
          index: rowID
        });
      }, _this._renderSectionHeader = function (section, sectionID) {
        var renderSectionHeader = _this.props.renderSectionHeader;
        invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
        return renderSectionHeader({
          section: section
        });
      }, _this._renderSeparator = function (sID, rID) {
        return React.createElement(_this2.props.SeparatorComponent, {
          key: sID + rID
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(MetroListView, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        throw new Error('scrollToEnd not supported in legacy ListView.');
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        throw new Error('scrollToIndex not supported in legacy ListView.');
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        throw new Error('scrollToItem not supported in legacy ListView.');
      }
    }, {
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        throw new Error('scrollToLocation not supported in legacy ListView.');
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._listRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        var _this3 = this;

        this.setState(function (state) {
          return _this3._computeState(newProps, state);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(ListView, babelHelpers.extends({}, this.props, {
          dataSource: this.state.ds,
          ref: this._captureRef,
          renderRow: this._renderRow,
          renderFooter: this.props.FooterComponent && this._renderFooter,
          renderSectionHeader: this.props.sections && this._renderSectionHeader,
          renderSeparator: this.props.SeparatorComponent && this._renderSeparator
        }));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props, state) {
        var sectionHeaderData = {};

        if (props.sections) {
          invariant(!props.items, 'Cannot have both sections and items props.');
          var _sections = {};
          props.sections.forEach(function (sectionIn, ii) {
            var sectionID = 's' + ii;
            _sections[sectionID] = sectionIn.data;
            sectionHeaderData[sectionID] = sectionIn;
          });
          return {
            ds: state.ds.cloneWithRowsAndSections(_sections),
            sectionHeaderData: sectionHeaderData
          };
        } else {
          invariant(!props.sections, 'Cannot have both sections and items props.');
          return {
            ds: state.ds.cloneWithRows(props.items),
            sectionHeaderData: sectionHeaderData
          };
        }
      }
    }]);
    return MetroListView;
  }(React.Component), _class.defaultProps = {
    keyExtractor: function keyExtractor(item, index) {
      return item.key || String(index);
    },
    renderScrollComponent: function renderScrollComponent(props) {
      if (props.onRefresh) {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh
          })
        }));
      } else {
        return React.createElement(ScrollView, props);
      }
    }
  }, _temp2);
  module.exports = MetroListView;
},227,[228,111,233,208,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ListViewDataSource = _require(_dependencyMap[0]);

  var Platform = _require(_dependencyMap[1]);

  var React = _require(_dependencyMap[2]);

  var PropTypes = _require(_dependencyMap[3]);

  var ReactNative = _require(_dependencyMap[4]);

  var RCTScrollViewManager = _require(_dependencyMap[5]).ScrollViewManager;

  var ScrollView = _require(_dependencyMap[6]);

  var ScrollResponder = _require(_dependencyMap[7]);

  var StaticRenderer = _require(_dependencyMap[8]);

  var TimerMixin = _require(_dependencyMap[9]);

  var View = _require(_dependencyMap[10]);

  var cloneReferencedElement = _require(_dependencyMap[11]);

  var createReactClass = _require(_dependencyMap[12]);

  var isEmpty = _require(_dependencyMap[13]);

  var merge = _require(_dependencyMap[14]);

  var DEFAULT_PAGE_SIZE = 1;
  var DEFAULT_INITIAL_ROWS = 10;
  var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
  var DEFAULT_END_REACHED_THRESHOLD = 1000;
  var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
  var ListView = createReactClass({
    displayName: 'ListView',
    _childFrames: [],
    _sentEndForContentLength: null,
    _scrollComponent: null,
    _prevRenderedRowsCount: 0,
    _visibleRows: {},
    scrollProperties: {},
    mixins: [ScrollResponder.Mixin, TimerMixin],
    statics: {
      DataSource: ListViewDataSource
    },
    propTypes: babelHelpers.extends({}, ScrollView.propTypes, {
      dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,
      renderSeparator: PropTypes.func,
      renderRow: PropTypes.func.isRequired,
      initialListSize: PropTypes.number.isRequired,
      onEndReached: PropTypes.func,
      onEndReachedThreshold: PropTypes.number.isRequired,
      pageSize: PropTypes.number.isRequired,
      renderFooter: PropTypes.func,
      renderHeader: PropTypes.func,
      renderSectionHeader: PropTypes.func,
      renderScrollComponent: PropTypes.func.isRequired,
      scrollRenderAheadDistance: PropTypes.number.isRequired,
      onChangeVisibleRows: PropTypes.func,
      removeClippedSubviews: PropTypes.bool,
      stickySectionHeadersEnabled: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,
      enableEmptySections: PropTypes.bool
    }),
    getMetrics: function getMetrics() {
      return {
        contentLength: this.scrollProperties.contentLength,
        totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
        renderedRows: this.state.curRenderedRowsCount,
        visibleRows: Object.keys(this._visibleRows).length
      };
    },
    getScrollResponder: function getScrollResponder() {
      if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
        return this._scrollComponent.getScrollResponder();
      }
    },
    getScrollableNode: function getScrollableNode() {
      if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
        return this._scrollComponent.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollComponent);
      }
    },
    scrollTo: function scrollTo() {
      if (this._scrollComponent && this._scrollComponent.scrollTo) {
        var _scrollComponent;

        (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);
      }
    },
    scrollToEnd: function scrollToEnd(options) {
      if (this._scrollComponent) {
        if (this._scrollComponent.scrollToEnd) {
          this._scrollComponent.scrollToEnd(options);
        } else {
          console.warn("The scroll component used by the ListView does not support scrollToEnd. Check the renderScrollComponent prop of your ListView.");
        }
      }
    },
    flashScrollIndicators: function flashScrollIndicators() {
      if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
        this._scrollComponent.flashScrollIndicators();
      }
    },
    setNativeProps: function setNativeProps(props) {
      if (this._scrollComponent) {
        this._scrollComponent.setNativeProps(props);
      }
    },
    getDefaultProps: function getDefaultProps() {
      return {
        initialListSize: DEFAULT_INITIAL_ROWS,
        pageSize: DEFAULT_PAGE_SIZE,
        renderScrollComponent: function renderScrollComponent(props) {
          return React.createElement(ScrollView, props);
        },
        scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
        onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
        stickySectionHeadersEnabled: false,
        stickyHeaderIndices: []
      };
    },
    getInitialState: function getInitialState() {
      return {
        curRenderedRowsCount: this.props.initialListSize,
        highlightedRow: {}
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this._scrollComponent.getInnerViewNode();
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      this.requestAnimationFrame(function () {
        _this._measureAndUpdateScrollProps();
      });
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this2._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
          };
        }, function () {
          return _this2._renderMoreRowsIfNeeded();
        });
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var _this3 = this;

      this.requestAnimationFrame(function () {
        _this3._measureAndUpdateScrollProps();
      });
    },
    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
      this.setState({
        highlightedRow: {
          sectionID: sectionID,
          rowID: rowID
        }
      });
    },
    render: function render() {
      var bodyComponents = [];
      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var stickySectionHeaderIndices = [];
      var renderSectionHeader = this.props.renderSectionHeader;
      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          if (this.props.enableEmptySections === undefined) {
            var warning = _require(_dependencyMap[15]);

            warning(false, "In next release empty section headers will be rendered. In this release you can use 'enableEmptySections' flag to render empty section headers.");
            continue;
          } else {
            var invariant = _require(_dependencyMap[16]);

            invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered. If empty section headers are not desirable their indices should be excluded from sectionIDs object. In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
          }
        }

        if (renderSectionHeader) {
          var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);

          if (element) {
            bodyComponents.push(React.cloneElement(element, {
              key: 's_' + sectionID
            }));

            if (this.props.stickySectionHeadersEnabled) {
              stickySectionHeaderIndices.push(totalIndex);
            }

            totalIndex++;
          }
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = React.createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)
          });
          bodyComponents.push(row);
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);

            if (separator) {
              bodyComponents.push(React.createElement(
                View,
                {
                  key: 's_' + comboID
                },
                separator
              ));
              totalIndex++;
            }
          }

          if (++rowCount === this.state.curRenderedRowsCount) {
            break;
          }
        }

        if (rowCount >= this.state.curRenderedRowsCount) {
          break;
        }
      }

      var _props = this.props,
          renderScrollComponent = _props.renderScrollComponent,
          props = babelHelpers.objectWithoutProperties(_props, ["renderScrollComponent"]);

      if (!props.scrollEventThrottle) {
        props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
      }

      if (props.removeClippedSubviews === undefined) {
        props.removeClippedSubviews = true;
      }

      babelHelpers.extends(props, {
        onScroll: this._onScroll,
        stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),
        onKeyboardWillShow: undefined,
        onKeyboardWillHide: undefined,
        onKeyboardDidShow: undefined,
        onKeyboardDidHide: undefined
      });
      return cloneReferencedElement(renderScrollComponent(props), {
        ref: this._setScrollComponentRef,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
      }, header, bodyComponents, footer);
    },
    _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
      var scrollComponent = this.getScrollResponder();

      if (!scrollComponent || !scrollComponent.getInnerViewNode) {
        return;
      }

      RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
    },
    _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
      this._scrollComponent = scrollComponent;
    },
    _onContentSizeChange: function _onContentSizeChange(width, height) {
      var contentLength = !this.props.horizontal ? height : width;

      if (contentLength !== this.scrollProperties.contentLength) {
        this.scrollProperties.contentLength = contentLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var visibleLength = !this.props.horizontal ? height : width;

      if (visibleLength !== this.scrollProperties.visibleLength) {
        this.scrollProperties.visibleLength = visibleLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
      if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._sentEndForContentLength = this.scrollProperties.contentLength;
        this.props.onEndReached(event);
        return true;
      }

      return false;
    },
    _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
      if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._maybeCallOnEndReached();

        return;
      }

      var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);

      if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
        this._pageInNewRows();
      }
    },
    _pageInNewRows: function _pageInNewRows() {
      var _this4 = this;

      this.setState(function (state, props) {
        var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
        _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
        return {
          curRenderedRowsCount: rowsToRender
        };
      }, function () {
        _this4._measureAndUpdateScrollProps();

        _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
      });
    },
    _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
      return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
    },
    _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
      var _this5 = this;

      if (!this.props.onChangeVisibleRows) {
        return;
      }

      if (updatedFrames) {
        updatedFrames.forEach(function (newFrame) {
          _this5._childFrames[newFrame.index] = merge(newFrame);
        });
      }

      var isVertical = !this.props.horizontal;
      var dataSource = this.props.dataSource;
      var visibleMin = this.scrollProperties.offset;
      var visibleMax = visibleMin + this.scrollProperties.visibleLength;
      var allRowIDs = dataSource.rowIdentities;
      var header = this.props.renderHeader && this.props.renderHeader();
      var totalIndex = header ? 1 : 0;
      var visibilityChanged = false;
      var changedRows = {};

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          continue;
        }

        var sectionID = dataSource.sectionIdentities[sectionIdx];

        if (this.props.renderSectionHeader) {
          totalIndex++;
        }

        var visibleSection = this._visibleRows[sectionID];

        if (!visibleSection) {
          visibleSection = {};
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var frame = this._childFrames[totalIndex];
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            totalIndex++;
          }

          if (!frame) {
            break;
          }

          var rowVisible = visibleSection[rowID];
          var min = isVertical ? frame.y : frame.x;
          var max = min + (isVertical ? frame.height : frame.width);

          if (!min && !max || min === max) {
            break;
          }

          if (min > visibleMax || max < visibleMin) {
            if (rowVisible) {
              visibilityChanged = true;
              delete visibleSection[rowID];

              if (!changedRows[sectionID]) {
                changedRows[sectionID] = {};
              }

              changedRows[sectionID][rowID] = false;
            }
          } else if (!rowVisible) {
            visibilityChanged = true;
            visibleSection[rowID] = true;

            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }

            changedRows[sectionID][rowID] = true;
          }
        }

        if (!isEmpty(visibleSection)) {
          this._visibleRows[sectionID] = visibleSection;
        } else if (this._visibleRows[sectionID]) {
          delete this._visibleRows[sectionID];
        }
      }

      visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
    },
    _onScroll: function _onScroll(e) {
      var isVertical = !this.props.horizontal;
      this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
      this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
      this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];

      this._updateVisibleRows(e.nativeEvent.updatedChildFrames);

      if (!this._maybeCallOnEndReached(e)) {
        this._renderMoreRowsIfNeeded();
      }

      if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
        this._sentEndForContentLength = null;
      }

      this.props.onScroll && this.props.onScroll(e);
    }
  });
  module.exports = ListView;
},228,[229,1076,111,121,46,17,208,210,231,220,134,232,158,230,139,29,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var isEmpty = _require(_dependencyMap[1]);

  var warning = _require(_dependencyMap[2]);

  function defaultGetRowData(dataBlob, sectionID, rowID) {
    return dataBlob[sectionID][rowID];
  }

  function defaultGetSectionHeaderData(dataBlob, sectionID) {
    return dataBlob[sectionID];
  }

  var ListViewDataSource = function () {
    function ListViewDataSource(params) {
      babelHelpers.classCallCheck(this, ListViewDataSource);
      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
      this._rowHasChanged = params.rowHasChanged;
      this._getRowData = params.getRowData || defaultGetRowData;
      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;
      this._dataBlob = null;
      this._dirtyRows = [];
      this._dirtySections = [];
      this._cachedRowCount = 0;
      this.rowIdentities = [];
      this.sectionIdentities = [];
    }

    babelHelpers.createClass(ListViewDataSource, [{
      key: "cloneWithRows",
      value: function cloneWithRows(dataBlob, rowIdentities) {
        var rowIds = rowIdentities ? [[].concat(babelHelpers.toConsumableArray(rowIdentities))] : null;

        if (!this._sectionHeaderHasChanged) {
          this._sectionHeaderHasChanged = function () {
            return false;
          };
        }

        return this.cloneWithRowsAndSections({
          s1: dataBlob
        }, ['s1'], rowIds);
      }
    }, {
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');
        var newSource = new ListViewDataSource({
          getRowData: this._getRowData,
          getSectionHeaderData: this._getSectionHeaderData,
          rowHasChanged: this._rowHasChanged,
          sectionHeaderHasChanged: this._sectionHeaderHasChanged
        });
        newSource._dataBlob = dataBlob;

        if (sectionIdentities) {
          newSource.sectionIdentities = sectionIdentities;
        } else {
          newSource.sectionIdentities = Object.keys(dataBlob);
        }

        if (rowIdentities) {
          newSource.rowIdentities = rowIdentities;
        } else {
          newSource.rowIdentities = [];
          newSource.sectionIdentities.forEach(function (sectionID) {
            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
          });
        }

        newSource._cachedRowCount = countRows(newSource.rowIdentities);

        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

        return newSource;
      }
    }, {
      key: "getRowCount",
      value: function getRowCount() {
        return this._cachedRowCount;
      }
    }, {
      key: "getRowAndSectionCount",
      value: function getRowAndSectionCount() {
        return this._cachedRowCount + this.sectionIdentities.length;
      }
    }, {
      key: "rowShouldUpdate",
      value: function rowShouldUpdate(sectionIndex, rowIndex) {
        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
        return needsUpdate;
      }
    }, {
      key: "getRowData",
      value: function getRowData(sectionIndex, rowIndex) {
        var sectionID = this.sectionIdentities[sectionIndex];
        var rowID = this.rowIdentities[sectionIndex][rowIndex];
        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
        return this._getRowData(this._dataBlob, sectionID, rowID);
      }
    }, {
      key: "getRowIDForFlatIndex",
      value: function getRowIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.rowIdentities[ii][accessIndex];
          }
        }

        return null;
      }
    }, {
      key: "getSectionIDForFlatIndex",
      value: function getSectionIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.sectionIdentities[ii];
          }
        }

        return null;
      }
    }, {
      key: "getSectionLengths",
      value: function getSectionLengths() {
        var results = [];

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          results.push(this.rowIdentities[ii].length);
        }

        return results;
      }
    }, {
      key: "sectionHeaderShouldUpdate",
      value: function sectionHeaderShouldUpdate(sectionIndex) {
        var needsUpdate = this._dirtySections[sectionIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
        return needsUpdate;
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(sectionIndex) {
        if (!this._getSectionHeaderData) {
          return null;
        }

        var sectionID = this.sectionIdentities[sectionIndex];
        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
        return this._getSectionHeaderData(this._dataBlob, sectionID);
      }
    }, {
      key: "_calculateDirtyArrays",
      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
        var prevRowsHash = {};

        for (var ii = 0; ii < prevRowIDs.length; ii++) {
          var sectionID = prevSectionIDs[ii];
          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
        }

        this._dirtySections = [];
        this._dirtyRows = [];
        var dirty;

        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
          var sectionID = this.sectionIdentities[sIndex];
          dirty = !prevSectionsHash[sectionID];
          var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

          if (!dirty && sectionHeaderHasChanged) {
            dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
          }

          this._dirtySections.push(!!dirty);

          this._dirtyRows[sIndex] = [];

          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
            var rowID = this.rowIdentities[sIndex][rIndex];
            dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));

            this._dirtyRows[sIndex].push(!!dirty);
          }
        }
      }
    }]);
    return ListViewDataSource;
  }();

  function countRows(allRowIDs) {
    var totalRows = 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      totalRows += rowIDs.length;
    }

    return totalRows;
  }

  function keyedDictionaryFromArray(arr) {
    if (isEmpty(arr)) {
      return {};
    }

    var result = {};

    for (var ii = 0; ii < arr.length; ii++) {
      var key = arr[ii];
      warning(!result[key], 'Value appears more than once in array: ' + key);
      result[key] = true;
    }

    return result;
  }

  module.exports = ListViewDataSource;
},229,[15,230,29]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function isEmpty(obj) {
    if (Array.isArray(obj)) {
      return obj.length === 0;
    } else if (typeof obj === 'object') {
      for (var i in obj) {
        return false;
      }

      return true;
    } else {
      return !obj;
    }
  }

  module.exports = isEmpty;
},230,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var React = _require(_dependencyMap[0]);

  var PropTypes = _require(_dependencyMap[1]);

  var StaticRenderer = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(StaticRenderer, _React$Component);

    function StaticRenderer() {
      babelHelpers.classCallCheck(this, StaticRenderer);
      return babelHelpers.possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
    }

    babelHelpers.createClass(StaticRenderer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.render();
      }
    }]);
    return StaticRenderer;
  }(React.Component), _class.propTypes = {
    shouldUpdate: PropTypes.bool.isRequired,
    render: PropTypes.func.isRequired
  }, _temp);
  module.exports = StaticRenderer;
},231,[111,121]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0]);

  function cloneReferencedElement(element, config) {
    var cloneRef = config.ref;
    var originalRef = element.ref;

    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (originalRef == null || cloneRef == null) {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    if (typeof originalRef !== 'function') {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    return React.cloneElement.apply(React, [element, babelHelpers.extends({}, config, {
      ref: function ref(component) {
        cloneRef(component);
        originalRef(component);
      }
    })].concat(children));
  }

  module.exports = cloneReferencedElement;
},232,[103]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0]);

  var NativeMethodsMixin = _require(_dependencyMap[1]);

  var Platform = _require(_dependencyMap[2]);

  var React = _require(_dependencyMap[3]);

  var PropTypes = _require(_dependencyMap[4]);

  var ViewPropTypes = _require(_dependencyMap[5]);

  var createReactClass = _require(_dependencyMap[6]);

  var requireNativeComponent = _require(_dependencyMap[7]);

  {
    var AndroidSwipeRefreshLayout = _require(_dependencyMap[8]).AndroidSwipeRefreshLayout;

    var RefreshLayoutConsts = AndroidSwipeRefreshLayout ? AndroidSwipeRefreshLayout.Constants : {
      SIZE: {}
    };
  }
  var RefreshControl = createReactClass({
    displayName: 'RefreshControl',
    statics: {
      SIZE: RefreshLayoutConsts.SIZE
    },
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      onRefresh: PropTypes.func,
      refreshing: PropTypes.bool.isRequired,
      tintColor: ColorPropType,
      titleColor: ColorPropType,
      title: PropTypes.string,
      enabled: PropTypes.bool,
      colors: PropTypes.arrayOf(ColorPropType),
      progressBackgroundColor: ColorPropType,
      size: PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),
      progressViewOffset: PropTypes.number
    }),
    _nativeRef: null,
    _lastNativeRefreshing: false,
    componentDidMount: function componentDidMount() {
      this._lastNativeRefreshing = this.props.refreshing;
    },
    componentDidUpdate: function componentDidUpdate(prevProps) {
      if (this.props.refreshing !== prevProps.refreshing) {
        this._lastNativeRefreshing = this.props.refreshing;
      } else if (this.props.refreshing !== this._lastNativeRefreshing) {
        this._nativeRef.setNativeProps({
          refreshing: this.props.refreshing
        });

        this._lastNativeRefreshing = this.props.refreshing;
      }
    },
    render: function render() {
      var _this = this;

      return React.createElement(NativeRefreshControl, babelHelpers.extends({}, this.props, {
        ref: function ref(_ref) {
          _this._nativeRef = _ref;
        },
        onRefresh: this._onRefresh
      }));
    },
    _onRefresh: function _onRefresh() {
      this._lastNativeRefreshing = true;
      this.props.onRefresh && this.props.onRefresh();
      this.forceUpdate();
    }
  });
  {
    var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout', RefreshControl);
  }
  module.exports = RefreshControl;
},233,[43,45,1076,111,121,136,158,147,97]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp, _initialiseProps, _class2, _temp3, _class3, _temp4;

  var Batchinator = _require2(_dependencyMap[0]);

  var FillRateHelper = _require2(_dependencyMap[1]);

  var PropTypes = _require2(_dependencyMap[2]);

  var React = _require2(_dependencyMap[3]);

  var ReactNative = _require2(_dependencyMap[4]);

  var RefreshControl = _require2(_dependencyMap[5]);

  var ScrollView = _require2(_dependencyMap[6]);

  var StyleSheet = _require2(_dependencyMap[7]);

  var UIManager = _require2(_dependencyMap[8]);

  var View = _require2(_dependencyMap[9]);

  var ViewabilityHelper = _require2(_dependencyMap[10]);

  var flattenStyle = _require2(_dependencyMap[11]);

  var infoLog = _require2(_dependencyMap[12]);

  var invariant = _require2(_dependencyMap[13]);

  var warning = _require2(_dependencyMap[14]);

  var _require = _require2(_dependencyMap[15]),
      computeWindowedRenderLimits = _require.computeWindowedRenderLimits;

  var _usedIndexForKey = false;
  var VirtualizedList = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(VirtualizedList, _React$PureComponent);
    babelHelpers.createClass(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;

        var frame = this._getFrameMetricsApprox(veryLast);

        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _props = this.props,
            data = _props.data,
            horizontal = _props.horizontal,
            getItemCount = _props.getItemCount,
            getItemLayout = _props.getItemLayout,
            onScrollToIndexFailed = _props.onScrollToIndexFailed;
        var animated = params.animated,
            index = params.index,
            viewOffset = params.viewOffset,
            viewPosition = params.viewPosition;
        invariant(index >= 0 && index < getItemCount(data), "scrollToIndex out of range: " + index + " vs " + (getItemCount(data) - 1));

        if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
          invariant(!!onScrollToIndexFailed, "scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, otherwise there is no way to know the location of offscreen indices or handle failures.");
          onScrollToIndexFailed({
            averageItemLength: this._averageCellLength,
            highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
            index: index
          });
          return;
        }

        var frame = this._getFrameMetricsApprox(index);

        var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);

        this._scrollRef.scrollTo(horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _props2 = this.props,
            data = _props2.data,
            getItem = _props2.getItem,
            getItemCount = _props2.getItemCount;
        var itemCount = getItemCount(data);

        for (var _index = 0; _index < itemCount; _index++) {
          if (getItem(data, _index) === item) {
            this.scrollToIndex(babelHelpers.extends({}, params, {
              index: _index
            }));
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref.recordInteraction();
        });

        this._viewabilityTuples.forEach(function (t) {
          t.viewabilityHelper.recordInteraction();
        });

        this._updateViewableItems(this.props.data);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return ReactNative.findNodeHandle(this._scrollRef);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: {
            getScrollMetrics: this._getScrollMetrics,
            horizontal: this.props.horizontal,
            getOutermostParentListRef: this._getOutermostParentListRef,
            getNestedChildState: this._getNestedChildState,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild
          }
        };
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        return this.context.virtualizedCell && this.context.virtualizedCell.cellKey || 'rootList';
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }]);

    function VirtualizedList(props, context) {
      babelHelpers.classCallCheck(this, VirtualizedList);

      var _this = babelHelpers.possibleConstructorReturn(this, (VirtualizedList.__proto__ || Object.getPrototypeOf(VirtualizedList)).call(this, props, context));

      _initialiseProps.call(_this);

      invariant(!props.onScroll || !props.onScroll.__isNative, "Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent to support native onScroll events with useNativeDriver");
      invariant(props.windowSize > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
      _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
      _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
            onViewableItemsChanged: pair.onViewableItemsChanged
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),
          onViewableItemsChanged: _this.props.onViewableItemsChanged
        });
      }

      var initialState = {
        first: _this.props.initialScrollIndex || 0,
        last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
      };

      if (_this._isNestedWithSameOrientation()) {
        var storedState = _this.context.virtualizedList.getNestedChildState(_this.props.listKey || _this._getCellKey());

        if (storedState) {
          initialState = storedState;
          _this.state = storedState;
          _this._frames = storedState.frames;
        }
      }

      _this.state = initialState;
      return _this;
    }

    babelHelpers.createClass(VirtualizedList, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.registerAsNestedChild({
            cellKey: this._getCellKey(),
            key: this.props.listKey || this._getCellKey(),
            ref: this
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.unregisterAsNestedChild({
            key: this.props.listKey || this._getCellKey(),
            state: {
              first: this.state.first,
              last: this.state.last,
              frames: this._frames
            }
          });
        }

        this._updateViewableItems(null);

        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.dispose();
        });

        this._fillRateHelper.deactivateAndFlush();
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this2 = this;

        var _props3 = this.props,
            CellRendererComponent = _props3.CellRendererComponent,
            ItemSeparatorComponent = _props3.ItemSeparatorComponent,
            data = _props3.data,
            getItem = _props3.getItem,
            getItemCount = _props3.getItemCount,
            horizontal = _props3.horizontal,
            keyExtractor = _props3.keyExtractor;
        var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey = void 0;
        last = Math.min(end, last);

        var _loop = function _loop(ii) {
          var item = getItem(data, ii);
          var key = keyExtractor(item, ii);

          _this2._indicesToKeys.set(ii, key);

          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }

          cells.push(React.createElement(CellRenderer, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            cellKey: key,
            fillRateHelper: _this2._fillRateHelper,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            key: key,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this2._onUpdateSeparators,
            onLayout: function onLayout(e) {
              return _this2._onCellLayout(e, key, ii);
            },
            onUnmount: _this2._onCellUnmount,
            parentProps: _this2.props,
            ref: function (_ref) {
              function ref(_x) {
                return _ref.apply(this, arguments);
              }

              ref.toString = function () {
                return _ref.toString();
              };

              return ref;
            }(function (ref) {
              _this2._cellRefs[key] = ref;
            })
          }));
          prevCellKey = key;
        };

        for (var ii = first; ii <= last; ii++) {
          _loop(ii);
        }
      }
    }, {
      key: "_isVirtualizationDisabled",
      value: function _isVirtualizationDisabled() {
        return this.props.disableVirtualization;
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context.virtualizedList;
        return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
      }
    }, {
      key: "render",
      value: function render() {
        var _props4 = this.props,
            ListEmptyComponent = _props4.ListEmptyComponent,
            ListFooterComponent = _props4.ListFooterComponent,
            ListHeaderComponent = _props4.ListHeaderComponent;
        var _props5 = this.props,
            data = _props5.data,
            horizontal = _props5.horizontal;

        var isVirtualizationDisabled = this._isVirtualizationDisabled();

        var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];

        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }

          var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, null);
          cells.push(React.createElement(
            VirtualizedCellWrapper,
            {
              cellKey: this._getCellKey() + '-header',
              key: "$header"
            },
            React.createElement(
              View,
              {
                onLayout: this._onLayoutHeader,
                style: inversionStyle
              },
              element
            )
          ));
        }

        var itemCount = this.props.getItemCount(data);

        if (itemCount > 0) {
          _usedIndexForKey = false;
          var spacerKey = !horizontal ? 'height' : 'width';
          var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
          var _state = this.state,
              _first = _state.first,
              _last = _state.last;

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);

          var firstAfterInitial = Math.max(lastInitialIndex + 1, _first);

          if (!isVirtualizationDisabled && _first > lastInitialIndex + 1) {
            var insertedStickySpacer = false;

            if (stickyIndicesFromProps.size > 0) {
              var stickyOffset = ListHeaderComponent ? 1 : 0;

              for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
                if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                  var initBlock = this._getFrameMetricsApprox(lastInitialIndex);

                  var stickyBlock = this._getFrameMetricsApprox(ii);

                  var leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_lead",
                    style: babelHelpers.defineProperty({}, spacerKey, leadSpace)
                  }));

                  this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);

                  var trailSpace = this._getFrameMetricsApprox(_first).offset - (stickyBlock.offset + stickyBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_trail",
                    style: babelHelpers.defineProperty({}, spacerKey, trailSpace)
                  }));
                  insertedStickySpacer = true;
                  break;
                }
              }
            }

            if (!insertedStickySpacer) {
              var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);

              var firstSpace = this._getFrameMetricsApprox(_first).offset - (_initBlock.offset + _initBlock.length);

              cells.push(React.createElement(View, {
                key: "$lead_spacer",
                style: babelHelpers.defineProperty({}, spacerKey, firstSpace)
              }));
            }
          }

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, _last, inversionStyle);

          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn("VirtualizedList: missing keys for items, make sure to specify a key property on each item or provide a custom keyExtractor.");
            this._hasWarned.keys = true;
          }

          if (!isVirtualizationDisabled && _last < itemCount - 1) {
            var lastFrame = this._getFrameMetricsApprox(_last);

            var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

            var endFrame = this._getFrameMetricsApprox(end);

            var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
            cells.push(React.createElement(View, {
              key: "$tail_spacer",
              style: babelHelpers.defineProperty({}, spacerKey, tailSpacerLength)
            }));
          }
        } else if (ListEmptyComponent) {
          var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, null);

          cells.push(React.createElement(
            View,
            {
              key: "$empty",
              onLayout: this._onLayoutEmpty,
              style: inversionStyle
            },
            _element
          ));
        }

        if (ListFooterComponent) {
          var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, null);

          cells.push(React.createElement(
            VirtualizedCellWrapper,
            {
              cellKey: this._getCellKey() + '-footer',
              key: "$footer"
            },
            React.createElement(
              View,
              {
                onLayout: this._onLayoutFooter,
                style: inversionStyle
              },
              _element2
            )
          ));
        }

        var scrollProps = babelHelpers.extends({}, this.props, {
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle,
          invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
          stickyHeaderIndices: stickyHeaderIndices
        });

        if (inversionStyle) {
          scrollProps.style = [inversionStyle, this.props.style];
        }

        this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
        var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells);

        if (this.props.debug) {
          return React.createElement(
            View,
            {
              style: {
                flex: 1
              }
            },
            ret,
            this._renderDebugOverlay()
          );
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _props6 = this.props,
            data = _props6.data,
            extraData = _props6.extraData;

        if (data !== prevProps.data || extraData !== prevProps.extraData) {
          this._hasDataChangedSinceEndReached = true;

          this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }

        this._scheduleCellsToRenderUpdate();
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
      }
    }, {
      key: "_onCellLayout",
      value: function _onCellLayout(e, cellKey, index) {
        var layout = e.nativeEvent.layout;
        var next = {
          offset: this._selectOffset(layout),
          length: this._selectLength(layout),
          index: index,
          inLayout: true
        };
        var curr = this._frames[cellKey];

        if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
          this._totalCellLength += next.length - (curr ? curr.length : 0);
          this._totalCellsMeasured += curr ? 0 : 1;
          this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
          this._frames[cellKey] = next;
          this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);

          this._scheduleCellsToRenderUpdate();
        } else {
          this._frames[cellKey].inLayout = true;
        }

        this._computeBlankness();
      }
    }, {
      key: "_measureLayoutRelativeToContainingList",
      value: function _measureLayoutRelativeToContainingList() {
        var _this3 = this;

        UIManager.measureLayout(ReactNative.findNodeHandle(this), ReactNative.findNodeHandle(this.context.virtualizedList.getOutermostParentListRef()), function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's offset from its containing VirtualizedList.");
        }, function (x, y, width, height) {
          _this3._offsetFromParentVirtualizedList = _this3._selectOffset({
            x: x,
            y: y
          });
          _this3._scrollMetrics.contentLength = _this3._selectLength({
            width: width,
            height: height
          });

          var scrollMetrics = _this3._convertParentScrollMetrics(_this3.context.virtualizedList.getScrollMetrics());

          _this3._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
          _this3._scrollMetrics.offset = scrollMetrics.offset;
        });
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);

        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._getFrameMetricsApprox(ii);

          if (frame.inLayout) {
            framesInLayout.push(frame);
          }
        }

        var windowTop = this._getFrameMetricsApprox(this.state.first).offset;

        var frameLast = this._getFrameMetricsApprox(this.state.last);

        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        var baseStyle = {
          position: 'absolute',
          top: 0,
          right: 0
        };
        return React.createElement(
          View,
          {
            style: babelHelpers.extends({}, baseStyle, {
              bottom: 0,
              width: 20,
              borderColor: 'blue',
              borderWidth: 1
            })
          },
          framesInLayout.map(function (f, ii) {
            return React.createElement(View, {
              key: 'f' + ii,
              style: babelHelpers.extends({}, baseStyle, {
                left: 0,
                top: f.offset * normalize,
                height: f.length * normalize,
                backgroundColor: 'orange'
              })
            });
          }),
          React.createElement(View, {
            style: babelHelpers.extends({}, baseStyle, {
              left: 0,
              top: windowTop * normalize,
              height: windowLen * normalize,
              borderColor: 'green',
              borderWidth: 2
            })
          }),
          React.createElement(View, {
            style: babelHelpers.extends({}, baseStyle, {
              left: 0,
              top: visTop * normalize,
              height: visLen * normalize,
              borderColor: 'red',
              borderWidth: 2
            })
          })
        );
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !this.props.horizontal ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(metrics) {
        return !this.props.horizontal ? metrics.y : metrics.x;
      }
    }, {
      key: "_maybeCallOnEndReached",
      value: function _maybeCallOnEndReached() {
        var _props7 = this.props,
            data = _props7.data,
            getItemCount = _props7.getItemCount,
            onEndReached = _props7.onEndReached,
            onEndReachedThreshold = _props7.onEndReachedThreshold;
        var _scrollMetrics = this._scrollMetrics,
            contentLength = _scrollMetrics.contentLength,
            visibleLength = _scrollMetrics.visibleLength,
            offset = _scrollMetrics.offset;
        var distanceFromEnd = contentLength - visibleLength - offset;

        if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
          this._hasDataChangedSinceEndReached = false;
          this._sentEndForContentLength = this._scrollMetrics.contentLength;
          onEndReached({
            distanceFromEnd: distanceFromEnd
          });
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        var _state2 = this.state,
            first = _state2.first,
            last = _state2.last;
        var _scrollMetrics2 = this._scrollMetrics,
            offset = _scrollMetrics2.offset,
            visibleLength = _scrollMetrics2.visibleLength,
            velocity = _scrollMetrics2.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;

        if (first > 0 || last < itemCount - 1) {
          var distTop = offset - this._getFrameMetricsApprox(first).offset;

          var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
          var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;
          hiPri = Math.min(distTop, distBottom) < 0 || velocity < -2 && distTop < scrollingThreshold || velocity > 2 && distBottom < scrollingThreshold;
        }

        if (hiPri && this._averageCellLength) {
          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });

          this._updateCellsToRender();

          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(data) {
        var _this4 = this;

        var getItemCount = this.props.getItemCount;

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.onUpdate(getItemCount(data), _this4._scrollMetrics.offset, _this4._scrollMetrics.visibleLength, _this4._getFrameMetrics, _this4._createViewToken, tuple.onViewableItemsChanged, _this4.state);
        });
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(newProps, prevState) {
        var data = newProps.data,
            extraData = newProps.extraData,
            getItemCount = newProps.getItemCount,
            maxToRenderPerBatch = newProps.maxToRenderPerBatch;
        return {
          first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
          last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))
        };
      }
    }]);
    return VirtualizedList;
  }(React.PureComponent), _class.defaultProps = {
    disableVirtualization: false,
    horizontal: false,
    initialNumToRender: 10,
    keyExtractor: function keyExtractor(item, index) {
      if (item.key != null) {
        return item.key;
      }

      _usedIndexForKey = true;
      return String(index);
    },
    maxToRenderPerBatch: 10,
    onEndReachedThreshold: 2,
    scrollEventThrottle: 50,
    updateCellsBatchingPeriod: 50,
    windowSize: 21
  }, _class.contextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    }),
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      getNestedChildState: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  }, _class.childContextTypes = {
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      getNestedChildState: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  }, _initialiseProps = function _initialiseProps() {
    var _this5 = this;

    this._getScrollMetrics = function () {
      return _this5._scrollMetrics;
    };

    this._getOutermostParentListRef = function () {
      if (_this5._isNestedWithSameOrientation()) {
        return _this5.context.virtualizedList.getOutermostParentListRef();
      } else {
        return _this5;
      }
    };

    this._getNestedChildState = function (key) {
      var existingChildData = _this5._nestedChildLists.get(key);

      return existingChildData && existingChildData.state;
    };

    this._registerAsNestedChild = function (childList) {
      var childListsInCell = _this5._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
      childListsInCell.add(childList.key);

      _this5._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);

      var existingChildData = _this5._nestedChildLists.get(childList.key);

      invariant(!(existingChildData && existingChildData.ref !== null), "A VirtualizedList contains a cell which itself contains more than one VirtualizedList of the same orientation as the parent list. You must pass a unique listKey prop to each sibling list.");

      _this5._nestedChildLists.set(childList.key, {
        ref: childList.ref,
        state: null
      });

      if (_this5._hasInteracted) {
        childList.ref.recordInteraction();
      }
    };

    this._unregisterAsNestedChild = function (childList) {
      _this5._nestedChildLists.set(childList.key, {
        ref: null,
        state: childList.state
      });
    };

    this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this5._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };

    this._averageCellLength = 0;
    this._cellKeysToChildListKeys = new Map();
    this._cellRefs = {};
    this._frames = {};
    this._footerLength = 0;
    this._hasDataChangedSinceEndReached = true;
    this._hasInteracted = false;
    this._hasMore = false;
    this._hasWarned = {};
    this._highestMeasuredFrameIndex = 0;
    this._headerLength = 0;
    this._indicesToKeys = new Map();
    this._hasDoneInitialScroll = false;
    this._nestedChildLists = new Map();
    this._offsetFromParentVirtualizedList = 0;
    this._prevParentOffset = 0;
    this._scrollMetrics = {
      contentLength: 0,
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0
    };
    this._scrollRef = null;
    this._sentEndForContentLength = 0;
    this._totalCellLength = 0;
    this._totalCellsMeasured = 0;
    this._viewabilityTuples = [];

    this._captureScrollRef = function (ref) {
      _this5._scrollRef = ref;
    };

    this._defaultRenderScrollComponent = function (props) {
      if (_this5._isNestedWithSameOrientation()) {
        return React.createElement(View, props);
      } else if (props.onRefresh) {
        invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            progressViewOffset: props.progressViewOffset
          })
        }));
      } else {
        return React.createElement(ScrollView, props);
      }
    };

    this._onCellUnmount = function (cellKey) {
      var curr = _this5._frames[cellKey];

      if (curr) {
        _this5._frames[cellKey] = babelHelpers.extends({}, curr, {
          inLayout: false
        });
      }
    };

    this._onLayout = function (e) {
      if (_this5._isNestedWithSameOrientation()) {
        _this5._measureLayoutRelativeToContainingList();
      } else {
        _this5._scrollMetrics.visibleLength = _this5._selectLength(e.nativeEvent.layout);
      }

      _this5.props.onLayout && _this5.props.onLayout(e);

      _this5._scheduleCellsToRenderUpdate();

      _this5._maybeCallOnEndReached();
    };

    this._onLayoutEmpty = function (e) {
      _this5.props.onLayout && _this5.props.onLayout(e);
    };

    this._onLayoutFooter = function (e) {
      _this5._footerLength = _this5._selectLength(e.nativeEvent.layout);
    };

    this._onLayoutHeader = function (e) {
      _this5._headerLength = _this5._selectLength(e.nativeEvent.layout);
    };

    this._onContentSizeChange = function (width, height) {
      if (width > 0 && height > 0 && _this5.props.initialScrollIndex != null && _this5.props.initialScrollIndex > 0 && !_this5._hasDoneInitialScroll) {
        _this5.scrollToIndex({
          animated: false,
          index: _this5.props.initialScrollIndex
        });

        _this5._hasDoneInitialScroll = true;
      }

      if (_this5.props.onContentSizeChange) {
        _this5.props.onContentSizeChange(width, height);
      }

      _this5._scrollMetrics.contentLength = _this5._selectLength({
        height: height,
        width: width
      });

      _this5._scheduleCellsToRenderUpdate();

      _this5._maybeCallOnEndReached();
    };

    this._convertParentScrollMetrics = function (metrics) {
      var offset = metrics.offset - _this5._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this5._scrollMetrics.offset;
      var contentLength = _this5._scrollMetrics.contentLength;
      return {
        visibleLength: visibleLength,
        contentLength: contentLength,
        offset: offset,
        dOffset: dOffset
      };
    };

    this._onScroll = function (e) {
      _this5._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScroll(e);
      });

      if (_this5.props.onScroll) {
        _this5.props.onScroll(e);
      }

      var timestamp = e.timeStamp;

      var visibleLength = _this5._selectLength(e.nativeEvent.layoutMeasurement);

      var contentLength = _this5._selectLength(e.nativeEvent.contentSize);

      var offset = _this5._selectOffset(e.nativeEvent.contentOffset);

      var dOffset = offset - _this5._scrollMetrics.offset;

      if (_this5._isNestedWithSameOrientation()) {
        if (_this5._scrollMetrics.contentLength === 0) {
          return;
        }

        var _convertParentScrollM = _this5._convertParentScrollMetrics({
          visibleLength: visibleLength,
          offset: offset
        });

        visibleLength = _convertParentScrollM.visibleLength;
        contentLength = _convertParentScrollM.contentLength;
        offset = _convertParentScrollM.offset;
        dOffset = _convertParentScrollM.dOffset;
      }

      var dt = _this5._scrollMetrics.timestamp ? Math.max(1, timestamp - _this5._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;

      if (dt > 500 && _this5._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this5._hasWarned.perf) {
        infoLog("VirtualizedList: You have a large list that is slow to update - make sure your renderItem function renders components that follow React performance best practices like PureComponent, shouldComponentUpdate, etc.", {
          dt: dt,
          prevDt: _this5._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this5._hasWarned.perf = true;
      }

      _this5._scrollMetrics = {
        contentLength: contentLength,
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength
      };

      _this5._updateViewableItems(_this5.props.data);

      if (!_this5.props) {
        return;
      }

      _this5._maybeCallOnEndReached();

      if (velocity !== 0) {
        _this5._fillRateHelper.activate();
      }

      _this5._computeBlankness();

      _this5._scheduleCellsToRenderUpdate();
    };

    this._onScrollBeginDrag = function (e) {
      _this5._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScrollBeginDrag(e);
      });

      _this5._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });

      _this5._hasInteracted = true;
      _this5.props.onScrollBeginDrag && _this5.props.onScrollBeginDrag(e);
    };

    this._onScrollEndDrag = function (e) {
      var velocity = e.nativeEvent.velocity;

      if (velocity) {
        _this5._scrollMetrics.velocity = _this5._selectOffset(velocity);
      }

      _this5._computeBlankness();

      _this5.props.onScrollEndDrag && _this5.props.onScrollEndDrag(e);
    };

    this._onMomentumScrollEnd = function (e) {
      _this5._scrollMetrics.velocity = 0;

      _this5._computeBlankness();

      _this5.props.onMomentumScrollEnd && _this5.props.onMomentumScrollEnd(e);
    };

    this._updateCellsToRender = function () {
      var _props8 = _this5.props,
          data = _props8.data,
          getItemCount = _props8.getItemCount,
          onEndReachedThreshold = _props8.onEndReachedThreshold;

      var isVirtualizationDisabled = _this5._isVirtualizationDisabled();

      _this5._updateViewableItems(data);

      if (!data) {
        return;
      }

      _this5.setState(function (state) {
        var newState = void 0;

        if (!isVirtualizationDisabled) {
          if (_this5._scrollMetrics.visibleLength) {
            if (!_this5.props.initialScrollIndex || _this5._scrollMetrics.offset) {
              newState = computeWindowedRenderLimits(_this5.props, state, _this5._getFrameMetricsApprox, _this5._scrollMetrics);
            }
          }
        } else {
          var _scrollMetrics3 = _this5._scrollMetrics,
              contentLength = _scrollMetrics3.contentLength,
              _offset = _scrollMetrics3.offset,
              visibleLength = _scrollMetrics3.visibleLength;

          var _distanceFromEnd = contentLength - visibleLength - _offset;

          var renderAhead = _distanceFromEnd < onEndReachedThreshold * visibleLength ? _this5.props.maxToRenderPerBatch : 0;
          newState = {
            first: 0,
            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
          };
        }

        if (newState && _this5._nestedChildLists.size > 0) {
          var newFirst = newState.first;
          var newLast = newState.last;

          for (var ii = newFirst; ii <= newLast; ii++) {
            var cellKeyForIndex = _this5._indicesToKeys.get(ii);

            var childListKeys = cellKeyForIndex && _this5._cellKeysToChildListKeys.get(cellKeyForIndex);

            if (!childListKeys) {
              continue;
            }

            var someChildHasMore = false;

            for (var _iterator = childListKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
              var _ref6;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref6 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref6 = _i.value;
              }

              var childKey = _ref6;

              var childList = _this5._nestedChildLists.get(childKey);

              if (childList && childList.ref && childList.ref.hasMore()) {
                someChildHasMore = true;
                break;
              }
            }

            if (someChildHasMore) {
              newState.last = ii;
              break;
            }
          }
        }

        return newState;
      });
    };

    this._createViewToken = function (index, isViewable) {
      var _props9 = _this5.props,
          data = _props9.data,
          getItem = _props9.getItem,
          keyExtractor = _props9.keyExtractor;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: keyExtractor(item, index),
        isViewable: isViewable
      };
    };

    this._getFrameMetricsApprox = function (index) {
      var frame = _this5._getFrameMetrics(index);

      if (frame && frame.index === index) {
        return frame;
      } else {
        var _getItemLayout = _this5.props.getItemLayout;
        invariant(!_getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
        return {
          length: _this5._averageCellLength,
          offset: _this5._averageCellLength * index
        };
      }
    };

    this._getFrameMetrics = function (index) {
      var _props10 = _this5.props,
          data = _props10.data,
          getItem = _props10.getItem,
          getItemCount = _props10.getItemCount,
          getItemLayout = _props10.getItemLayout,
          keyExtractor = _props10.keyExtractor;
      invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
      var item = getItem(data, index);

      var frame = item && _this5._frames[keyExtractor(item, index)];

      if (!frame || frame.index !== index) {
        if (getItemLayout) {
          frame = getItemLayout(data, index);
        }
      }

      return frame;
    };
  }, _temp);
  var CellRenderer = (_temp3 = _class2 = function (_React$Component) {
    babelHelpers.inherits(CellRenderer, _React$Component);

    function CellRenderer() {
      var _ref7;

      var _temp2, _this6, _ret2;

      babelHelpers.classCallCheck(this, CellRenderer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret2 = (_temp2 = (_this6 = babelHelpers.possibleConstructorReturn(this, (_ref7 = CellRenderer.__proto__ || Object.getPrototypeOf(CellRenderer)).call.apply(_ref7, [this].concat(args))), _this6), _this6.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this6.props.item
        }
      }, _this6._separators = {
        highlight: function highlight() {
          var _this6$props = _this6.props,
              cellKey = _this6$props.cellKey,
              prevCellKey = _this6$props.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: function unhighlight() {
          var _this6$props2 = _this6.props,
              cellKey = _this6$props2.cellKey,
              prevCellKey = _this6$props2.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this6$props3 = _this6.props,
              cellKey = _this6$props3.cellKey,
              prevCellKey = _this6$props3.prevCellKey;

          _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      }, _temp2), babelHelpers.possibleConstructorReturn(_this6, _ret2);
    }

    babelHelpers.createClass(CellRenderer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "render",
      value: function render() {
        var _props11 = this.props,
            CellRendererComponent = _props11.CellRendererComponent,
            ItemSeparatorComponent = _props11.ItemSeparatorComponent,
            fillRateHelper = _props11.fillRateHelper,
            horizontal = _props11.horizontal,
            item = _props11.item,
            index = _props11.index,
            inversionStyle = _props11.inversionStyle,
            parentProps = _props11.parentProps;
        var renderItem = parentProps.renderItem,
            getItemLayout = parentProps.getItemLayout;
        invariant(renderItem, 'no renderItem!');
        var element = renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
        var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
        var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, this.state.separatorProps);
        var cellStyle = inversionStyle ? horizontal ? [{
          flexDirection: 'row-reverse'
        }, inversionStyle] : [{
          flexDirection: 'column-reverse'
        }, inversionStyle] : horizontal ? [{
          flexDirection: 'row'
        }, inversionStyle] : inversionStyle;

        if (!CellRendererComponent) {
          return React.createElement(
            View,
            {
              style: cellStyle,
              onLayout: onLayout
            },
            element,
            itemSeparator
          );
        }

        return React.createElement(
          CellRendererComponent,
          babelHelpers.extends({}, this.props, {
            style: cellStyle,
            onLayout: onLayout
          }),
          element,
          itemSeparator
        );
      }
    }]);
    return CellRenderer;
  }(React.Component), _class2.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  }, _temp3);
  var VirtualizedCellWrapper = (_temp4 = _class3 = function (_React$Component2) {
    babelHelpers.inherits(VirtualizedCellWrapper, _React$Component2);

    function VirtualizedCellWrapper() {
      babelHelpers.classCallCheck(this, VirtualizedCellWrapper);
      return babelHelpers.possibleConstructorReturn(this, (VirtualizedCellWrapper.__proto__ || Object.getPrototypeOf(VirtualizedCellWrapper)).apply(this, arguments));
    }

    babelHelpers.createClass(VirtualizedCellWrapper, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);
    return VirtualizedCellWrapper;
  }(React.Component), _class3.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  }, _temp4);
  var styles = StyleSheet.create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    }
  });
  module.exports = VirtualizedList;
},234,[235,236,121,111,46,233,208,112,97,134,237,101,95,15,29,238]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = _require(_dependencyMap[0]);

  var Batchinator = function () {
    function Batchinator(callback, delayMS) {
      babelHelpers.classCallCheck(this, Batchinator);
      this._delay = delayMS;
      this._callback = callback;
    }

    babelHelpers.createClass(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };

        if (this._taskHandle) {
          this._taskHandle.cancel();

          if (!options.abort) {
            this._callback();
          }

          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        var _this = this;

        if (this._taskHandle) {
          return;
        }

        var timeoutHandle = setTimeout(function () {
          _this._taskHandle = InteractionManager.runAfterInteractions(function () {
            _this._taskHandle = null;

            _this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: function cancel() {
            return clearTimeout(timeoutHandle);
          }
        };
      }
    }]);
    return Batchinator;
  }();

  module.exports = Batchinator;
},235,[186]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var performanceNow = _require(_dependencyMap[0]);

  var warning = _require(_dependencyMap[1]);

  var Info = function Info() {
    babelHelpers.classCallCheck(this, Info);
    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  };

  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;

  var _sampleRate = DEBUG ? 1 : null;

  var FillRateHelper = function () {
    babelHelpers.createClass(FillRateHelper, null, [{
      key: "addListener",
      value: function addListener(callback) {
        warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');

        _listeners.push(callback);

        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);

    function FillRateHelper(getFrameMetrics) {
      babelHelpers.classCallCheck(this, FillRateHelper);
      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._getFrameMetrics = getFrameMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();

      this._resetData();
    }

    babelHelpers.createClass(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG && console.debug('FillRateHelper: activate');
          this._samplesStartTime = performanceNow();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }

        var start = this._samplesStartTime;

        if (start == null) {
          DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');
          return;
        }

        if (this._info.sample_count < _minSampleCount) {
          this._resetData();

          return;
        }

        var total_time_spent = performanceNow() - start;
        var info = babelHelpers.extends({}, this._info, {
          total_time_spent: total_time_spent
        });

        if (DEBUG) {
          var derived = {
            avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
            avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),
            avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
            any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),
            any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
            mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),
            mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
          };

          for (var key in derived) {
            derived[key] = Math.round(1000 * derived[key]) / 1000;
          }

          console.debug('FillRateHelper deactivateAndFlush: ', {
            derived: derived,
            info: info
          });
        }

        _listeners.forEach(function (listener) {
          return listener(info);
        });

        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, state, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
          return 0;
        }

        var dOffset = scrollMetrics.dOffset,
            offset = scrollMetrics.offset,
            velocity = scrollMetrics.velocity,
            visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
        var now = performanceNow();

        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }

        this._anyBlankStartTime = null;

        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }

        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = state.first;

        var firstFrame = this._getFrameMetrics(first);

        while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
          firstFrame = this._getFrameMetrics(first);
          first++;
        }

        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }

        var blankBottom = 0;
        var last = state.last;

        var lastFrame = this._getFrameMetrics(last);

        while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
          lastFrame = this._getFrameMetrics(last);
          last--;
        }

        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }

        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;

        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;

          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }

        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }]);
    return FillRateHelper;
  }();

  module.exports = FillRateHelper;
},236,[26,29]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var ViewabilityHelper = function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };
      babelHelpers.classCallCheck(this, ViewabilityHelper);
      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }

    babelHelpers.createClass(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
        var _config = this._config,
            itemVisiblePercentThreshold = _config.itemVisiblePercentThreshold,
            viewAreaCoveragePercentThreshold = _config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];

        if (itemCount === 0) {
          return viewableIndices;
        }

        var firstVisible = -1;

        var _ref = renderRange || {
          first: 0,
          last: itemCount - 1
        },
            first = _ref.first,
            last = _ref.last;

        invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({
          renderRange: renderRange,
          itemCount: itemCount
        }));

        for (var idx = first; idx <= last; idx++) {
          var metrics = getFrameMetrics(idx);

          if (!metrics) {
            continue;
          }

          var top = metrics.offset - scrollOffset;
          var bottom = top + metrics.length;

          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;

            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }

        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var _this = this;

        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
          return;
        }

        var viewableIndices = [];

        if (itemCount) {
          viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
        }

        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
          return v === viewableIndices[ii];
        })) {
          return;
        }

        this._viewableIndices = viewableIndices;

        if (this._config.minimumViewTime) {
          var handle = setTimeout(function () {
            _this._timers.delete(handle);

            _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);

          this._timers.add(handle);
        } else {
          this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        var _this2 = this;

        viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
          return _this2._viewableIndices.includes(ii);
        });
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
          var viewable = createViewToken(ii, true);
          return [viewable.key, viewable];
        }));
        var changed = [];

        for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref4;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref4 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref4 = _i.value;
          }

          var _ref2 = _ref4;

          var _ref3 = babelHelpers.slicedToArray(_ref2, 2);

          var _key = _ref3[0];
          var viewable = _ref3[1];

          if (!prevItems.has(_key)) {
            changed.push(viewable);
          }
        }

        for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref7;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref7 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref7 = _i2.value;
          }

          var _ref5 = _ref7;

          var _ref6 = babelHelpers.slicedToArray(_ref5, 2);

          var _key2 = _ref6[0];
          var _viewable = _ref6[1];

          if (!nextItems.has(_key2)) {
            changed.push(babelHelpers.extends({}, _viewable, {
              isViewable: false
            }));
          }
        }

        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed: changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);
    return ViewabilityHelper;
  }();

  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);

      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }

  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }

  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }

  module.exports = ViewabilityHelper;
},237,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
    var out = [];
    var outLength = 0;

    for (var ii = 0; ii < itemCount; ii++) {
      var frame = getFrameMetrics(ii);
      var trailingOffset = frame.offset + frame.length;

      for (var kk = 0; kk < offsets.length; kk++) {
        if (out[kk] == null && trailingOffset >= offsets[kk]) {
          out[kk] = ii;
          outLength++;

          if (kk === offsets.length - 1) {
            invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));
            return out;
          }
        }
      }
    }

    return out;
  }

  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }

  function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
    var data = props.data,
        getItemCount = props.getItemCount,
        maxToRenderPerBatch = props.maxToRenderPerBatch,
        windowSize = props.windowSize;
    var itemCount = getItemCount(data);

    if (itemCount === 0) {
      return prev;
    }

    var offset = scrollMetrics.offset,
        velocity = scrollMetrics.velocity,
        visibleLength = scrollMetrics.visibleLength;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;

    if (lastItemOffset < overscanBegin) {
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }

    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
        _elementsThatOverlapO2 = babelHelpers.slicedToArray(_elementsThatOverlapO, 4),
        overscanFirst = _elementsThatOverlapO2[0],
        first = _elementsThatOverlapO2[1],
        last = _elementsThatOverlapO2[2],
        overscanLast = _elementsThatOverlapO2[3];

    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first: first,
      last: last
    };
    var newCellCount = newRangeCount(prev, visible);

    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }

      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);

      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }

      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }

        first--;
      }

      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }

        last++;
      }
    }

    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first: first,
        last: last,
        itemCount: itemCount,
        overscanFirst: overscanFirst,
        overscanLast: overscanLast,
        visible: visible
      }));
    }

    return {
      first: first,
      last: last
    };
  }

  var VirtualizeUtils = {
    computeWindowedRenderLimits: computeWindowedRenderLimits,
    elementsThatOverlapOffsets: elementsThatOverlapOffsets,
    newRangeCount: newRangeCount
  };
  module.exports = VirtualizeUtils;
},238,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Image = _require(_dependencyMap[0]);

  var React = _require(_dependencyMap[1]);

  var StyleSheet = _require(_dependencyMap[2]);

  var View = _require(_dependencyMap[3]);

  var ensureComponentIsNative = _require(_dependencyMap[4]);

  var ImageBackground = function (_React$Component) {
    babelHelpers.inherits(ImageBackground, _React$Component);

    function ImageBackground() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ImageBackground);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ImageBackground.__proto__ || Object.getPrototypeOf(ImageBackground)).call.apply(_ref, [this].concat(args))), _this), _this._viewRef = null, _this._captureRef = function (ref) {
        _this._viewRef = ref;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;

        if (viewRef) {
          ensureComponentIsNative(viewRef);
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            style = _props.style,
            imageStyle = _props.imageStyle,
            imageRef = _props.imageRef,
            props = babelHelpers.objectWithoutProperties(_props, ["children", "style", "imageStyle", "imageRef"]);
        return React.createElement(
          View,
          {
            style: style,
            ref: this._captureRef
          },
          React.createElement(Image, babelHelpers.extends({}, props, {
            style: [StyleSheet.absoluteFill, {
              width: style.width,
              height: style.height
            }, imageStyle],
            ref: imageRef
          })),
          children
        );
      }
    }]);
    return ImageBackground;
  }(React.Component);

  module.exports = ImageBackground;
},239,[1080,111,112,134,240]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var ensureComponentIsNative = function ensureComponentIsNative(component) {
    invariant(component && typeof component.setNativeProps === 'function', "Touchable child must either be native or forward setNativeProps to a native component");
  };

  module.exports = ensureComponentIsNative;
},240,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImageEditingManager = _require(_dependencyMap[0]).ImageEditingManager;

  var ImageEditor = function () {
    function ImageEditor() {
      babelHelpers.classCallCheck(this, ImageEditor);
    }

    babelHelpers.createClass(ImageEditor, null, [{
      key: "cropImage",
      value: function cropImage(uri, cropData, success, failure) {
        RCTImageEditingManager.cropImage(uri, cropData, success, failure);
      }
    }]);
    return ImageEditor;
  }();

  module.exports = ImageEditor;
},241,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImageStoreManager = _require(_dependencyMap[0]).ImageStoreManager;

  var ImageStore = function () {
    function ImageStore() {
      babelHelpers.classCallCheck(this, ImageStore);
    }

    babelHelpers.createClass(ImageStore, null, [{
      key: "hasImageForTag",
      value: function hasImageForTag(uri, callback) {
        if (RCTImageStoreManager.hasImageForTag) {
          RCTImageStoreManager.hasImageForTag(uri, callback);
        } else {
          console.warn('hasImageForTag() not implemented');
        }
      }
    }, {
      key: "removeImageForTag",
      value: function removeImageForTag(uri) {
        if (RCTImageStoreManager.removeImageForTag) {
          RCTImageStoreManager.removeImageForTag(uri);
        } else {
          console.warn('removeImageForTag() not implemented');
        }
      }
    }, {
      key: "addImageFromBase64",
      value: function addImageFromBase64(base64ImageData, success, failure) {
        RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
      }
    }, {
      key: "getBase64ForTag",
      value: function getBase64ForTag(uri, success, failure) {
        RCTImageStoreManager.getBase64ForTag(uri, success, failure);
      }
    }]);
    return ImageStore;
  }();

  module.exports = ImageStore;
},242,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var createReactClass = _require(_dependencyMap[0]);

  var Keyboard = _require(_dependencyMap[1]);

  var LayoutAnimation = _require(_dependencyMap[2]);

  var Platform = _require(_dependencyMap[3]);

  var PropTypes = _require(_dependencyMap[4]);

  var React = _require(_dependencyMap[5]);

  var TimerMixin = _require(_dependencyMap[6]);

  var View = _require(_dependencyMap[7]);

  var ViewPropTypes = _require(_dependencyMap[8]);

  var viewRef = 'VIEW';
  var KeyboardAvoidingView = createReactClass({
    displayName: 'KeyboardAvoidingView',
    mixins: [TimerMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      behavior: PropTypes.oneOf(['height', 'position', 'padding']),
      contentContainerStyle: ViewPropTypes.style,
      keyboardVerticalOffset: PropTypes.number.isRequired,
      enabled: PropTypes.bool.isRequired
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        enabled: true,
        keyboardVerticalOffset: 0
      };
    },
    getInitialState: function getInitialState() {
      return {
        bottom: 0
      };
    },
    subscriptions: [],
    frame: null,
    _relativeKeyboardHeight: function _relativeKeyboardHeight(keyboardFrame) {
      var frame = this.frame;

      if (!frame || !keyboardFrame) {
        return 0;
      }

      var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;
      return Math.max(frame.y + frame.height - keyboardY, 0);
    },
    _onKeyboardChange: function _onKeyboardChange(event) {
      if (!event) {
        this.setState({
          bottom: 0
        });
        return;
      }

      var duration = event.duration,
          easing = event.easing,
          endCoordinates = event.endCoordinates;

      var height = this._relativeKeyboardHeight(endCoordinates);

      if (this.state.bottom === height) {
        return;
      }

      if (duration && easing) {
        LayoutAnimation.configureNext({
          duration: duration,
          update: {
            duration: duration,
            type: LayoutAnimation.Types[easing] || 'keyboard'
          }
        });
      }

      this.setState({
        bottom: height
      });
    },
    _onLayout: function _onLayout(event) {
      this.frame = event.nativeEvent.layout;
    },
    UNSAFE_componentWillUpdate: function UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {
      if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
        nextState.bottom = 0;
      }
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      {
        this.subscriptions = [Keyboard.addListener('keyboardDidHide', this._onKeyboardChange), Keyboard.addListener('keyboardDidShow', this._onKeyboardChange)];
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this.subscriptions.forEach(function (sub) {
        return sub.remove();
      });
    },
    render: function render() {
      var _props = this.props,
          behavior = _props.behavior,
          children = _props.children,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ["behavior", "children", "style"]);
      var bottomHeight = this.props.enabled ? this.state.bottom : 0;

      switch (behavior) {
        case 'height':
          var heightStyle = void 0;

          if (this.frame) {
            heightStyle = {
              height: this.frame.height - bottomHeight,
              flex: 0
            };
          }

          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: [style, heightStyle],
              onLayout: this._onLayout
            }, props),
            children
          );

        case 'position':
          var positionStyle = {
            bottom: bottomHeight
          };
          var contentContainerStyle = this.props.contentContainerStyle;
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: style,
              onLayout: this._onLayout
            }, props),
            React.createElement(
              View,
              {
                style: [contentContainerStyle, positionStyle]
              },
              children
            )
          );

        case 'padding':
          var paddingStyle = {
            paddingBottom: bottomHeight
          };
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: [style, paddingStyle],
              onLayout: this._onLayout
            }, props),
            children
          );

        default:
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              onLayout: this._onLayout,
              style: style
            }, props),
            children
          );
      }
    }
  });
  module.exports = KeyboardAvoidingView;
},243,[158,212,213,1076,121,111,220,134,136]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0]);
},1084,[110]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0]);

  var StyleSheet = _require(_dependencyMap[1]);

  var UnimplementedView = function (_React$Component) {
    babelHelpers.inherits(UnimplementedView, _React$Component);

    function UnimplementedView() {
      babelHelpers.classCallCheck(this, UnimplementedView);
      return babelHelpers.possibleConstructorReturn(this, (UnimplementedView.__proto__ || Object.getPrototypeOf(UnimplementedView)).apply(this, arguments));
    }

    babelHelpers.createClass(UnimplementedView, [{
      key: "setNativeProps",
      value: function setNativeProps() {}
    }, {
      key: "render",
      value: function render() {
        var View = _require(_dependencyMap[2]);

        return React.createElement(
          View,
          {
            style: [styles.unimplementedView, this.props.style]
          },
          this.props.children
        );
      }
    }]);
    return UnimplementedView;
  }(React.Component);

  var styles = StyleSheet.create({
    unimplementedView: {}
  });
  module.exports = UnimplementedView;
},110,[111,112,134]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp, _container;

  var AppContainer = _require(_dependencyMap[0]);

  var I18nManager = _require(_dependencyMap[1]);

  var NativeEventEmitter = _require(_dependencyMap[2]);

  var NativeModules = _require(_dependencyMap[3]);

  var Platform = _require(_dependencyMap[4]);

  var React = _require(_dependencyMap[5]);

  var PropTypes = _require(_dependencyMap[6]);

  var StyleSheet = _require(_dependencyMap[7]);

  var View = _require(_dependencyMap[8]);

  var deprecatedPropType = _require(_dependencyMap[9]);

  var requireNativeComponent = _require(_dependencyMap[10]);

  var RCTModalHostView = requireNativeComponent('RCTModalHostView', null);
  var ModalEventEmitter = null;
  var uniqueModalIdentifier = 0;
  var Modal = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Modal, _React$Component);

    function Modal(props) {
      babelHelpers.classCallCheck(this, Modal);

      var _this = babelHelpers.possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

      Modal._confirmProps(props);

      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }

    babelHelpers.createClass(Modal, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (ModalEventEmitter) {
          this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function (event) {
            if (event.modalID === _this2._identifier && _this2.props.onDismiss) {
              _this2.props.onDismiss();
            }
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        Modal._confirmProps(nextProps);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.visible === false) {
          return null;
        }

        var containerStyles = {
          backgroundColor: this.props.transparent ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType;

        if (!animationType) {
          animationType = 'none';

          if (this.props.animated) {
            animationType = 'slide';
          }
        }

        var presentationStyle = this.props.presentationStyle;

        if (!presentationStyle) {
          presentationStyle = 'fullScreen';

          if (this.props.transparent) {
            presentationStyle = 'overFullScreen';
          }
        }

        var innerChildren = this.props.children;
        return React.createElement(
          RCTModalHostView,
          {
            animationType: animationType,
            presentationStyle: presentationStyle,
            transparent: this.props.transparent,
            hardwareAccelerated: this.props.hardwareAccelerated,
            onRequestClose: this.props.onRequestClose,
            onShow: this.props.onShow,
            identifier: this._identifier,
            style: styles.modal,
            onStartShouldSetResponder: this._shouldSetResponder,
            supportedOrientations: this.props.supportedOrientations,
            onOrientationChange: this.props.onOrientationChange
          },
          React.createElement(
            View,
            {
              style: [styles.container, containerStyles]
            },
            innerChildren
          )
        );
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }], [{
      key: "_confirmProps",
      value: function _confirmProps(props) {
        if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
          console.warn("Modal with '" + props.presentationStyle + "' presentation style and 'transparent' value is not supported.");
        }
      }
    }]);
    return Modal;
  }(React.Component), _class.propTypes = {
    animationType: PropTypes.oneOf(['none', 'slide', 'fade']),
    presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),
    transparent: PropTypes.bool,
    hardwareAccelerated: PropTypes.bool,
    visible: PropTypes.bool,
    onRequestClose: Platform.isTVOS || true ? PropTypes.func.isRequired : PropTypes.func,
    onShow: PropTypes.func,
    onDismiss: PropTypes.func,
    animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),
    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),
    onOrientationChange: PropTypes.func
  }, _class.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  }, _class.contextTypes = {
    rootTag: PropTypes.number
  }, _temp);
  var side = I18nManager.isRTL ? 'right' : 'left';
  var styles = StyleSheet.create({
    modal: {
      position: 'absolute'
    },
    container: (_container = {
      position: 'absolute'
    }, babelHelpers.defineProperty(_container, side, 0), babelHelpers.defineProperty(_container, "top", 0), _container)
  });
  module.exports = Modal;
},245,[246,247,70,17,1076,111,121,112,134,126,147]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp2;

  var EmitterSubscription = _require(_dependencyMap[0]);

  var PropTypes = _require(_dependencyMap[1]);

  var RCTDeviceEventEmitter = _require(_dependencyMap[2]);

  var React = _require(_dependencyMap[3]);

  var ReactNative = _require(_dependencyMap[4]);

  var StyleSheet = _require(_dependencyMap[5]);

  var View = _require(_dependencyMap[6]);

  var AppContainer = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(AppContainer, _React$Component);

    function AppContainer() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, AppContainer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        inspector: null,
        mainKey: 1
      }, _this._subscription = null, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(AppContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          rootTag: this.props.rootTag
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription) {
          this._subscription.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var yellowBox = null;
        var innerView = React.createElement(
          View,
          {
            collapsable: !this.state.inspector,
            key: this.state.mainKey,
            pointerEvents: "box-none",
            style: styles.appContainer,
            ref: function ref(_ref2) {
              _this3._mainRef = _ref2;
            }
          },
          this.props.children
        );
        var Wrapper = this.props.WrapperComponent;

        if (Wrapper) {
          innerView = React.createElement(
            Wrapper,
            null,
            innerView
          );
        }

        return React.createElement(
          View,
          {
            style: styles.appContainer,
            pointerEvents: "box-none"
          },
          innerView,
          yellowBox,
          this.state.inspector
        );
      }
    }]);
    return AppContainer;
  }(React.Component), _class.childContextTypes = {
    rootTag: PropTypes.number
  }, _temp2);
  var styles = StyleSheet.create({
    appContainer: {
      flex: 1
    }
  });
  module.exports = AppContainer;
},246,[39,121,37,111,46,112,134]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var I18nManager = _require(_dependencyMap[0]).I18nManager || {
    isRTL: false,
    doLeftAndRightSwapInRTL: true,
    allowRTL: function allowRTL() {},
    forceRTL: function forceRTL() {},
    swapLeftAndRightInRTL: function swapLeftAndRightInRTL() {}
  };
  module.exports = I18nManager;
},247,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0]);
},1085,[110]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp, _class2, _temp2;

  var ColorPropType = _require(_dependencyMap[0]);

  var PickerIOS = _require(_dependencyMap[1]);

  var PickerAndroid = _require(_dependencyMap[2]);

  var Platform = _require(_dependencyMap[3]);

  var React = _require(_dependencyMap[4]);

  var PropTypes = _require(_dependencyMap[5]);

  var StyleSheetPropType = _require(_dependencyMap[6]);

  var TextStylePropTypes = _require(_dependencyMap[7]);

  var UnimplementedView = _require(_dependencyMap[8]);

  var ViewPropTypes = _require(_dependencyMap[9]);

  var ViewStylePropTypes = _require(_dependencyMap[10]);

  var itemStylePropType = StyleSheetPropType(TextStylePropTypes);
  var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));
  var MODE_DIALOG = 'dialog';
  var MODE_DROPDOWN = 'dropdown';
  var PickerItem = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(PickerItem, _React$Component);

    function PickerItem() {
      babelHelpers.classCallCheck(this, PickerItem);
      return babelHelpers.possibleConstructorReturn(this, (PickerItem.__proto__ || Object.getPrototypeOf(PickerItem)).apply(this, arguments));
    }

    babelHelpers.createClass(PickerItem, [{
      key: "render",
      value: function render() {
        throw null;
      }
    }]);
    return PickerItem;
  }(React.Component), _class.propTypes = {
    label: PropTypes.string.isRequired,
    value: PropTypes.any,
    color: ColorPropType,
    testID: PropTypes.string
  }, _temp);
  var Picker = (_temp2 = _class2 = function (_React$Component2) {
    babelHelpers.inherits(Picker, _React$Component2);

    function Picker() {
      babelHelpers.classCallCheck(this, Picker);
      return babelHelpers.possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).apply(this, arguments));
    }

    babelHelpers.createClass(Picker, [{
      key: "render",
      value: function render() {
        {
          return React.createElement(
            PickerAndroid,
            this.props,
            this.props.children
          );
        }
      }
    }]);
    return Picker;
  }(React.Component), _class2.MODE_DIALOG = MODE_DIALOG, _class2.MODE_DROPDOWN = MODE_DROPDOWN, _class2.Item = PickerItem, _class2.defaultProps = {
    mode: MODE_DIALOG
  }, _class2.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: PropTypes.any,
    onValueChange: PropTypes.func,
    enabled: PropTypes.bool,
    mode: PropTypes.oneOf(['dialog', 'dropdown']),
    itemStyle: itemStylePropType,
    prompt: PropTypes.string,
    testID: PropTypes.string
  }), _temp2);
  module.exports = Picker;
},250,[43,1086,1087,1076,111,121,144,127,110,136,128]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0]);
},1086,[110]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp, _initialiseProps;

  var ColorPropType = _require(_dependencyMap[0]);

  var React = _require(_dependencyMap[1]);

  var ReactPropTypes = _require(_dependencyMap[2]);

  var StyleSheet = _require(_dependencyMap[3]);

  var StyleSheetPropType = _require(_dependencyMap[4]);

  var ViewPropTypes = _require(_dependencyMap[5]);

  var ViewStylePropTypes = _require(_dependencyMap[6]);

  var processColor = _require(_dependencyMap[7]);

  var requireNativeComponent = _require(_dependencyMap[8]);

  var REF_PICKER = 'picker';
  var MODE_DROPDOWN = 'dropdown';
  var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));
  var PickerAndroid = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(PickerAndroid, _React$Component);

    function PickerAndroid(props, context) {
      babelHelpers.classCallCheck(this, PickerAndroid);

      var _this = babelHelpers.possibleConstructorReturn(this, (PickerAndroid.__proto__ || Object.getPrototypeOf(PickerAndroid)).call(this, props, context));

      _initialiseProps.call(_this);

      var state = _this._stateFromProps(props);

      _this.state = babelHelpers.extends({}, state, {
        initialSelectedIndex: state.selectedIndex
      });
      return _this;
    }

    babelHelpers.createClass(PickerAndroid, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._stateFromProps(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;
        var nativeProps = {
          enabled: this.props.enabled,
          items: this.state.items,
          mode: this.props.mode,
          onSelect: this._onChange,
          prompt: this.props.prompt,
          selected: this.state.initialSelectedIndex,
          testID: this.props.testID,
          style: [styles.pickerAndroid, this.props.style],
          accessibilityLabel: this.props.accessibilityLabel
        };
        return React.createElement(Picker, babelHelpers.extends({
          ref: REF_PICKER
        }, nativeProps));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativePosition = this.state.initialSelectedIndex;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {
          this.refs[REF_PICKER].setNativeProps({
            selected: this.state.selectedIndex
          });
          this._lastNativePosition = this.state.selectedIndex;
        }
      }
    }]);
    return PickerAndroid;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: ReactPropTypes.any,
    enabled: ReactPropTypes.bool,
    mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),
    onValueChange: ReactPropTypes.func,
    prompt: ReactPropTypes.string,
    testID: ReactPropTypes.string
  }), _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._stateFromProps = function (props) {
      var selectedIndex = 0;
      var items = React.Children.map(props.children, function (child, index) {
        if (child.props.value === props.selectedValue) {
          selectedIndex = index;
        }

        var childProps = {
          value: child.props.value,
          label: child.props.label
        };

        if (child.props.color) {
          childProps.color = processColor(child.props.color);
        }

        return childProps;
      });
      return {
        selectedIndex: selectedIndex,
        items: items
      };
    };

    this._onChange = function (event) {
      if (_this2.props.onValueChange) {
        var position = event.nativeEvent.position;

        if (position >= 0) {
          var children = React.Children.toArray(_this2.props.children);
          var value = children[position].props.value;

          _this2.props.onValueChange(value, position);
        } else {
          _this2.props.onValueChange(null, position);
        }
      }

      _this2._lastNativePosition = event.nativeEvent.position;

      _this2.forceUpdate();
    };
  }, _temp);
  var styles = StyleSheet.create({
    pickerAndroid: {
      height: 50
    }
  });
  var cfg = {
    nativeOnly: {
      items: true,
      selected: true
    }
  };
  var DropdownPicker = requireNativeComponent('AndroidDropdownPicker', PickerAndroid, cfg);
  var DialogPicker = requireNativeComponent('AndroidDialogPicker', PickerAndroid, cfg);
  module.exports = PickerAndroid;
},1087,[43,111,121,112,144,136,128,129,147]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0]);

  var StyleSheet = _require(_dependencyMap[1]);

  var Text = _require(_dependencyMap[2]);

  var View = _require(_dependencyMap[3]);

  var DummyProgressViewIOS = function (_React$Component) {
    babelHelpers.inherits(DummyProgressViewIOS, _React$Component);

    function DummyProgressViewIOS() {
      babelHelpers.classCallCheck(this, DummyProgressViewIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummyProgressViewIOS.__proto__ || Object.getPrototypeOf(DummyProgressViewIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyProgressViewIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummy, this.props.style]
          },
          React.createElement(
            Text,
            {
              style: styles.text
            },
            "ProgressViewIOS is not supported on this platform!"
          )
        );
      }
    }]);
    return DummyProgressViewIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 20,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummyProgressViewIOS;
},1088,[111,112,167,134]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0]);
},1089,[134]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp2;

  var MetroListView = _require(_dependencyMap[0]);

  var Platform = _require(_dependencyMap[1]);

  var React = _require(_dependencyMap[2]);

  var ScrollView = _require(_dependencyMap[3]);

  var VirtualizedSectionList = _require(_dependencyMap[4]);

  var defaultProps = babelHelpers.extends({}, VirtualizedSectionList.defaultProps, {
    stickySectionHeadersEnabled: false
  });
  var SectionList = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(SectionList, _React$PureComponent);

    function SectionList() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, SectionList);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = SectionList.__proto__ || Object.getPrototypeOf(SectionList)).call.apply(_ref, [this].concat(args))), _this), _this._captureRef = function (ref) {
        _this._wrapperListRef = ref;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        this._wrapperListRef.scrollToLocation(params);
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;
        return React.createElement(List, babelHelpers.extends({}, this.props, {
          ref: this._captureRef
        }));
      }
    }]);
    return SectionList;
  }(React.PureComponent), _class.defaultProps = defaultProps, _temp2);
  module.exports = SectionList;
},255,[227,1076,111,208,256]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var React = _require(_dependencyMap[0]);

  var View = _require(_dependencyMap[1]);

  var VirtualizedList = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var VirtualizedSectionList = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(VirtualizedSectionList, _React$PureComponent);
    babelHelpers.createClass(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex + 1;

        for (var ii = 0; ii < params.sectionIndex; ii++) {
          index += this.props.sections[ii].data.length + 2;
        }

        var toIndexParams = babelHelpers.extends({}, params, {
          index: index
        });

        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var defaultKeyExtractor = this.props.keyExtractor;

        for (var ii = 0; ii < this.props.sections.length; ii++) {
          var _section = this.props.sections[ii];

          var _key = _section.key || String(ii);

          itemIndex -= 1;

          if (itemIndex >= _section.data.length + 1) {
            itemIndex -= _section.data.length + 1;
          } else if (itemIndex === -1) {
            return {
              section: _section,
              key: _key + ':header',
              index: null,
              header: true,
              trailingSection: this.props.sections[ii + 1]
            };
          } else if (itemIndex === _section.data.length) {
            return {
              section: _section,
              key: _key + ':footer',
              index: null,
              header: false,
              trailingSection: this.props.sections[ii + 1]
            };
          } else {
            var _keyExtractor = _section.keyExtractor || defaultKeyExtractor;

            return {
              section: _section,
              key: _key + ':' + _keyExtractor(_section.data[itemIndex], itemIndex),
              index: itemIndex,
              leadingItem: _section.data[itemIndex - 1],
              leadingSection: this.props.sections[ii - 1],
              trailingItem: _section.data[itemIndex + 1],
              trailingSection: this.props.sections[ii + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info) {
        info = info || this._subExtractor(index);

        if (!info) {
          return null;
        }

        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
        var isLastItemInSection = info.index === info.section.data.length - 1;

        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }

        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }

        return null;
      }
    }, {
      key: "_computeState",
      value: function _computeState(props) {
        var offset = props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = [];
        var itemCount = props.sections.reduce(function (v, section) {
          stickyHeaderIndices.push(v + offset);
          return v + section.data.length + 2;
        }, 0);
        return {
          childProps: babelHelpers.extends({}, props, {
            renderItem: this._renderItem,
            ItemSeparatorComponent: undefined,
            data: props.sections,
            getItemCount: function getItemCount() {
              return itemCount;
            },
            getItem: getItem,
            keyExtractor: this._keyExtractor,
            onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
            stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
          })
        };
      }
    }]);

    function VirtualizedSectionList(props, context) {
      babelHelpers.classCallCheck(this, VirtualizedSectionList);

      var _this = babelHelpers.possibleConstructorReturn(this, (VirtualizedSectionList.__proto__ || Object.getPrototypeOf(VirtualizedSectionList)).call(this, props, context));

      _this._keyExtractor = function (item, index) {
        var info = _this._subExtractor(index);

        return info && info.key || String(index);
      };

      _this._convertViewable = function (viewable) {
        invariant(viewable.index != null, 'Received a broken ViewToken');

        var info = _this._subExtractor(viewable.index);

        if (!info) {
          return null;
        }

        var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
        return babelHelpers.extends({}, viewable, {
          index: info.index,
          key: keyExtractor(viewable.item, info.index),
          section: info.section
        });
      };

      _this._onViewableItemsChanged = function (_ref) {
        var viewableItems = _ref.viewableItems,
            changed = _ref.changed;

        if (_this.props.onViewableItemsChanged) {
          _this.props.onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
            changed: changed.map(_this._convertViewable, _this).filter(Boolean)
          });
        }
      };

      _this._renderItem = function (_ref2) {
        var item = _ref2.item,
            index = _ref2.index;

        var info = _this._subExtractor(index);

        if (!info) {
          return null;
        }

        var infoIndex = info.index;

        if (infoIndex == null) {
          var _section2 = info.section;

          if (info.header === true) {
            var _renderSectionHeader = _this.props.renderSectionHeader;
            return _renderSectionHeader ? _renderSectionHeader({
              section: _section2
            }) : null;
          } else {
            var _renderSectionFooter = _this.props.renderSectionFooter;
            return _renderSectionFooter ? _renderSectionFooter({
              section: _section2
            }) : null;
          }
        } else {
          var _renderItem = info.section.renderItem || _this.props.renderItem;

          var _SeparatorComponent = _this._getSeparatorComponent(index, info);

          invariant(_renderItem, 'no renderItem!');
          return React.createElement(ItemWithSeparator, {
            SeparatorComponent: _SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            onUpdateSeparator: _this._onUpdateSeparator,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            ref: function ref(_ref3) {
              _this._cellRefs[info.key] = _ref3;
            },
            renderItem: _renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection
          });
        }
      };

      _this._onUpdateSeparator = function (key, newProps) {
        var ref = _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      };

      _this._cellRefs = {};

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this.state = _this._computeState(props);
      return _this;
    }

    babelHelpers.createClass(VirtualizedSectionList, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._computeState(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(VirtualizedList, babelHelpers.extends({}, this.state.childProps, {
          ref: this._captureRef
        }));
      }
    }]);
    return VirtualizedSectionList;
  }(React.PureComponent), _class.defaultProps = babelHelpers.extends({}, VirtualizedList.defaultProps, {
    data: []
  }), _temp);

  var ItemWithSeparator = function (_React$Component) {
    babelHelpers.inherits(ItemWithSeparator, _React$Component);

    function ItemWithSeparator() {
      var _ref4;

      var _temp2, _this2, _ret;

      babelHelpers.classCallCheck(this, ItemWithSeparator);

      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _ret = (_temp2 = (_this2 = babelHelpers.possibleConstructorReturn(this, (_ref4 = ItemWithSeparator.__proto__ || Object.getPrototypeOf(ItemWithSeparator)).call.apply(_ref4, [this].concat(args))), _this2), _this2.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this2.props.item,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.trailingItem,
          trailingSection: _this2.props.trailingSection
        },
        leadingSeparatorProps: {
          highlighted: false,
          leadingItem: _this2.props.leadingItem,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.item,
          trailingSection: _this2.props.trailingSection
        }
      }, _this2._separators = {
        highlight: function highlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: true
            });
          });
        },
        unhighlight: function unhighlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: false
            });
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this2$props = _this2.props,
              LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,
              cellKey = _this2$props.cellKey,
              prevCellKey = _this2$props.prevCellKey;

          if (select === 'leading' && LeadingSeparatorComponent) {
            _this2.setState(function (state) {
              return {
                leadingSeparatorProps: babelHelpers.extends({}, state.leadingSeparatorProps, newProps)
              };
            });
          } else {
            _this2.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
          }
        }
      }, _temp2), babelHelpers.possibleConstructorReturn(_this2, _ret);
    }

    babelHelpers.createClass(ItemWithSeparator, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(props) {
        var _this3 = this;

        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, _this3.state.separatorProps, {
              leadingItem: props.item,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.trailingItem,
              trailingSection: props.trailingSection
            }),
            leadingSeparatorProps: babelHelpers.extends({}, _this3.state.leadingSeparatorProps, {
              leadingItem: props.leadingItem,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.item,
              trailingSection: props.trailingSection
            })
          };
        });
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            LeadingSeparatorComponent = _props.LeadingSeparatorComponent,
            SeparatorComponent = _props.SeparatorComponent,
            item = _props.item,
            index = _props.index,
            section = _props.section;
        var element = this.props.renderItem({
          item: item,
          index: index,
          section: section,
          separators: this._separators
        });
        var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, this.state.leadingSeparatorProps);
        var separator = SeparatorComponent && React.createElement(SeparatorComponent, this.state.separatorProps);
        return leadingSeparator || separator ? React.createElement(
          View,
          null,
          leadingSeparator,
          element,
          separator
        ) : element;
      }
    }]);
    return ItemWithSeparator;
  }(React.Component);

  function getItem(sections, index) {
    if (!sections) {
      return null;
    }

    var itemIdx = index - 1;

    for (var ii = 0; ii < sections.length; ii++) {
      if (itemIdx === -1 || itemIdx === sections[ii].data.length) {
        return sections[ii];
      } else if (itemIdx < sections[ii].data.length) {
        return sections[ii].data[itemIdx];
      } else {
        itemIdx -= sections[ii].data.length + 2;
      }
    }

    return null;
  }

  module.exports = VirtualizedSectionList;
},256,[111,134,234,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0]);

  var StyleSheet = _require(_dependencyMap[1]);

  var Text = _require(_dependencyMap[2]);

  var View = _require(_dependencyMap[3]);

  var DummySegmentedControlIOS = function (_React$Component) {
    babelHelpers.inherits(DummySegmentedControlIOS, _React$Component);

    function DummySegmentedControlIOS() {
      babelHelpers.classCallCheck(this, DummySegmentedControlIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummySegmentedControlIOS.__proto__ || Object.getPrototypeOf(DummySegmentedControlIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummySegmentedControlIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummy, this.props.style]
          },
          React.createElement(
            Text,
            {
              style: styles.text
            },
            "SegmentedControlIOS is not supported on this platform!"
          )
        );
      }
    }]);
    return DummySegmentedControlIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 50,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummySegmentedControlIOS;
},1090,[111,112,167,134]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Image = _require(_dependencyMap[0]);

  var ColorPropType = _require(_dependencyMap[1]);

  var NativeMethodsMixin = _require(_dependencyMap[2]);

  var ReactNativeViewAttributes = _require(_dependencyMap[3]);

  var Platform = _require(_dependencyMap[4]);

  var React = _require(_dependencyMap[5]);

  var PropTypes = _require(_dependencyMap[6]);

  var StyleSheet = _require(_dependencyMap[7]);

  var ViewPropTypes = _require(_dependencyMap[8]);

  var createReactClass = _require(_dependencyMap[9]);

  var requireNativeComponent = _require(_dependencyMap[10]);

  var Slider = createReactClass({
    displayName: 'Slider',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      style: ViewPropTypes.style,
      value: PropTypes.number,
      step: PropTypes.number,
      minimumValue: PropTypes.number,
      maximumValue: PropTypes.number,
      minimumTrackTintColor: ColorPropType,
      maximumTrackTintColor: ColorPropType,
      disabled: PropTypes.bool,
      trackImage: Image.propTypes.source,
      minimumTrackImage: Image.propTypes.source,
      maximumTrackImage: Image.propTypes.source,
      thumbImage: Image.propTypes.source,
      thumbTintColor: ColorPropType,
      onValueChange: PropTypes.func,
      onSlidingComplete: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        disabled: false,
        value: 0,
        minimumValue: 0,
        maximumValue: 1,
        step: 0
      };
    },
    viewConfig: {
      uiViewClassName: 'RCTSlider',
      validAttributes: babelHelpers.extends({}, ReactNativeViewAttributes.RCTView, {
        value: true
      })
    },
    render: function render() {
      var _props = this.props,
          style = _props.style,
          onValueChange = _props.onValueChange,
          onSlidingComplete = _props.onSlidingComplete,
          props = babelHelpers.objectWithoutProperties(_props, ["style", "onValueChange", "onSlidingComplete"]);
      props.style = [styles.slider, style];

      props.onValueChange = onValueChange && function (event) {
        var userEvent = true;
        {
          userEvent = event.nativeEvent.fromUser;
        }
        onValueChange && userEvent && onValueChange(event.nativeEvent.value);
      };

      props.onChange = props.onValueChange;

      props.onSlidingComplete = onSlidingComplete && function (event) {
        onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
      };

      return React.createElement(RCTSlider, babelHelpers.extends({}, props, {
        enabled: !this.props.disabled,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          return false;
        }
      }));
    }
  });
  var styles = void 0;
  {
    styles = StyleSheet.create({
      slider: {}
    });
  }
  var options = {};
  {
    options = {
      nativeOnly: {
        enabled: true
      }
    };
  }
  var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);
  module.exports = Slider;
},258,[1080,43,45,135,1076,111,121,112,136,158,147]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0]);
},1091,[110]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0]);

  var NativeMethodsMixin = _require(_dependencyMap[1]);

  var Platform = _require(_dependencyMap[2]);

  var React = _require(_dependencyMap[3]);

  var PropTypes = _require(_dependencyMap[4]);

  var StyleSheet = _require(_dependencyMap[5]);

  var ViewPropTypes = _require(_dependencyMap[6]);

  var createReactClass = _require(_dependencyMap[7]);

  var requireNativeComponent = _require(_dependencyMap[8]);

  var Switch = createReactClass({
    displayName: 'Switch',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onValueChange: PropTypes.func,
      testID: PropTypes.string,
      tintColor: ColorPropType,
      onTintColor: ColorPropType,
      thumbTintColor: ColorPropType
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctSwitch: {},
    _onChange: function _onChange(event) {
      {
        this._rctSwitch.setNativeProps({
          on: this.props.value
        });
      }
      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = babelHelpers.extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      {
        props.enabled = !this.props.disabled;
        props.on = this.props.value;
        props.style = this.props.style;
        props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;
      }
      return React.createElement(RCTSwitch, babelHelpers.extends({}, props, {
        ref: function ref(_ref) {
          _this._rctSwitch = _ref;
        },
        onChange: this._onChange
      }));
    }
  });
  var styles = StyleSheet.create({
    rctSwitchIOS: {
      height: 31,
      width: 51
    }
  });
  {
    var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {
      nativeOnly: {
        onChange: true,
        on: true,
        enabled: true,
        trackTintColor: true
      }
    });
  }
  module.exports = Switch;
},260,[43,45,1076,111,121,112,136,158,147]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var PropTypes = _require(_dependencyMap[0]);

  var React = _require(_dependencyMap[1]);

  var SwipeableRow = _require(_dependencyMap[2]);

  var FlatList = _require(_dependencyMap[3]);

  var SwipeableFlatList = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(SwipeableFlatList, _React$Component);

    function SwipeableFlatList(props, context) {
      babelHelpers.classCallCheck(this, SwipeableFlatList);

      var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableFlatList.__proto__ || Object.getPrototypeOf(SwipeableFlatList)).call(this, props, context));

      _this._flatListRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.state.openRowKey) {
          _this.setState({
            openRowKey: null
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderItem = function (info) {
        var slideoutView = _this.props.renderQuickActions(info);

        var key = _this.props.keyExtractor(info.item, info.index);

        if (!slideoutView) {
          return _this.props.renderItem(info);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = true;
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: key === _this.state.openRowKey,
            maxSwipeDistance: _this._getMaxSwipeDistance(info),
            onOpen: function onOpen() {
              return _this._onOpen(key);
            },
            onClose: function onClose() {
              return _this._onClose(key);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            onSwipeEnd: _this._setListViewScrollable,
            onSwipeStart: _this._setListViewNotScrollable
          },
          _this.props.renderItem(info)
        );
      };

      _this._setListViewScrollable = function () {
        _this._setListViewScrollableTo(true);
      };

      _this._setListViewNotScrollable = function () {
        _this._setListViewScrollableTo(false);
      };

      _this.state = {
        openRowKey: null
      };
      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      return _this;
    }

    babelHelpers.createClass(SwipeableFlatList, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(FlatList, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._flatListRef = _ref;
          },
          onScroll: this._onScroll,
          renderItem: this._renderItem
        }));
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(info) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(info);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_setListViewScrollableTo",
      value: function _setListViewScrollableTo(value) {
        if (this._flatListRef) {
          this._flatListRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(key) {
        this.setState({
          openRowKey: key
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(key) {
        this.setState({
          openRowKey: null
        });
      }
    }]);
    return SwipeableFlatList;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, FlatList.propTypes, {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderQuickActions: PropTypes.func.isRequired
  }), _class.defaultProps = babelHelpers.extends({}, FlatList.defaultProps, {
    bounceFirstRowOnMount: true,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  }), _temp);
  module.exports = SwipeableFlatList;
},262,[121,111,263,226]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Animated = _require(_dependencyMap[0]);

  var I18nManager = _require(_dependencyMap[1]);

  var PanResponder = _require(_dependencyMap[2]);

  var React = _require(_dependencyMap[3]);

  var PropTypes = _require(_dependencyMap[4]);

  var StyleSheet = _require(_dependencyMap[5]);

  var TimerMixin = _require(_dependencyMap[6]);

  var View = _require(_dependencyMap[7]);

  var createReactClass = _require(_dependencyMap[8]);

  var emptyFunction = _require(_dependencyMap[9]);

  var IS_RTL = I18nManager.isRTL;
  var CLOSED_LEFT_POSITION = 0;
  var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;
  var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;
  var SLOW_SPEED_SWIPE_FACTOR = 4;
  var SWIPE_DURATION = 300;
  var ON_MOUNT_BOUNCE_DELAY = 700;
  var ON_MOUNT_BOUNCE_DURATION = 400;
  var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
  var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;
  var RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;
  var SwipeableRow = createReactClass({
    displayName: 'SwipeableRow',
    _panResponder: {},
    _previousLeft: CLOSED_LEFT_POSITION,
    mixins: [TimerMixin],
    propTypes: {
      children: PropTypes.any,
      isOpen: PropTypes.bool,
      preventSwipeRight: PropTypes.bool,
      maxSwipeDistance: PropTypes.number.isRequired,
      onOpen: PropTypes.func.isRequired,
      onClose: PropTypes.func.isRequired,
      onSwipeEnd: PropTypes.func.isRequired,
      onSwipeStart: PropTypes.func.isRequired,
      shouldBounceOnMount: PropTypes.bool,
      slideoutView: PropTypes.node.isRequired,
      swipeThreshold: PropTypes.number.isRequired
    },
    getInitialState: function getInitialState() {
      return {
        currentLeft: new Animated.Value(this._previousLeft),
        isSwipeableViewRendered: false,
        rowHeight: null
      };
    },
    getDefaultProps: function getDefaultProps() {
      return {
        isOpen: false,
        preventSwipeRight: false,
        maxSwipeDistance: 0,
        onOpen: emptyFunction,
        onClose: emptyFunction,
        onSwipeEnd: emptyFunction,
        onSwipeStart: emptyFunction,
        swipeThreshold: 30
      };
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._panResponder = PanResponder.create({
        onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
        onPanResponderGrant: this._handlePanResponderGrant,
        onPanResponderMove: this._handlePanResponderMove,
        onPanResponderRelease: this._handlePanResponderEnd,
        onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
        onPanResponderTerminate: this._handlePanResponderEnd,
        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
          return false;
        }
      });
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      if (this.props.shouldBounceOnMount) {
        this.setTimeout(function () {
          _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
        }, ON_MOUNT_BOUNCE_DELAY);
      }
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.isOpen && !nextProps.isOpen) {
        this._animateToClosedPosition();
      }
    },
    render: function render() {
      var slideOutView = void 0;

      if (this.state.isSwipeableViewRendered && this.state.rowHeight) {
        slideOutView = React.createElement(
          View,
          {
            style: [styles.slideOutContainer, {
              height: this.state.rowHeight
            }]
          },
          this.props.slideoutView
        );
      }

      var swipeableView = React.createElement(
        Animated.View,
        {
          onLayout: this._onSwipeableViewLayout,
          style: {
            transform: [{
              translateX: this.state.currentLeft
            }]
          }
        },
        this.props.children
      );
      return React.createElement(
        View,
        this._panResponder.panHandlers,
        slideOutView,
        swipeableView
      );
    },
    close: function close() {
      this.props.onClose();

      this._animateToClosedPosition();
    },
    _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
      this.setState({
        isSwipeableViewRendered: true,
        rowHeight: event.nativeEvent.layout.height
      });
    },
    _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
      return gestureState.dy < 10 && this._isValidSwipe(gestureState);
    },
    _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
    _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
      if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
        return;
      }

      this.props.onSwipeStart();

      if (this._isSwipingRightFromClosed(gestureState)) {
        this._swipeSlowSpeed(gestureState);
      } else {
        this._swipeFullSpeed(gestureState);
      }
    },
    _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
    },
    _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
    },
    _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
    },
    _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
    },
    _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
      return false;
    },
    _animateTo: function _animateTo(toValue) {
      var _this2 = this;

      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;
      Animated.timing(this.state.currentLeft, {
        duration: duration,
        toValue: toValue,
        useNativeDriver: true
      }).start(function () {
        _this2._previousLeft = toValue;
        callback();
      });
    },
    _animateToOpenPosition: function _animateToOpenPosition() {
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance);
    },
    _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
      speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
      var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance, duration);
    },
    _animateToClosedPosition: function _animateToClosedPosition() {
      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

      this._animateTo(CLOSED_LEFT_POSITION, duration);
    },
    _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
      this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    },
    _animateBounceBack: function _animateBounceBack(duration) {
      var swipeBounceBackDistance = IS_RTL ? -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;

      this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
    },
    _isValidSwipe: function _isValidSwipe(gestureState) {
      if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {
        return false;
      }

      return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
    },
    _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
      return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
    },
    _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
      var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;

      if (this._isSwipingRightFromClosed(gestureState)) {
        this.props.onOpen();

        this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
      } else if (this._shouldAnimateRemainder(gestureState)) {
        if (horizontalDistance < 0) {
          this.props.onOpen();

          this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
        } else {
          this.props.onClose();

          this._animateToClosedPosition();
        }
      } else {
        if (this._previousLeft === CLOSED_LEFT_POSITION) {
          this._animateToClosedPosition();
        } else {
          this._animateToOpenPosition();
        }
      }

      this.props.onSwipeEnd();
    }
  });
  var styles = StyleSheet.create({
    slideOutContainer: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      top: 0
    }
  });
  module.exports = SwipeableRow;
},263,[178,247,264,111,121,112,220,134,158,30]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = _require(_dependencyMap[0]);

  var TouchHistoryMath = _require(_dependencyMap[1]);

  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
  var currentCentroidX = TouchHistoryMath.currentCentroidX;
  var currentCentroidY = TouchHistoryMath.currentCentroidY;
  var PanResponder = {
    _initializeGestureState: function _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create: function create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random()
      };

      PanResponder._initializeGestureState(gestureState);

      var panHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder(e) {
          return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
        },
        onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
          return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
          if (e.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }

          gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onResponderGrant: function onResponderGrant(e) {
          if (!interactionState.handle) {
            interactionState.handle = InteractionManager.createInteractionHandle();
          }

          gestureState.x0 = currentCentroidX(e.touchHistory);
          gestureState.y0 = currentCentroidY(e.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;

          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(e, gestureState);
          }

          return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
        },
        onResponderReject: function onResponderReject(e) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
        },
        onResponderRelease: function onResponderRelease(e) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart: function onResponderStart(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

          if (config.onPanResponderStart) {
            config.onPanResponderStart(e, gestureState);
          }
        },
        onResponderMove: function onResponderMove(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          if (config.onPanResponderMove) {
            config.onPanResponderMove(e, gestureState);
          }
        },
        onResponderEnd: function onResponderEnd(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
        },
        onResponderTerminate: function onResponderTerminate(e) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest(e) {
          return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
        }
      };
      return {
        panHandlers: panHandlers,
        getInteractionHandle: function getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };

  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      InteractionManager.clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }

    if (callback) {
      callback(event, gestureState);
    }
  }

  module.exports = PanResponder;
},264,[186,265]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.TouchHistoryMath;
},265,[46]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var ListView = _require(_dependencyMap[0]);

  var PropTypes = _require(_dependencyMap[1]);

  var React = _require(_dependencyMap[2]);

  var SwipeableListViewDataSource = _require(_dependencyMap[3]);

  var SwipeableRow = _require(_dependencyMap[4]);

  var SwipeableListView = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(SwipeableListView, _React$Component);
    babelHelpers.createClass(SwipeableListView, null, [{
      key: "getNewDataSource",
      value: function getNewDataSource() {
        return new SwipeableListViewDataSource({
          getRowData: function getRowData(data, sectionID, rowID) {
            return data[sectionID][rowID];
          },
          getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
            return data[sectionID];
          },
          rowHasChanged: function rowHasChanged(row1, row2) {
            return row1 !== row2;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
            return s1 !== s2;
          }
        });
      }
    }]);

    function SwipeableListView(props, context) {
      babelHelpers.classCallCheck(this, SwipeableListView);

      var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableListView.__proto__ || Object.getPrototypeOf(SwipeableListView)).call(this, props, context));

      _this._listViewRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.props.dataSource.getOpenRowID()) {
          _this.setState({
            dataSource: _this.state.dataSource.setOpenRowID(null)
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderRow = function (rowData, sectionID, rowID) {
        var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

        if (!slideoutView) {
          return _this.props.renderRow(rowData, sectionID, rowID);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
            maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
            key: rowID,
            onOpen: function onOpen() {
              return _this._onOpen(rowData.id);
            },
            onClose: function onClose() {
              return _this._onClose(rowData.id);
            },
            onSwipeEnd: function onSwipeEnd() {
              return _this._setListViewScrollable(true);
            },
            onSwipeStart: function onSwipeStart() {
              return _this._setListViewScrollable(false);
            },
            shouldBounceOnMount: shouldBounceOnMount
          },
          _this.props.renderRow(rowData, sectionID, rowID)
        );
      };

      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      _this.state = {
        dataSource: _this.props.dataSource
      };
      return _this;
    }

    babelHelpers.createClass(SwipeableListView, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
          this.setState({
            dataSource: nextProps.dataSource
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(ListView, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._listViewRef = _ref;
          },
          dataSource: this.state.dataSource.getDataSource(),
          onScroll: this._onScroll,
          renderRow: this._renderRow
        }));
      }
    }, {
      key: "_setListViewScrollable",
      value: function _setListViewScrollable(value) {
        if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
          this._listViewRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
          return this._listViewRef.getScrollResponder();
        }
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(rowData, sectionID, rowID);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(rowID)
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(null)
        });
      }
    }]);
    return SwipeableListView;
  }(React.Component), _class.propTypes = {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderRow: PropTypes.func.isRequired,
    renderQuickActions: PropTypes.func.isRequired
  }, _class.defaultProps = {
    bounceFirstRowOnMount: false,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  }, _temp);
  module.exports = SwipeableListView;
},266,[228,121,111,267,263]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ListViewDataSource = _require(_dependencyMap[0]);

  var SwipeableListViewDataSource = function () {
    function SwipeableListViewDataSource(params) {
      var _this = this;

      babelHelpers.classCallCheck(this, SwipeableListViewDataSource);
      this._dataSource = new ListViewDataSource({
        getRowData: params.getRowData,
        getSectionHeaderData: params.getSectionHeaderData,
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
        },
        sectionHeaderHasChanged: params.sectionHeaderHasChanged
      });
    }

    babelHelpers.createClass(SwipeableListViewDataSource, [{
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);
        this._dataBlob = dataBlob;
        this.rowIdentities = this._dataSource.rowIdentities;
        this.sectionIdentities = this._dataSource.sectionIdentities;
        return this;
      }
    }, {
      key: "getDataSource",
      value: function getDataSource() {
        return this._dataSource;
      }
    }, {
      key: "getOpenRowID",
      value: function getOpenRowID() {
        return this._openRowID;
      }
    }, {
      key: "getFirstRowID",
      value: function getFirstRowID() {
        if (this.rowIdentities) {
          return this.rowIdentities[0] && this.rowIdentities[0][0];
        }

        return Object.keys(this._dataBlob)[0];
      }
    }, {
      key: "getLastRowID",
      value: function getLastRowID() {
        if (this.rowIdentities && this.rowIdentities.length) {
          var lastSection = this.rowIdentities[this.rowIdentities.length - 1];

          if (lastSection && lastSection.length) {
            return lastSection[lastSection.length - 1];
          }
        }

        return Object.keys(this._dataBlob)[this._dataBlob.length - 1];
      }
    }, {
      key: "setOpenRowID",
      value: function setOpenRowID(rowID) {
        this._previousOpenRowID = this._openRowID;
        this._openRowID = rowID;
        this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);
        return this;
      }
    }]);
    return SwipeableListViewDataSource;
  }();

  module.exports = SwipeableListViewDataSource;
},267,[229]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var React = _require(_dependencyMap[0]);

  var StyleSheet = _require(_dependencyMap[1]);

  var TabBarItemIOS = _require(_dependencyMap[2]);

  var View = _require(_dependencyMap[3]);

  var DummyTabBarIOS = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(DummyTabBarIOS, _React$Component);

    function DummyTabBarIOS() {
      babelHelpers.classCallCheck(this, DummyTabBarIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummyTabBarIOS.__proto__ || Object.getPrototypeOf(DummyTabBarIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyTabBarIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [this.props.style, styles.tabGroup]
          },
          this.props.children
        );
      }
    }]);
    return DummyTabBarIOS;
  }(React.Component), _class.Item = TabBarItemIOS, _temp);
  var styles = StyleSheet.create({
    tabGroup: {
      flex: 1
    }
  });
  module.exports = DummyTabBarIOS;
},1092,[111,112,1093,134]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0]);

  var View = _require(_dependencyMap[1]);

  var StyleSheet = _require(_dependencyMap[2]);

  var DummyTab = function (_React$Component) {
    babelHelpers.inherits(DummyTab, _React$Component);

    function DummyTab() {
      babelHelpers.classCallCheck(this, DummyTab);
      return babelHelpers.possibleConstructorReturn(this, (DummyTab.__proto__ || Object.getPrototypeOf(DummyTab)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyTab, [{
      key: "render",
      value: function render() {
        if (!this.props.selected) {
          return React.createElement(View, null);
        }

        return React.createElement(
          View,
          {
            style: [this.props.style, styles.tab]
          },
          this.props.children
        );
      }
    }]);
    return DummyTab;
  }(React.Component);

  var styles = StyleSheet.create({
    tab: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderColor: 'red',
      borderWidth: 1
    }
  });
  module.exports = DummyTab;
},1093,[111,134,112]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require2(_dependencyMap[0]);

  var DocumentSelectionState = _require2(_dependencyMap[1]);

  var EventEmitter = _require2(_dependencyMap[2]);

  var NativeMethodsMixin = _require2(_dependencyMap[3]);

  var Platform = _require2(_dependencyMap[4]);

  var React = _require2(_dependencyMap[5]);

  var createReactClass = _require2(_dependencyMap[6]);

  var PropTypes = _require2(_dependencyMap[7]);

  var ReactNative = _require2(_dependencyMap[8]);

  var StyleSheet = _require2(_dependencyMap[9]);

  var Text = _require2(_dependencyMap[10]);

  var TextInputState = _require2(_dependencyMap[11]);

  var TimerMixin = _require2(_dependencyMap[12]);

  var TouchableWithoutFeedback = _require2(_dependencyMap[13]);

  var UIManager = _require2(_dependencyMap[14]);

  var ViewPropTypes = _require2(_dependencyMap[15]);

  var _require = _require2(_dependencyMap[16]),
      ViewContextTypes = _require.ViewContextTypes;

  var emptyFunction = _require2(_dependencyMap[17]);

  var invariant = _require2(_dependencyMap[18]);

  var requireNativeComponent = _require2(_dependencyMap[19]);

  var warning = _require2(_dependencyMap[20]);

  var AndroidTextInput = void 0;
  var RCTMultilineTextInputView = void 0;
  var RCTSinglelineTextInputView = void 0;
  var onlyMultiline = {
    onTextInput: true,
    children: true
  };
  {
    AndroidTextInput = requireNativeComponent('AndroidTextInput', null);
  }
  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  var TextInput = createReactClass({
    displayName: 'TextInput',
    statics: {
      State: TextInputState
    },
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
      autoCorrect: PropTypes.bool,
      spellCheck: PropTypes.bool,
      autoFocus: PropTypes.bool,
      allowFontScaling: PropTypes.bool,
      editable: PropTypes.bool,
      keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
      keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
      returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
      returnKeyLabel: PropTypes.string,
      maxLength: PropTypes.number,
      numberOfLines: PropTypes.number,
      disableFullscreenUI: PropTypes.bool,
      enablesReturnKeyAutomatically: PropTypes.bool,
      multiline: PropTypes.bool,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onBlur: PropTypes.func,
      onFocus: PropTypes.func,
      onChange: PropTypes.func,
      onChangeText: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      onEndEditing: PropTypes.func,
      onSelectionChange: PropTypes.func,
      onSubmitEditing: PropTypes.func,
      onKeyPress: PropTypes.func,
      onLayout: PropTypes.func,
      onScroll: PropTypes.func,
      placeholder: PropTypes.string,
      placeholderTextColor: ColorPropType,
      secureTextEntry: PropTypes.bool,
      selectionColor: ColorPropType,
      selectionState: PropTypes.instanceOf(DocumentSelectionState),
      selection: PropTypes.shape({
        start: PropTypes.number.isRequired,
        end: PropTypes.number
      }),
      value: PropTypes.string,
      defaultValue: PropTypes.string,
      clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
      clearTextOnFocus: PropTypes.bool,
      selectTextOnFocus: PropTypes.bool,
      blurOnSubmit: PropTypes.bool,
      style: Text.propTypes.style,
      underlineColorAndroid: ColorPropType,
      inlineImageLeft: PropTypes.string,
      inlineImagePadding: PropTypes.number,
      dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
      caretHidden: PropTypes.bool,
      contextMenuHidden: PropTypes.bool,
      inputAccessoryViewID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        allowFontScaling: true
      };
    },
    mixins: [NativeMethodsMixin, TimerMixin],
    isFocused: function isFocused() {
      return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
    },
    _inputRef: undefined,
    _focusSubscription: undefined,
    _lastNativeText: undefined,
    _lastNativeSelection: undefined,
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._lastNativeText = this.props.value;

      if (!this.context.focusEmitter) {
        if (this.props.autoFocus) {
          this.requestAnimationFrame(this.focus);
        }

        return;
      }

      this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
        if (_this === el) {
          _this.requestAnimationFrame(_this.focus);
        } else if (_this.isFocused()) {
          _this.blur();
        }
      });

      if (this.props.autoFocus) {
        this.context.onFocusRequested(this);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this._focusSubscription && this._focusSubscription.remove();

      if (this.isFocused()) {
        this.blur();
      }
    },
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: ViewContextTypes,
    contextTypes: babelHelpers.extends({}, ViewContextTypes, {
      onFocusRequested: PropTypes.func,
      focusEmitter: PropTypes.instanceOf(EventEmitter)
    }),
    clear: function clear() {
      this.setNativeProps({
        text: ''
      });
    },
    render: function render() {
      {
        return this._renderAndroid();
      }
    },
    _getText: function _getText() {
      return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
    },
    _setNativeRef: function _setNativeRef(ref) {
      this._inputRef = ref;
    },
    _renderIOSLegacy: function _renderIOSLegacy() {
      var textContainer = void 0;
      var props = babelHelpers.extends({}, this.props);
      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      if (!props.multiline) {
        textContainer = React.createElement(RCTSinglelineTextInputView, babelHelpers.extends({
          ref: this._setNativeRef
        }, props, {
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onSelectionChange: this._onSelectionChange,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText()
        }));
      } else {
        var children = props.children;
        var childCount = 0;
        React.Children.forEach(children, function () {
          return ++childCount;
        });
        invariant(!(props.value && childCount), 'Cannot specify both value and children.');

        if (childCount >= 1) {
          children = React.createElement(
            Text,
            {
              style: props.style,
              allowFontScaling: props.allowFontScaling
            },
            children
          );
        }

        if (props.inputView) {
          children = [children, props.inputView];
        }

        props.style.unshift(styles.multilineInput);
        textContainer = React.createElement(RCTMultilineTextInputView, babelHelpers.extends({
          ref: this._setNativeRef
        }, props, {
          children: children,
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onContentSizeChange: this.props.onContentSizeChange,
          onSelectionChange: this._onSelectionChange,
          onTextInput: this._onTextInput,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          dataDetectorTypes: this.props.dataDetectorTypes,
          onScroll: this._onScroll
        }));
      }

      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityTraits: props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: props.testID
        },
        textContainer
      );
    },
    _renderIOS: function _renderIOS() {
      var props = babelHelpers.extends({}, this.props);
      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var RCTTextInputView = props.multiline ? RCTMultilineTextInputView : RCTSinglelineTextInputView;

      if (props.multiline) {
        props.style.unshift(styles.multilineInput);
      }

      var textContainer = React.createElement(RCTTextInputView, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll
      }));
      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityTraits: props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: props.testID
        },
        textContainer
      );
    },
    _renderAndroid: function _renderAndroid() {
      var props = babelHelpers.extends({}, this.props);
      props.style = [this.props.style];
      props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];
      var children = this.props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');

      if (childCount > 1) {
        children = React.createElement(
          Text,
          null,
          children
        );
      }

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var textContainer = React.createElement(AndroidTextInput, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        mostRecentEventCount: 0,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        text: this._getText(),
        children: children,
        disableFullscreenUI: this.props.disableFullscreenUI,
        textBreakStrategy: this.props.textBreakStrategy,
        onScroll: this._onScroll
      }));
      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          accessible: this.props.accessible,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          nativeID: this.props.nativeID,
          testID: this.props.testID
        },
        textContainer
      );
    },
    _onFocus: function _onFocus(event) {
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.focus();
      }
    },
    _onPress: function _onPress(event) {
      if (this.props.editable || this.props.editable === undefined) {
        this.focus();
      }
    },
    _onChange: function _onChange(event) {
      if (this._inputRef) {
        this._inputRef.setNativeProps({
          mostRecentEventCount: event.nativeEvent.eventCount
        });
      }

      var text = event.nativeEvent.text;
      this.props.onChange && this.props.onChange(event);
      this.props.onChangeText && this.props.onChangeText(text);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeText = text;
      this.forceUpdate();
    },
    _onSelectionChange: function _onSelectionChange(event) {
      this.props.onSelectionChange && this.props.onSelectionChange(event);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeSelection = event.nativeEvent.selection;

      if (this.props.selection || this.props.selectionState) {
        this.forceUpdate();
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var nativeProps = {};

      if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
        nativeProps.text = this.props.value;
      }

      var selection = this.props.selection;

      if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
        nativeProps.selection = this.props.selection;
      }

      if (Object.keys(nativeProps).length > 0 && this._inputRef) {
        this._inputRef.setNativeProps(nativeProps);
      }

      if (this.props.selectionState && selection) {
        this.props.selectionState.update(selection.start, selection.end);
      }
    },
    _onBlur: function _onBlur(event) {
      this.blur();

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.blur();
      }
    },
    _onTextInput: function _onTextInput(event) {
      this.props.onTextInput && this.props.onTextInput(event);
    },
    _onScroll: function _onScroll(event) {
      this.props.onScroll && this.props.onScroll(event);
    }
  });
  var styles = StyleSheet.create({
    multilineInput: {
      paddingTop: 5
    }
  });
  module.exports = TextInput;
},270,[43,271,38,45,1076,111,158,121,46,112,167,99,220,221,97,136,146,30,15,147,29]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var mixInEventEmitter = _require(_dependencyMap[0]);

  var DocumentSelectionState = function () {
    function DocumentSelectionState(anchor, focus) {
      babelHelpers.classCallCheck(this, DocumentSelectionState);
      this._anchorOffset = anchor;
      this._focusOffset = focus;
      this._hasFocus = false;
    }

    babelHelpers.createClass(DocumentSelectionState, [{
      key: "update",
      value: function update(anchor, focus) {
        if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
          this._anchorOffset = anchor;
          this._focusOffset = focus;
          this.emit('update');
        }
      }
    }, {
      key: "constrainLength",
      value: function constrainLength(maxLength) {
        this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
      }
    }, {
      key: "focus",
      value: function focus() {
        if (!this._hasFocus) {
          this._hasFocus = true;
          this.emit('focus');
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        if (this._hasFocus) {
          this._hasFocus = false;
          this.emit('blur');
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        return this._hasFocus;
      }
    }, {
      key: "isCollapsed",
      value: function isCollapsed() {
        return this._anchorOffset === this._focusOffset;
      }
    }, {
      key: "isBackward",
      value: function isBackward() {
        return this._anchorOffset > this._focusOffset;
      }
    }, {
      key: "getAnchorOffset",
      value: function getAnchorOffset() {
        return this._hasFocus ? this._anchorOffset : null;
      }
    }, {
      key: "getFocusOffset",
      value: function getFocusOffset() {
        return this._hasFocus ? this._focusOffset : null;
      }
    }, {
      key: "getStartOffset",
      value: function getStartOffset() {
        return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "getEndOffset",
      value: function getEndOffset() {
        return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "overlaps",
      value: function overlaps(start, end) {
        return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
      }
    }]);
    return DocumentSelectionState;
  }();

  mixInEventEmitter(DocumentSelectionState, {
    'blur': true,
    'focus': true,
    'update': true
  });
  module.exports = DocumentSelectionState;
},271,[272]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = _require(_dependencyMap[0]);

  var EventEmitterWithHolding = _require(_dependencyMap[1]);

  var EventHolder = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var keyOf = _require(_dependencyMap[4]);

  var TYPES_KEY = keyOf({
    __types: true
  });

  function mixInEventEmitter(cls, types) {
    invariant(types, 'Must supply set of valid event types');
    var target = cls.prototype || cls;
    invariant(!target.__eventEmitter, 'An active emitter is already mixed in');
    var ctor = cls.constructor;

    if (ctor) {
      invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
    }

    if (target.hasOwnProperty(TYPES_KEY)) {
      babelHelpers.extends(target.__types, types);
    } else if (target.__types) {
      target.__types = babelHelpers.extends({}, target.__types, types);
    } else {
      target.__types = types;
    }

    babelHelpers.extends(target, EventEmitterMixin);
  }

  var EventEmitterMixin = {
    emit: function emit(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
    },
    emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
    },
    addListener: function addListener(eventType, listener, context) {
      return this.__getEventEmitter().addListener(eventType, listener, context);
    },
    once: function once(eventType, listener, context) {
      return this.__getEventEmitter().once(eventType, listener, context);
    },
    addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
      return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
    },
    addListenerMap: function addListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    removeAllListeners: function removeAllListeners() {
      this.__getEventEmitter().removeAllListeners();
    },
    removeCurrentListener: function removeCurrentListener() {
      this.__getEventEmitter().removeCurrentListener();
    },
    releaseHeldEventType: function releaseHeldEventType(eventType) {
      this.__getEventEmitter().releaseHeldEventType(eventType);
    },
    __getEventEmitter: function __getEventEmitter() {
      if (!this.__eventEmitter) {
        var emitter = new EventEmitter();
        var holder = new EventHolder();
        this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
      }

      return this.__eventEmitter;
    }
  };
  module.exports = mixInEventEmitter;
},272,[38,273,274,15,275]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitterWithHolding = function () {
    function EventEmitterWithHolding(emitter, holder) {
      babelHelpers.classCallCheck(this, EventEmitterWithHolding);
      this._emitter = emitter;
      this._eventHolder = holder;
      this._currentEventToken = null;
      this._emittingHeldEvents = false;
    }

    babelHelpers.createClass(EventEmitterWithHolding, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener, context);
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        return this._emitter.once(eventType, listener, context);
      }
    }, {
      key: "addRetroactiveListener",
      value: function addRetroactiveListener(eventType, listener, context) {
        var subscription = this._emitter.addListener(eventType, listener, context);

        this._emittingHeldEvents = true;

        this._eventHolder.emitToListener(eventType, listener, context);

        this._emittingHeldEvents = false;
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        this._emitter.removeCurrentListener();
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        return this._emitter.listeners(eventType);
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var _emitter;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_emitter = this._emitter).emit.apply(_emitter, [eventType].concat(babelHelpers.toConsumableArray(args)));
      }
    }, {
      key: "emitAndHold",
      value: function emitAndHold(eventType) {
        var _eventHolder, _emitter2;

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        this._currentEventToken = (_eventHolder = this._eventHolder).holdEvent.apply(_eventHolder, [eventType].concat(babelHelpers.toConsumableArray(args)));

        (_emitter2 = this._emitter).emit.apply(_emitter2, [eventType].concat(babelHelpers.toConsumableArray(args)));

        this._currentEventToken = null;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        if (this._currentEventToken) {
          this._eventHolder.releaseEvent(this._currentEventToken);
        } else if (this._emittingHeldEvents) {
          this._eventHolder.releaseCurrentEvent();
        }
      }
    }, {
      key: "releaseHeldEventType",
      value: function releaseHeldEventType(eventType) {
        this._eventHolder.releaseEventType(eventType);
      }
    }]);
    return EventEmitterWithHolding;
  }();

  module.exports = EventEmitterWithHolding;
},273,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0]);

  var EventHolder = function () {
    function EventHolder() {
      babelHelpers.classCallCheck(this, EventHolder);
      this._heldEvents = {};
      this._currentEventKey = null;
    }

    babelHelpers.createClass(EventHolder, [{
      key: "holdEvent",
      value: function holdEvent(eventType) {
        this._heldEvents[eventType] = this._heldEvents[eventType] || [];
        var eventsOfType = this._heldEvents[eventType];
        var key = {
          eventType: eventType,
          index: eventsOfType.length
        };

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        eventsOfType.push(args);
        return key;
      }
    }, {
      key: "emitToListener",
      value: function emitToListener(eventType, listener, context) {
        var _this = this;

        var eventsOfType = this._heldEvents[eventType];

        if (!eventsOfType) {
          return;
        }

        var origEventKey = this._currentEventKey;
        eventsOfType.forEach(function (eventHeld, index) {
          if (!eventHeld) {
            return;
          }

          _this._currentEventKey = {
            eventType: eventType,
            index: index
          };
          listener.apply(context, eventHeld);
        });
        this._currentEventKey = origEventKey;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
        this._currentEventKey && this.releaseEvent(this._currentEventKey);
      }
    }, {
      key: "releaseEvent",
      value: function releaseEvent(token) {
        delete this._heldEvents[token.eventType][token.index];
      }
    }, {
      key: "releaseEventType",
      value: function releaseEventType(type) {
        this._heldEvents[type] = [];
      }
    }]);
    return EventHolder;
  }();

  module.exports = EventHolder;
},274,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},275,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTToastAndroid = _require(_dependencyMap[0]).ToastAndroid;

  var ToastAndroid = {
    SHORT: RCTToastAndroid.SHORT,
    LONG: RCTToastAndroid.LONG,
    TOP: RCTToastAndroid.TOP,
    BOTTOM: RCTToastAndroid.BOTTOM,
    CENTER: RCTToastAndroid.CENTER,
    show: function show(message, duration) {
      RCTToastAndroid.show(message, duration);
    },
    showWithGravity: function showWithGravity(message, duration, gravity) {
      RCTToastAndroid.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset) {
      RCTToastAndroid.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
  };
  module.exports = ToastAndroid;
},1094,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Image = _require(_dependencyMap[0]);

  var NativeMethodsMixin = _require(_dependencyMap[1]);

  var React = _require(_dependencyMap[2]);

  var PropTypes = _require(_dependencyMap[3]);

  var ReactNativeViewAttributes = _require(_dependencyMap[4]);

  var UIManager = _require(_dependencyMap[5]);

  var ViewPropTypes = _require(_dependencyMap[6]);

  var ColorPropType = _require(_dependencyMap[7]);

  var createReactClass = _require(_dependencyMap[8]);

  var requireNativeComponent = _require(_dependencyMap[9]);

  var resolveAssetSource = _require(_dependencyMap[10]);

  var optionalImageSource = PropTypes.oneOfType([Image.propTypes.source, PropTypes.oneOf([])]);
  var ToolbarAndroid = createReactClass({
    displayName: 'ToolbarAndroid',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      actions: PropTypes.arrayOf(PropTypes.shape({
        title: PropTypes.string.isRequired,
        icon: optionalImageSource,
        show: PropTypes.oneOf(['always', 'ifRoom', 'never']),
        showWithText: PropTypes.bool
      })),
      logo: optionalImageSource,
      navIcon: optionalImageSource,
      onActionSelected: PropTypes.func,
      onIconClicked: PropTypes.func,
      overflowIcon: optionalImageSource,
      subtitle: PropTypes.string,
      subtitleColor: ColorPropType,
      title: PropTypes.string,
      titleColor: ColorPropType,
      contentInsetStart: PropTypes.number,
      contentInsetEnd: PropTypes.number,
      rtl: PropTypes.bool,
      testID: PropTypes.string
    }),
    render: function render() {
      var nativeProps = babelHelpers.extends({}, this.props);

      if (this.props.logo) {
        nativeProps.logo = resolveAssetSource(this.props.logo);
      }

      if (this.props.navIcon) {
        nativeProps.navIcon = resolveAssetSource(this.props.navIcon);
      }

      if (this.props.overflowIcon) {
        nativeProps.overflowIcon = resolveAssetSource(this.props.overflowIcon);
      }

      if (this.props.actions) {
        var nativeActions = [];

        for (var i = 0; i < this.props.actions.length; i++) {
          var action = babelHelpers.extends({}, this.props.actions[i]);

          if (action.icon) {
            action.icon = resolveAssetSource(action.icon);
          }

          if (action.show) {
            action.show = UIManager.ToolbarAndroid.Constants.ShowAsAction[action.show];
          }

          nativeActions.push(action);
        }

        nativeProps.nativeActions = nativeActions;
      }

      return React.createElement(NativeToolbar, babelHelpers.extends({
        onSelect: this._onSelect
      }, nativeProps));
    },
    _onSelect: function _onSelect(event) {
      var position = event.nativeEvent.position;

      if (position === -1) {
        this.props.onIconClicked && this.props.onIconClicked();
      } else {
        this.props.onActionSelected && this.props.onActionSelected(position);
      }
    }
  });
  var NativeToolbar = requireNativeComponent('ToolbarAndroid', ToolbarAndroid, {
    nativeOnly: {
      nativeActions: true
    }
  });
  module.exports = ToolbarAndroid;
},1095,[1080,45,111,121,135,97,136,43,158,147,153]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0]);

  var NativeMethodsMixin = _require(_dependencyMap[1]);

  var PropTypes = _require(_dependencyMap[2]);

  var Platform = _require(_dependencyMap[3]);

  var React = _require(_dependencyMap[4]);

  var ReactNativeViewAttributes = _require(_dependencyMap[5]);

  var StyleSheet = _require(_dependencyMap[6]);

  var Touchable = _require(_dependencyMap[7]);

  var TouchableWithoutFeedback = _require(_dependencyMap[8]);

  var View = _require(_dependencyMap[9]);

  var ViewPropTypes = _require(_dependencyMap[10]);

  var createReactClass = _require(_dependencyMap[11]);

  var ensurePositiveDelayProps = _require(_dependencyMap[12]);

  var DEFAULT_PROPS = {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
  };
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableHighlight = createReactClass({
    displayName: 'TouchableHighlight',
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      underlayColor: ColorPropType,
      style: ViewPropTypes.style,
      onShowUnderlay: PropTypes.func,
      onHideUnderlay: PropTypes.func,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object,
      testOnly_pressed: PropTypes.bool
    }),
    mixins: [NativeMethodsMixin, Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return DEFAULT_PROPS;
    },
    getInitialState: function getInitialState() {
      this._isMounted = false;

      if (this.props.testOnly_pressed) {
        return babelHelpers.extends({}, this.touchableGetInitialState(), {
          extraChildStyle: {
            opacity: this.props.activeOpacity
          },
          extraUnderlayStyle: {
            backgroundColor: this.props.underlayColor
          }
        });
      } else {
        return babelHelpers.extends({}, this.touchableGetInitialState(), {
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
      }
    },
    componentDidMount: function componentDidMount() {
      this._isMounted = true;
      ensurePositiveDelayProps(this.props);
    },
    componentWillUnmount: function componentWillUnmount() {
      this._isMounted = false;
      clearTimeout(this._hideTimeout);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      this._showUnderlay();

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      if (!this._hideTimeout) {
        this._hideUnderlay();
      }

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      clearTimeout(this._hideTimeout);

      if (!Platform.isTVOS) {
        this._showUnderlay();

        this._hideTimeout = setTimeout(this._hideUnderlay, this.props.delayPressOut);
      }

      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _showUnderlay: function _showUnderlay() {
      if (!this._isMounted || !this._hasPressHandler()) {
        return;
      }

      this.setState({
        extraChildStyle: {
          opacity: this.props.activeOpacity
        },
        extraUnderlayStyle: {
          backgroundColor: this.props.underlayColor
        }
      });
      this.props.onShowUnderlay && this.props.onShowUnderlay();
    },
    _hideUnderlay: function _hideUnderlay() {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      if (this.props.testOnly_pressed) {
        return;
      }

      if (this._hasPressHandler()) {
        this.setState({
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
        this.props.onHideUnderlay && this.props.onHideUnderlay();
      }
    },
    _hasPressHandler: function _hasPressHandler() {
      return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      return React.createElement(
        View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: StyleSheet.compose(this.props.style, this.state.extraUnderlayStyle),
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop,
          isTVSelectable: true,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          nativeID: this.props.nativeID,
          testID: this.props.testID
        },
        React.cloneElement(child, {
          style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)
        }),
        Touchable.renderDebugView({
          color: 'green',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableHighlight;
},278,[43,45,121,1076,111,135,112,169,221,134,136,158,222]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp2;

  var React = _require(_dependencyMap[0]);

  var PropTypes = _require(_dependencyMap[1]);

  var ReactNative = _require(_dependencyMap[2]);

  var UIManager = _require(_dependencyMap[3]);

  var ViewPropTypes = _require(_dependencyMap[4]);

  var dismissKeyboard = _require(_dependencyMap[5]);

  var requireNativeComponent = _require(_dependencyMap[6]);

  var VIEWPAGER_REF = 'viewPager';
  var ViewPagerAndroid = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(ViewPagerAndroid, _React$Component);

    function ViewPagerAndroid() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ViewPagerAndroid);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ViewPagerAndroid.__proto__ || Object.getPrototypeOf(ViewPagerAndroid)).call.apply(_ref, [this].concat(args))), _this), _this.getInnerViewNode = function () {
        return _this.refs[VIEWPAGER_REF].getInnerViewNode();
      }, _this._childrenWithOverridenStyle = function () {
        return React.Children.map(_this.props.children, function (child) {
          if (!child) {
            return null;
          }

          var newProps = babelHelpers.extends({}, child.props, {
            style: [child.props.style, {
              position: 'absolute',
              left: 0,
              top: 0,
              right: 0,
              bottom: 0,
              width: undefined,
              height: undefined
            }],
            collapsable: false
          });

          if (child.type && child.type.displayName && child.type.displayName !== 'RCTView' && child.type.displayName !== 'View') {
            console.warn('Each ViewPager child must be a <View>. Was ' + child.type.displayName);
          }

          return React.createElement(child.type, newProps);
        });
      }, _this._onPageScroll = function (e) {
        if (_this.props.onPageScroll) {
          _this.props.onPageScroll(e);
        }

        if (_this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }, _this._onPageScrollStateChanged = function (e) {
        if (_this.props.onPageScrollStateChanged) {
          _this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);
        }
      }, _this._onPageSelected = function (e) {
        if (_this.props.onPageSelected) {
          _this.props.onPageSelected(e);
        }
      }, _this.setPage = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPage, [selectedPage]);
      }, _this.setPageWithoutAnimation = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPageWithoutAnimation, [selectedPage]);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ViewPagerAndroid, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.initialPage != null) {
          this.setPageWithoutAnimation(this.props.initialPage);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(NativeAndroidViewPager, babelHelpers.extends({}, this.props, {
          ref: VIEWPAGER_REF,
          style: this.props.style,
          onPageScroll: this._onPageScroll,
          onPageScrollStateChanged: this._onPageScrollStateChanged,
          onPageSelected: this._onPageSelected,
          children: this._childrenWithOverridenStyle()
        }));
      }
    }]);
    return ViewPagerAndroid;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    initialPage: PropTypes.number,
    onPageScroll: PropTypes.func,
    onPageScrollStateChanged: PropTypes.func,
    onPageSelected: PropTypes.func,
    pageMargin: PropTypes.number,
    keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
    scrollEnabled: PropTypes.bool,
    peekEnabled: PropTypes.bool
  }), _temp2);
  var NativeAndroidViewPager = requireNativeComponent('AndroidViewPager', ViewPagerAndroid);
  module.exports = ViewPagerAndroid;
},1096,[111,121,46,97,136,214,147]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp2;

  var EdgeInsetsPropType = _require(_dependencyMap[0]);

  var ActivityIndicator = _require(_dependencyMap[1]);

  var React = _require(_dependencyMap[2]);

  var PropTypes = _require(_dependencyMap[3]);

  var ReactNative = _require(_dependencyMap[4]);

  var StyleSheet = _require(_dependencyMap[5]);

  var UIManager = _require(_dependencyMap[6]);

  var View = _require(_dependencyMap[7]);

  var ViewPropTypes = _require(_dependencyMap[8]);

  var deprecatedPropType = _require(_dependencyMap[9]);

  var keyMirror = _require(_dependencyMap[10]);

  var requireNativeComponent = _require(_dependencyMap[11]);

  var resolveAssetSource = _require(_dependencyMap[12]);

  var RCT_WEBVIEW_REF = 'webview';
  var WebViewState = keyMirror({
    IDLE: null,
    LOADING: null,
    ERROR: null
  });

  var defaultRenderLoading = function defaultRenderLoading() {
    return React.createElement(
      View,
      {
        style: styles.loadingView
      },
      React.createElement(ActivityIndicator, {
        style: styles.loadingProgressBar
      })
    );
  };

  var WebView = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(WebView, _React$Component);

    function WebView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, WebView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = WebView.__proto__ || Object.getPrototypeOf(WebView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        viewState: WebViewState.IDLE,
        lastErrorEvent: null,
        startInLoadingState: true
      }, _this.goForward = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
      }, _this.goBack = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
      }, _this.reload = function () {
        _this.setState({
          viewState: WebViewState.LOADING
        });

        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
      }, _this.stopLoading = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
      }, _this.postMessage = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
      }, _this.injectJavaScript = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
      }, _this.updateNavigationState = function (event) {
        if (_this.props.onNavigationStateChange) {
          _this.props.onNavigationStateChange(event.nativeEvent);
        }
      }, _this.getWebViewHandle = function () {
        return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
      }, _this.onLoadingStart = function (event) {
        var onLoadStart = _this.props.onLoadStart;
        onLoadStart && onLoadStart(event);

        _this.updateNavigationState(event);
      }, _this.onLoadingError = function (event) {
        event.persist();
        var _this$props = _this.props,
            onError = _this$props.onError,
            onLoadEnd = _this$props.onLoadEnd;
        onError && onError(event);
        onLoadEnd && onLoadEnd(event);
        console.warn('Encountered an error loading page', event.nativeEvent);

        _this.setState({
          lastErrorEvent: event.nativeEvent,
          viewState: WebViewState.ERROR
        });
      }, _this.onLoadingFinish = function (event) {
        var _this$props2 = _this.props,
            onLoad = _this$props2.onLoad,
            onLoadEnd = _this$props2.onLoadEnd;
        onLoad && onLoad(event);
        onLoadEnd && onLoadEnd(event);

        _this.setState({
          viewState: WebViewState.IDLE
        });

        _this.updateNavigationState(event);
      }, _this.onMessage = function (event) {
        var onMessage = _this.props.onMessage;
        onMessage && onMessage(event);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(WebView, [{
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        if (this.props.startInLoadingState) {
          this.setState({
            viewState: WebViewState.LOADING
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var otherView = null;

        if (this.state.viewState === WebViewState.LOADING) {
          otherView = (this.props.renderLoading || defaultRenderLoading)();
        } else if (this.state.viewState === WebViewState.ERROR) {
          var errorEvent = this.state.lastErrorEvent;
          otherView = this.props.renderError && this.props.renderError(errorEvent.domain, errorEvent.code, errorEvent.description);
        } else if (this.state.viewState !== WebViewState.IDLE) {
          console.error('RCTWebView invalid state encountered: ' + this.state.loading);
        }

        var webViewStyles = [styles.container, this.props.style];

        if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
          webViewStyles.push(styles.hidden);
        }

        var source = this.props.source || {};

        if (this.props.html) {
          source.html = this.props.html;
        } else if (this.props.url) {
          source.uri = this.props.url;
        }

        if (source.method === 'POST' && source.headers) {
          console.warn('WebView: `source.headers` is not supported when using POST.');
        } else if (source.method === 'GET' && source.body) {
          console.warn('WebView: `source.body` is not supported when using GET.');
        }

        var nativeConfig = this.props.nativeConfig || {};
        var NativeWebView = nativeConfig.component || RCTWebView;
        var webView = React.createElement(NativeWebView, babelHelpers.extends({
          ref: RCT_WEBVIEW_REF,
          key: "webViewKey",
          style: webViewStyles,
          source: resolveAssetSource(source),
          scalesPageToFit: this.props.scalesPageToFit,
          injectedJavaScript: this.props.injectedJavaScript,
          userAgent: this.props.userAgent,
          javaScriptEnabled: this.props.javaScriptEnabled,
          thirdPartyCookiesEnabled: this.props.thirdPartyCookiesEnabled,
          domStorageEnabled: this.props.domStorageEnabled,
          messagingEnabled: typeof this.props.onMessage === 'function',
          onMessage: this.onMessage,
          contentInset: this.props.contentInset,
          automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
          onContentSizeChange: this.props.onContentSizeChange,
          onLoadingStart: this.onLoadingStart,
          onLoadingFinish: this.onLoadingFinish,
          onLoadingError: this.onLoadingError,
          testID: this.props.testID,
          mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
          allowUniversalAccessFromFileURLs: this.props.allowUniversalAccessFromFileURLs,
          mixedContentMode: this.props.mixedContentMode,
          saveFormDataDisabled: this.props.saveFormDataDisabled,
          urlPrefixesForDefaultIntent: this.props.urlPrefixesForDefaultIntent
        }, nativeConfig.props));
        return React.createElement(
          View,
          {
            style: styles.container
          },
          webView,
          otherView
        );
      }
    }], [{
      key: "extraNativeComponentConfig",
      get: function get() {
        return {
          nativeOnly: {
            messagingEnabled: PropTypes.bool
          }
        };
      }
    }]);
    return WebView;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    renderError: PropTypes.func,
    renderLoading: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func,
    onLoadStart: PropTypes.func,
    onError: PropTypes.func,
    automaticallyAdjustContentInsets: PropTypes.bool,
    contentInset: EdgeInsetsPropType,
    onNavigationStateChange: PropTypes.func,
    onMessage: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    startInLoadingState: PropTypes.bool,
    style: ViewPropTypes.style,
    html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      method: PropTypes.oneOf(['GET', 'POST']),
      headers: PropTypes.object,
      body: PropTypes.string
    }), PropTypes.shape({
      html: PropTypes.string,
      baseUrl: PropTypes.string
    }), PropTypes.number]),
    javaScriptEnabled: PropTypes.bool,
    thirdPartyCookiesEnabled: PropTypes.bool,
    domStorageEnabled: PropTypes.bool,
    injectedJavaScript: PropTypes.string,
    scalesPageToFit: PropTypes.bool,
    userAgent: PropTypes.string,
    testID: PropTypes.string,
    mediaPlaybackRequiresUserAction: PropTypes.bool,
    allowUniversalAccessFromFileURLs: PropTypes.bool,
    injectJavaScript: PropTypes.func,
    mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility']),
    saveFormDataDisabled: PropTypes.bool,
    nativeConfig: PropTypes.shape({
      component: PropTypes.any,
      props: PropTypes.object,
      viewManager: PropTypes.object
    }),
    urlPrefixesForDefaultIntent: PropTypes.arrayOf(PropTypes.string)
  }), _class.defaultProps = {
    javaScriptEnabled: true,
    thirdPartyCookiesEnabled: true,
    scalesPageToFit: true,
    saveFormDataDisabled: false
  }, _temp2);
  var RCTWebView = requireNativeComponent('RCTWebView', WebView, WebView.extraNativeComponentConfig);
  var styles = StyleSheet.create({
    container: {
      flex: 1
    },
    hidden: {
      height: 0,
      flex: 0
    },
    loadingView: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    loadingProgressBar: {
      height: 20
    }
  });
  module.exports = WebView;
},1097,[137,42,111,121,46,112,97,134,136,126,119,147,153]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTActionSheetManager = _require(_dependencyMap[0]).ActionSheetManager;

  var invariant = _require(_dependencyMap[1]);

  var processColor = _require(_dependencyMap[2]);

  var ActionSheetIOS = {
    showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTActionSheetManager.showActionSheetWithOptions(babelHelpers.extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), callback);
    },
    showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
      RCTActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), failureCallback, successCallback);
    }
  };
  module.exports = ActionSheetIOS;
},281,[17,15,129]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0]);

  var BugReporting = _require(_dependencyMap[1]);

  var NativeModules = _require(_dependencyMap[2]);

  var ReactNative = _require(_dependencyMap[3]);

  var SceneTracker = _require(_dependencyMap[4]);

  var infoLog = _require(_dependencyMap[5]);

  var invariant = _require(_dependencyMap[6]);

  var renderApplication = _require(_dependencyMap[7]);

  var runnables = {};
  var runCount = 1;
  var sections = {};
  var tasks = new Map();

  var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
    return component();
  };

  var wrapperComponentProvider = void 0;
  var AppRegistry = {
    setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    registerConfig: function registerConfig(config) {
      config.forEach(function (appConfig) {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          invariant(appConfig.component != null, "AppRegistry.registerConfig(...): Every config is expected to set either `run` or `component`, but `%s` has neither.", appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent: function registerComponent(appKey, componentProvider, section) {
      runnables[appKey] = {
        componentProvider: componentProvider,
        run: function run(appParameters) {
          return renderApplication(componentProviderInstrumentationHook(componentProvider), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters));
        }
      };

      if (section) {
        sections[appKey] = runnables[appKey];
      }

      return appKey;
    },
    registerRunnable: function registerRunnable(appKey, run) {
      runnables[appKey] = {
        run: run
      };
      return appKey;
    },
    registerSection: function registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys: function getSectionKeys() {
      return Object.keys(sections);
    },
    getSections: function getSections() {
      return babelHelpers.extends({}, sections);
    },
    getRunnable: function getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry: function getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: babelHelpers.extends({}, runnables)
      };
    },
    setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication: function runApplication(appKey, appParameters) {
      var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(false) + ', development-level warning are ' + 'OFF' + ', performance optimizations are ' + 'ON';
      infoLog(msg);
      BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
        return msg;
      });
      invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered.\n\n' + "Hint: This error often happens when you're running the packager " + '(local dev server) from a wrong folder. For example you have ' + 'multiple apps and the packager is still running for the app you ' + 'were working on before.\nIf this is the case, simply kill the old ' + 'packager instance (e.g. close the packager terminal window) ' + 'and start the packager in the correct app folder (e.g. cd into app ' + "folder and run 'npm start').\n\n" + 'This error can also happen due to a require() error during ' + 'initialization or failure to call AppRegistry.registerComponent.\n\n');
      SceneTracker.setActiveScene({
        name: appKey
      });
      runnables[appKey].run(appParameters);
    },
    unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
      ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
    },
    registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
      if (tasks.has(taskKey)) {
        console.warn("registerHeadlessTask called multiple times for same key '" + taskKey + "'");
      }

      tasks.set(taskKey, task);
    },
    startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = tasks.get(taskKey);

      if (!taskProvider) {
        throw new Error("No task registered for key " + taskKey);
      }

      taskProvider()(data).then(function () {
        return NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      }).catch(function (reason) {
        console.error(reason);
        NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      });
    }
  };
  BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);
  module.exports = AppRegistry;
},282,[18,283,17,46,285,95,15,286]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var RCTDeviceEventEmitter = _require(_dependencyMap[0]);

  var Map = _require(_dependencyMap[1]);

  var infoLog = _require(_dependencyMap[2]);

  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function () {
      return _require(_dependencyMap[3])();
    });
  }

  var BugReporting = (_temp = _class = function () {
    function BugReporting() {
      babelHelpers.classCallCheck(this, BugReporting);
    }

    babelHelpers.createClass(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }

        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();

        if (source.has(key)) {
          console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }

        source.set(key, callback);
        return {
          remove: function remove() {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};

        for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref = _ref3;

          var _ref2 = babelHelpers.slicedToArray(_ref, 2);

          var _key = _ref2[0];
          var callback = _ref2[1];
          extraData[_key] = callback();
        }

        var fileData = {};

        for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref6;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref6 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref6 = _i2.value;
          }

          var _ref4 = _ref6;

          var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

          var _key2 = _ref5[0];
          var _callback = _ref5[1];
          fileData[_key2] = _callback();
        }

        infoLog('BugReporting extraData:', extraData);

        var BugReportingNativeModule = _require(_dependencyMap[4]).BugReporting;

        BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

        var RedBoxNativeModule = _require(_dependencyMap[4]).RedBox;

        RedBoxNativeModule && RedBoxNativeModule.setExtraData && RedBoxNativeModule.setExtraData(extraData, 'From BugReporting.js');
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);
    return BugReporting;
  }(), _class._extraSources = new Map(), _class._fileSources = new Map(), _class._subscription = null, _class._redboxSubscription = null, _temp);
  module.exports = BugReporting;
},283,[37,51,95,284,17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }

  function getReactTree() {
    return "React tree dumps have been temporarily disabled while React is upgraded to Fiber.";
  }

  module.exports = dumpReactTree;
},284,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene: function setActiveScene(scene) {
      _activeScene = scene;

      _listeners.forEach(function (listener) {
        return listener(_activeScene);
      });
    },
    getActiveScene: function getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
      _listeners.push(callback);

      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  };
  module.exports = SceneTracker;
},285,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AppContainer = _require(_dependencyMap[0]);

  var React = _require(_dependencyMap[1]);

  var ReactNative = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  _require(_dependencyMap[4]);

  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent) {
    invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var renderable = React.createElement(
      AppContainer,
      {
        rootTag: rootTag,
        WrapperComponent: WrapperComponent
      },
      React.createElement(RootComponent, babelHelpers.extends({}, initialProps, {
        rootTag: rootTag
      }))
    );

    if (RootComponent.prototype != null && RootComponent.prototype.unstable_isAsyncReactComponent === true) {
      var AsyncMode = React.unstable_AsyncMode;
      renderable = React.createElement(
        AsyncMode,
        null,
        renderable
      );
    }

    ReactNative.render(renderable, rootTag);
  }

  module.exports = renderApplication;
},286,[246,111,46,15,1098]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceEventManager = _require(_dependencyMap[0]).DeviceEventManager;

  var RCTDeviceEventEmitter = _require(_dependencyMap[1]);

  var DEVICE_BACK_EVENT = 'hardwareBackPress';

  var _backPressSubscriptions = new Set();

  RCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {
    var invokeDefault = true;
    var subscriptions = Array.from(_backPressSubscriptions.values()).reverse();

    for (var i = 0; i < subscriptions.length; ++i) {
      if (subscriptions[i]()) {
        invokeDefault = false;
        break;
      }
    }

    if (invokeDefault) {
      BackHandler.exitApp();
    }
  });
  var BackHandler = {
    exitApp: function exitApp() {
      DeviceEventManager.invokeDefaultBackPressHandler();
    },
    addEventListener: function addEventListener(eventName, handler) {
      _backPressSubscriptions.add(handler);

      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      _backPressSubscriptions.delete(handler);
    }
  };
  module.exports = BackHandler;
},1098,[17,37]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MissingNativeEventEmitterShim = _require(_dependencyMap[0]);

  var NativeEventEmitter = _require(_dependencyMap[1]);

  var NativeModules = _require(_dependencyMap[2]);

  var RCTAppState = NativeModules.AppState;

  var logError = _require(_dependencyMap[3]);

  var invariant = _require(_dependencyMap[4]);

  var AppState = function (_NativeEventEmitter) {
    babelHelpers.inherits(AppState, _NativeEventEmitter);

    function AppState() {
      babelHelpers.classCallCheck(this, AppState);

      var _this = babelHelpers.possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this, RCTAppState));

      _this.isAvailable = true;
      _this.isAvailable = true;
      _this._eventHandlers = {
        change: new Map(),
        memoryWarning: new Map()
      };
      _this.currentState = RCTAppState.initialAppState || 'active';
      var eventUpdated = false;

      _this.addListener('appStateDidChange', function (appStateData) {
        eventUpdated = true;
        _this.currentState = appStateData.app_state;
      });

      RCTAppState.getCurrentAppState(function (appStateData) {
        if (!eventUpdated) {
          _this.currentState = appStateData.app_state;
        }
      }, logError);
      return _this;
    }

    babelHelpers.createClass(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);

        if (type === 'change') {
          this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
            handler(appStateData.app_state);
          }));
        } else if (type === 'memoryWarning') {
          this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);

        if (!this._eventHandlers[type].has(handler)) {
          return;
        }

        this._eventHandlers[type].get(handler).remove();

        this._eventHandlers[type].delete(handler);
      }
    }]);
    return AppState;
  }(NativeEventEmitter);

  {
    AppState = new AppState();
  }
  module.exports = AppState;
},288,[69,70,17,88,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0]);

  var RCTAsyncStorage = NativeModules.AsyncRocksDBStorage || NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;
  var AsyncStorage = {
    _getRequests: [],
    _getKeys: [],
    _immediate: null,
    getItem: function getItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiGet([key], function (errors, result) {
          var value = result && result[0] && result[0][1] ? result[0][1] : null;
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0], value);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(value);
          }
        });
      });
    },
    setItem: function setItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    removeItem: function removeItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove([key], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    mergeItem: function mergeItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    clear: function clear(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.clear(function (error) {
          callback && callback(convertError(error));

          if (error && convertError(error)) {
            reject(convertError(error));
          } else {
            resolve(null);
          }
        });
      });
    },
    getAllKeys: function getAllKeys(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.getAllKeys(function (error, keys) {
          callback && callback(convertError(error), keys);

          if (error) {
            reject(convertError(error));
          } else {
            resolve(keys);
          }
        });
      });
    },
    flushGetRequests: function flushGetRequests() {
      var getRequests = this._getRequests;
      var getKeys = this._getKeys;
      this._getRequests = [];
      this._getKeys = [];
      RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
        var map = {};
        result && result.forEach(function (_ref) {
          var _ref2 = babelHelpers.slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          map[key] = value;
          return value;
        });
        var reqLength = getRequests.length;

        for (var i = 0; i < reqLength; i++) {
          var request = getRequests[i];
          var requestKeys = request.keys;
          var requestResult = requestKeys.map(function (key) {
            return [key, map[key]];
          });
          request.callback && request.callback(null, requestResult);
          request.resolve && request.resolve(requestResult);
        }
      });
    },
    multiGet: function multiGet(keys, callback) {
      var _this = this;

      if (!this._immediate) {
        this._immediate = setImmediate(function () {
          _this._immediate = null;

          _this.flushGetRequests();
        });
      }

      var getRequest = {
        keys: keys,
        callback: callback,
        keyIndex: this._getKeys.length,
        resolve: null,
        reject: null
      };
      var promiseResult = new Promise(function (resolve, reject) {
        getRequest.resolve = resolve;
        getRequest.reject = reject;
      });

      this._getRequests.push(getRequest);

      keys.forEach(function (key) {
        if (_this._getKeys.indexOf(key) === -1) {
          _this._getKeys.push(key);
        }
      });
      return promiseResult;
    },
    multiSet: function multiSet(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiRemove: function multiRemove(keys, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove(keys, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiMerge: function multiMerge(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    }
  };

  if (!RCTAsyncStorage.multiMerge) {
    delete AsyncStorage.mergeItem;
    delete AsyncStorage.multiMerge;
  }

  function convertErrors(errs) {
    if (!errs) {
      return null;
    }

    return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
      return convertError(e);
    });
  }

  function convertError(error) {
    if (!error) {
      return null;
    }

    var out = new Error(error.message);
    out.key = error.key;
    return out;
  }

  module.exports = AsyncStorage;
},289,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BackHandler = _require(_dependencyMap[0]);

  var warning = _require(_dependencyMap[1]);

  var BackAndroid = {
    exitApp: function exitApp() {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.exitApp();
    },
    addEventListener: function addEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      return BackHandler.addEventListener(eventName, handler);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.removeEventListener(eventName, handler);
    }
  };
  module.exports = BackAndroid;
},290,[1098,29]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var PropTypes = _require(_dependencyMap[0]);

  var checkPropTypes = PropTypes.checkPropTypes;

  var RCTCameraRollManager = _require(_dependencyMap[1]).CameraRollManager;

  var createStrictShapeTypeChecker = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var GROUP_TYPES_OPTIONS = {
    Album: 'Album',
    All: 'All',
    Event: 'Event',
    Faces: 'Faces',
    Library: 'Library',
    PhotoStream: 'PhotoStream',
    SavedPhotos: 'SavedPhotos'
  };
  var ASSET_TYPE_OPTIONS = {
    All: 'All',
    Videos: 'Videos',
    Photos: 'Photos'
  };
  var getPhotosParamChecker = createStrictShapeTypeChecker({
    first: PropTypes.number.isRequired,
    after: PropTypes.string,
    groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),
    groupName: PropTypes.string,
    assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),
    mimeTypes: PropTypes.arrayOf(PropTypes.string)
  });
  var getPhotosReturnChecker = createStrictShapeTypeChecker({
    edges: PropTypes.arrayOf(createStrictShapeTypeChecker({
      node: createStrictShapeTypeChecker({
        type: PropTypes.string.isRequired,
        group_name: PropTypes.string.isRequired,
        image: createStrictShapeTypeChecker({
          uri: PropTypes.string.isRequired,
          height: PropTypes.number.isRequired,
          width: PropTypes.number.isRequired,
          isStored: PropTypes.bool,
          playableDuration: PropTypes.number.isRequired
        }).isRequired,
        timestamp: PropTypes.number.isRequired,
        location: createStrictShapeTypeChecker({
          latitude: PropTypes.number,
          longitude: PropTypes.number,
          altitude: PropTypes.number,
          heading: PropTypes.number,
          speed: PropTypes.number
        })
      }).isRequired
    })).isRequired,
    page_info: createStrictShapeTypeChecker({
      has_next_page: PropTypes.bool.isRequired,
      start_cursor: PropTypes.string,
      end_cursor: PropTypes.string
    }).isRequired
  });
  var CameraRoll = (_temp = _class = function () {
    function CameraRoll() {
      babelHelpers.classCallCheck(this, CameraRoll);
    }

    babelHelpers.createClass(CameraRoll, null, [{
      key: "saveImageWithTag",
      value: function saveImageWithTag(tag) {
        console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');
        return this.saveToCameraRoll(tag, 'photo');
      }
    }, {
      key: "deletePhotos",
      value: function deletePhotos(photos) {
        return RCTCameraRollManager.deletePhotos(photos);
      }
    }, {
      key: "saveToCameraRoll",
      value: function saveToCameraRoll(tag, type) {
        invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');
        invariant(type === 'photo' || type === 'video' || type === undefined, "The second argument to saveToCameraRoll must be 'photo' or 'video'. You passed " + (type || 'unknown'));
        var mediaType = 'photo';

        if (type) {
          mediaType = type;
        } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
          mediaType = 'video';
        }

        return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
      }
    }, {
      key: "getPhotos",
      value: function getPhotos(params) {
        if (arguments.length > 1) {
          console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
          var successCallback = arguments[1];

          var errorCallback = arguments[2] || function () {};

          RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
        }

        return RCTCameraRollManager.getPhotos(params);
      }
    }]);
    return CameraRoll;
  }(), _class.GroupTypesOptions = GROUP_TYPES_OPTIONS, _class.AssetTypeOptions = ASSET_TYPE_OPTIONS, _temp);
  module.exports = CameraRoll;
},291,[121,17,138,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Clipboard = _require(_dependencyMap[0]).Clipboard;

  module.exports = {
    getString: function getString() {
      return Clipboard.getString();
    },
    setString: function setString(content) {
      Clipboard.setString(content);
    }
  };
},292,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var DatePickerModule = _require(_dependencyMap[0]).DatePickerAndroid;

  function _toMillis(options, key) {
    var dateVal = options[key];

    if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {
      options[key] = dateVal.getTime();
    }
  }

  var DatePickerAndroid = function () {
    function DatePickerAndroid() {
      babelHelpers.classCallCheck(this, DatePickerAndroid);
    }

    babelHelpers.createClass(DatePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        var optionsMs;
        return regeneratorRuntime.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                optionsMs = options;

                if (optionsMs) {
                  _toMillis(options, 'date');

                  _toMillis(options, 'minDate');

                  _toMillis(options, 'maxDate');
                }

                return _context.abrupt("return", DatePickerModule.open(options));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "dateSetAction",
      get: function get() {
        return 'dateSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);
    return DatePickerAndroid;
  }();

  module.exports = DatePickerAndroid;
},1099,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImagePicker = _require(_dependencyMap[0]).ImagePickerIOS;

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      return RCTImagePicker.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      return RCTImagePicker.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      config = babelHelpers.extends({
        videoMode: false
      }, config);
      return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      config = babelHelpers.extends({
        showImages: true,
        showVideos: false
      }, config);
      return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},294,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = _require(_dependencyMap[0]);

  var NativeModules = _require(_dependencyMap[1]);

  var Platform = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var LinkingManager = NativeModules.IntentAndroid;

  var Linking = function (_NativeEventEmitter) {
    babelHelpers.inherits(Linking, _NativeEventEmitter);

    function Linking() {
      babelHelpers.classCallCheck(this, Linking);
      return babelHelpers.possibleConstructorReturn(this, (Linking.__proto__ || Object.getPrototypeOf(Linking)).call(this, LinkingManager));
    }

    babelHelpers.createClass(Linking, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        this.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        this.removeListener(type, handler);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);

        return LinkingManager.openURL(url);
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);

        return LinkingManager.canOpenURL(url);
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return LinkingManager.getInitialURL();
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        invariant(url, 'Invalid URL: cannot be empty');
      }
    }]);
    return Linking;
  }(NativeEventEmitter);

  module.exports = new Linking();
},295,[70,17,1076,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Map = _require(_dependencyMap[0]);

  var NativeEventEmitter = _require(_dependencyMap[1]);

  var NativeModules = _require(_dependencyMap[2]);

  var Platform = _require(_dependencyMap[3]);

  var RCTNetInfo = NativeModules.NetInfo;
  var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);
  var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

  var _subscriptions = new Map();

  var _isConnectedDeprecated = void 0;

  {
    _isConnectedDeprecated = function _isConnectedDeprecated(connectionType) {
      return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
    };
  }

  function _isConnected(connection) {
    return connection.type !== 'none' && connection.type !== 'unknown';
  }

  var _isConnectedSubscriptions = new Map();

  var NetInfo = {
    addEventListener: function addEventListener(eventName, handler) {
      var listener = void 0;

      if (eventName === 'connectionChange') {
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler({
            type: appStateData.connectionType,
            effectiveType: appStateData.effectiveConnectionType
          });
        });
      } else if (eventName === 'change') {
        console.warn('NetInfo\'s "change" event is deprecated. Listen to the "connectionChange" event instead.');
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler(appStateData.network_info);
        });
      } else {
        console.warn('Trying to subscribe to unknown event: "' + eventName + '"');
        return {
          remove: function remove() {}
        };
      }

      _subscriptions.set(handler, listener);

      return {
        remove: function remove() {
          return NetInfo.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    },
    fetch: function fetch() {
      console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return resp.network_info;
      });
    },
    getConnectionInfo: function getConnectionInfo() {
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return {
          type: resp.connectionType,
          effectiveType: resp.effectiveConnectionType
        };
      });
    },
    isConnected: {
      addEventListener: function addEventListener(eventName, handler) {
        var listener = function listener(connection) {
          if (eventName === 'change') {
            handler(_isConnectedDeprecated(connection));
          } else if (eventName === 'connectionChange') {
            handler(_isConnected(connection));
          }
        };

        _isConnectedSubscriptions.set(handler, listener);

        NetInfo.addEventListener(eventName, listener);
        return {
          remove: function remove() {
            return NetInfo.isConnected.removeEventListener(eventName, handler);
          }
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        var listener = _isConnectedSubscriptions.get(handler);

        NetInfo.removeEventListener(eventName, listener);

        _isConnectedSubscriptions.delete(handler);
      },
      fetch: function fetch() {
        return NetInfo.getConnectionInfo().then(_isConnected);
      }
    },
    isConnectionExpensive: function isConnectionExpensive() {
      return RCTNetInfo.isConnectionMetered();
    }
  };
  module.exports = NetInfo;
},296,[51,70,17,1076]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var NativeEventEmitter = _require(_dependencyMap[0]);

  var RCTPushNotificationManager = _require(_dependencyMap[1]).PushNotificationManager;

  var invariant = _require(_dependencyMap[2]);

  var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

  var _notifHandlers = new Map();

  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';
  var PushNotificationIOS = (_temp = _class = function () {
    babelHelpers.createClass(PushNotificationIOS, null, [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        RCTPushNotificationManager.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        RCTPushNotificationManager.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        RCTPushNotificationManager.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        RCTPushNotificationManager.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        RCTPushNotificationManager.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        RCTPushNotificationManager.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        RCTPushNotificationManager.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        RCTPushNotificationManager.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;

        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
            handler(errorInfo);
          });
        }

        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');

        var listener = _notifHandlers.get(type);

        if (!listener) {
          return;
        }

        listener.remove();

        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {};

        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        } else {
          requestedPermissions = {
            alert: true,
            badge: true,
            sound: true
          };
        }

        return RCTPushNotificationManager.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        RCTPushNotificationManager.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        RCTPushNotificationManager.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }]);

    function PushNotificationIOS(nativeNotif) {
      var _this = this;

      babelHelpers.classCallCheck(this, PushNotificationIOS);
      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;

      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }

      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(function (notifKey) {
          var notifVal = nativeNotif[notifKey];

          if (notifKey === 'aps') {
            _this._alert = notifVal.alert;
            _this._sound = notifVal.sound;
            _this._badgeCount = notifVal.badge;
            _this._category = notifVal.category;
            _this._contentAvailable = notifVal['content-available'];
            _this._threadID = notifVal['thread-id'];
          } else {
            _this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }

    babelHelpers.createClass(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }

        this._remoteNotificationCompleteCallbackCalled = true;
        RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }, {
      key: "getThreadID",
      value: function getThreadID() {
        return this._threadID;
      }
    }]);
    return PushNotificationIOS;
  }(), _class.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  }, _temp);
  module.exports = PushNotificationIOS;
},297,[70,17,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Settings = {
    get: function get(key) {
      console.warn('Settings is not yet supported on Android');
      return null;
    },
    set: function set(settings) {
      console.warn('Settings is not yet supported on Android');
    },
    watchKeys: function watchKeys(keys, callback) {
      console.warn('Settings is not yet supported on Android');
      return -1;
    },
    clearWatch: function clearWatch(watchId) {
      console.warn('Settings is not yet supported on Android');
    }
  };
  module.exports = Settings;
},1100,[]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require2(_dependencyMap[0]);

  var invariant = _require2(_dependencyMap[1]);

  var processColor = _require2(_dependencyMap[2]);

  var _require = _require2(_dependencyMap[3]),
      ActionSheetManager = _require.ActionSheetManager,
      ShareModule = _require.ShareModule;

  var Share = function () {
    function Share() {
      babelHelpers.classCallCheck(this, Share);
    }

    babelHelpers.createClass(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
        {
          invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
          return ShareModule.share(content, options.dialogTitle);
        }
      }
    }, {
      key: "sharedAction",
      get: function get() {
        return 'sharedAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);
    return Share;
  }();

  module.exports = Share;
},299,[1076,15,129,17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = _require(_dependencyMap[0]);

  module.exports = new NativeEventEmitter('StatusBarManager');
},1101,[70]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var TimePickerModule = _require(_dependencyMap[0]).TimePickerAndroid;

  var TimePickerAndroid = function () {
    function TimePickerAndroid() {
      babelHelpers.classCallCheck(this, TimePickerAndroid);
    }

    babelHelpers.createClass(TimePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        return regeneratorRuntime.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", TimePickerModule.open(options));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "timeSetAction",
      get: function get() {
        return 'timeSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);
    return TimePickerAndroid;
  }();

  module.exports = TimePickerAndroid;
},1102,[17]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTVibration = _require(_dependencyMap[0]).Vibration;

  var Platform = _require(_dependencyMap[1]);

  var _vibrating = false;
  var _id = 0;

  function vibrateByPattern(pattern) {
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (_vibrating) {
      return;
    }

    _vibrating = true;

    if (pattern[0] === 0) {
      RCTVibration.vibrate();
      pattern = pattern.slice(1);
    }

    if (pattern.length === 0) {
      _vibrating = false;
      return;
    }

    setTimeout(function () {
      return vibrateScheduler(++_id, pattern, repeat, 1);
    }, pattern[0]);
  }

  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }

    RCTVibration.vibrate();

    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }

    setTimeout(function () {
      return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
  }

  var Vibration = {
    vibrate: function vibrate() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      {
        if (typeof pattern === 'number') {
          RCTVibration.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function cancel() {
      {
        RCTVibration.cancel();
      }
    }
  };
  module.exports = Vibration;
},302,[17,1076]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var warning = _require(_dependencyMap[0]);

  var VibrationIOS = {
    vibrate: function vibrate() {
      warning('VibrationIOS is not supported on this platform!');
    }
  };
  module.exports = VibrationIOS;
},1103,[29]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = _require(_dependencyMap[0]);

  var Platform = _require(_dependencyMap[1]);

  var React = _require(_dependencyMap[2]);

  var SafeAreaView = _require(_dependencyMap[3]);

  var StyleSheet = _require(_dependencyMap[4]);

  var RCTLog = _require(_dependencyMap[5]);

  var infoLog = _require(_dependencyMap[6]);

  var openFileInEditor = _require(_dependencyMap[7]);

  var parseErrorStack = _require(_dependencyMap[8]);

  var stringifySafe = _require(_dependencyMap[9]);

  var symbolicateStackTrace = _require(_dependencyMap[10]);

  var _warningEmitter = new EventEmitter();

  var _warningMap = new Map();

  var IGNORED_WARNINGS = [];

  function sprintf(format) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    var index = 0;
    return format.replace(/%s/g, function (match) {
      return args[index++];
    });
  }

  function updateWarningMap() {
    if (console.disableYellowBox) {
      return;
    }

    var warning = void 0;

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    if (typeof args[0] === 'string') {
      var format = args[0],
          formatArgs = args.slice(1);
      var argCount = (format.match(/%s/g) || []).length;
      warning = [sprintf.apply(undefined, [format].concat(babelHelpers.toConsumableArray(formatArgs.slice(0, argCount).map(stringifySafe))))].concat(babelHelpers.toConsumableArray(formatArgs.slice(argCount).map(stringifySafe))).join(' ');
    } else {
      warning = args.map(stringifySafe).join(' ');
    }

    if (warning.startsWith('(ADVICE)')) {
      return;
    }

    var warningInfo = _warningMap.get(warning);

    if (warningInfo) {
      warningInfo.count += 1;
    } else {
      var _error = new Error();

      _error.framesToPop = 2;

      _warningMap.set(warning, {
        count: 1,
        stacktrace: parseErrorStack(_error),
        symbolicated: false
      });
    }

    _warningEmitter.emit('warning', _warningMap);
  }

  function ensureSymbolicatedWarning(warning) {
    var prevWarningInfo = _warningMap.get(warning);

    if (!prevWarningInfo || prevWarningInfo.symbolicated) {
      return;
    }

    prevWarningInfo.symbolicated = true;
    symbolicateStackTrace(prevWarningInfo.stacktrace).then(function (stack) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        nextWarningInfo.stacktrace = stack;

        _warningEmitter.emit('warning', _warningMap);
      }
    }, function (error) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        infoLog('Failed to symbolicate warning, "%s":', warning, error);

        _warningEmitter.emit('warning', _warningMap);
      }
    });
  }

  function isWarningIgnored(warning) {
    var isIgnored = IGNORED_WARNINGS.some(function (ignoredWarning) {
      return warning.startsWith(ignoredWarning);
    });

    if (isIgnored) {
      return true;
    }

    return Array.isArray(console.ignoredYellowBox) && console.ignoredYellowBox.some(function (ignorePrefix) {
      return warning.startsWith(String(ignorePrefix));
    });
  }

  var WarningRow = function WarningRow(_ref) {
    var count = _ref.count,
        warning = _ref.warning,
        onPress = _ref.onPress;

    var Text = _require(_dependencyMap[11]);

    var TouchableHighlight = _require(_dependencyMap[12]);

    var View = _require(_dependencyMap[13]);

    var countText = count > 1 ? React.createElement(
      Text,
      {
        style: styles.listRowCount
      },
      '(' + count + ') '
    ) : null;
    return React.createElement(
      View,
      {
        style: styles.listRow
      },
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onPress,
          style: styles.listRowContent,
          underlayColor: "transparent"
        },
        React.createElement(
          Text,
          {
            style: styles.listRowText,
            numberOfLines: 2
          },
          countText,
          warning
        )
      )
    );
  };

  var StackRow = function StackRow(_ref2) {
    var frame = _ref2.frame;

    var Text = _require(_dependencyMap[11]);

    var TouchableHighlight = _require(_dependencyMap[12]);

    var file = frame.file,
        lineNumber = frame.lineNumber;
    var fileName = void 0;

    if (file) {
      var fileParts = file.split('/');
      fileName = fileParts[fileParts.length - 1];
    } else {
      fileName = '<unknown file>';
    }

    return React.createElement(
      TouchableHighlight,
      {
        activeOpacity: 0.5,
        style: styles.openInEditorButton,
        underlayColor: "transparent",
        onPress: openFileInEditor.bind(null, file, lineNumber)
      },
      React.createElement(
        Text,
        {
          style: styles.inspectorCountText
        },
        fileName,
        ":",
        lineNumber
      )
    );
  };

  var WarningInspector = function WarningInspector(_ref3) {
    var warningInfo = _ref3.warningInfo,
        warning = _ref3.warning,
        stacktraceVisible = _ref3.stacktraceVisible,
        onDismiss = _ref3.onDismiss,
        onDismissAll = _ref3.onDismissAll,
        onMinimize = _ref3.onMinimize,
        toggleStacktrace = _ref3.toggleStacktrace;

    var ScrollView = _require(_dependencyMap[14]);

    var Text = _require(_dependencyMap[11]);

    var TouchableHighlight = _require(_dependencyMap[12]);

    var View = _require(_dependencyMap[13]);

    var _ref4 = warningInfo || {},
        count = _ref4.count,
        stacktrace = _ref4.stacktrace;

    var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';
    var stacktraceList = void 0;

    if (stacktraceVisible && stacktrace) {
      stacktraceList = React.createElement(
        View,
        {
          style: styles.stacktraceList
        },
        stacktrace.map(function (frame, ii) {
          return React.createElement(StackRow, {
            frame: frame,
            key: ii
          });
        })
      );
    }

    return React.createElement(
      View,
      {
        style: styles.inspector
      },
      React.createElement(
        SafeAreaView,
        {
          style: styles.safeArea
        },
        React.createElement(
          View,
          {
            style: styles.inspectorCount
          },
          React.createElement(
            Text,
            {
              style: styles.inspectorCountText
            },
            countSentence
          ),
          React.createElement(
            TouchableHighlight,
            {
              onPress: toggleStacktrace,
              underlayColor: "transparent"
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText
              },
              stacktraceVisible ? "\u25BC" : "\u25B6",
              " Stacktrace"
            )
          )
        ),
        React.createElement(
          ScrollView,
          {
            style: styles.inspectorWarning
          },
          stacktraceList,
          React.createElement(
            Text,
            {
              style: styles.inspectorWarningText
            },
            warning
          )
        ),
        React.createElement(
          View,
          {
            style: styles.inspectorButtons
          },
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onMinimize,
              style: styles.inspectorButton,
              underlayColor: "transparent"
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText
              },
              "Minimize"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismiss,
              style: styles.inspectorButton,
              underlayColor: "transparent"
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText
              },
              "Dismiss"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismissAll,
              style: styles.inspectorButton,
              underlayColor: "transparent"
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText
              },
              "Dismiss All"
            )
          )
        )
      )
    );
  };

  var YellowBox = function (_React$Component) {
    babelHelpers.inherits(YellowBox, _React$Component);

    function YellowBox(props, context) {
      babelHelpers.classCallCheck(this, YellowBox);

      var _this = babelHelpers.possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

      _this.state = {
        inspecting: null,
        stacktraceVisible: false,
        warningMap: _warningMap
      };

      _this.dismissWarning = function (warning) {
        var _this$state = _this.state,
            inspecting = _this$state.inspecting,
            warningMap = _this$state.warningMap;

        if (warning) {
          warningMap.delete(warning);
        } else {
          warningMap.clear();
        }

        _this.setState({
          inspecting: warning && inspecting !== warning ? inspecting : null,
          warningMap: warningMap
        });
      };

      return _this;
    }

    babelHelpers.createClass(YellowBox, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var scheduled = null;
        this._listener = _warningEmitter.addListener('warning', function (warningMap) {
          scheduled = scheduled || setImmediate(function () {
            scheduled = null;

            _this2.setState({
              warningMap: warningMap
            });
          });
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var inspecting = this.state.inspecting;

        if (inspecting != null) {
          ensureSymbolicatedWarning(inspecting);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._listener) {
          this._listener.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (console.disableYellowBox || this.state.warningMap.size === 0) {
          return null;
        }

        var ScrollView = _require(_dependencyMap[14]);

        var View = _require(_dependencyMap[13]);

        var _state = this.state,
            inspecting = _state.inspecting,
            stacktraceVisible = _state.stacktraceVisible;
        var inspector = inspecting !== null ? React.createElement(WarningInspector, {
          warningInfo: this.state.warningMap.get(inspecting),
          warning: inspecting,
          stacktraceVisible: stacktraceVisible,
          onDismiss: function onDismiss() {
            return _this3.dismissWarning(inspecting);
          },
          onDismissAll: function onDismissAll() {
            return _this3.dismissWarning(null);
          },
          onMinimize: function onMinimize() {
            return _this3.setState({
              inspecting: null
            });
          },
          toggleStacktrace: function toggleStacktrace() {
            return _this3.setState({
              stacktraceVisible: !stacktraceVisible
            });
          }
        }) : null;
        var rows = [];
        this.state.warningMap.forEach(function (warningInfo, warning) {
          if (!isWarningIgnored(warning)) {
            rows.push(React.createElement(WarningRow, {
              key: warning,
              count: warningInfo.count,
              warning: warning,
              onPress: function onPress() {
                return _this3.setState({
                  inspecting: warning
                });
              },
              onDismiss: function onDismiss() {
                return _this3.dismissWarning(warning);
              }
            }));
          }
        });
        var listStyle = [styles.list, {
          height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight)
        }];
        return React.createElement(
          View,
          {
            style: inspector ? styles.fullScreen : listStyle
          },
          React.createElement(
            ScrollView,
            {
              style: listStyle,
              scrollsToTop: false
            },
            rows
          ),
          inspector
        );
      }
    }], [{
      key: "ignoreWarnings",
      value: function ignoreWarnings(warnings) {
        warnings.forEach(function (warning) {
          if (IGNORED_WARNINGS.indexOf(warning) === -1) {
            IGNORED_WARNINGS.push(warning);
          }
        });
      }
    }]);
    return YellowBox;
  }(React.Component);

  var backgroundColor = function backgroundColor(opacity) {
    return 'rgba(250, 186, 48, ' + opacity + ')';
  };

  var textColor = 'white';
  var rowGutter = 1;
  var rowHeight = 46;
  var elevation = Number.MAX_SAFE_INTEGER;
  var styles = StyleSheet.create({
    fullScreen: {
      height: '100%',
      width: '100%',
      elevation: elevation,
      position: 'absolute'
    },
    inspector: {
      backgroundColor: backgroundColor(0.95),
      height: '100%',
      paddingTop: 5,
      elevation: elevation
    },
    inspectorButtons: {
      flexDirection: 'row'
    },
    inspectorButton: {
      flex: 1,
      paddingVertical: 22,
      backgroundColor: backgroundColor(1)
    },
    safeArea: {
      flex: 1
    },
    stacktraceList: {
      paddingBottom: 5
    },
    inspectorButtonText: {
      color: textColor,
      fontSize: 14,
      opacity: 0.8,
      textAlign: 'center'
    },
    openInEditorButton: {
      paddingTop: 5,
      paddingBottom: 5
    },
    inspectorCount: {
      padding: 15,
      paddingBottom: 0,
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    inspectorCountText: {
      color: textColor,
      fontSize: 14
    },
    inspectorWarning: {
      flex: 1,
      paddingHorizontal: 15
    },
    inspectorWarningText: {
      color: textColor,
      fontSize: 16,
      fontWeight: '600'
    },
    list: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      elevation: elevation
    },
    listRow: {
      backgroundColor: backgroundColor(0.95),
      height: rowHeight,
      marginTop: rowGutter
    },
    listRowContent: {
      flex: 1
    },
    listRowCount: {
      color: 'rgba(255, 255, 255, 0.5)'
    },
    listRowText: {
      color: textColor,
      position: 'absolute',
      left: 0,
      top: 5,
      marginLeft: 15,
      marginRight: 15
    }
  });
  module.exports = YellowBox;
},304,[38,1076,111,1089,112,92,95,305,57,23,307,167,278,134,208]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var getDevServer = _require(_dependencyMap[0]);

  function openFileInEditor(file, lineNumber) {
    fetch(getDevServer().url + 'open-stack-frame', {
      method: 'POST',
      body: JSON.stringify({
        file: file,
        lineNumber: lineNumber
      })
    });
  }

  module.exports = openFileInEditor;
},305,[306]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      SourceCode = _require.SourceCode;

  var _cachedDevServerURL = void 0;

  var FALLBACK = 'http://localhost:8081/';

  function getDevServer() {
    if (_cachedDevServerURL === undefined) {
      var match = SourceCode && SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
      _cachedDevServerURL = match ? match[0] : null;
    }

    return {
      url: _cachedDevServerURL || FALLBACK,
      bundleLoadedFromServer: _cachedDevServerURL !== null
    };
  }

  module.exports = getDevServer;
},306,[17]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var getDevServer = _require2(_dependencyMap[0]);

  var _require = _require2(_dependencyMap[1]),
      SourceCode = _require.SourceCode;

  var fetch = void 0;

  function isSourcedFromDisk(sourcePath) {
    return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
  }

  function symbolicateStackTrace(stack) {
    var devServer, stackCopy, foundInternalSource, response, json;
    return regeneratorRuntime.async(function symbolicateStackTrace$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!fetch) {
              fetch = global.fetch || _require2(_dependencyMap[2]).fetch;
            }

            devServer = getDevServer();

            if (devServer.bundleLoadedFromServer) {
              _context.next = 4;
              break;
            }

            throw new Error('Bundle was not loaded from the packager');

          case 4:
            stackCopy = stack;

            if (SourceCode.scriptURL) {
              foundInternalSource = false;
              stackCopy = stack.map(function (frame) {
                if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                  return babelHelpers.extends({}, frame, {
                    file: SourceCode.scriptURL
                  });
                }

                foundInternalSource = true;
                return frame;
              });
            }

            _context.next = 8;
            return regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {
              method: 'POST',
              body: JSON.stringify({
                stack: stackCopy
              })
            }));

          case 8:
            response = _context.sent;
            _context.next = 11;
            return regeneratorRuntime.awrap(response.json());

          case 11:
            json = _context.sent;
            return _context.abrupt("return", json.stack);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  module.exports = symbolicateStackTrace;
},307,[306,17,78]);
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0]),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.takeSnapshot;
},308,[46]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _Constants = _require(_dependencyMap[0]);

  var _Constants2 = babelHelpers.interopRequireDefault(_Constants);

  var _Logs = _require(_dependencyMap[1]);

  var _Logs2 = babelHelpers.interopRequireDefault(_Logs);

  var _RemoteLogging = _require(_dependencyMap[2]);

  var _RemoteLogging2 = babelHelpers.interopRequireDefault(_RemoteLogging);

  if (_Constants2.default.manifest && _Constants2.default.manifest.logUrl) {
    if (!navigator.userAgent) {
      _Logs2.default.enableXDELogging();
    } else {
      _RemoteLogging2.default.enqueueRemoteLogAsync('info', {}, ['You are now debugging remotely; check your browser console for your application logs.']);
    }
  }
},309,[310,311,313]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentConstants = _reactNative.NativeModules.ExponentConstants;
  var manifest = void 0;

  if (ExponentConstants) {
    manifest = ExponentConstants.manifest;

    if (typeof manifest === 'string') {
      manifest = JSON.parse(manifest);
    }
  }

  exports.default = babelHelpers.extends({}, ExponentConstants, {
    deviceId: ExponentConstants.deviceId || ExponentConstants.installationId,
    installationId: ExponentConstants.deviceId || ExponentConstants.installationId,
    linkingUrl: ExponentConstants.linkingUri,
    manifest: manifest
  });
},310,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _RemoteConsole = _require(_dependencyMap[0]);

  var _RemoteConsole2 = babelHelpers.interopRequireDefault(_RemoteConsole);

  var _originalConsole = void 0;

  function enableXDELogging() {
    if (_originalConsole) {
      return;
    }

    _originalConsole = global.console;
    global.console = _RemoteConsole2.default.createRemoteConsole(global.console);
  }

  function disableXDELogging() {
    if (!_originalConsole) {
      return;
    }

    global.console = _originalConsole;
    _originalConsole = null;
  }

  exports.default = {
    enableXDELogging: enableXDELogging,
    disableXDELogging: disableXDELogging
  };
},311,[312]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _RemoteLogging = _require(_dependencyMap[0]);

  var _RemoteLogging2 = babelHelpers.interopRequireDefault(_RemoteLogging);

  function createRemoteConsole(originalConsole) {
    var groupDepth = 0;
    var enhancedConsole = Object.create(originalConsole);

    _defineConsoleLogMethod('debug', 'info');

    _defineConsoleLogMethod('log', 'info');

    _defineConsoleLogMethod('info', 'info');

    _defineConsoleLogMethod('warn', 'warn');

    _defineConsoleLogMethod('error', 'error');

    enhancedConsole.assert = function assert(condition) {
      for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        data[_key - 1] = arguments[_key];
      }

      if (originalConsole.assert) {
        originalConsole.assert.apply(originalConsole, [condition].concat(data));
      }

      if (condition) {
        return;
      }

      var assertionMessage = 'Assertion failed';

      if (!data.length) {
        data.push(assertionMessage);
      } else {
        if (typeof data[0] !== 'string') {
          data.unshift(assertionMessage);
        } else {
          data[0] = assertionMessage + ": " + data[0];
        }
      }

      _enqueueRemoteLog('error', {}, data);
    };

    enhancedConsole.group = function group() {
      for (var _len2 = arguments.length, data = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        data[_key2] = arguments[_key2];
      }

      if (originalConsole.group) {
        originalConsole.group.apply(originalConsole, data);
      }

      _enqueueRemoteLog('info', {}, data);

      groupDepth++;
    };

    enhancedConsole.groupCollapsed = function groupCollapsed() {
      for (var _len3 = arguments.length, data = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        data[_key3] = arguments[_key3];
      }

      if (originalConsole.groupCollapsed) {
        originalConsole.groupCollapsed.apply(originalConsole, data);
      }

      _enqueueRemoteLog('info', {
        groupCollapsed: true
      }, data);

      groupDepth++;
    };

    enhancedConsole.groupEnd = function groupEnd() {
      if (originalConsole.groupEnd) {
        originalConsole.groupEnd();
      }

      if (groupDepth > 0) {
        groupDepth--;
      }

      _enqueueRemoteLog('info', {
        shouldHide: true
      }, []);
    };

    function _defineConsoleLogMethod(name, level) {
      enhancedConsole[name] = function __expoConsoleLog() {
        for (var _len4 = arguments.length, data = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          data[_key4] = arguments[_key4];
        }

        if (originalConsole[name]) {
          originalConsole[name].apply(originalConsole, data);
        }

        _enqueueRemoteLog(level, {}, data);
      };
    }

    function _enqueueRemoteLog(level, additionalFields, data) {
      _RemoteLogging2.default.enqueueRemoteLogAsync(level, babelHelpers.extends({
        groupDepth: groupDepth
      }, additionalFields), data).catch(function (error) {
        originalConsole.error("There was a problem sending log messages to your development environment", error);
      });
    }

    return enhancedConsole;
  }

  exports.default = {
    createRemoteConsole: createRemoteConsole
  };
},312,[313]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.__waitForEmptyLogQueueAsync = __waitForEmptyLogQueueAsync;

  var _fbemitter = _require(_dependencyMap[0]);

  var _invariant = _require(_dependencyMap[1]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _uuidJs = _require(_dependencyMap[2]);

  var _uuidJs2 = babelHelpers.interopRequireDefault(_uuidJs);

  var _LogSerialization = _require(_dependencyMap[3]);

  var _LogSerialization2 = babelHelpers.interopRequireDefault(_LogSerialization);

  var _Constants = _require(_dependencyMap[4]);

  var _Constants2 = babelHelpers.interopRequireDefault(_Constants);

  var _sessionId = _uuidJs2.default.create().toString();

  var _logQueue = [];

  var _transportEventEmitter = new _fbemitter.EventEmitter();

  var _logCounter = 0;
  var _isSendingLogs = false;

  var _completionPromise = void 0;

  var _resolveCompletion2 = void 0;

  function enqueueRemoteLogAsync(level, additionalFields, data) {
    var warning, lines, _ref, body, includesStack;

    return regeneratorRuntime.async(function enqueueRemoteLogAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (_isReactNativeWarning(data)) {
              (0, _invariant2.default)(data.length > 0, "Warnings must include log arguments");
              (0, _invariant2.default)(typeof data[0] === 'string', "The log argument for a warning must be a string");
              warning = data[0];
              lines = warning.split('\n');

              if (lines.length > 1 && /^\s+in /.test(lines[1])) {
                data[0] = lines[0];
              }
            }

            _context.next = 3;
            return regeneratorRuntime.awrap(_LogSerialization2.default.serializeLogDataAsync(data, level));

          case 3:
            _ref = _context.sent;
            body = _ref.body;
            includesStack = _ref.includesStack;

            _logQueue.push(babelHelpers.extends({
              count: _logCounter++,
              level: level,
              body: body,
              includesStack: includesStack
            }, additionalFields));

            _sendRemoteLogsAsync().catch(function (error) {
              setImmediate(function () {
                throw error;
              });
            });

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function _sendRemoteLogsAsync() {
    var batch, logUrl;
    return regeneratorRuntime.async(function _sendRemoteLogsAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(_isSendingLogs || !_logQueue.length)) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return");

          case 2:
            batch = _logQueue.splice(0);
            logUrl = _Constants2.default.manifest.logUrl;
            (0, _invariant2.default)(typeof logUrl === 'string', 'The Expo project manifest must specify `logUrl`');
            _isSendingLogs = true;
            _context2.prev = 6;
            _context2.next = 9;
            return regeneratorRuntime.awrap(_sendNextLogBatchAsync(batch, logUrl));

          case 9:
            _context2.prev = 9;
            _isSendingLogs = false;
            return _context2.finish(9);

          case 12:
            if (!_logQueue.length) {
              _context2.next = 16;
              break;
            }

            return _context2.abrupt("return", _sendRemoteLogsAsync());

          case 16:
            if (_resolveCompletion2) {
              _resolveCompletion2();
            }

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this, [[6,, 9, 12]]);
  }

  function _sendNextLogBatchAsync(batch, logUrl) {
    var response, success;
    return regeneratorRuntime.async(function _sendNextLogBatchAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            response = void 0;
            _context3.prev = 1;
            _context3.next = 4;
            return regeneratorRuntime.awrap(fetch(logUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                Connection: 'keep-alive',
                'Proxy-Connection': 'keep-alive',
                Accept: 'application/json',
                'Device-Id': _Constants2.default.deviceId,
                'Device-Name': _Constants2.default.deviceName,
                'Session-Id': _sessionId
              },
              body: JSON.stringify(batch)
            }));

          case 4:
            response = _context3.sent;
            _context3.next = 11;
            break;

          case 7:
            _context3.prev = 7;
            _context3.t0 = _context3["catch"](1);

            _transportEventEmitter.emit('error', {
              error: _context3.t0
            });

            return _context3.abrupt("return");

          case 11:
            success = response.status >= 200 && response.status < 300;

            if (!success) {
              _transportEventEmitter.emit('error', {
                error: new Error("An HTTP error occurred when sending remote logs"),
                response: response
              });
            }

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this, [[1, 7]]);
  }

  function addTransportErrorListener(listener) {
    return _transportEventEmitter.addListener('error', listener);
  }

  function _isReactNativeWarning(data) {
    return data.length === 1 && typeof data[0] === 'string' && data[0].startsWith('Warning: ');
  }

  exports.default = {
    enqueueRemoteLogAsync: enqueueRemoteLogAsync,
    addTransportErrorListener: addTransportErrorListener
  };

  function __waitForEmptyLogQueueAsync() {
    if (_completionPromise) {
      return _completionPromise;
    }

    if (!_isSendingLogs && !_logQueue.length) {
      return Promise.resolve();
    }

    _completionPromise = new Promise(function (resolve) {
      _resolveCompletion2 = function _resolveCompletion() {
        (0, _invariant2.default)(!_isSendingLogs, "Must not be sending logs at completion");
        (0, _invariant2.default)(!_logQueue.length, "Log queue must be empty at completion");
        _completionPromise = null;
        _resolveCompletion2 = null;
        resolve();
      };
    });
    return _completionPromise;
  }
},313,[314,319,320,321,310]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var fbemitter = {
    EventEmitter: _require(_dependencyMap[0]),
    EmitterSubscription: _require(_dependencyMap[1])
  };
  module.exports = fbemitter;
},314,[315,316]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var EmitterSubscription = _require(_dependencyMap[0]);

  var EventSubscriptionVendor = _require(_dependencyMap[1]);

  var emptyFunction = _require(_dependencyMap[2]);

  var invariant = _require(_dependencyMap[3]);

  var BaseEventEmitter = function () {
    function BaseEventEmitter() {
      _classCallCheck(this, BaseEventEmitter);

      this._subscriber = new EventSubscriptionVendor();
      this._currentSubscription = null;
    }

    BaseEventEmitter.prototype.addListener = function addListener(eventType, listener, context) {
      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this._subscriber, listener, context));
    };

    BaseEventEmitter.prototype.once = function once(eventType, listener, context) {
      var emitter = this;
      return this.addListener(eventType, function () {
        emitter.removeCurrentListener();
        listener.apply(context, arguments);
      });
    };

    BaseEventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {
      this._subscriber.removeAllSubscriptions(eventType);
    };

    BaseEventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {
      !!!this._currentSubscription ? invariant(false) : undefined;

      this._subscriber.removeSubscription(this._currentSubscription);
    };

    BaseEventEmitter.prototype.listeners = function listeners(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

      return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
        return subscription.listener;
      }) : [];
    };

    BaseEventEmitter.prototype.emit = function emit(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

      if (subscriptions) {
        var keys = Object.keys(subscriptions);

        for (var ii = 0; ii < keys.length; ii++) {
          var key = keys[ii];
          var subscription = subscriptions[key];

          if (subscription) {
            this._currentSubscription = subscription;

            this.__emitToSubscription.apply(this, [subscription].concat(Array.prototype.slice.call(arguments)));
          }
        }

        this._currentSubscription = null;
      }
    };

    BaseEventEmitter.prototype.__emitToSubscription = function __emitToSubscription(subscription, eventType) {
      var args = Array.prototype.slice.call(arguments, 2);
      subscription.listener.apply(subscription.context, args);
    };

    return BaseEventEmitter;
  }();

  module.exports = BaseEventEmitter;
},315,[316,318,30,15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var EventSubscription = _require(_dependencyMap[0]);

  var EmitterSubscription = function (_EventSubscription) {
    _inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(subscriber, listener, context) {
      _classCallCheck(this, EmitterSubscription);

      _EventSubscription.call(this, subscriber);

      this.listener = listener;
      this.context = context;
    }

    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},316,[317]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      _classCallCheck(this, EventSubscription);

      this.subscriber = subscriber;
    }

    EventSubscription.prototype.remove = function remove() {
      if (this.subscriber) {
        this.subscriber.removeSubscription(this);
        this.subscriber = null;
      }
    };

    return EventSubscription;
  }();

  module.exports = EventSubscription;
},317,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var invariant = _require(_dependencyMap[0]);

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      _classCallCheck(this, EventSubscriptionVendor);

      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {
      !(subscription.subscriber === this) ? invariant(false) : undefined;

      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }

      var key = this._subscriptionsForType[eventType].length;

      this._subscriptionsForType[eventType].push(subscription);

      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    };

    EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    };

    EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;
      var subscriptionsForType = this._subscriptionsForType[eventType];

      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    };

    EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    };

    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},318,[15]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  };

  module.exports = invariant;
},319,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function UUIDjs() {}

  ;

  UUIDjs.maxFromBits = function (bits) {
    return Math.pow(2, bits);
  };

  UUIDjs.limitUI04 = UUIDjs.maxFromBits(4);
  UUIDjs.limitUI06 = UUIDjs.maxFromBits(6);
  UUIDjs.limitUI08 = UUIDjs.maxFromBits(8);
  UUIDjs.limitUI12 = UUIDjs.maxFromBits(12);
  UUIDjs.limitUI14 = UUIDjs.maxFromBits(14);
  UUIDjs.limitUI16 = UUIDjs.maxFromBits(16);
  UUIDjs.limitUI32 = UUIDjs.maxFromBits(32);
  UUIDjs.limitUI40 = UUIDjs.maxFromBits(40);
  UUIDjs.limitUI48 = UUIDjs.maxFromBits(48);

  function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  UUIDjs.randomUI04 = function () {
    return getRandomInt(0, UUIDjs.limitUI04 - 1);
  };

  UUIDjs.randomUI06 = function () {
    return getRandomInt(0, UUIDjs.limitUI06 - 1);
  };

  UUIDjs.randomUI08 = function () {
    return getRandomInt(0, UUIDjs.limitUI08 - 1);
  };

  UUIDjs.randomUI12 = function () {
    return getRandomInt(0, UUIDjs.limitUI12 - 1);
  };

  UUIDjs.randomUI14 = function () {
    return getRandomInt(0, UUIDjs.limitUI14 - 1);
  };

  UUIDjs.randomUI16 = function () {
    return getRandomInt(0, UUIDjs.limitUI16 - 1);
  };

  UUIDjs.randomUI32 = function () {
    return getRandomInt(0, UUIDjs.limitUI32 - 1);
  };

  UUIDjs.randomUI40 = function () {
    return (0 | Math.random() * 1073741824) + (0 | Math.random() * 1024) * 1073741824;
  };

  UUIDjs.randomUI48 = function () {
    return (0 | Math.random() * 1073741824) + (0 | Math.random() * 262144) * 1073741824;
  };

  UUIDjs.paddedString = function (string, length, z) {
    string = String(string);
    z = !z ? '0' : z;
    var i = length - string.length;

    for (; i > 0; i >>>= 1, z += z) {
      if (i & 1) {
        string = z + string;
      }
    }

    return string;
  };

  UUIDjs.prototype.fromParts = function (timeLow, timeMid, timeHiAndVersion, clockSeqHiAndReserved, clockSeqLow, node) {
    this.version = timeHiAndVersion >> 12 & 0xF;
    this.hex = UUIDjs.paddedString(timeLow.toString(16), 8) + '-' + UUIDjs.paddedString(timeMid.toString(16), 4) + '-' + UUIDjs.paddedString(timeHiAndVersion.toString(16), 4) + '-' + UUIDjs.paddedString(clockSeqHiAndReserved.toString(16), 2) + UUIDjs.paddedString(clockSeqLow.toString(16), 2) + '-' + UUIDjs.paddedString(node.toString(16), 12);
    return this;
  };

  UUIDjs.prototype.toString = function () {
    return this.hex;
  };

  UUIDjs.prototype.toURN = function () {
    return 'urn:uuid:' + this.hex;
  };

  UUIDjs.prototype.toBytes = function () {
    var parts = this.hex.split('-');
    var ints = [];
    var intPos = 0;

    for (var i = 0; i < parts.length; i++) {
      for (var j = 0; j < parts[i].length; j += 2) {
        ints[intPos++] = parseInt(parts[i].substr(j, 2), 16);
      }
    }

    return ints;
  };

  UUIDjs.prototype.equals = function (uuid) {
    if (!(uuid instanceof UUID)) {
      return false;
    }

    if (this.hex !== uuid.hex) {
      return false;
    }

    return true;
  };

  UUIDjs.getTimeFieldValues = function (time) {
    var ts = time - Date.UTC(1582, 9, 15);
    var hm = ts / 0x100000000 * 10000 & 0xFFFFFFF;
    return {
      low: (ts & 0xFFFFFFF) * 10000 % 0x100000000,
      mid: hm & 0xFFFF,
      hi: hm >>> 16,
      timestamp: ts
    };
  };

  UUIDjs._create4 = function () {
    return new UUIDjs().fromParts(UUIDjs.randomUI32(), UUIDjs.randomUI16(), 0x4000 | UUIDjs.randomUI12(), 0x80 | UUIDjs.randomUI06(), UUIDjs.randomUI08(), UUIDjs.randomUI48());
  };

  UUIDjs._create1 = function () {
    var now = new Date().getTime();
    var sequence = UUIDjs.randomUI14();
    var node = (UUIDjs.randomUI08() | 1) * 0x10000000000 + UUIDjs.randomUI40();
    var tick = UUIDjs.randomUI04();
    var timestamp = 0;
    var timestampRatio = 0.25;

    if (now != timestamp) {
      if (now < timestamp) {
        sequence++;
      }

      timestamp = now;
      tick = UUIDjs.randomUI04();
    } else if (Math.random() < timestampRatio && tick < 9984) {
      tick += 1 + UUIDjs.randomUI04();
    } else {
      sequence++;
    }

    var tf = UUIDjs.getTimeFieldValues(timestamp);
    var tl = tf.low + tick;
    var thav = tf.hi & 0xFFF | 0x1000;
    sequence &= 0x3FFF;
    var cshar = sequence >>> 8 | 0x80;
    var csl = sequence & 0xFF;
    return new UUIDjs().fromParts(tl, tf.mid, thav, cshar, csl, node);
  };

  UUIDjs.create = function (version) {
    version = version || 4;
    return this['_create' + version]();
  };

  UUIDjs.fromTime = function (time, last) {
    last = !last ? false : last;
    var tf = UUIDjs.getTimeFieldValues(time);
    var tl = tf.low;
    var thav = tf.hi & 0xFFF | 0x1000;

    if (last === false) {
      return new UUIDjs().fromParts(tl, tf.mid, thav, 0, 0, 0);
    } else {
      return new UUIDjs().fromParts(tl, tf.mid, thav, 0x80 | UUIDjs.limitUI06, UUIDjs.limitUI08 - 1, UUIDjs.limitUI48 - 1);
    }
  };

  UUIDjs.firstFromTime = function (time) {
    return UUIDjs.fromTime(time, false);
  };

  UUIDjs.lastFromTime = function (time) {
    return UUIDjs.fromTime(time, true);
  };

  UUIDjs.fromURN = function (strId) {
    var r,
        p = /^(?:urn:uuid:|\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(?:\})?$/i;

    if (r = p.exec(strId)) {
      return new UUIDjs().fromParts(parseInt(r[1], 16), parseInt(r[2], 16), parseInt(r[3], 16), parseInt(r[4], 16), parseInt(r[5], 16), parseInt(r[6], 16));
    }

    return null;
  };

  UUIDjs.fromBytes = function (ints) {
    if (ints.length < 5) {
      return null;
    }

    var str = '';
    var pos = 0;
    var parts = [4, 2, 2, 2, 6];

    for (var i = 0; i < parts.length; i++) {
      for (var j = 0; j < parts[i]; j++) {
        var octet = ints[pos++].toString(16);

        if (octet.length == 1) {
          octet = '0' + octet;
        }

        str += octet;
      }

      if (parts[i] !== 6) {
        str += '-';
      }
    }

    return UUIDjs.fromURN(str);
  };

  UUIDjs.fromBinary = function (binary) {
    var ints = [];

    for (var i = 0; i < binary.length; i++) {
      ints[i] = binary.charCodeAt(i);

      if (ints[i] > 255 || ints[i] < 0) {
        throw new Error('Unexpected byte in binary data.');
      }
    }

    return UUIDjs.fromBytes(ints);
  };

  UUIDjs.new = function () {
    return this.create(4);
  };

  UUIDjs.newTS = function () {
    return this.create(1);
  };

  module.exports = UUIDjs;
},320,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EXPO_CONSOLE_METHOD_NAME = undefined;

  var _prettyFormat = _require(_dependencyMap[0]);

  var _prettyFormat2 = babelHelpers.interopRequireDefault(_prettyFormat);

  var _parseErrorStack = _require(_dependencyMap[1]);

  var _parseErrorStack2 = babelHelpers.interopRequireDefault(_parseErrorStack);

  var _symbolicateStackTrace = _require(_dependencyMap[2]);

  var _symbolicateStackTrace2 = babelHelpers.interopRequireDefault(_symbolicateStackTrace);

  _require(_dependencyMap[3]);

  var _Constants = _require(_dependencyMap[4]);

  var _Constants2 = babelHelpers.interopRequireDefault(_Constants);

  var EXPO_CONSOLE_METHOD_NAME = exports.EXPO_CONSOLE_METHOD_NAME = '__expoConsoleLog';

  function serializeLogDataAsync(data, level) {
    var serializedValues, includesStack, rawStack, syntheticError, stack, errorMessage, serializedError, error, _errorMessage, _serializedError;

    return regeneratorRuntime.async(function serializeLogDataAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            serializedValues = void 0;
            includesStack = false;

            if (!_stackTraceLogsSupported()) {
              _context.next = 33;
              break;
            }

            if (!_isUnhandledPromiseRejection(data, level)) {
              _context.next = 12;
              break;
            }

            rawStack = data[0];
            syntheticError = {
              stack: rawStack
            };
            _context.next = 8;
            return regeneratorRuntime.awrap(_symbolicateErrorAsync(syntheticError));

          case 8:
            stack = _context.sent;

            if (!stack.length) {
              serializedValues = _stringifyLogData(data);
            } else {
              errorMessage = rawStack.split('\n')[1];
              serializedValues = [{
                message: "[Unhandled promise rejection: " + errorMessage + "]",
                stack: _formatStack(stack)
              }];
              includesStack = true;
            }

            _context.next = 31;
            break;

          case 12:
            if (!(data.length === 1 && data[0] instanceof Error)) {
              _context.next = 20;
              break;
            }

            _context.next = 15;
            return regeneratorRuntime.awrap(_serializeErrorAsync(data[0]));

          case 15:
            serializedError = _context.sent;
            serializedValues = [serializedError];
            includesStack = serializedError.hasOwnProperty('stack');
            _context.next = 31;
            break;

          case 20:
            if (!(level === 'warn' || level === 'error')) {
              _context.next = 30;
              break;
            }

            error = _captureConsoleStackTrace();
            _errorMessage = _stringifyLogData(data).join(', ');
            _context.next = 25;
            return regeneratorRuntime.awrap(_serializeErrorAsync(error, _errorMessage));

          case 25:
            _serializedError = _context.sent;
            serializedValues = [_serializedError];
            includesStack = _serializedError.hasOwnProperty('stack');
            _context.next = 31;
            break;

          case 30:
            serializedValues = _stringifyLogData(data);

          case 31:
            _context.next = 34;
            break;

          case 33:
            serializedValues = _stringifyLogData(data);

          case 34:
            return _context.abrupt("return", {
              body: [].concat(babelHelpers.toConsumableArray(serializedValues)),
              includesStack: includesStack
            });

          case 35:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function _stringifyLogData(data) {
    return data.map(function (item) {
      if (typeof item === 'string') {
        return item;
      } else {
        return (0, _prettyFormat2.default)(item);
      }
    });
  }

  function _serializeErrorAsync(error, message) {
    var stack, formattedStack;
    return regeneratorRuntime.async(function _serializeErrorAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (message == null) {
              message = error.message;
            }

            if (!(!error.stack || !error.stack.length)) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", (0, _prettyFormat2.default)(error));

          case 3:
            _context2.next = 5;
            return regeneratorRuntime.awrap(_symbolicateErrorAsync(error));

          case 5:
            stack = _context2.sent;
            formattedStack = _formatStack(stack);
            return _context2.abrupt("return", {
              message: message,
              stack: formattedStack
            });

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function _symbolicateErrorAsync(error) {
    var parsedStack, symbolicatedStack;
    return regeneratorRuntime.async(function _symbolicateErrorAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            parsedStack = (0, _parseErrorStack2.default)(error);
            symbolicatedStack = void 0;
            _context3.prev = 2;
            _context3.next = 5;
            return regeneratorRuntime.awrap((0, _symbolicateStackTrace2.default)(parsedStack));

          case 5:
            symbolicatedStack = _context3.sent;
            _context3.next = 11;
            break;

          case 8:
            _context3.prev = 8;
            _context3.t0 = _context3["catch"](2);
            return _context3.abrupt("return", parsedStack);

          case 11:
            if (symbolicatedStack) {
              _context3.next = 13;
              break;
            }

            return _context3.abrupt("return", parsedStack);

          case 13:
            return _context3.abrupt("return", symbolicatedStack.map(_removeProjectRoot));

          case 14:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this, [[2, 8]]);
  }

  function _formatStack(stack) {
    return stack.map(function (frame) {
      var line = frame.file + ":" + frame.lineNumber;

      if (frame.column != null) {
        line += ":" + frame.column;
      }

      line += " in " + frame.methodName;
      return line;
    }).join('\n');
  }

  function _removeProjectRoot(frame) {
    var filename = frame.file;

    if (filename == null) {
      return frame;
    }

    var projectRoot = _getProjectRoot();

    if (projectRoot == null) {
      return frame;
    }

    if (filename.startsWith(projectRoot)) {
      filename = filename.substring(projectRoot.length);

      if (filename[0] === '/' || filename[0] === '\\') {
        filename = filename.substring(1);
      }

      frame.file = filename;
    }

    return frame;
  }

  function _stackTraceLogsSupported() {
    return false;
  }

  function _isUnhandledPromiseRejection(data, level) {
    return level === 'warn' && typeof data[0] === 'string' && /^Possible Unhandled Promise Rejection/.test(data[0]);
  }

  function _captureConsoleStackTrace() {
    try {
      throw new Error();
    } catch (error) {
      var stackLines = error.stack.split('\n');
      var consoleMethodIndex = stackLines.findIndex(function (frame) {
        return frame.includes(EXPO_CONSOLE_METHOD_NAME);
      });

      if (consoleMethodIndex !== -1) {
        stackLines = stackLines.slice(consoleMethodIndex + 1);
        error.stack = stackLines.join('\n');
      }

      return error;
    }
  }

  function _getProjectRoot() {
    return _Constants2.default.manifest && _Constants2.default.manifest.developer ? _Constants2.default.manifest.developer.projectRoot : null;
  }

  exports.default = {
    serializeLogDataAsync: serializeLogDataAsync
  };
},321,[322,57,307,313,310]);
__d(function (global, _require, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory() : typeof define === 'function' && define.amd ? define(factory) : factory();
  })(this, function () {
    'use strict';

    function unwrapExports(x) {
      return x && x.__esModule ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
      return module = {
        exports: {}
      }, fn(module, module.exports), module.exports;
    }

    var _defined = function _defined(it) {
      if (it == undefined) throw TypeError("Can't call method on  " + it);
      return it;
    };

    var _toObject = function _toObject(it) {
      return Object(_defined(it));
    };

    var hasOwnProperty = {}.hasOwnProperty;

    var _has = function _has(it, key) {
      return hasOwnProperty.call(it, key);
    };

    var toString$2 = {}.toString;

    var _cof = function _cof(it) {
      return toString$2.call(it).slice(8, -1);
    };

    var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
      return _cof(it) == 'String' ? it.split('') : Object(it);
    };

    var _toIobject = function _toIobject(it) {
      return _iobject(_defined(it));
    };

    var ceil = Math.ceil;
    var floor = Math.floor;

    var _toInteger = function _toInteger(it) {
      return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    };

    var min = Math.min;

    var _toLength = function _toLength(it) {
      return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0;
    };

    var max = Math.max;
    var min$1 = Math.min;

    var _toAbsoluteIndex = function _toAbsoluteIndex(index, length) {
      index = _toInteger(index);
      return index < 0 ? max(index + length, 0) : min$1(index, length);
    };

    var _arrayIncludes = function _arrayIncludes(IS_INCLUDES) {
      return function ($this, el, fromIndex) {
        var O = _toIobject($this);

        var length = _toLength(O.length);

        var index = _toAbsoluteIndex(fromIndex, length);

        var value;
        if (IS_INCLUDES && el != el) while (length > index) {
          value = O[index++];
          if (value != value) return true;
        } else for (; length > index; index++) {
          if (IS_INCLUDES || index in O) {
            if (O[index] === el) return IS_INCLUDES || index || 0;
          }
        }
        return !IS_INCLUDES && -1;
      };
    };

    var _global = createCommonjsModule(function (module) {
      var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
      if (typeof __g == 'number') __g = global;
    });

    var SHARED = '__core-js_shared__';
    var store = _global[SHARED] || (_global[SHARED] = {});

    var _shared = function _shared(key) {
      return store[key] || (store[key] = {});
    };

    var id = 0;
    var px = Math.random();

    var _uid = function _uid(key) {
      return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
    };

    var shared = _shared('keys');

    var _sharedKey = function _sharedKey(key) {
      return shared[key] || (shared[key] = _uid(key));
    };

    var arrayIndexOf = _arrayIncludes(false);

    var IE_PROTO = _sharedKey('IE_PROTO');

    var _objectKeysInternal = function _objectKeysInternal(object, names) {
      var O = _toIobject(object);

      var i = 0;
      var result = [];
      var key;

      for (key in O) {
        if (key != IE_PROTO) _has(O, key) && result.push(key);
      }

      while (names.length > i) {
        if (_has(O, key = names[i++])) {
          ~arrayIndexOf(result, key) || result.push(key);
        }
      }

      return result;
    };

    var _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

    var _objectKeys = Object.keys || function keys(O) {
      return _objectKeysInternal(O, _enumBugKeys);
    };

    var _core = createCommonjsModule(function (module) {
      var core = module.exports = {
        version: '2.5.1'
      };
      if (typeof __e == 'number') __e = core;
    });

    var _aFunction = function _aFunction(it) {
      if (typeof it != 'function') throw TypeError(it + ' is not a function!');
      return it;
    };

    var _ctx = function _ctx(fn, that, length) {
      _aFunction(fn);

      if (that === undefined) return fn;

      switch (length) {
        case 1:
          return function (a) {
            return fn.call(that, a);
          };

        case 2:
          return function (a, b) {
            return fn.call(that, a, b);
          };

        case 3:
          return function (a, b, c) {
            return fn.call(that, a, b, c);
          };
      }

      return function () {
        return fn.apply(that, arguments);
      };
    };

    var _isObject = function _isObject(it) {
      return typeof it === 'object' ? it !== null : typeof it === 'function';
    };

    var _anObject = function _anObject(it) {
      if (!_isObject(it)) throw TypeError(it + ' is not an object!');
      return it;
    };

    var _fails = function _fails(exec) {
      try {
        return !!exec();
      } catch (e) {
        return true;
      }
    };

    var _descriptors = !_fails(function () {
      return Object.defineProperty({}, 'a', {
        get: function get() {
          return 7;
        }
      }).a != 7;
    });

    var document = _global.document;

    var is = _isObject(document) && _isObject(document.createElement);

    var _domCreate = function _domCreate(it) {
      return is ? document.createElement(it) : {};
    };

    var _ie8DomDefine = !_descriptors && !_fails(function () {
      return Object.defineProperty(_domCreate('div'), 'a', {
        get: function get() {
          return 7;
        }
      }).a != 7;
    });

    var _toPrimitive = function _toPrimitive(it, S) {
      if (!_isObject(it)) return it;
      var fn, val;
      if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
      if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
      if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
      throw TypeError("Can't convert object to primitive value");
    };

    var dP = Object.defineProperty;
    var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
      _anObject(O);

      P = _toPrimitive(P, true);

      _anObject(Attributes);

      if (_ie8DomDefine) try {
        return dP(O, P, Attributes);
      } catch (e) {}
      if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };
    var _objectDp = {
      f: f
    };

    var _propertyDesc = function _propertyDesc(bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };

    var _hide = _descriptors ? function (object, key, value) {
      return _objectDp.f(object, key, _propertyDesc(1, value));
    } : function (object, key, value) {
      object[key] = value;
      return object;
    };

    var PROTOTYPE = 'prototype';

    var $export = function $export(type, name, source) {
      var IS_FORCED = type & $export.F;
      var IS_GLOBAL = type & $export.G;
      var IS_STATIC = type & $export.S;
      var IS_PROTO = type & $export.P;
      var IS_BIND = type & $export.B;
      var IS_WRAP = type & $export.W;
      var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
      var expProto = exports[PROTOTYPE];
      var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];
      var key, own, out;
      if (IS_GLOBAL) source = name;

      for (key in source) {
        own = !IS_FORCED && target && target[key] !== undefined;
        if (own && key in exports) continue;
        out = own ? target[key] : source[key];
        exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? _ctx(out, _global) : IS_WRAP && target[key] == out ? function (C) {
          var F = function F(a, b, c) {
            if (this instanceof C) {
              switch (arguments.length) {
                case 0:
                  return new C();

                case 1:
                  return new C(a);

                case 2:
                  return new C(a, b);
              }

              return new C(a, b, c);
            }

            return C.apply(this, arguments);
          };

          F[PROTOTYPE] = C[PROTOTYPE];
          return F;
        }(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;

        if (IS_PROTO) {
          (exports.virtual || (exports.virtual = {}))[key] = out;
          if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);
        }
      }
    };

    $export.F = 1;
    $export.G = 2;
    $export.S = 4;
    $export.P = 8;
    $export.B = 16;
    $export.W = 32;
    $export.U = 64;
    $export.R = 128;
    var _export = $export;

    var _objectSap = function _objectSap(KEY, exec) {
      var fn = (_core.Object || {})[KEY] || Object[KEY];
      var exp = {};
      exp[KEY] = exec(fn);

      _export(_export.S + _export.F * _fails(function () {
        fn(1);
      }), 'Object', exp);
    };

    _objectSap('keys', function () {
      return function keys(it) {
        return _objectKeys(_toObject(it));
      };
    });

    var keys$1 = _core.Object.keys;
    var keys = createCommonjsModule(function (module) {
      module.exports = {
        "default": keys$1,
        __esModule: true
      };
    });

    var _Object$keys = unwrapExports(keys);

    var _stringAt = function _stringAt(TO_STRING) {
      return function (that, pos) {
        var s = String(_defined(that));

        var i = _toInteger(pos);

        var l = s.length;
        var a, b;
        if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
        a = s.charCodeAt(i);
        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
      };
    };

    var _library = true;
    var _redefine = _hide;
    var _iterators = {};

    var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
      _anObject(O);

      var keys = _objectKeys(Properties);

      var length = keys.length;
      var i = 0;
      var P;

      while (length > i) {
        _objectDp.f(O, P = keys[i++], Properties[P]);
      }

      return O;
    };

    var document$1 = _global.document;

    var _html = document$1 && document$1.documentElement;

    var IE_PROTO$1 = _sharedKey('IE_PROTO');

    var Empty = function Empty() {};

    var PROTOTYPE$1 = 'prototype';

    var _createDict = function createDict() {
      var iframe = _domCreate('iframe');

      var i = _enumBugKeys.length;
      var lt = '<';
      var gt = '>';
      var iframeDocument;
      iframe.style.display = 'none';

      _html.appendChild(iframe);

      iframe.src = 'javascript:';
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
      iframeDocument.close();
      _createDict = iframeDocument.F;

      while (i--) {
        delete _createDict[PROTOTYPE$1][_enumBugKeys[i]];
      }

      return _createDict();
    };

    var _objectCreate = Object.create || function create(O, Properties) {
      var result;

      if (O !== null) {
        Empty[PROTOTYPE$1] = _anObject(O);
        result = new Empty();
        Empty[PROTOTYPE$1] = null;
        result[IE_PROTO$1] = O;
      } else result = _createDict();

      return Properties === undefined ? result : _objectDps(result, Properties);
    };

    var _wks = createCommonjsModule(function (module) {
      var store = _shared('wks');

      var Symbol = _global.Symbol;
      var USE_SYMBOL = typeof Symbol == 'function';

      var $exports = module.exports = function (name) {
        return store[name] || (store[name] = USE_SYMBOL && (typeof Symbol === "function" ? Symbol[name] : "@@name") || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
      };

      $exports.store = store;
    });

    var def = _objectDp.f;

    var TAG = _wks('toStringTag');

    var _setToStringTag = function _setToStringTag(it, tag, stat) {
      if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
        configurable: true,
        value: tag
      });
    };

    'use strict';

    var IteratorPrototype = {};

    _hide(IteratorPrototype, _wks('iterator'), function () {
      return this;
    });

    var _iterCreate = function _iterCreate(Constructor, NAME, next) {
      Constructor.prototype = _objectCreate(IteratorPrototype, {
        next: _propertyDesc(1, next)
      });

      _setToStringTag(Constructor, NAME + ' Iterator');
    };

    var IE_PROTO$2 = _sharedKey('IE_PROTO');

    var ObjectProto = Object.prototype;

    var _objectGpo = Object.getPrototypeOf || function (O) {
      O = _toObject(O);
      if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];

      if (typeof O.constructor == 'function' && O instanceof O.constructor) {
        return O.constructor.prototype;
      }

      return O instanceof Object ? ObjectProto : null;
    };

    'use strict';

    var ITERATOR = _wks('iterator');

    var BUGGY = !([].keys && 'next' in [].keys());
    var FF_ITERATOR = '@@iterator';
    var KEYS = 'keys';
    var VALUES = 'values';

    var returnThis = function returnThis() {
      return this;
    };

    var _iterDefine = function _iterDefine(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
      _iterCreate(Constructor, NAME, next);

      var getMethod = function getMethod(kind) {
        if (!BUGGY && kind in proto) return proto[kind];

        switch (kind) {
          case KEYS:
            return function keys() {
              return new Constructor(this, kind);
            };

          case VALUES:
            return function values() {
              return new Constructor(this, kind);
            };
        }

        return function entries() {
          return new Constructor(this, kind);
        };
      };

      var TAG = NAME + ' Iterator';
      var DEF_VALUES = DEFAULT == VALUES;
      var VALUES_BUG = false;
      var proto = Base.prototype;
      var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
      var $default = $native || getMethod(DEFAULT);
      var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
      var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
      var methods, key, IteratorPrototype;

      if ($anyNative) {
        IteratorPrototype = _objectGpo($anyNative.call(new Base()));

        if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
          _setToStringTag(IteratorPrototype, TAG, true);

          if (!_library && !_has(IteratorPrototype, ITERATOR)) _hide(IteratorPrototype, ITERATOR, returnThis);
        }
      }

      if (DEF_VALUES && $native && $native.name !== VALUES) {
        VALUES_BUG = true;

        $default = function values() {
          return $native.call(this);
        };
      }

      if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
        _hide(proto, ITERATOR, $default);
      }

      _iterators[NAME] = $default;
      _iterators[TAG] = returnThis;

      if (DEFAULT) {
        methods = {
          values: DEF_VALUES ? $default : getMethod(VALUES),
          keys: IS_SET ? $default : getMethod(KEYS),
          entries: $entries
        };
        if (FORCED) for (key in methods) {
          if (!(key in proto)) _redefine(proto, key, methods[key]);
        } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
      }

      return methods;
    };

    'use strict';

    var $at = _stringAt(true);

    _iterDefine(String, 'String', function (iterated) {
      this._t = String(iterated);
      this._i = 0;
    }, function () {
      var O = this._t;
      var index = this._i;
      var point;
      if (index >= O.length) return {
        value: undefined,
        done: true
      };
      point = $at(O, index);
      this._i += point.length;
      return {
        value: point,
        done: false
      };
    });

    var _addToUnscopables = function _addToUnscopables() {};

    var _iterStep = function _iterStep(done, value) {
      return {
        value: value,
        done: !!done
      };
    };

    'use strict';

    var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
      this._t = _toIobject(iterated);
      this._i = 0;
      this._k = kind;
    }, function () {
      var O = this._t;
      var kind = this._k;
      var index = this._i++;

      if (!O || index >= O.length) {
        this._t = undefined;
        return _iterStep(1);
      }

      if (kind == 'keys') return _iterStep(0, index);
      if (kind == 'values') return _iterStep(0, O[index]);
      return _iterStep(0, [index, O[index]]);
    }, 'values');

    _iterators.Arguments = _iterators.Array;

    _addToUnscopables('keys');

    _addToUnscopables('values');

    _addToUnscopables('entries');

    var TO_STRING_TAG = _wks('toStringTag');

    var DOMIterables = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(',');

    for (var i = 0; i < DOMIterables.length; i++) {
      var NAME = DOMIterables[i];
      var Collection = _global[NAME];
      var proto = Collection && Collection.prototype;
      if (proto && !proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
      _iterators[NAME] = _iterators.Array;
    }

    var f$1 = _wks;
    var _wksExt = {
      f: f$1
    };

    var iterator$2 = _wksExt.f('iterator');

    var iterator = createCommonjsModule(function (module) {
      module.exports = {
        "default": iterator$2,
        __esModule: true
      };
    });
    unwrapExports(iterator);

    var _meta = createCommonjsModule(function (module) {
      var META = _uid('meta');

      var setDesc = _objectDp.f;
      var id = 0;

      var isExtensible = Object.isExtensible || function () {
        return true;
      };

      var FREEZE = !_fails(function () {
        return isExtensible(Object.preventExtensions({}));
      });

      var setMeta = function setMeta(it) {
        setDesc(it, META, {
          value: {
            i: 'O' + ++id,
            w: {}
          }
        });
      };

      var fastKey = function fastKey(it, create) {
        if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

        if (!_has(it, META)) {
          if (!isExtensible(it)) return 'F';
          if (!create) return 'E';
          setMeta(it);
        }

        return it[META].i;
      };

      var getWeak = function getWeak(it, create) {
        if (!_has(it, META)) {
          if (!isExtensible(it)) return true;
          if (!create) return false;
          setMeta(it);
        }

        return it[META].w;
      };

      var onFreeze = function onFreeze(it) {
        if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
        return it;
      };

      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey: fastKey,
        getWeak: getWeak,
        onFreeze: onFreeze
      };
    });

    var defineProperty = _objectDp.f;

    var _wksDefine = function _wksDefine(name) {
      var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});
      if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
        value: _wksExt.f(name)
      });
    };

    var f$2 = Object.getOwnPropertySymbols;
    var _objectGops = {
      f: f$2
    };
    var f$3 = {}.propertyIsEnumerable;
    var _objectPie = {
      f: f$3
    };

    var _enumKeys = function _enumKeys(it) {
      var result = _objectKeys(it);

      var getSymbols = _objectGops.f;

      if (getSymbols) {
        var symbols = getSymbols(it);
        var isEnum = _objectPie.f;
        var i = 0;
        var key;

        while (symbols.length > i) {
          if (isEnum.call(it, key = symbols[i++])) result.push(key);
        }
      }

      return result;
    };

    var _isArray = Array.isArray || function isArray(arg) {
      return _cof(arg) == 'Array';
    };

    var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

    var f$5 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return _objectKeysInternal(O, hiddenKeys);
    };

    var _objectGopn = {
      f: f$5
    };
    var gOPN$1 = _objectGopn.f;
    var toString$3 = {}.toString;
    var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

    var getWindowNames = function getWindowNames(it) {
      try {
        return gOPN$1(it);
      } catch (e) {
        return windowNames.slice();
      }
    };

    var f$4 = function getOwnPropertyNames(it) {
      return windowNames && toString$3.call(it) == '[object Window]' ? getWindowNames(it) : gOPN$1(_toIobject(it));
    };

    var _objectGopnExt = {
      f: f$4
    };
    var gOPD$1 = Object.getOwnPropertyDescriptor;
    var f$6 = _descriptors ? gOPD$1 : function getOwnPropertyDescriptor(O, P) {
      O = _toIobject(O);
      P = _toPrimitive(P, true);
      if (_ie8DomDefine) try {
        return gOPD$1(O, P);
      } catch (e) {}
      if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
    };
    var _objectGopd = {
      f: f$6
    };
    'use strict';

    var META = _meta.KEY;
    var gOPD = _objectGopd.f;
    var dP$1 = _objectDp.f;
    var gOPN = _objectGopnExt.f;
    var $Symbol = _global.Symbol;
    var $JSON = _global.JSON;

    var _stringify = $JSON && $JSON.stringify;

    var PROTOTYPE$2 = 'prototype';

    var HIDDEN = _wks('_hidden');

    var TO_PRIMITIVE = _wks('toPrimitive');

    var isEnum = {}.propertyIsEnumerable;

    var SymbolRegistry = _shared('symbol-registry');

    var AllSymbols = _shared('symbols');

    var OPSymbols = _shared('op-symbols');

    var ObjectProto$1 = Object[PROTOTYPE$2];
    var USE_NATIVE = typeof $Symbol == 'function';
    var QObject = _global.QObject;
    var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;
    var setSymbolDesc = _descriptors && _fails(function () {
      return _objectCreate(dP$1({}, 'a', {
        get: function get() {
          return dP$1(this, 'a', {
            value: 7
          }).a;
        }
      })).a != 7;
    }) ? function (it, key, D) {
      var protoDesc = gOPD(ObjectProto$1, key);
      if (protoDesc) delete ObjectProto$1[key];
      dP$1(it, key, D);
      if (protoDesc && it !== ObjectProto$1) dP$1(ObjectProto$1, key, protoDesc);
    } : dP$1;

    var wrap = function wrap(tag) {
      var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);

      sym._k = tag;
      return sym;
    };

    var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
      return typeof it == 'symbol';
    } : function (it) {
      return it instanceof $Symbol;
    };

    var $defineProperty = function defineProperty(it, key, D) {
      if (it === ObjectProto$1) $defineProperty(OPSymbols, key, D);

      _anObject(it);

      key = _toPrimitive(key, true);

      _anObject(D);

      if (_has(AllSymbols, key)) {
        if (!D.enumerable) {
          if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
          it[HIDDEN][key] = true;
        } else {
          if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
          D = _objectCreate(D, {
            enumerable: _propertyDesc(0, false)
          });
        }

        return setSymbolDesc(it, key, D);
      }

      return dP$1(it, key, D);
    };

    var $defineProperties = function defineProperties(it, P) {
      _anObject(it);

      var keys = _enumKeys(P = _toIobject(P));

      var i = 0;
      var l = keys.length;
      var key;

      while (l > i) {
        $defineProperty(it, key = keys[i++], P[key]);
      }

      return it;
    };

    var $create = function create(it, P) {
      return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
    };

    var $propertyIsEnumerable = function propertyIsEnumerable(key) {
      var E = isEnum.call(this, key = _toPrimitive(key, true));
      if (this === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
      return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
    };

    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
      it = _toIobject(it);
      key = _toPrimitive(key, true);
      if (it === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
      var D = gOPD(it, key);
      if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
      return D;
    };

    var $getOwnPropertyNames = function getOwnPropertyNames(it) {
      var names = gOPN(_toIobject(it));
      var result = [];
      var i = 0;
      var key;

      while (names.length > i) {
        if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
      }

      return result;
    };

    var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
      var IS_OP = it === ObjectProto$1;
      var names = gOPN(IS_OP ? OPSymbols : _toIobject(it));
      var result = [];
      var i = 0;
      var key;

      while (names.length > i) {
        if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto$1, key) : true)) result.push(AllSymbols[key]);
      }

      return result;
    };

    if (!USE_NATIVE) {
      $Symbol = function Symbol() {
        if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');

        var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);

        var $set = function $set(value) {
          if (this === ObjectProto$1) $set.call(OPSymbols, value);
          if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
          setSymbolDesc(this, tag, _propertyDesc(1, value));
        };

        if (_descriptors && setter) setSymbolDesc(ObjectProto$1, tag, {
          configurable: true,
          set: $set
        });
        return wrap(tag);
      };

      _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
        return this._k;
      });

      _objectGopd.f = $getOwnPropertyDescriptor;
      _objectDp.f = $defineProperty;
      _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
      _objectPie.f = $propertyIsEnumerable;
      _objectGops.f = $getOwnPropertySymbols;

      if (_descriptors && !_library) {
        _redefine(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable, true);
      }

      _wksExt.f = function (name) {
        return wrap(_wks(name));
      };
    }

    _export(_export.G + _export.W + _export.F * !USE_NATIVE, {
      Symbol: $Symbol
    });

    for (var es6Symbols = 'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
      _wks(es6Symbols[j++]);
    }

    for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) {
      _wksDefine(wellKnownSymbols[k++]);
    }

    _export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
      'for': function _for(key) {
        return _has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
      },
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

        for (var key in SymbolRegistry) {
          if (SymbolRegistry[key] === sym) return key;
        }
      },
      useSetter: function useSetter() {
        setter = true;
      },
      useSimple: function useSimple() {
        setter = false;
      }
    });

    _export(_export.S + _export.F * !USE_NATIVE, 'Object', {
      create: $create,
      defineProperty: $defineProperty,
      defineProperties: $defineProperties,
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
      getOwnPropertyNames: $getOwnPropertyNames,
      getOwnPropertySymbols: $getOwnPropertySymbols
    });

    $JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
      var S = $Symbol();
      return _stringify([S]) != '[null]' || _stringify({
        a: S
      }) != '{}' || _stringify(Object(S)) != '{}';
    })), 'JSON', {
      stringify: function stringify(it) {
        if (it === undefined || isSymbol(it)) return;
        var args = [it];
        var i = 1;
        var replacer, $replacer;

        while (arguments.length > i) {
          args.push(arguments[i++]);
        }

        replacer = args[1];
        if (typeof replacer == 'function') $replacer = replacer;
        if ($replacer || !_isArray(replacer)) replacer = function replacer(key, value) {
          if ($replacer) value = $replacer.call(this, key, value);
          if (!isSymbol(value)) return value;
        };
        args[1] = replacer;
        return _stringify.apply($JSON, args);
      }
    });
    $Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);

    _setToStringTag($Symbol, 'Symbol');

    _setToStringTag(Math, 'Math', true);

    _setToStringTag(_global.JSON, 'JSON', true);

    _wksDefine('asyncIterator');

    _wksDefine('observable');

    var symbol$1 = _core.Symbol;
    var symbol = createCommonjsModule(function (module) {
      module.exports = {
        "default": symbol$1,
        __esModule: true
      };
    });

    var _Symbol = unwrapExports(symbol);

    var _typeof_1 = createCommonjsModule(function (module, exports) {
      "use strict";

      exports.__esModule = true;

      var _iterator2 = _interopRequireDefault(iterator);

      var _symbol2 = _interopRequireDefault(symbol);

      var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
      };

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
        return typeof obj === "undefined" ? "undefined" : _typeof(obj);
      } : function (obj) {
        return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
      };
    });

    var _typeof = unwrapExports(_typeof_1);

    _export(_export.S + _export.F * !_descriptors, 'Object', {
      defineProperty: _objectDp.f
    });

    var $Object = _core.Object;

    var defineProperty$2 = function defineProperty(it, key, desc) {
      return $Object.defineProperty(it, key, desc);
    };

    var defineProperty$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": defineProperty$2,
        __esModule: true
      };
    });

    var _Object$defineProperty = unwrapExports(defineProperty$1);

    var TAG$1 = _wks('toStringTag');

    var ARG = _cof(function () {
      return arguments;
    }()) == 'Arguments';

    var tryGet = function tryGet(it, key) {
      try {
        return it[key];
      } catch (e) {}
    };

    var _classof = function _classof(it) {
      var O, T, B;
      return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T : ARG ? _cof(O) : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
    };

    var ITERATOR$1 = _wks('iterator');

    var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
      if (it != undefined) return it[ITERATOR$1] || it['@@iterator'] || _iterators[_classof(it)];
    };

    var core_getIterator = _core.getIterator = function (it) {
      var iterFn = core_getIteratorMethod(it);
      if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
      return _anObject(iterFn.call(it));
    };

    var getIterator$1 = core_getIterator;
    var getIterator = createCommonjsModule(function (module) {
      module.exports = {
        "default": getIterator$1,
        __esModule: true
      };
    });

    var _getIterator = unwrapExports(getIterator);

    var _redefineAll = function _redefineAll(target, src, safe) {
      for (var key in src) {
        if (safe && target[key]) target[key] = src[key];else _hide(target, key, src[key]);
      }

      return target;
    };

    var _anInstance = function _anInstance(it, Constructor, name, forbiddenField) {
      if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
        throw TypeError(name + ': incorrect invocation!');
      }

      return it;
    };

    var _iterCall = function _iterCall(iterator, fn, value, entries) {
      try {
        return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
      } catch (e) {
        var ret = iterator['return'];
        if (ret !== undefined) _anObject(ret.call(iterator));
        throw e;
      }
    };

    var ITERATOR$2 = _wks('iterator');

    var ArrayProto = Array.prototype;

    var _isArrayIter = function _isArrayIter(it) {
      return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$2] === it);
    };

    var _forOf = createCommonjsModule(function (module) {
      var BREAK = {};
      var RETURN = {};

      var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
        var iterFn = ITERATOR ? function () {
          return iterable;
        } : core_getIteratorMethod(iterable);

        var f = _ctx(fn, that, entries ? 2 : 1);

        var index = 0;
        var length, step, iterator, result;
        if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
        if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
          result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
          if (result === BREAK || result === RETURN) return result;
        } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
          result = _iterCall(iterator, f, step.value, entries);
          if (result === BREAK || result === RETURN) return result;
        }
      };

      exports.BREAK = BREAK;
      exports.RETURN = RETURN;
    });

    'use strict';

    var SPECIES = _wks('species');

    var _setSpecies = function _setSpecies(KEY) {
      var C = typeof _core[KEY] == 'function' ? _core[KEY] : _global[KEY];
      if (_descriptors && C && !C[SPECIES]) _objectDp.f(C, SPECIES, {
        configurable: true,
        get: function get() {
          return this;
        }
      });
    };

    var _validateCollection = function _validateCollection(it, TYPE) {
      if (!_isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
      return it;
    };

    'use strict';

    var dP$2 = _objectDp.f;
    var fastKey = _meta.fastKey;
    var SIZE = _descriptors ? '_s' : 'size';

    var getEntry = function getEntry(that, key) {
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return that._i[index];

      for (entry = that._f; entry; entry = entry.n) {
        if (entry.k == key) return entry;
      }
    };

    var _collectionStrong = {
      getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function (that, iterable) {
          _anInstance(that, C, NAME, '_i');

          that._t = NAME;
          that._i = _objectCreate(null);
          that._f = undefined;
          that._l = undefined;
          that[SIZE] = 0;
          if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
        });

        _redefineAll(C.prototype, {
          clear: function clear() {
            for (var that = _validateCollection(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
              entry.r = true;
              if (entry.p) entry.p = entry.p.n = undefined;
              delete data[entry.i];
            }

            that._f = that._l = undefined;
            that[SIZE] = 0;
          },
          'delete': function _delete(key) {
            var that = _validateCollection(this, NAME);

            var entry = getEntry(that, key);

            if (entry) {
              var next = entry.n;
              var prev = entry.p;
              delete that._i[entry.i];
              entry.r = true;
              if (prev) prev.n = next;
              if (next) next.p = prev;
              if (that._f == entry) that._f = next;
              if (that._l == entry) that._l = prev;
              that[SIZE]--;
            }

            return !!entry;
          },
          forEach: function forEach(callbackfn) {
            _validateCollection(this, NAME);

            var f = _ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);

            var entry;

            while (entry = entry ? entry.n : this._f) {
              f(entry.v, entry.k, this);

              while (entry && entry.r) {
                entry = entry.p;
              }
            }
          },
          has: function has(key) {
            return !!getEntry(_validateCollection(this, NAME), key);
          }
        });

        if (_descriptors) dP$2(C.prototype, 'size', {
          get: function get() {
            return _validateCollection(this, NAME)[SIZE];
          }
        });
        return C;
      },
      def: function def(that, key, value) {
        var entry = getEntry(that, key);
        var prev, index;

        if (entry) {
          entry.v = value;
        } else {
          that._l = entry = {
            i: index = fastKey(key, true),
            k: key,
            v: value,
            p: prev = that._l,
            n: undefined,
            r: false
          };
          if (!that._f) that._f = entry;
          if (prev) prev.n = entry;
          that[SIZE]++;
          if (index !== 'F') that._i[index] = entry;
        }

        return that;
      },
      getEntry: getEntry,
      setStrong: function setStrong(C, NAME, IS_MAP) {
        _iterDefine(C, NAME, function (iterated, kind) {
          this._t = _validateCollection(iterated, NAME);
          this._k = kind;
          this._l = undefined;
        }, function () {
          var that = this;
          var kind = that._k;
          var entry = that._l;

          while (entry && entry.r) {
            entry = entry.p;
          }

          if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
            that._t = undefined;
            return _iterStep(1);
          }

          if (kind == 'keys') return _iterStep(0, entry.k);
          if (kind == 'values') return _iterStep(0, entry.v);
          return _iterStep(0, [entry.k, entry.v]);
        }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

        _setSpecies(NAME);
      }
    };

    var SPECIES$1 = _wks('species');

    var _arraySpeciesConstructor = function _arraySpeciesConstructor(original) {
      var C;

      if (_isArray(original)) {
        C = original.constructor;
        if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;

        if (_isObject(C)) {
          C = C[SPECIES$1];
          if (C === null) C = undefined;
        }
      }

      return C === undefined ? Array : C;
    };

    var _arraySpeciesCreate = function _arraySpeciesCreate(original, length) {
      return new (_arraySpeciesConstructor(original))(length);
    };

    var _arrayMethods = function _arrayMethods(TYPE, $create) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      var create = $create || _arraySpeciesCreate;
      return function ($this, callbackfn, that) {
        var O = _toObject($this);

        var self = _iobject(O);

        var f = _ctx(callbackfn, that, 3);

        var length = _toLength(self.length);

        var index = 0;
        var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
        var val, res;

        for (; length > index; index++) {
          if (NO_HOLES || index in self) {
            val = self[index];
            res = f(val, index, O);

            if (TYPE) {
              if (IS_MAP) result[index] = res;else if (res) switch (TYPE) {
                  case 3:
                    return true;

                  case 5:
                    return val;

                  case 6:
                    return index;

                  case 2:
                    result.push(val);
                } else if (IS_EVERY) return false;
            }
          }
        }

        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
      };
    };

    'use strict';

    var dP$3 = _objectDp.f;

    var each = _arrayMethods(0);

    var _collection = function _collection(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
      var Base = _global[NAME];
      var C = Base;
      var ADDER = IS_MAP ? 'set' : 'add';
      var proto = C && C.prototype;
      var O = {};

      if (!_descriptors || typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails(function () {
        new C().entries().next();
      }))) {
        C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);

        _redefineAll(C.prototype, methods);

        _meta.NEED = true;
      } else {
        C = wrapper(function (target, iterable) {
          _anInstance(target, C, NAME, '_c');

          target._c = new Base();
          if (iterable != undefined) _forOf(iterable, IS_MAP, target[ADDER], target);
        });
        each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
          var IS_ADDER = KEY == 'add' || KEY == 'set';
          if (KEY in proto && !(IS_WEAK && KEY == 'clear')) _hide(C.prototype, KEY, function (a, b) {
            _anInstance(this, C, KEY);

            if (!IS_ADDER && IS_WEAK && !_isObject(a)) return KEY == 'get' ? undefined : false;

            var result = this._c[KEY](a === 0 ? 0 : a, b);

            return IS_ADDER ? this : result;
          });
        });
        IS_WEAK || dP$3(C.prototype, 'size', {
          get: function get() {
            return this._c.size;
          }
        });
      }

      _setToStringTag(C, NAME);

      O[NAME] = C;

      _export(_export.G + _export.W + _export.F, O);

      if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
      return C;
    };

    'use strict';

    var MAP = 'Map';

    var es6_map = _collection(MAP, function (get) {
      return function Map() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
      };
    }, {
      get: function get(key) {
        var entry = _collectionStrong.getEntry(_validateCollection(this, MAP), key);

        return entry && entry.v;
      },
      set: function set(key, value) {
        return _collectionStrong.def(_validateCollection(this, MAP), key === 0 ? 0 : key, value);
      }
    }, _collectionStrong, true);

    var _arrayFromIterable = function _arrayFromIterable(iter, ITERATOR) {
      var result = [];

      _forOf(iter, false, result.push, result, ITERATOR);

      return result;
    };

    var _collectionToJson = function _collectionToJson(NAME) {
      return function toJSON() {
        if (_classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
        return _arrayFromIterable(this);
      };
    };

    _export(_export.P + _export.R, 'Map', {
      toJSON: _collectionToJson('Map')
    });

    'use strict';

    var _setCollectionOf = function _setCollectionOf(COLLECTION) {
      _export(_export.S, COLLECTION, {
        of: function of() {
          var length = arguments.length;
          var A = Array(length);

          while (length--) {
            A[length] = arguments[length];
          }

          return new this(A);
        }
      });
    };

    _setCollectionOf('Map');

    'use strict';

    var _setCollectionFrom = function _setCollectionFrom(COLLECTION) {
      _export(_export.S, COLLECTION, {
        from: function from(source) {
          var mapFn = arguments[1];
          var mapping, A, n, cb;

          _aFunction(this);

          mapping = mapFn !== undefined;
          if (mapping) _aFunction(mapFn);
          if (source == undefined) return new this();
          A = [];

          if (mapping) {
            n = 0;
            cb = _ctx(mapFn, arguments[2], 2);

            _forOf(source, false, function (nextItem) {
              A.push(cb(nextItem, n++));
            });
          } else {
            _forOf(source, false, A.push, A);
          }

          return new this(A);
        }
      });
    };

    _setCollectionFrom('Map');

    var map$1 = _core.Map;
    var map = createCommonjsModule(function (module) {
      module.exports = {
        "default": map$1,
        __esModule: true
      };
    });

    var _Map = unwrapExports(map);

    'use strict';

    var colorName = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
    var conversions = createCommonjsModule(function (module) {
      var reverseKeywords = {};

      for (var key in colorName) {
        if (colorName.hasOwnProperty(key)) {
          reverseKeywords[colorName[key]] = key;
        }
      }

      var convert = module.exports = {
        rgb: {
          channels: 3,
          labels: 'rgb'
        },
        hsl: {
          channels: 3,
          labels: 'hsl'
        },
        hsv: {
          channels: 3,
          labels: 'hsv'
        },
        hwb: {
          channels: 3,
          labels: 'hwb'
        },
        cmyk: {
          channels: 4,
          labels: 'cmyk'
        },
        xyz: {
          channels: 3,
          labels: 'xyz'
        },
        lab: {
          channels: 3,
          labels: 'lab'
        },
        lch: {
          channels: 3,
          labels: 'lch'
        },
        hex: {
          channels: 1,
          labels: ['hex']
        },
        keyword: {
          channels: 1,
          labels: ['keyword']
        },
        ansi16: {
          channels: 1,
          labels: ['ansi16']
        },
        ansi256: {
          channels: 1,
          labels: ['ansi256']
        },
        hcg: {
          channels: 3,
          labels: ['h', 'c', 'g']
        },
        apple: {
          channels: 3,
          labels: ['r16', 'g16', 'b16']
        },
        gray: {
          channels: 1,
          labels: ['gray']
        }
      };

      for (var model in convert) {
        if (convert.hasOwnProperty(model)) {
          if (!('channels' in convert[model])) {
            throw new Error('missing channels property: ' + model);
          }

          if (!('labels' in convert[model])) {
            throw new Error('missing channel labels property: ' + model);
          }

          if (convert[model].labels.length !== convert[model].channels) {
            throw new Error('channel and label counts mismatch: ' + model);
          }

          var channels = convert[model].channels;
          var labels = convert[model].labels;
          delete convert[model].channels;
          delete convert[model].labels;
          Object.defineProperty(convert[model], 'channels', {
            value: channels
          });
          Object.defineProperty(convert[model], 'labels', {
            value: labels
          });
        }
      }

      convert.rgb.hsl = function (rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var h;
        var s;
        var l;

        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }

        h = Math.min(h * 60, 360);

        if (h < 0) {
          h += 360;
        }

        l = (min + max) / 2;

        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }

        return [h, s * 100, l * 100];
      };

      convert.rgb.hsv = function (rgb) {
        var r = rgb[0];
        var g = rgb[1];
        var b = rgb[2];
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var h;
        var s;
        var v;

        if (max === 0) {
          s = 0;
        } else {
          s = delta / max * 1000 / 10;
        }

        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }

        h = Math.min(h * 60, 360);

        if (h < 0) {
          h += 360;
        }

        v = max / 255 * 1000 / 10;
        return [h, s, v];
      };

      convert.rgb.hwb = function (rgb) {
        var r = rgb[0];
        var g = rgb[1];
        var b = rgb[2];
        var h = convert.rgb.hsl(rgb)[0];
        var w = 0.00392156862745098 * Math.min(r, Math.min(g, b));
        b = 1 - 0.00392156862745098 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };

      convert.rgb.cmyk = function (rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var c;
        var m;
        var y;
        var k;
        k = Math.min(1 - r, 1 - g, 1 - b);
        c = (1 - r - k) / (1 - k) || 0;
        m = (1 - g - k) / (1 - k) || 0;
        y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };

      function comparativeDistance(x, y) {
        return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
      }

      convert.rgb.keyword = function (rgb) {
        var reversed = reverseKeywords[rgb];

        if (reversed) {
          return reversed;
        }

        var currentClosestDistance = Infinity;
        var currentClosestKeyword;

        for (var keyword in colorName) {
          if (colorName.hasOwnProperty(keyword)) {
            var value = colorName[keyword];
            var distance = comparativeDistance(rgb, value);

            if (distance < currentClosestDistance) {
              currentClosestDistance = distance;
              currentClosestKeyword = keyword;
            }
          }
        }

        return currentClosestKeyword;
      };

      convert.keyword.rgb = function (keyword) {
        return colorName[keyword];
      };

      convert.rgb.xyz = function (rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
        g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
        b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
        var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };

      convert.rgb.lab = function (rgb) {
        var xyz = convert.rgb.xyz(rgb);
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
        y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
        z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
        l = 116 * y - 16;
        a = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a, b];
      };

      convert.hsl.rgb = function (hsl) {
        var h = hsl[0] / 360;
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var t1;
        var t2;
        var t3;
        var rgb;
        var val;

        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }

        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }

        t1 = 2 * l - t2;
        rgb = [0, 0, 0];

        for (var i = 0; i < 3; i++) {
          t3 = h + 0.3333333333333333 * -(i - 1);

          if (t3 < 0) {
            t3++;
          }

          if (t3 > 1) {
            t3--;
          }

          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (0.6666666666666666 - t3) * 6;
          } else {
            val = t1;
          }

          rgb[i] = val * 255;
        }

        return rgb;
      };

      convert.hsl.hsv = function (hsl) {
        var h = hsl[0];
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var smin = s;
        var lmin = Math.max(l, 0.01);
        var sv;
        var v;
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        v = (l + s) / 2;
        sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };

      convert.hsv.rgb = function (hsv) {
        var h = hsv[0] / 60;
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var hi = Math.floor(h) % 6;
        var f = h - Math.floor(h);
        var p = 255 * v * (1 - s);
        var q = 255 * v * (1 - s * f);
        var t = 255 * v * (1 - s * (1 - f));
        v *= 255;

        switch (hi) {
          case 0:
            return [v, t, p];

          case 1:
            return [q, v, p];

          case 2:
            return [p, v, t];

          case 3:
            return [p, q, v];

          case 4:
            return [t, p, v];

          case 5:
            return [v, p, q];
        }
      };

      convert.hsv.hsl = function (hsv) {
        var h = hsv[0];
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var vmin = Math.max(v, 0.01);
        var lmin;
        var sl;
        var l;
        l = (2 - s) * v;
        lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };

      convert.hwb.rgb = function (hwb) {
        var h = hwb[0] / 360;
        var wh = hwb[1] / 100;
        var bl = hwb[2] / 100;
        var ratio = wh + bl;
        var i;
        var v;
        var f;
        var n;

        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }

        i = Math.floor(6 * h);
        v = 1 - bl;
        f = 6 * h - i;

        if ((i & 0x01) !== 0) {
          f = 1 - f;
        }

        n = wh + f * (v - wh);
        var r;
        var g;
        var b;

        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;

          case 1:
            r = n;
            g = v;
            b = wh;
            break;

          case 2:
            r = wh;
            g = v;
            b = n;
            break;

          case 3:
            r = wh;
            g = n;
            b = v;
            break;

          case 4:
            r = n;
            g = wh;
            b = v;
            break;

          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }

        return [r * 255, g * 255, b * 255];
      };

      convert.cmyk.rgb = function (cmyk) {
        var c = cmyk[0] / 100;
        var m = cmyk[1] / 100;
        var y = cmyk[2] / 100;
        var k = cmyk[3] / 100;
        var r;
        var g;
        var b;
        r = 1 - Math.min(1, c * (1 - k) + k);
        g = 1 - Math.min(1, m * (1 - k) + k);
        b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };

      convert.xyz.rgb = function (xyz) {
        var x = xyz[0] / 100;
        var y = xyz[1] / 100;
        var z = xyz[2] / 100;
        var r;
        var g;
        var b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.2040 + z * 1.0570;
        r = r > 0.0031308 ? 1.055 * Math.pow(r, 0.4166666666666667) - 0.055 : r * 12.92;
        g = g > 0.0031308 ? 1.055 * Math.pow(g, 0.4166666666666667) - 0.055 : g * 12.92;
        b = b > 0.0031308 ? 1.055 * Math.pow(b, 0.4166666666666667) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };

      convert.xyz.lab = function (xyz) {
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
        y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
        z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
        l = 116 * y - 16;
        a = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a, b];
      };

      convert.lab.xyz = function (lab) {
        var l = lab[0];
        var a = lab[1];
        var b = lab[2];
        var x;
        var y;
        var z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        var y2 = Math.pow(y, 3);
        var x2 = Math.pow(x, 3);
        var z2 = Math.pow(z, 3);
        y = y2 > 0.008856 ? y2 : (y - 0.13793103448275862) / 7.787;
        x = x2 > 0.008856 ? x2 : (x - 0.13793103448275862) / 7.787;
        z = z2 > 0.008856 ? z2 : (z - 0.13793103448275862) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };

      convert.lab.lch = function (lab) {
        var l = lab[0];
        var a = lab[1];
        var b = lab[2];
        var hr;
        var h;
        var c;
        hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;

        if (h < 0) {
          h += 360;
        }

        c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };

      convert.lch.lab = function (lch) {
        var l = lch[0];
        var c = lch[1];
        var h = lch[2];
        var a;
        var b;
        var hr;
        hr = h / 360 * 2 * Math.PI;
        a = c * Math.cos(hr);
        b = c * Math.sin(hr);
        return [l, a, b];
      };

      convert.rgb.ansi16 = function (args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
        value = Math.round(value / 50);

        if (value === 0) {
          return 30;
        }

        var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

        if (value === 2) {
          ansi += 60;
        }

        return ansi;
      };

      convert.hsv.ansi16 = function (args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };

      convert.rgb.ansi256 = function (args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];

        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }

          if (r > 248) {
            return 231;
          }

          return Math.round((r - 8) / 247 * 24) + 232;
        }

        var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };

      convert.ansi16.rgb = function (args) {
        var color = args % 10;

        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }

          color = color / 10.5 * 255;
          return [color, color, color];
        }

        var mult = (~~(args > 50) + 1) * 0.5;
        var r = (color & 1) * mult * 255;
        var g = (color >> 1 & 1) * mult * 255;
        var b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };

      convert.ansi256.rgb = function (args) {
        if (args >= 232) {
          var c = (args - 232) * 10 + 8;
          return [c, c, c];
        }

        args -= 16;
        var rem;
        var r = Math.floor(args / 36) / 5 * 255;
        var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        var b = rem % 6 / 5 * 255;
        return [r, g, b];
      };

      convert.rgb.hex = function (args) {
        var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
        var string = integer.toString(16).toUpperCase();
        return '000000'.substring(string.length) + string;
      };

      convert.hex.rgb = function (args) {
        var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

        if (!match) {
          return [0, 0, 0];
        }

        var colorString = match[0];

        if (match[0].length === 3) {
          colorString = colorString.split('').map(function (char) {
            return char + char;
          }).join('');
        }

        var integer = parseInt(colorString, 16);
        var r = integer >> 16 & 0xFF;
        var g = integer >> 8 & 0xFF;
        var b = integer & 0xFF;
        return [r, g, b];
      };

      convert.rgb.hcg = function (rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var max = Math.max(Math.max(r, g), b);
        var min = Math.min(Math.min(r, g), b);
        var chroma = max - min;
        var grayscale;
        var hue;

        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }

        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma + 4;
        }

        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };

      convert.hsl.hcg = function (hsl) {
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var c = 1;
        var f = 0;

        if (l < 0.5) {
          c = 2.0 * s * l;
        } else {
          c = 2.0 * s * (1.0 - l);
        }

        if (c < 1.0) {
          f = (l - 0.5 * c) / (1.0 - c);
        }

        return [hsl[0], c * 100, f * 100];
      };

      convert.hsv.hcg = function (hsv) {
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var c = s * v;
        var f = 0;

        if (c < 1.0) {
          f = (v - c) / (1 - c);
        }

        return [hsv[0], c * 100, f * 100];
      };

      convert.hcg.rgb = function (hcg) {
        var h = hcg[0] / 360;
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;

        if (c === 0.0) {
          return [g * 255, g * 255, g * 255];
        }

        var pure = [0, 0, 0];
        var hi = h % 1 * 6;
        var v = hi % 1;
        var w = 1 - v;
        var mg = 0;

        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;

          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;

          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;

          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;

          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;

          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }

        mg = (1.0 - c) * g;
        return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
      };

      convert.hcg.hsv = function (hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1.0 - c);
        var f = 0;

        if (v > 0.0) {
          f = c / v;
        }

        return [hcg[0], f * 100, v * 100];
      };

      convert.hcg.hsl = function (hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var l = g * (1.0 - c) + 0.5 * c;
        var s = 0;

        if (l > 0.0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1.0) {
          s = c / (2 * (1 - l));
        }

        return [hcg[0], s * 100, l * 100];
      };

      convert.hcg.hwb = function (hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1.0 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };

      convert.hwb.hcg = function (hwb) {
        var w = hwb[1] / 100;
        var b = hwb[2] / 100;
        var v = 1 - b;
        var c = v - w;
        var g = 0;

        if (c < 1) {
          g = (v - c) / (1 - c);
        }

        return [hwb[0], c * 100, g * 100];
      };

      convert.apple.rgb = function (apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };

      convert.rgb.apple = function (rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };

      convert.gray.rgb = function (args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };

      convert.gray.hsl = convert.gray.hsv = function (args) {
        return [0, 0, args[0]];
      };

      convert.gray.hwb = function (gray) {
        return [0, 100, gray[0]];
      };

      convert.gray.cmyk = function (gray) {
        return [0, 0, 0, gray[0]];
      };

      convert.gray.lab = function (gray) {
        return [gray[0], 0, 0];
      };

      convert.gray.hex = function (gray) {
        var val = Math.round(gray[0] / 100 * 255) & 0xFF;
        var integer = (val << 16) + (val << 8) + val;
        var string = integer.toString(16).toUpperCase();
        return '000000'.substring(string.length) + string;
      };

      convert.rgb.gray = function (rgb) {
        var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    });
    var models$1 = Object.keys(conversions);

    function buildGraph() {
      var graph = {};

      for (var len = models$1.length, i = 0; i < len; i++) {
        graph[models$1[i]] = {
          distance: -1,
          parent: null
        };
      }

      return graph;
    }

    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;

      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);

        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];

          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }

      return graph;
    }

    function link(from, to) {
      return function (args) {
        return to(from(args));
      };
    }

    function wrapConversion(toModel, graph) {
      var path = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;

      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }

      fn.conversion = path;
      return fn;
    }

    var route = function route(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);

      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];

        if (node.parent === null) {
          continue;
        }

        conversion[toModel] = wrapConversion(toModel, graph);
      }

      return conversion;
    };

    var convert = {};
    var models = Object.keys(conversions);

    function wrapRaw(fn) {
      var wrappedFn = function wrappedFn(args) {
        if (args === undefined || args === null) {
          return args;
        }

        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }

        return fn(args);
      };

      if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    function wrapRounded(fn) {
      var wrappedFn = function wrappedFn(args) {
        if (args === undefined || args === null) {
          return args;
        }

        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }

        var result = fn(args);

        if (typeof result === 'object') {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }

        return result;
      };

      if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    models.forEach(function (fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], 'channels', {
        value: conversions[fromModel].channels
      });
      Object.defineProperty(convert[fromModel], 'labels', {
        value: conversions[fromModel].labels
      });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function (toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    var colorConvert = convert;
    'use strict';

    var ansiStyles = createCommonjsModule(function (module) {
      'use strict';

      var wrapAnsi16 = function wrapAnsi16(fn, offset) {
        return function () {
          var code = fn.apply(colorConvert, arguments);
          return '\x1B[' + (code + offset) + 'm';
        };
      };

      var wrapAnsi256 = function wrapAnsi256(fn, offset) {
        return function () {
          var code = fn.apply(colorConvert, arguments);
          return '\x1B[' + (38 + offset) + ';5;' + code + 'm';
        };
      };

      var wrapAnsi16m = function wrapAnsi16m(fn, offset) {
        return function () {
          var rgb = fn.apply(colorConvert, arguments);
          return '\x1B[' + (38 + offset) + ';2;' + rgb[0] + ';' + rgb[1] + ';' + rgb[2] + 'm';
        };
      };

      function assembleStyles() {
        var codes = new _Map();
        var styles = {
          modifier: {
            reset: [0, 0],
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            gray: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.grey = styles.color.gray;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(_Object$keys(styles)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var groupName = _step.value;
            var group = styles[groupName];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = _getIterator(_Object$keys(group)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var styleName = _step3.value;
                var style = group[styleName];
                styles[styleName] = {
                  open: '\x1B[' + style[0] + 'm',
                  close: '\x1B[' + style[1] + 'm'
                };
                group[styleName] = styles[styleName];
                codes.set(style[0], style[1]);
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            _Object$defineProperty(styles, groupName, {
              value: group,
              enumerable: false
            });

            Object.defineProperty(styles, 'codes', {
              value: codes,
              enumerable: false
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var rgb2rgb = function rgb2rgb(r, g, b) {
          return [r, g, b];
        };

        styles.color.close = '\x1B[39m';
        styles.bgColor.close = '\x1B[49m';
        styles.color.ansi = {};
        styles.color.ansi256 = {};
        styles.color.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 0)
        };
        styles.bgColor.ansi = {};
        styles.bgColor.ansi256 = {};
        styles.bgColor.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 10)
        };
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _getIterator(_Object$keys(colorConvert)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            if (_typeof(colorConvert[key]) !== 'object') {
              continue;
            }

            var suite = colorConvert[key];

            if ('ansi16' in suite) {
              styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
              styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
            }

            if ('ansi256' in suite) {
              styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
              styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
            }

            if ('rgb' in suite) {
              styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
              styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return styles;
      }

      Object.defineProperty(module, 'exports', {
        enumerable: true,
        get: assembleStyles
      });
    });
    var getOwnPropertySymbols$1 = _core.Object.getOwnPropertySymbols;
    var getOwnPropertySymbols = createCommonjsModule(function (module) {
      module.exports = {
        "default": getOwnPropertySymbols$1,
        __esModule: true
      };
    });

    var _Object$getOwnPropertySymbols = unwrapExports(getOwnPropertySymbols);

    'use strict';

    var getSymbols = _Object$getOwnPropertySymbols || function (obj) {
      return [];
    };

    var isSymbol$1 = function isSymbol(key) {
      return (typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'symbol' || toString.call(key) === '[object Symbol]';
    };

    function printIteratorEntries(iterator, config, indentation, depth, refs, printer) {
      var separator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ': ';
      var result = '';
      var current = iterator.next();

      if (!current.done) {
        result += config.spacingOuter;
        var indentationNext = indentation + config.indent;

        while (!current.done) {
          var name = printer(current.value[0], config, indentationNext, depth, refs);
          var value = printer(current.value[1], config, indentationNext, depth, refs);
          result += indentationNext + name + separator + value;
          current = iterator.next();

          if (!current.done) {
            result += ',' + config.spacingInner;
          } else if (!config.min) {
            result += ',';
          }
        }

        result += config.spacingOuter + indentation;
      }

      return result;
    }

    function printIteratorValues(iterator, config, indentation, depth, refs, printer) {
      var result = '';
      var current = iterator.next();

      if (!current.done) {
        result += config.spacingOuter;
        var indentationNext = indentation + config.indent;

        while (!current.done) {
          result += indentationNext + printer(current.value, config, indentationNext, depth, refs);
          current = iterator.next();

          if (!current.done) {
            result += ',' + config.spacingInner;
          } else if (!config.min) {
            result += ',';
          }
        }

        result += config.spacingOuter + indentation;
      }

      return result;
    }

    function printListItems(list, config, indentation, depth, refs, printer) {
      var result = '';

      if (list.length) {
        result += config.spacingOuter;
        var indentationNext = indentation + config.indent;

        for (var i = 0; i < list.length; i++) {
          result += indentationNext + printer(list[i], config, indentationNext, depth, refs);

          if (i < list.length - 1) {
            result += ',' + config.spacingInner;
          } else if (!config.min) {
            result += ',';
          }
        }

        result += config.spacingOuter + indentation;
      }

      return result;
    }

    function printObjectProperties(val, config, indentation, depth, refs, printer) {
      var result = '';

      var keys$$1 = _Object$keys(val).sort();

      var symbols = getSymbols(val);

      if (symbols.length) {
        keys$$1 = keys$$1.filter(function (key) {
          return !isSymbol$1(key);
        }).concat(symbols);
      }

      if (keys$$1.length) {
        result += config.spacingOuter;
        var indentationNext = indentation + config.indent;

        for (var i = 0; i < keys$$1.length; i++) {
          var key = keys$$1[i];
          var name = printer(key, config, indentationNext, depth, refs);
          var value = printer(val[key], config, indentationNext, depth, refs);
          result += indentationNext + name + ': ' + value;

          if (i < keys$$1.length - 1) {
            result += ',' + config.spacingInner;
          } else if (!config.min) {
            result += ',';
          }
        }

        result += config.spacingOuter + indentation;
      }

      return result;
    }

    var _for$1 = _core.Symbol['for'];

    var _for = createCommonjsModule(function (module) {
      module.exports = {
        "default": _for$1,
        __esModule: true
      };
    });

    var _Symbol$for = unwrapExports(_for);

    'use strict';

    var asymmetricMatcher = _Symbol$for('jest.asymmetricMatcher');

    var SPACE = ' ';

    var serialize = function serialize(val, config, indentation, depth, refs, printer) {
      var stringedValue = val.toString();

      if (stringedValue === 'ArrayContaining') {
        if (++depth > config.maxDepth) {
          return '[' + stringedValue + ']';
        }

        return stringedValue + SPACE + '[' + printListItems(val.sample, config, indentation, depth, refs, printer) + ']';
      }

      if (stringedValue === 'ObjectContaining') {
        if (++depth > config.maxDepth) {
          return '[' + stringedValue + ']';
        }

        return stringedValue + SPACE + '{' + printObjectProperties(val.sample, config, indentation, depth, refs, printer) + '}';
      }

      if (stringedValue === 'StringMatching') {
        return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
      }

      if (stringedValue === 'StringContaining') {
        return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
      }

      return val.toAsymmetricMatcher();
    };

    var test = function test(val) {
      return val && val.$$typeof === asymmetricMatcher;
    };

    var AsymmetricMatcher = {
      serialize: serialize,
      test: test
    };
    'use strict';

    var ansiRegex = createCommonjsModule(function (module) {
      'use strict';

      module.exports = function () {
        var pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)", '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))'].join('|');
        return new RegExp(pattern, 'g');
      };
    });
    'use strict';

    var toHumanReadableAnsi = function toHumanReadableAnsi(text) {
      return text.replace(ansiRegex(), function (match, offset, string) {
        switch (match) {
          case ansiStyles.red.close:
          case ansiStyles.green.close:
          case ansiStyles.cyan.close:
          case ansiStyles.gray.close:
          case ansiStyles.white.close:
          case ansiStyles.yellow.close:
          case ansiStyles.bgRed.close:
          case ansiStyles.bgGreen.close:
          case ansiStyles.bgCyan.close:
          case ansiStyles.inverse.close:
          case ansiStyles.dim.close:
          case ansiStyles.bold.close:
          case ansiStyles.reset.open:
          case ansiStyles.reset.close:
            return '</>';

          case ansiStyles.red.open:
            return '<red>';

          case ansiStyles.green.open:
            return '<green>';

          case ansiStyles.cyan.open:
            return '<cyan>';

          case ansiStyles.gray.open:
            return '<gray>';

          case ansiStyles.white.open:
            return '<white>';

          case ansiStyles.yellow.open:
            return '<yellow>';

          case ansiStyles.bgRed.open:
            return '<bgRed>';

          case ansiStyles.bgGreen.open:
            return '<bgGreen>';

          case ansiStyles.bgCyan.open:
            return '<bgCyan>';

          case ansiStyles.inverse.open:
            return '<inverse>';

          case ansiStyles.dim.open:
            return '<dim>';

          case ansiStyles.bold.open:
            return '<bold>';

          default:
            return '';
        }
      });
    };

    var test$1 = function test(val) {
      return typeof val === 'string' && val.match(ansiRegex());
    };

    var serialize$1 = function serialize(val, config, indentation, depth, refs, printer) {
      return printer(toHumanReadableAnsi(val), config, indentation, depth, refs);
    };

    var ConvertAnsi = {
      serialize: serialize$1,
      test: test$1
    };
    'use strict';

    function escapeHTML(str) {
      return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    'use strict';

    var printProps = function printProps(keys, props, config, indentation, depth, refs, printer) {
      var indentationNext = indentation + config.indent;
      var colors = config.colors;
      return keys.map(function (key) {
        var value = props[key];
        var printed = printer(value, config, indentationNext, depth, refs);

        if (typeof value !== 'string') {
          if (printed.indexOf('\n') !== -1) {
            printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;
          }

          printed = '{' + printed + '}';
        }

        return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + '=' + colors.value.open + printed + colors.value.close;
      }).join('');
    };

    var printChildren = function printChildren(children, config, indentation, depth, refs, printer) {
      return children.map(function (child) {
        return config.spacingOuter + indentation + (typeof child === 'string' ? printText(child, config) : printer(child, config, indentation, depth, refs));
      }).join('');
    };

    var printText = function printText(text, config) {
      var contentColor = config.colors.content;
      return contentColor.open + escapeHTML(text) + contentColor.close;
    };

    var printComment = function printComment(comment, config) {
      var commentColor = config.colors.comment;
      return commentColor.open + '<!--' + escapeHTML(comment) + '-->' + commentColor.close;
    };

    var printElement = function printElement(type, printedProps, printedChildren, config, indentation) {
      var tagColor = config.colors.tag;
      return tagColor.open + '<' + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? '>' + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + '</' + type : (printedProps && !config.min ? '' : ' ') + '/') + '>' + tagColor.close;
    };

    var printElementAsLeaf = function printElementAsLeaf(type, config) {
      var tagColor = config.colors.tag;
      return tagColor.open + '<' + type + tagColor.close + ' …' + tagColor.open + ' />' + tagColor.close;
    };

    'use strict';

    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var ELEMENT_REGEXP = /^(HTML|SVG)\w*?Element$/;

    var testNode = function testNode(nodeType, name) {
      return nodeType === ELEMENT_NODE && ELEMENT_REGEXP.test(name) || nodeType === TEXT_NODE && name === 'Text' || nodeType === COMMENT_NODE && name === 'Comment';
    };

    var test$2 = function test(val) {
      return val && val.constructor && val.constructor.name && testNode(val.nodeType, val.constructor.name);
    };

    var keysMapper = function keysMapper(attribute) {
      return attribute.name;
    };

    var propsReducer = function propsReducer(props, attribute) {
      props[attribute.name] = attribute.value;
      return props;
    };

    var serialize$2 = function serialize(node, config, indentation, depth, refs, printer) {
      if (node.nodeType === TEXT_NODE) {
        return printText(node.data, config);
      }

      if (node.nodeType === COMMENT_NODE) {
        return printComment(node.data, config);
      }

      var type = node.tagName.toLowerCase();

      if (++depth > config.maxDepth) {
        return printElementAsLeaf(type, config);
      }

      return printElement(type, printProps(Array.prototype.map.call(node.attributes, keysMapper).sort(), Array.prototype.reduce.call(node.attributes, propsReducer, {}), config, indentation + config.indent, depth, refs, printer), printChildren(Array.prototype.slice.call(node.childNodes), config, indentation + config.indent, depth, refs, printer), config, indentation);
    };

    var DOMElement = {
      serialize: serialize$2,
      test: test$2
    };
    'use strict';

    var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
    var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';
    var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
    var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';
    var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
    var IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@';
    var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';
    var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';
    var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

    var getImmutableName = function getImmutableName(name) {
      return 'Immutable.' + name;
    };

    var printAsLeaf = function printAsLeaf(name) {
      return '[' + name + ']';
    };

    var SPACE$1 = ' ';
    var LAZY = '…';

    var printImmutableEntries = function printImmutableEntries(val, config, indentation, depth, refs, printer, type) {
      return ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE$1 + '{' + printIteratorEntries(val.entries(), config, indentation, depth, refs, printer) + '}';
    };

    var getRecordEntries = function getRecordEntries(val) {
      var i = 0;
      return {
        next: function next() {
          if (i < val._keys.length) {
            var key = val._keys[i++];
            return {
              done: false,
              value: [key, val.get(key)]
            };
          }

          return {
            done: true
          };
        }
      };
    };

    var printImmutableRecord = function printImmutableRecord(val, config, indentation, depth, refs, printer) {
      var name = getImmutableName(val._name || 'Record');
      var entries = _typeof(Array.isArray(val._keys)) ? getRecordEntries(val) : val.entries();
      return ++depth > config.maxDepth ? printAsLeaf(name) : name + SPACE$1 + '{' + printIteratorEntries(entries, config, indentation, depth, refs, printer) + '}';
    };

    var printImmutableSeq = function printImmutableSeq(val, config, indentation, depth, refs, printer) {
      var name = getImmutableName('Seq');

      if (++depth > config.maxDepth) {
        return printAsLeaf(name);
      }

      if (val[IS_KEYED_SENTINEL]) {
        return name + SPACE$1 + '{' + (val._iter || val._object ? printIteratorEntries(val.entries(), config, indentation, depth, refs, printer) : LAZY) + '}';
      }

      return name + SPACE$1 + '[' + (val._iter || val._array || val._collection || val._iterable ? printIteratorValues(val.values(), config, indentation, depth, refs, printer) : LAZY) + ']';
    };

    var printImmutableValues = function printImmutableValues(val, config, indentation, depth, refs, printer, type) {
      return ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE$1 + '[' + printIteratorValues(val.values(), config, indentation, depth, refs, printer) + ']';
    };

    var serialize$3 = function serialize(val, config, indentation, depth, refs, printer) {
      if (val[IS_MAP_SENTINEL]) {
        return printImmutableEntries(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map');
      }

      if (val[IS_LIST_SENTINEL]) {
        return printImmutableValues(val, config, indentation, depth, refs, printer, 'List');
      }

      if (val[IS_SET_SENTINEL]) {
        return printImmutableValues(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set');
      }

      if (val[IS_STACK_SENTINEL]) {
        return printImmutableValues(val, config, indentation, depth, refs, printer, 'Stack');
      }

      if (val[IS_SEQ_SENTINEL]) {
        return printImmutableSeq(val, config, indentation, depth, refs, printer);
      }

      return printImmutableRecord(val, config, indentation, depth, refs, printer);
    };

    var test$3 = function test(val) {
      return val && (val[IS_ITERABLE_SENTINEL] || val[IS_RECORD_SENTINEL]);
    };

    var Immutable = {
      serialize: serialize$3,
      test: test$3
    };
    'use strict';

    var elementSymbol = _Symbol$for('react.element');

    var getChildren = function getChildren(arg) {
      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (Array.isArray(arg)) {
        arg.forEach(function (item) {
          getChildren(item, children);
        });
      } else if (arg != null && arg !== false) {
        children.push(arg);
      }

      return children;
    };

    var getType = function getType(element) {
      if (typeof element.type === 'string') {
        return element.type;
      }

      if (typeof element.type === 'function') {
        return element.type.displayName || element.type.name || 'Unknown';
      }

      return 'UNDEFINED';
    };

    var serialize$4 = function serialize(element, config, indentation, depth, refs, printer) {
      return ++depth > config.maxDepth ? printElementAsLeaf(getType(element), config) : printElement(getType(element), printProps(_Object$keys(element.props).filter(function (key) {
        return key !== 'children';
      }).sort(), element.props, config, indentation + config.indent, depth, refs, printer), printChildren(getChildren(element.props.children), config, indentation + config.indent, depth, refs, printer), config, indentation);
    };

    var test$4 = function test(val) {
      return val && val.$$typeof === elementSymbol;
    };

    var ReactElement = {
      serialize: serialize$4,
      test: test$4
    };
    'use strict';

    var testSymbol = _Symbol$for('react.test.json');

    var serialize$5 = function serialize(object, config, indentation, depth, refs, printer) {
      return ++depth > config.maxDepth ? printElementAsLeaf(object.type, config) : printElement(object.type, object.props ? printProps(_Object$keys(object.props).sort(), object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? printChildren(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);
    };

    var test$5 = function test(val) {
      return val && val.$$typeof === testSymbol;
    };

    var ReactTestComponent = {
      serialize: serialize$5,
      test: test$5
    };
    'use strict';

    var toString$1 = Object.prototype.toString;
    var toISOString = Date.prototype.toISOString;
    var errorToString = Error.prototype.toString;
    var regExpToString = RegExp.prototype.toString;
    var symbolToString = _Symbol.prototype.toString;
    var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
    var NEWLINE_REGEXP = /\n/gi;

    function isToStringedArrayType(toStringed) {
      return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
    }

    function printNumber(val) {
      if (val != +val) {
        return 'NaN';
      }

      var isNegativeZero = val === 0 && 1 / val < 0;
      return isNegativeZero ? '-0' : '' + val;
    }

    function printFunction(val, printFunctionName) {
      if (!printFunctionName) {
        return '[Function]';
      }

      return '[Function ' + (val.name || 'anonymous') + ']';
    }

    function printSymbol(val) {
      return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
    }

    function printError(val) {
      return '[' + errorToString.call(val) + ']';
    }

    function printBasicValue(val, printFunctionName, escapeRegex) {
      if (val === true || val === false) {
        return '' + val;
      }

      if (val === undefined) {
        return 'undefined';
      }

      if (val === null) {
        return 'null';
      }

      var typeOf = typeof val === 'undefined' ? 'undefined' : _typeof(val);

      if (typeOf === 'number') {
        return printNumber(val);
      }

      if (typeOf === 'string') {
        return '"' + val.replace(/"|\\/g, '\\$&') + '"';
      }

      if (typeOf === 'function') {
        return printFunction(val, printFunctionName);
      }

      if (typeOf === 'symbol') {
        return printSymbol(val);
      }

      var toStringed = toString$1.call(val);

      if (toStringed === '[object WeakMap]') {
        return 'WeakMap {}';
      }

      if (toStringed === '[object WeakSet]') {
        return 'WeakSet {}';
      }

      if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') {
        return printFunction(val, printFunctionName);
      }

      if (toStringed === '[object Symbol]') {
        return printSymbol(val);
      }

      if (toStringed === '[object Date]') {
        return toISOString.call(val);
      }

      if (toStringed === '[object Error]') {
        return printError(val);
      }

      if (toStringed === '[object RegExp]') {
        if (escapeRegex) {
          return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
        }

        return regExpToString.call(val);
      }

      if (val instanceof Error) {
        return printError(val);
      }

      return null;
    }

    function printComplexValue(val, config, indentation, depth, refs) {
      if (refs.indexOf(val) !== -1) {
        return '[Circular]';
      }

      refs = refs.slice();
      refs.push(val);
      var hitMaxDepth = ++depth > config.maxDepth;
      var min = config.min;

      if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function') {
        return printer(val.toJSON(), config, indentation, depth, refs);
      }

      var toStringed = toString$1.call(val);

      if (toStringed === '[object Arguments]') {
        return hitMaxDepth ? '[Arguments]' : (min ? '' : 'Arguments ') + '[' + printListItems(val, config, indentation, depth, refs, printer) + ']';
      }

      if (isToStringedArrayType(toStringed)) {
        return hitMaxDepth ? '[' + val.constructor.name + ']' : (min ? '' : val.constructor.name + ' ') + '[' + printListItems(val, config, indentation, depth, refs, printer) + ']';
      }

      if (toStringed === '[object Map]') {
        return hitMaxDepth ? '[Map]' : 'Map {' + printIteratorEntries(val.entries(), config, indentation, depth, refs, printer, ' => ') + '}';
      }

      if (toStringed === '[object Set]') {
        return hitMaxDepth ? '[Set]' : 'Set {' + printIteratorValues(val.values(), config, indentation, depth, refs, printer) + '}';
      }

      return hitMaxDepth ? '[' + (val.constructor ? val.constructor.name : 'Object') + ']' : (min ? '' : (val.constructor ? val.constructor.name : 'Object') + ' ') + '{' + printObjectProperties(val, config, indentation, depth, refs, printer) + '}';
    }

    function printPlugin(plugin, val, config, indentation, depth, refs) {
      var printed = plugin.serialize ? plugin.serialize(val, config, indentation, depth, refs, printer) : plugin.print(val, function (valChild) {
        return printer(valChild, config, indentation, depth, refs);
      }, function (str) {
        var indentationNext = indentation + config.indent;
        return indentationNext + str.replace(NEWLINE_REGEXP, '\n' + indentationNext);
      }, {
        edgeSpacing: config.spacingOuter,
        min: config.min,
        spacing: config.spacingInner
      }, config.colors);

      if (typeof printed !== 'string') {
        throw new Error('pretty-format: Plugin must return type "string" but instead returned "' + (typeof printed === 'undefined' ? 'undefined' : _typeof(printed)) + '".');
      }

      return printed;
    }

    function findPlugin(plugins, val) {
      for (var p = 0; p < plugins.length; p++) {
        if (plugins[p].test(val)) {
          return plugins[p];
        }
      }

      return null;
    }

    function printer(val, config, indentation, depth, refs) {
      var plugin = findPlugin(config.plugins, val);

      if (plugin !== null) {
        return printPlugin(plugin, val, config, indentation, depth, refs);
      }

      var basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex);

      if (basicResult !== null) {
        return basicResult;
      }

      return printComplexValue(val, config, indentation, depth, refs);
    }

    var DEFAULT_THEME = {
      comment: 'gray',
      content: 'reset',
      prop: 'yellow',
      tag: 'cyan',
      value: 'green'
    };

    var DEFAULT_THEME_KEYS = _Object$keys(DEFAULT_THEME);

    var DEFAULT_OPTIONS = {
      callToJSON: true,
      escapeRegex: false,
      highlight: false,
      indent: 2,
      maxDepth: Infinity,
      min: false,
      plugins: [],
      printFunctionName: true,
      theme: DEFAULT_THEME
    };

    function validateOptions(options) {
      _Object$keys(options).forEach(function (key) {
        if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
          throw new Error('pretty-format: Unknown option "' + key + '".');
        }
      });

      if (options.min && options.indent !== undefined && options.indent !== 0) {
        throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
      }

      if (options.theme !== undefined) {
        if (options.theme === null) {
          throw new Error('pretty-format: Option "theme" must not be null.');
        }

        if (_typeof(options.theme) !== 'object') {
          throw new Error('pretty-format: Option "theme" must be of type "object" but instead received "' + _typeof(options.theme) + '".');
        }
      }
    }

    var getColorsHighlight = function getColorsHighlight(options) {
      return DEFAULT_THEME_KEYS.reduce(function (colors, key) {
        var value = options.theme && options.theme[key] !== undefined ? options.theme[key] : DEFAULT_THEME[key];
        var color = ansiStyles[value];

        if (color && typeof color.close === 'string' && typeof color.open === 'string') {
          colors[key] = color;
        } else {
          throw new Error('pretty-format: Option "theme" has a key "' + key + '" whose value "' + value + '" is undefined in ansi-styles.');
        }

        return colors;
      }, {});
    };

    var getColorsEmpty = function getColorsEmpty() {
      return DEFAULT_THEME_KEYS.reduce(function (colors, key) {
        colors[key] = {
          close: '',
          open: ''
        };
        return colors;
      }, {});
    };

    var getPrintFunctionName = function getPrintFunctionName(options) {
      return options && options.printFunctionName !== undefined ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName;
    };

    var getEscapeRegex = function getEscapeRegex(options) {
      return options && options.escapeRegex !== undefined ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex;
    };

    var getConfig = function getConfig(options) {
      return {
        callToJSON: options && options.callToJSON !== undefined ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,
        colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),
        escapeRegex: getEscapeRegex(options),
        indent: options && options.min ? '' : createIndent(options && options.indent !== undefined ? options.indent : DEFAULT_OPTIONS.indent),
        maxDepth: options && options.maxDepth !== undefined ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,
        min: options && options.min !== undefined ? options.min : DEFAULT_OPTIONS.min,
        plugins: options && options.plugins !== undefined ? options.plugins : DEFAULT_OPTIONS.plugins,
        printFunctionName: getPrintFunctionName(options),
        spacingInner: options && options.min ? ' ' : '\n',
        spacingOuter: options && options.min ? '' : '\n'
      };
    };

    function createIndent(indent) {
      return new Array(indent + 1).join(' ');
    }

    function prettyFormat(val, options) {
      if (options) {
        validateOptions(options);

        if (options.plugins) {
          var plugin = findPlugin(options.plugins, val);

          if (plugin !== null) {
            return printPlugin(plugin, val, getConfig(options), '', 0, []);
          }
        }
      }

      var basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options));

      if (basicResult !== null) {
        return basicResult;
      }

      return printComplexValue(val, getConfig(options), '', 0, []);
    }

    prettyFormat.plugins = {
      AsymmetricMatcher: AsymmetricMatcher,
      ConvertAnsi: ConvertAnsi,
      DOMElement: DOMElement,
      Immutable: Immutable,
      ReactElement: ReactElement,
      ReactTestComponent: ReactTestComponent
    };
    module.exports = prettyFormat;
  });
},322,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _reactNative = _require(_dependencyMap[1]);

  var _Permissions = _require(_dependencyMap[2]);

  var Permissions = babelHelpers.interopRequireWildcard(_Permissions);
  var LocationEventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.ExponentLocation);
  var ExponentLocation = _reactNative.NativeModules.ExponentLocation;
  var nextWatchId = 0;
  var headingId = void 0;

  function _getNextWatchId() {
    nextWatchId++;
    return nextWatchId;
  }

  function _getCurrentWatchId() {
    return nextWatchId;
  }

  var watchCallbacks = {};
  var deviceEventSubscription = void 0;
  var headingEventSub = void 0;
  var googleApiKey = void 0;
  var googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';

  function getProviderStatusAsync() {
    return ExponentLocation.getProviderStatusAsync();
  }

  function getCurrentPositionAsync() {
    var _this = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    {
      return ExponentLocation.getCurrentPositionAsync(options);
    }
    return new Promise(function _callee(resolve, reject) {
      var done, subscription;
      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              done = false;
              subscription = void 0;
              _context.next = 5;
              return regeneratorRuntime.awrap(watchPositionAsync(options, function (location) {
                if (!done) {
                  resolve(location);
                  done = true;
                }

                subscription && subscription.remove();
                subscription = null;
              }));

            case 5:
              subscription = _context.sent;

              if (done) {
                subscription && subscription.remove();
                subscription = null;
              }

              _context.next = 12;
              break;

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](0);
              reject(_context.t0);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, _this, [[0, 9]]);
    });
  }

  function getHeadingAsync() {
    var _this2 = this;

    return regeneratorRuntime.async(function getHeadingAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", new Promise(function _callee2(resolve, reject) {
              var tries, headingSub, done, subscription, _tries;

              return regeneratorRuntime.async(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.prev = 0;

                      if (!headingEventSub) {
                        _context2.next = 6;
                        break;
                      }

                      tries = 0;
                      headingSub = LocationEventEmitter.addListener('Exponent.headingChanged', function (_ref) {
                        var watchId = _ref.watchId,
                            heading = _ref.heading;

                        if (heading.accuracy > 1 || tries > 5) {
                          resolve(heading);
                          LocationEventEmitter.removeSubscription(headingSub);
                        } else {
                          tries += 1;
                        }
                      });
                      _context2.next = 13;
                      break;

                    case 6:
                      done = false;
                      subscription = void 0;
                      _tries = 0;
                      _context2.next = 11;
                      return regeneratorRuntime.awrap(watchHeadingAsync(function (heading) {
                        if (!done) {
                          if (heading.accuracy > 1 || _tries > 5) {
                            subscription.remove();
                            resolve(heading);
                            done = true;
                          } else {
                            _tries += 1;
                          }
                        } else {
                          subscription.remove();
                        }
                      }));

                    case 11:
                      subscription = _context2.sent;

                      if (done) {
                        subscription.remove();
                      }

                    case 13:
                      _context2.next = 18;
                      break;

                    case 15:
                      _context2.prev = 15;
                      _context2.t0 = _context2["catch"](0);
                      reject(_context2.t0);

                    case 18:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, null, _this2, [[0, 15]]);
            }));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function watchHeadingAsync(callback) {
    return regeneratorRuntime.async(function watchHeadingAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (headingEventSub) {
              _removeHeadingWatcher(headingId);
            }

            headingEventSub = LocationEventEmitter.addListener('Exponent.headingChanged', function (_ref2) {
              var watchId = _ref2.watchId,
                  heading = _ref2.heading;
              var callback = watchCallbacks[watchId];

              if (callback) {
                callback(heading);
              } else {
                ExponentLocation.removeWatchAsync(watchId);
              }
            });
            headingId = _getNextWatchId();
            watchCallbacks[headingId] = callback;
            _context4.next = 6;
            return regeneratorRuntime.awrap(ExponentLocation.watchDeviceHeading(headingId));

          case 6:
            return _context4.abrupt("return", {
              remove: function remove() {
                _removeHeadingWatcher(headingId);
              }
            });

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function _removeHeadingWatcher(watchId) {
    if (!watchCallbacks[watchId]) {
      return;
    }

    delete watchCallbacks[watchId];
    ExponentLocation.removeWatchAsync(watchId);
    LocationEventEmitter.removeSubscription(headingEventSub);
    headingEventSub = null;
  }

  function _maybeInitializeEmitterSubscription() {
    if (!deviceEventSubscription) {
      deviceEventSubscription = LocationEventEmitter.addListener('Exponent.locationChanged', function (_ref3) {
        var watchId = _ref3.watchId,
            location = _ref3.location;
        var callback = watchCallbacks[watchId];

        if (callback) {
          callback(location);
        } else {
          ExponentLocation.removeWatchAsync(watchId);
        }
      });
    }
  }

  function _askPermissionForWatchAsync(success, error, options, watchId) {
    var _ref4, status;

    return regeneratorRuntime.async(function _askPermissionForWatchAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));

          case 2:
            _ref4 = _context5.sent;
            status = _ref4.status;

            if (status === 'granted') {
              ExponentLocation.watchPositionImplAsync(watchId, options);
            } else {
              _removeWatcher(watchId);

              error({
                watchId: watchId,
                message: 'No permission to access location'
              });
            }

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }

  function geocodeAsync(address) {
    return regeneratorRuntime.async(function geocodeAsync$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt("return", ExponentLocation.geocodeAsync(address).catch(function (error) {
              if (error.code === 'E_NO_GEOCODER') {
                if (!googleApiKey) {
                  throw new Error(error.message + ' Please set a Google API Key to use geocoding.');
                }

                return _googleGeocodeAsync(address);
              }

              throw error;
            }));

          case 1:
          case "end":
            return _context6.stop();
        }
      }
    }, null, this);
  }

  function reverseGeocodeAsync(location) {
    return regeneratorRuntime.async(function reverseGeocodeAsync$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (!(typeof location.latitude !== 'number' || typeof location.longitude !== 'number')) {
              _context7.next = 2;
              break;
            }

            throw new TypeError('Location should be an object with number properties `latitude` and `longitude`.');

          case 2:
            return _context7.abrupt("return", ExponentLocation.reverseGeocodeAsync(location).catch(function (error) {
              if (error.code === 'E_NO_GEOCODER') {
                if (!googleApiKey) {
                  throw new Error(error.message + ' Please set a Google API Key to use geocoding.');
                }

                return _googleReverseGeocodeAsync(location);
              }

              throw error;
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, null, this);
  }

  function setApiKey(apiKey) {
    googleApiKey = apiKey;
  }

  function _googleGeocodeAsync(address) {
    var result, resultObject;
    return regeneratorRuntime.async(function _googleGeocodeAsync$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return regeneratorRuntime.awrap(fetch(googleApiUrl + "?key=" + googleApiKey + "&address=" + encodeURI(address)));

          case 2:
            result = _context8.sent;
            _context8.next = 5;
            return regeneratorRuntime.awrap(result.json());

          case 5:
            resultObject = _context8.sent;

            if (!(resultObject.status !== 'OK')) {
              _context8.next = 8;
              break;
            }

            throw new Error('An error occurred during geocoding.');

          case 8:
            return _context8.abrupt("return", resultObject.results.map(function (result) {
              var location = result.geometry.location;
              return {
                latitude: location.lat,
                longitude: location.lng
              };
            }));

          case 9:
          case "end":
            return _context8.stop();
        }
      }
    }, null, this);
  }

  function _googleReverseGeocodeAsync(options) {
    var result, resultObject;
    return regeneratorRuntime.async(function _googleReverseGeocodeAsync$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return regeneratorRuntime.awrap(fetch(googleApiUrl + "?key=" + googleApiKey + "&latlng=" + options.latitude + "," + options.longitude));

          case 2:
            result = _context9.sent;
            _context9.next = 5;
            return regeneratorRuntime.awrap(result.json());

          case 5:
            resultObject = _context9.sent;

            if (!(resultObject.status !== 'OK')) {
              _context9.next = 8;
              break;
            }

            throw new Error('An error occurred during geocoding.');

          case 8:
            return _context9.abrupt("return", resultObject.results.map(function (result) {
              var address = {};
              result.address_components.forEach(function (component) {
                if (component.types.includes('locality')) {
                  address.city = component.long_name;
                } else if (component.types.includes('street_address')) {
                  address.street = component.long_name;
                } else if (component.types.includes('administrative_area_level_1')) {
                  address.region = component.long_name;
                } else if (component.types.includes('country')) {
                  address.country = component.long_name;
                } else if (component.types.includes('postal_code')) {
                  address.postalCode = component.long_name;
                } else if (component.types.includes('point_of_interest')) {
                  address.name = component.long_name;
                }
              });
              return address;
            }));

          case 9:
          case "end":
            return _context9.stop();
        }
      }
    }, null, this);
  }

  function watchPosition(success, error, options) {
    _maybeInitializeEmitterSubscription();

    var watchId = _getNextWatchId();

    watchCallbacks[watchId] = success;

    _askPermissionForWatchAsync(success, error, options, watchId);

    return watchId;
  }

  function watchPositionAsync(options, callback) {
    var watchId;
    return regeneratorRuntime.async(function watchPositionAsync$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _maybeInitializeEmitterSubscription();

            watchId = _getNextWatchId();
            watchCallbacks[watchId] = callback;
            _context10.next = 5;
            return regeneratorRuntime.awrap(ExponentLocation.watchPositionImplAsync(watchId, options));

          case 5:
            return _context10.abrupt("return", {
              remove: function remove() {
                _removeWatcher(watchId);
              }
            });

          case 6:
          case "end":
            return _context10.stop();
        }
      }
    }, null, this);
  }

  function clearWatch(watchId) {
    _removeWatcher(watchId);
  }

  function _removeWatcher(watchId) {
    if (!watchCallbacks[watchId]) {
      return;
    }

    ExponentLocation.removeWatchAsync(watchId);
    delete watchCallbacks[watchId];

    if (Object.keys(watchCallbacks).length === 0) {
      LocationEventEmitter.removeSubscription(deviceEventSubscription);
      deviceEventSubscription = null;
    }
  }

  function getCurrentPosition(success) {
    var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _invariant2.default)(typeof success === 'function', 'Must provide a valid success callback.');
    (0, _invariant2.default)(typeof options === 'object', 'options must be an object.');

    _getCurrentPositionAsyncWrapper(success, error, options);
  }

  function _getCurrentPositionAsyncWrapper(success, error, options) {
    var _ref5, status, result;

    return regeneratorRuntime.async(function _getCurrentPositionAsyncWrapper$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.prev = 0;
            _context11.next = 3;
            return regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));

          case 3:
            _ref5 = _context11.sent;
            status = _ref5.status;

            if (!(status !== 'granted')) {
              _context11.next = 7;
              break;
            }

            throw new Error('Permission to access location not granted. User must now enable it manually in settings');

          case 7:
            _context11.next = 9;
            return regeneratorRuntime.awrap(Location.getCurrentPositionAsync(options));

          case 9:
            result = _context11.sent;
            success(result);
            _context11.next = 16;
            break;

          case 13:
            _context11.prev = 13;
            _context11.t0 = _context11["catch"](0);
            error(_context11.t0);

          case 16:
          case "end":
            return _context11.stop();
        }
      }
    }, null, this, [[0, 13]]);
  }

  window.navigator.geolocation = {
    getCurrentPosition: getCurrentPosition,
    watchPosition: watchPosition,
    clearWatch: clearWatch,
    stopObserving: function stopObserving() {}
  };
  var Location = {
    getProviderStatusAsync: getProviderStatusAsync,
    getCurrentPositionAsync: getCurrentPositionAsync,
    watchPositionAsync: watchPositionAsync,
    getHeadingAsync: getHeadingAsync,
    watchHeadingAsync: watchHeadingAsync,
    geocodeAsync: geocodeAsync,
    reverseGeocodeAsync: reverseGeocodeAsync,
    setApiKey: setApiKey,
    EventEmitter: LocationEventEmitter,
    _getCurrentWatchId: _getCurrentWatchId
  };
  exports.default = Location;
},323,[319,14,324]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.REMINDERS = exports.CALENDAR = exports.CAMERA_ROLL = exports.SYSTEM_BRIGHTNESS = exports.CONTACTS = exports.NOTIFICATIONS = exports.USER_FACING_NOTIFICATIONS = exports.LOCATION = exports.AUDIO_RECORDING = exports.CAMERA = undefined;
  exports.getAsync = getAsync;
  exports.askAsync = askAsync;

  var _reactNative = _require(_dependencyMap[0]);

  var Permissions = _reactNative.NativeModules.ExponentPermissions;

  function getAsync(type) {
    return regeneratorRuntime.async(function getAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", Permissions.getAsync(type));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function askAsync(type) {
    return regeneratorRuntime.async(function askAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", Permissions.askAsync(type));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  var CAMERA = exports.CAMERA = 'camera';
  var AUDIO_RECORDING = exports.AUDIO_RECORDING = 'audioRecording';
  var LOCATION = exports.LOCATION = 'location';
  var USER_FACING_NOTIFICATIONS = exports.USER_FACING_NOTIFICATIONS = 'userFacingNotifications';
  var NOTIFICATIONS = exports.NOTIFICATIONS = 'notifications';
  var CONTACTS = exports.CONTACTS = 'contacts';
  var SYSTEM_BRIGHTNESS = exports.SYSTEM_BRIGHTNESS = 'systemBrightness';
  var CAMERA_ROLL = exports.CAMERA_ROLL = 'cameraRoll';
  var CALENDAR = exports.CALENDAR = 'calendar';
  var REMINDERS = exports.REMINDERS = 'reminders';
},324,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = apisAreAvailable;

  var _reactNative = _require(_dependencyMap[0]);

  function apisAreAvailable() {
    return !!_reactNative.NativeModules.ExponentConstants;
  }
},325,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = registerRootComponent;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _Font = _require(_dependencyMap[2]);

  var _Notifications = _require(_dependencyMap[3]);

  var _Notifications2 = babelHelpers.interopRequireDefault(_Notifications);

  var _RootErrorBoundary = _require(_dependencyMap[4]);

  var _RootErrorBoundary2 = babelHelpers.interopRequireDefault(_RootErrorBoundary);

  function wrapWithExpoRoot(AppRootComponent) {
    return function (_React$Component) {
      babelHelpers.inherits(ExpoRootComponent, _React$Component);

      function ExpoRootComponent() {
        babelHelpers.classCallCheck(this, ExpoRootComponent);
        return babelHelpers.possibleConstructorReturn(this, (ExpoRootComponent.__proto__ || Object.getPrototypeOf(ExpoRootComponent)).apply(this, arguments));
      }

      babelHelpers.createClass(ExpoRootComponent, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          _reactNative.StyleSheet.setStyleAttributePreprocessor('fontFamily', _Font.processFontFamily);

          if (this.props.exp.notification) {
            _Notifications2.default._setInitialNotification(this.props.exp.notification);
          }
        }
      }, {
        key: "render",
        value: function render() {
          {
            return _react2.default.createElement(AppRootComponent, this.props);
          }
        }
      }]);
      return ExpoRootComponent;
    }(_react2.default.Component);
  }

  function registerRootComponent(component) {
    _reactNative.AppRegistry.registerComponent('main', function () {
      return wrapWithExpoRoot(component);
    });
  }
},326,[103,14,327,329,330]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.processFontFamily = processFontFamily;
  exports.isLoaded = isLoaded;
  exports.isLoading = isLoading;
  exports.loadAsync = loadAsync;

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _reactNative = _require(_dependencyMap[1]);

  var _Asset = _require(_dependencyMap[2]);

  var _Asset2 = babelHelpers.interopRequireDefault(_Asset);

  var _Constants = _require(_dependencyMap[3]);

  var _Constants2 = babelHelpers.interopRequireDefault(_Constants);

  var loaded = {};
  var loadPromises = {};

  function processFontFamily(name) {
    if (!name || _Constants2.default.systemFonts.includes(name) || name === 'System') {
      return name;
    }

    if (name.includes(_Constants2.default.sessionId)) {
      return name;
    }

    if (!isLoaded(name)) {
      return 'System';
    }

    return "ExponentFont-" + _getNativeFontName(name);
  }

  function isLoaded(name) {
    return loaded.hasOwnProperty(name);
  }

  function isLoading(name) {
    return loadPromises.hasOwnProperty(name);
  }

  function loadAsync(nameOrMap, uriOrModuleOrAsset) {
    var _this = this;

    var fontMap, names, name, asset;
    return regeneratorRuntime.async(function loadAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!Array.isArray(nameOrMap)) {
              _context2.next = 7;
              break;
            }

            console.warn("Passing in an array to Font.loadAsync like Font.loadAsync([fontMap1, fontMap2, fontMap3]) is deprecated and will be removed in SDK 25. Instead, pass in a single font map. The object spread syntax may help with this: Font.loadAsync({ ...fontMap1, ...fontMap2, ...fontMap3 })");
            _context2.next = 4;
            return regeneratorRuntime.awrap(Promise.all(nameOrMap.map(loadAsync)));

          case 4:
            return _context2.abrupt("return");

          case 7:
            if (!(typeof nameOrMap === 'object')) {
              _context2.next = 13;
              break;
            }

            fontMap = nameOrMap;
            names = Object.keys(fontMap);
            _context2.next = 12;
            return regeneratorRuntime.awrap(Promise.all(names.map(function (name) {
              return loadAsync(name, fontMap[name]);
            })));

          case 12:
            return _context2.abrupt("return");

          case 13:
            name = nameOrMap;

            if (!loaded[name]) {
              _context2.next = 16;
              break;
            }

            return _context2.abrupt("return");

          case 16:
            if (!loadPromises[name]) {
              _context2.next = 18;
              break;
            }

            return _context2.abrupt("return", loadPromises[name]);

          case 18:
            (0, _invariant2.default)(uriOrModuleOrAsset, "No source from which to load font \"" + name + "\"");
            asset = _getAssetForSource(uriOrModuleOrAsset);

            loadPromises[name] = function _callee() {
              return regeneratorRuntime.async(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;
                      _context.next = 3;
                      return regeneratorRuntime.awrap(_loadSingleFontAsync(name, asset));

                    case 3:
                      loaded[name] = true;

                    case 4:
                      _context.prev = 4;
                      delete loadPromises[name];
                      return _context.finish(4);

                    case 7:
                    case "end":
                      return _context.stop();
                  }
                }
              }, null, _this, [[0,, 4, 7]]);
            }();

            _context2.next = 23;
            return regeneratorRuntime.awrap(loadPromises[name]);

          case 23:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function _getAssetForSource(uriOrModuleOrAsset) {
    if (typeof uriOrModuleOrAsset === 'string') {
      throw new Error('Loading fonts from remote URIs is temporarily not supported. Please download the font file and load it using require. See: https://docs.expo.io/versions/latest/guides/using-custom-fonts.html#downloading-the-font');
    }

    if (typeof uriOrModuleOrAsset === 'number') {
      return _Asset2.default.fromModule(uriOrModuleOrAsset);
    }

    return uriOrModuleOrAsset;
  }

  function _loadSingleFontAsync(name, asset) {
    return regeneratorRuntime.async(function _loadSingleFontAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return regeneratorRuntime.awrap(asset.downloadAsync());

          case 2:
            if (asset.downloaded) {
              _context3.next = 4;
              break;
            }

            throw new Error("Failed to download asset for font \"" + name + "\"");

          case 4:
            _context3.next = 6;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentFontLoader.loadAsync(_getNativeFontName(name), asset.localUri));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function _getNativeFontName(name) {
    return _Constants2.default.sessionId + "-" + name;
  }
},327,[319,14,328,310]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _reactNative = _require(_dependencyMap[0]);

  var _AssetRegistry = _require(_dependencyMap[1]);

  var _AssetRegistry2 = babelHelpers.interopRequireDefault(_AssetRegistry);

  var _AssetSourceResolver = _require(_dependencyMap[2]);

  var _AssetSourceResolver2 = babelHelpers.interopRequireDefault(_AssetSourceResolver);

  var _resolveAssetSource = _require(_dependencyMap[3]);

  var _resolveAssetSource2 = babelHelpers.interopRequireDefault(_resolveAssetSource);

  var _Constants = _require(_dependencyMap[4]);

  var _Constants2 = babelHelpers.interopRequireDefault(_Constants);

  var FS = _reactNative.NativeModules.ExponentFileSystem;
  var bundledAssets = new Set(FS.bundledAssets || []);

  var pickScale = function pickScale(meta) {
    var scale = meta.scales.length > 1 ? _AssetSourceResolver2.default.pickScale(meta.scales, _reactNative.PixelRatio.get()) : 1;
    var index = meta.scales.findIndex(function (s) {
      return s === scale;
    });
    var hash = meta.fileHashes[index] || meta.fileHashes[0];
    var suffix = '/' + meta.name + (scale === 1 ? '' : '@' + scale + 'x') + '.' + meta.type + '?platform=' + "android" + '&hash=' + meta.hash;

    if (meta.uri) {
      return {
        uri: meta.uri,
        hash: hash
      };
    }

    if (/^https?:/.test(meta.httpServerLocation)) {
      return {
        uri: meta.httpServerLocation + suffix,
        hash: hash
      };
    }

    if (_Constants2.default.manifest.xde) {
      return {
        uri: _Constants2.default.manifest.bundleUrl.match(/^https?:\/\/.*?\//)[0] + meta.httpServerLocation.replace(/^\/?/, '') + suffix,
        hash: hash
      };
    }

    return {
      uri: 'https://d1wp6m56sqw74a.cloudfront.net/~assets/' + hash,
      hash: hash
    };
  };

  var getUriInBundle = function getUriInBundle(hash, type) {
    var assetName = 'asset_' + hash + (type ? '.' + type : '');

    if (_Constants2.default.appOwnership !== 'standalone' || !bundledAssets.has(assetName)) {
      return null;
    }

    return "" + FS.bundleDirectory + assetName;
  };

  var Asset = (_temp = _class = function () {
    function Asset(_ref) {
      var name = _ref.name,
          type = _ref.type,
          hash = _ref.hash,
          uri = _ref.uri,
          width = _ref.width,
          height = _ref.height;
      babelHelpers.classCallCheck(this, Asset);
      this.name = name;
      this.type = type;
      this.hash = hash;
      this.uri = uri;
      this.localUri = getUriInBundle(hash, type);

      if (typeof width === 'number') {
        this.width = width;
      }

      if (typeof height === 'number') {
        this.height = height;
      }

      this.downloading = false;
      this.downloaded = !!this.localUri;
      this.downloadCallbacks = [];
    }

    babelHelpers.createClass(Asset, [{
      key: "downloadAsync",
      value: function downloadAsync() {
        var _this = this;

        var localUri, exists, md5, _ref2, _ref3;

        return regeneratorRuntime.async(function downloadAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.downloaded) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                if (!this.downloading) {
                  _context.next = 6;
                  break;
                }

                _context.next = 5;
                return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
                  return _this.downloadCallbacks.push({
                    resolve: resolve,
                    reject: reject
                  });
                }));

              case 5:
                return _context.abrupt("return");

              case 6:
                this.downloading = true;
                _context.prev = 7;
                localUri = FS.cacheDirectory + "ExponentAsset-" + this.hash + "." + this.type;
                exists = void 0, md5 = void 0;
                _context.next = 12;
                return regeneratorRuntime.awrap(FS.getInfoAsync(localUri, {
                  cache: true,
                  md5: true
                }));

              case 12:
                _ref2 = _context.sent;
                exists = _ref2.exists;
                md5 = _ref2.md5;

                if (!(!exists || md5 !== this.hash)) {
                  _context.next = 22;
                  break;
                }

                _context.next = 18;
                return regeneratorRuntime.awrap(FS.downloadAsync(this.uri, localUri, {
                  cache: true,
                  md5: true
                }));

              case 18:
                _ref3 = _context.sent;
                md5 = _ref3.md5;

                if (!(md5 !== this.hash)) {
                  _context.next = 22;
                  break;
                }

                throw new Error("Downloaded file for asset '" + this.name + "." + this.type + "' " + ("Located at " + this.uri + " ") + "failed MD5 integrity check");

              case 22:
                this.localUri = localUri;
                this.downloaded = true;
                this.downloadCallbacks.forEach(function (_ref4) {
                  var resolve = _ref4.resolve;
                  return resolve();
                });
                _context.next = 31;
                break;

              case 27:
                _context.prev = 27;
                _context.t0 = _context["catch"](7);
                this.downloadCallbacks.forEach(function (_ref5) {
                  var reject = _ref5.reject;
                  return reject(_context.t0);
                });
                throw _context.t0;

              case 31:
                _context.prev = 31;
                this.downloading = false;
                this.downloadCallbacks = [];
                return _context.finish(31);

              case 35:
              case "end":
                return _context.stop();
            }
          }
        }, null, this, [[7, 27, 31, 35]]);
      }
    }], [{
      key: "loadAsync",
      value: function loadAsync(moduleId) {
        var moduleIds = typeof moduleId === 'number' ? [moduleId] : moduleId;
        return Promise.all(moduleIds.map(function (m) {
          return Asset.fromModule(m).downloadAsync();
        }));
      }
    }, {
      key: "fromModule",
      value: function fromModule(moduleId) {
        var meta = _AssetRegistry2.default.getAssetByID(moduleId);

        return Asset.fromMetadata(meta);
      }
    }, {
      key: "fromMetadata",
      value: function fromMetadata(meta) {
        var metaHash = meta.hash;

        if (Asset.byHash[metaHash]) {
          return Asset.byHash[metaHash];
        }

        var _pickScale = pickScale(meta),
            uri = _pickScale.uri,
            hash = _pickScale.hash;

        var asset = new Asset({
          name: meta.name,
          type: meta.type,
          hash: hash,
          uri: uri,
          width: meta.width,
          height: meta.height
        });
        Asset.byHash[metaHash] = asset;
        return asset;
      }
    }]);
    return Asset;
  }(), _class.byHash = {}, _temp);
  exports.default = Asset;

  _resolveAssetSource2.default.setCustomSourceTransformer(function (resolver) {
    var asset = Asset.fromMetadata(resolver.asset);
    return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);
  });
},328,[14,154,155,153,310]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _fbemitter = _require(_dependencyMap[0]);

  var _invariant = _require(_dependencyMap[1]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _warning = _require(_dependencyMap[2]);

  var _warning2 = babelHelpers.interopRequireDefault(_warning);

  var _reactNative = _require(_dependencyMap[3]);

  var ExponentNotifications = _reactNative.NativeModules.ExponentNotifications;

  var _emitter = void 0;

  var _initialNotification = void 0;

  function _maybeInitEmitter() {
    if (!_emitter) {
      _emitter = new _fbemitter.EventEmitter();

      _reactNative.DeviceEventEmitter.addListener('Exponent.notification', _emitNotification);
    }
  }

  function _emitNotification(notification) {
    if (typeof notification === 'string') {
      notification = JSON.parse(notification);
    }

    notification = babelHelpers.extends({}, notification);

    if (typeof notification.data === 'string') {
      try {
        notification.data = JSON.parse(notification.data);
      } catch (e) {}
    }

    _emitter.emit('notification', notification);
  }

  function _processNotification(notification) {
    notification = babelHelpers.extends({}, notification);

    if (!notification.data) {
      notification.data = {};
    }

    if (notification.hasOwnProperty('count')) {
      delete notification.count;
    }

    {
      if (notification.ios) {
        delete notification.ios;
      }

      if (notification.android) {
        notification = babelHelpers.extends(notification, notification.android);
        delete notification.android;
      }
    }
    return notification;
  }

  function _validateNotification(notification) {
    {
      (0, _invariant2.default)(!!notification.title, 'Local notifications on Android require a title');
    }
  }

  var ASYNC_STORAGE_PREFIX = '__expo_internal_channel_';
  var IS_USING_NEW_BINARY = typeof ExponentNotifications.createChannel === 'function';

  function _legacyReadChannel(id) {
    var channelString;
    return regeneratorRuntime.async(function _legacyReadChannel$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem("" + ASYNC_STORAGE_PREFIX + id));

          case 3:
            channelString = _context.sent;

            if (!channelString) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", JSON.parse(channelString));

          case 6:
            _context.next = 10;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);

          case 10:
            return _context.abrupt("return", null);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, null, this, [[0, 8]]);
  }

  function _legacyDeleteChannel(id) {
    return _reactNative.AsyncStorage.removeItem("" + ASYNC_STORAGE_PREFIX + id);
  }

  {
    _reactNative.AsyncStorage.clear = function _callee(callback) {
      var keys, result, filteredKeys;
      return regeneratorRuntime.async(function _callee$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getAllKeys());

            case 3:
              keys = _context2.sent;
              result = null;

              if (!(keys && keys.length)) {
                _context2.next = 10;
                break;
              }

              filteredKeys = keys.filter(function (key) {
                return !key.startsWith(ASYNC_STORAGE_PREFIX);
              });
              _context2.next = 9;
              return regeneratorRuntime.awrap(_reactNative.AsyncStorage.multiRemove(filteredKeys));

            case 9:
              result = _context2.sent;

            case 10:
              callback && callback(result);
              return _context2.abrupt("return", result);

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](0);
              callback && callback(_context2.t0);
              throw _context2.t0;

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[0, 14]]);
    };
  }

  function _legacySaveChannel(id, channel) {
    return _reactNative.AsyncStorage.setItem("" + ASYNC_STORAGE_PREFIX + id, JSON.stringify(channel));
  }

  exports.default = {
    _setInitialNotification: function _setInitialNotification(notification) {
      _initialNotification = notification;
    },
    getExpoPushTokenAsync: function getExpoPushTokenAsync() {
      return ExponentNotifications.getExponentPushTokenAsync();
    },
    getDevicePushTokenAsync: ExponentNotifications.getDevicePushTokenAsync,
    createChannelAndroidAsync: function createChannelAndroidAsync(id, channel) {
      if (!IS_USING_NEW_BINARY) {
        return _legacySaveChannel(id, channel);
      }

      return ExponentNotifications.createChannel(id, channel);
    },
    deleteChannelAndroidAsync: function deleteChannelAndroidAsync(id) {
      if (!IS_USING_NEW_BINARY) {
        return Promise.resolve();
      }

      return ExponentNotifications.deleteChannel(id);
    },
    presentLocalNotificationAsync: function presentLocalNotificationAsync(notification) {
      var _channel;

      return regeneratorRuntime.async(function presentLocalNotificationAsync$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _validateNotification(notification);

              notification = _processNotification(notification);
              _channel = void 0;

              if (!notification.channelId) {
                _context3.next = 7;
                break;
              }

              _context3.next = 6;
              return regeneratorRuntime.awrap(_legacyReadChannel(notification.channelId));

            case 6:
              _channel = _context3.sent;

            case 7:
              if (!IS_USING_NEW_BINARY) {
                _context3.next = 12;
                break;
              }

              _legacyDeleteChannel(notification.channelId);

              return _context3.abrupt("return", ExponentNotifications.presentLocalNotificationWithChannel(notification, _channel));

            case 12:
              if (_channel) {
                notification.sound = _channel.sound;
                notification.priority = _channel.priority;
                notification.vibrate = _channel.vibrate;
              }

              return _context3.abrupt("return", ExponentNotifications.presentLocalNotification(notification));

            case 14:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    },
    scheduleLocalNotificationAsync: function scheduleLocalNotificationAsync(notification) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var now, timeAsDateObj, validOptions, _channel;

      return regeneratorRuntime.async(function scheduleLocalNotificationAsync$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              now = Date.now();

              _validateNotification(notification);

              notification = _processNotification(notification);

              if (!options.time) {
                _context4.next = 10;
                break;
              }

              timeAsDateObj = null;

              if (options.time && typeof options.time === 'number') {
                timeAsDateObj = new Date(options.time);

                if (timeAsDateObj === 'Invalid Date') {
                  timeAsDateObj = null;
                }
              } else if (options.time && options.time instanceof Date) {
                timeAsDateObj = options.time;
              }

              if (timeAsDateObj) {
                _context4.next = 8;
                break;
              }

              throw new Error("Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.");

            case 8:
              (0, _warning2.default)(timeAsDateObj >= now, "Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?");
              options = babelHelpers.extends({}, options, {
                time: timeAsDateObj
              });

            case 10:
              if (!(options.intervalMs != null && options.repeat != null)) {
                _context4.next = 12;
                break;
              }

              throw new Error("Pass either the \"repeat\" option or \"intervalMs\" option, not both");

            case 12:
              if (!(options.repeat != null)) {
                _context4.next = 16;
                break;
              }

              validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);

              if (validOptions.has(options.repeat)) {
                _context4.next = 16;
                break;
              }

              throw new Error("Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option");

            case 16:
              if (!(options.intervalMs != null)) {
                _context4.next = 19;
                break;
              }

              if (!(options.intervalMs <= 0 || !Number.isInteger(options.intervalMs))) {
                _context4.next = 19;
                break;
              }

              throw new Error("Pass an integer greater than zero as the value for the \"intervalMs\" option");

            case 19:
              _channel = void 0;

              if (!notification.channelId) {
                _context4.next = 24;
                break;
              }

              _context4.next = 23;
              return regeneratorRuntime.awrap(_legacyReadChannel(notification.channelId));

            case 23:
              _channel = _context4.sent;

            case 24:
              if (!IS_USING_NEW_BINARY) {
                _context4.next = 29;
                break;
              }

              _legacyDeleteChannel(notification.channelId);

              return _context4.abrupt("return", ExponentNotifications.scheduleLocalNotificationWithChannel(notification, options, _channel));

            case 29:
              if (_channel) {
                notification.sound = _channel.sound;
                notification.priority = _channel.priority;
                notification.vibrate = _channel.vibrate;
              }

              return _context4.abrupt("return", ExponentNotifications.scheduleLocalNotification(notification, options));

            case 31:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    },
    dismissNotificationAsync: function dismissNotificationAsync(notificationId) {
      return regeneratorRuntime.async(function dismissNotificationAsync$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", ExponentNotifications.dismissNotification(notificationId));

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    },
    dismissAllNotificationsAsync: function dismissAllNotificationsAsync() {
      return regeneratorRuntime.async(function dismissAllNotificationsAsync$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", ExponentNotifications.dismissAllNotifications());

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    },
    cancelScheduledNotificationAsync: function cancelScheduledNotificationAsync(notificationId) {
      return ExponentNotifications.cancelScheduledNotification(notificationId);
    },
    cancelAllScheduledNotificationsAsync: function cancelAllScheduledNotificationsAsync() {
      return ExponentNotifications.cancelAllScheduledNotifications();
    },
    addListener: function addListener(listener) {
      _maybeInitEmitter();

      if (_initialNotification) {
        var initialNotification = _initialNotification;
        _initialNotification = null;
        setTimeout(function () {
          _emitNotification(initialNotification);
        }, 0);
      }

      return _emitter.addListener('notification', listener);
    },
    getBadgeNumberAsync: function getBadgeNumberAsync() {
      return regeneratorRuntime.async(function getBadgeNumberAsync$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (ExponentNotifications.getBadgeNumberAsync) {
                _context7.next = 2;
                break;
              }

              return _context7.abrupt("return", 0);

            case 2:
              return _context7.abrupt("return", ExponentNotifications.getBadgeNumberAsync());

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    },
    setBadgeNumberAsync: function setBadgeNumberAsync(number) {
      return regeneratorRuntime.async(function setBadgeNumberAsync$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (ExponentNotifications.setBadgeNumberAsync) {
                _context8.next = 2;
                break;
              }

              return _context8.abrupt("return");

            case 2:
              return _context8.abrupt("return", ExponentNotifications.setBadgeNumberAsync(number));

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    }
  };
},329,[314,319,29,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _AppLoading = _require(_dependencyMap[2]);

  var RootErrorBoundary = function (_React$Component) {
    babelHelpers.inherits(RootErrorBoundary, _React$Component);

    function RootErrorBoundary() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, RootErrorBoundary);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = RootErrorBoundary.__proto__ || Object.getPrototypeOf(RootErrorBoundary)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        error: null
      }, _this._appLoadingIsMounted = false, _this._subscribeToGlobalErrors = function () {
        _this._appLoadingIsMounted = true;
        var ErrorUtils = global.ErrorUtils;
        var originalErrorHandler = ErrorUtils.getGlobalHandler();
        ErrorUtils.setGlobalHandler(function (error, isFatal) {
          if (_this._appLoadingIsMounted) {
            _reactNative.NativeModules.ExponentAppLoadingManager && _reactNative.NativeModules.ExponentAppLoadingManager.finishedAsync();

            if (isFatal) {
              _this.setState({
                error: error
              });
            }
          }

          originalErrorHandler(error, isFatal);
        });
      }, _this._unsubscribeFromGlobalErrors = function () {
        _this._appLoadingIsMounted = false;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(RootErrorBoundary, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidCatch",
      value: function componentDidCatch(error) {
        if (this._appLoadingIsMounted) {
          _reactNative.NativeModules.ExponentAppLoadingManager && _reactNative.NativeModules.ExponentAppLoadingManager.finishedAsync();
          this.setState({
            error: error
          });
        }

        console.error(error);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.state.error) {
          return React.createElement(
            _reactNative.View,
            {
              style: styles.container
            },
            React.createElement(
              _reactNative.Text,
              {
                style: styles.warningIcon
              },
              "\u26A0\uFE0F"
            ),
            React.createElement(
              _reactNative.Text,
              {
                style: [styles.paragraph, {
                  color: '#000'
                }]
              },
              "A fatal error was encountered while rendering the root component."
            ),
            React.createElement(
              _reactNative.Text,
              {
                style: styles.paragraph
              },
              "Review your application logs for more information, and reload the app when the issue is resolved. In production, your app would have crashed."
            )
          );
        } else {
          return this.props.children;
        }
      }
    }]);
    return RootErrorBoundary;
  }(React.Component);

  exports.default = RootErrorBoundary;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center'
    },
    paragraph: {
      marginBottom: 10,
      textAlign: 'center',
      marginHorizontal: 30,
      maxWidth: 350,
      fontSize: 15,
      color: '#888'
    },
    warningIcon: {
      fontSize: 40,
      marginBottom: 20
    }
  });
},330,[103,14,331]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.getAppLoadingLifecycleEmitter = getAppLoadingLifecycleEmitter;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _fbemitter = _require(_dependencyMap[1]);

  var _AppLoadingNativeWrapper = _require(_dependencyMap[2]);

  var _AppLoadingNativeWrapper2 = babelHelpers.interopRequireDefault(_AppLoadingNativeWrapper);

  var AppLoading = function (_React$Component) {
    babelHelpers.inherits(AppLoading, _React$Component);

    function AppLoading() {
      var _ref,
          _this2 = this;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, AppLoading);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AppLoading.__proto__ || Object.getPrototypeOf(AppLoading)).call.apply(_ref, [this].concat(args))), _this), _this._startLoadingAppResourcesAsync = function _callee() {
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (_this.props.onFinish) {
                  _context.next = 2;
                  break;
                }

                throw new Error('AppLoading onFinish prop is required if startAsync is provided');

              case 2:
                _context.prev = 2;
                _context.next = 5;
                return regeneratorRuntime.awrap(_this.props.startAsync());

              case 5:
                _context.next = 16;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](2);

                if (_this._isMounted) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return");

              case 11:
                if (!_this.props.onError) {
                  _context.next = 15;
                  break;
                }

                _this.props.onError(_context.t0);

                _context.next = 16;
                break;

              case 15:
                throw _context.t0;

              case 16:
                _context.prev = 16;

                if (_this._isMounted) {
                  _context.next = 19;
                  break;
                }

                return _context.abrupt("return");

              case 19:
                if (_this.props.onFinish) {
                  _this.props.onFinish();
                }

                return _context.finish(16);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this2, [[2, 7, 16, 21]]);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(AppLoading, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;

        _emitEvent('componentDidMount');

        if (this.props.startAsync) {
          this._startLoadingAppResourcesAsync().catch(function (error) {
            console.error("AppLoading threw an unexpected error when loading:\n" + error.stack);
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;

        _emitEvent('componentWillUnmount');
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(_AppLoadingNativeWrapper2.default, null);
      }
    }]);
    return AppLoading;
  }(_react2.default.Component);

  exports.default = AppLoading;

  var _lifecycleEmitter = void 0;

  function _emitEvent(event) {
    if (_lifecycleEmitter) {
      _lifecycleEmitter.emit(event);
    }
  }

  function getAppLoadingLifecycleEmitter() {
    if (!_lifecycleEmitter) {
      _lifecycleEmitter = new _fbemitter.EventEmitter();
    }

    return _lifecycleEmitter;
  }
},331,[103,314,1104]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    return null;
  };
},1104,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _react = _require(_dependencyMap[1]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var RNViewShot = _reactNative.NativeModules.RNViewShot;

  exports.default = function takeSnapshotAsync(node, options) {
    var handle;
    return regeneratorRuntime.async(function takeSnapshotAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            handle = typeof node === 'number' ? node : _getNodeHandle(node);
            return _context.abrupt("return", RNViewShot.takeSnapshot(handle, options));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  };

  function _getNodeHandle(component) {
    var handle = (0, _reactNative.findNodeHandle)(component);
    (0, _invariant2.default)(handle != null, "Could not find the React node handle for component to snapshot: %s", component);
    return handle;
  }
},333,[319,103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var _ThreeAxisSensor = _require(_dependencyMap[1]);

  var _ThreeAxisSensor2 = babelHelpers.interopRequireDefault(_ThreeAxisSensor);

  var ExponentAccelerometer = _reactNative.NativeModules.ExponentAccelerometer;
  exports.default = new _ThreeAxisSensor2.default(ExponentAccelerometer, 'accelerometerDidUpdate');
},334,[14,335]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _DeviceSensor2 = _require(_dependencyMap[0]);

  var _DeviceSensor3 = babelHelpers.interopRequireDefault(_DeviceSensor2);

  var ThreeAxisSensor = function (_DeviceSensor) {
    babelHelpers.inherits(ThreeAxisSensor, _DeviceSensor);

    function ThreeAxisSensor() {
      babelHelpers.classCallCheck(this, ThreeAxisSensor);
      return babelHelpers.possibleConstructorReturn(this, (ThreeAxisSensor.__proto__ || Object.getPrototypeOf(ThreeAxisSensor)).apply(this, arguments));
    }

    return ThreeAxisSensor;
  }(_DeviceSensor3.default);

  exports.default = ThreeAxisSensor;
},335,[336]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  var DeviceSensor = function () {
    function DeviceSensor(nativeSensorModule, nativeEventName) {
      babelHelpers.classCallCheck(this, DeviceSensor);
      this._nativeModule = nativeSensorModule;
      this._nativeEmitter = new _reactNative.NativeEventEmitter(nativeSensorModule);
      this._nativeEventName = nativeEventName;
    }

    babelHelpers.createClass(DeviceSensor, [{
      key: "hasListeners",
      value: function hasListeners() {
        return this.getListenerCount() > 0;
      }
    }, {
      key: "getListenerCount",
      value: function getListenerCount() {
        return this._nativeEmitter.listeners(this._nativeEventName).length;
      }
    }, {
      key: "addListener",
      value: function addListener(listener) {
        var _this = this;

        {
          if (!this.hasListeners()) {
            this._nativeModule.startObserving();
          }
        }

        var subscription = this._nativeEmitter.addListener(this._nativeEventName, listener);

        subscription.remove = function () {
          return _this.removeSubscription(subscription);
        };

        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        {
          this._nativeModule.stopObserving();
        }

        this._nativeEmitter.removeAllListeners(this._nativeEventName);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        {
          if (this.getListenerCount() === 1) {
            this._nativeModule.stopObserving();
          }
        }

        this._nativeEmitter.removeSubscription(subscription);
      }
    }, {
      key: "setUpdateInterval",
      value: function setUpdateInterval(intervalMs) {
        this._nativeModule.setUpdateInterval(intervalMs);
      }
    }]);
    return DeviceSensor;
  }();

  exports.default = DeviceSensor;
},336,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var _qs = _require(_dependencyMap[1]);

  var _qs2 = babelHelpers.interopRequireDefault(_qs);

  var _Constants = _require(_dependencyMap[2]);

  var _Constants2 = babelHelpers.interopRequireDefault(_Constants);

  var _Linking = _require(_dependencyMap[3]);

  var _Linking2 = babelHelpers.interopRequireDefault(_Linking);

  var _WebBrowser = _require(_dependencyMap[4]);

  var _WebBrowser2 = babelHelpers.interopRequireDefault(_WebBrowser);

  var BASE_URL = "https://auth.expo.io";
  var _authLock = false;

  function startAsync(options) {
    var returnUrl, authUrl, startUrl, result, _parseUrl, params, errorCode;

    return regeneratorRuntime.async(function startAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            returnUrl = options.returnUrl || getDefaultReturnUrl();
            authUrl = options.authUrl;
            startUrl = getStartUrl(authUrl, returnUrl);

            if (authUrl) {
              _context.next = 5;
              break;
            }

            throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');

          case 5:
            if (!_authLock) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", {
              type: 'locked'
            });

          case 7:
            _authLock = true;
            result = void 0;
            _context.prev = 9;
            _context.next = 12;
            return regeneratorRuntime.awrap(_openWebBrowserAsync(startUrl, returnUrl));

          case 12:
            result = _context.sent;

          case 13:
            _context.prev = 13;
            _authLock = false;
            return _context.finish(13);

          case 16:
            if (result) {
              _context.next = 18;
              break;
            }

            throw new Error('Unexpected missing AuthSession result');

          case 18:
            if (result.url) {
              _context.next = 24;
              break;
            }

            if (!result.type) {
              _context.next = 23;
              break;
            }

            return _context.abrupt("return", result);

          case 23:
            throw new Error('Unexpected AuthSession result with missing type');

          case 24:
            _parseUrl = parseUrl(result.url), params = _parseUrl.params, errorCode = _parseUrl.errorCode;
            return _context.abrupt("return", {
              type: errorCode ? 'error' : 'success',
              params: params,
              errorCode: errorCode,
              url: result.url
            });

          case 26:
          case "end":
            return _context.stop();
        }
      }
    }, null, this, [[9,, 13, 16]]);
  }

  function dismiss() {
    _WebBrowser2.default.dismissAuthSession();
  }

  function _openWebBrowserAsync(startUrl, returnUrl) {
    var result;
    return regeneratorRuntime.async(function _openWebBrowserAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return regeneratorRuntime.awrap(_WebBrowser2.default.openAuthSessionAsync(startUrl, returnUrl));

          case 2:
            result = _context2.sent;

            if (!(result.type === 'cancel' || result.type === 'dismiss')) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("return", {
              type: result.type
            });

          case 5:
            return _context2.abrupt("return", result);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function getStartUrl(authUrl, returnUrl) {
    var queryString = _qs2.default.stringify({
      authUrl: authUrl,
      returnUrl: returnUrl
    });

    return getRedirectUrl() + "/start?" + queryString;
  }

  function getRedirectUrl() {
    var redirectUrl = BASE_URL + "/" + _Constants2.default.manifest.id;
    return redirectUrl;
  }

  function getDefaultReturnUrl() {
    return _Linking2.default.makeUrl('expo-auth-session');
  }

  function parseUrl(url) {
    var parts = url.split('#');
    var hash = parts[1];
    var partsWithoutHash = parts[0].split('?');
    var queryString = partsWithoutHash[partsWithoutHash.length - 1];

    var parsedSearch = _qs2.default.parse(queryString);

    var errorCode = parsedSearch.errorCode;
    delete parsedSearch.errorCode;
    var parsedHash = {};

    if (parts[1]) {
      parsedHash = _qs2.default.parse(hash);
    }

    var params = babelHelpers.extends({}, parsedSearch, parsedHash);
    return {
      errorCode: errorCode,
      params: params
    };
  }

  function _warnIfAnonymous(id, url) {
    if (id.startsWith('@anonymous/')) {
      console.warn("You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"" + url + "\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.");
    }
  }

  exports.default = {
    dismiss: dismiss,
    getRedirectUrl: getRedirectUrl,
    getStartUrl: getStartUrl,
    getDefaultReturnUrl: getDefaultReturnUrl,

    get getRedirectUri() {
      console.warn('Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)');
      return getRedirectUrl;
    },

    startAsync: startAsync
  };
},337,[14,338,310,343,344]);
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var stringify = _require(_dependencyMap[0]);

    var parse = _require(_dependencyMap[1]);

    var formats = _require(_dependencyMap[2]);

    module.exports = {
        formats: formats,
        parse: parse,
        stringify: stringify
    };
},338,[339,342,341]);
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var utils = _require(_dependencyMap[0]);

    var formats = _require(_dependencyMap[1]);

    var arrayPrefixGenerators = {
        brackets: function brackets(prefix) {
            return prefix + '[]';
        },
        indices: function indices(prefix, key) {
            return prefix + '[' + key + ']';
        },
        repeat: function repeat(prefix) {
            return prefix;
        }
    };
    var toISO = Date.prototype.toISOString;
    var defaults = {
        delimiter: '&',
        encode: true,
        encoder: utils.encode,
        encodeValuesOnly: false,
        serializeDate: function serializeDate(date) {
            return toISO.call(date);
        },
        skipNulls: false,
        strictNullHandling: false
    };

    var stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly) {
        var obj = object;

        if (typeof filter === 'function') {
            obj = filter(prefix, obj);
        } else if (obj instanceof Date) {
            obj = serializeDate(obj);
        } else if (obj === null) {
            if (strictNullHandling) {
                return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;
            }

            obj = '';
        }

        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
            if (encoder) {
                var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);
                return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder))];
            }

            return [formatter(prefix) + '=' + formatter(String(obj))];
        }

        var values = [];

        if (typeof obj === 'undefined') {
            return values;
        }

        var objKeys;

        if (Array.isArray(filter)) {
            objKeys = filter;
        } else {
            var keys = Object.keys(obj);
            objKeys = sort ? keys.sort(sort) : keys;
        }

        for (var i = 0; i < objKeys.length; ++i) {
            var key = objKeys[i];

            if (skipNulls && obj[key] === null) {
                continue;
            }

            if (Array.isArray(obj)) {
                values = values.concat(stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
            } else {
                values = values.concat(stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
            }
        }

        return values;
    };

    module.exports = function (object, opts) {
        var obj = object;
        var options = opts ? utils.assign({}, opts) : {};

        if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
            throw new TypeError('Encoder has to be a function.');
        }

        var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
        var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
        var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
        var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
        var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
        var sort = typeof options.sort === 'function' ? options.sort : null;
        var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
        var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
        var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;

        if (typeof options.format === 'undefined') {
            options.format = formats['default'];
        } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {
            throw new TypeError('Unknown format option provided.');
        }

        var formatter = formats.formatters[options.format];
        var objKeys;
        var filter;

        if (typeof options.filter === 'function') {
            filter = options.filter;
            obj = filter('', obj);
        } else if (Array.isArray(options.filter)) {
            filter = options.filter;
            objKeys = filter;
        }

        var keys = [];

        if (typeof obj !== 'object' || obj === null) {
            return '';
        }

        var arrayFormat;

        if (options.arrayFormat in arrayPrefixGenerators) {
            arrayFormat = options.arrayFormat;
        } else if ('indices' in options) {
            arrayFormat = options.indices ? 'indices' : 'repeat';
        } else {
            arrayFormat = 'indices';
        }

        var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

        if (!objKeys) {
            objKeys = Object.keys(obj);
        }

        if (sort) {
            objKeys.sort(sort);
        }

        for (var i = 0; i < objKeys.length; ++i) {
            var key = objKeys[i];

            if (skipNulls && obj[key] === null) {
                continue;
            }

            keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode ? encoder : null, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
        }

        var joined = keys.join(delimiter);
        var prefix = options.addQueryPrefix === true ? '?' : '';
        return joined.length > 0 ? prefix + joined : '';
    };
},339,[340,341]);
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var has = Object.prototype.hasOwnProperty;

    var hexTable = function () {
        var array = [];

        for (var i = 0; i < 256; ++i) {
            array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
        }

        return array;
    }();

    var compactQueue = function compactQueue(queue) {
        var obj;

        while (queue.length) {
            var item = queue.pop();
            obj = item.obj[item.prop];

            if (Array.isArray(obj)) {
                var compacted = [];

                for (var j = 0; j < obj.length; ++j) {
                    if (typeof obj[j] !== 'undefined') {
                        compacted.push(obj[j]);
                    }
                }

                item.obj[item.prop] = compacted;
            }
        }

        return obj;
    };

    var arrayToObject = function arrayToObject(source, options) {
        var obj = options && options.plainObjects ? Object.create(null) : {};

        for (var i = 0; i < source.length; ++i) {
            if (typeof source[i] !== 'undefined') {
                obj[i] = source[i];
            }
        }

        return obj;
    };

    var merge = function merge(target, source, options) {
        if (!source) {
            return target;
        }

        if (typeof source !== 'object') {
            if (Array.isArray(target)) {
                target.push(source);
            } else if (typeof target === 'object') {
                if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) {
                    target[source] = true;
                }
            } else {
                return [target, source];
            }

            return target;
        }

        if (typeof target !== 'object') {
            return [target].concat(source);
        }

        var mergeTarget = target;

        if (Array.isArray(target) && !Array.isArray(source)) {
            mergeTarget = arrayToObject(target, options);
        }

        if (Array.isArray(target) && Array.isArray(source)) {
            source.forEach(function (item, i) {
                if (has.call(target, i)) {
                    if (target[i] && typeof target[i] === 'object') {
                        target[i] = merge(target[i], item, options);
                    } else {
                        target.push(item);
                    }
                } else {
                    target[i] = item;
                }
            });
            return target;
        }

        return Object.keys(source).reduce(function (acc, key) {
            var value = source[key];

            if (has.call(acc, key)) {
                acc[key] = merge(acc[key], value, options);
            } else {
                acc[key] = value;
            }

            return acc;
        }, mergeTarget);
    };

    var assign = function assignSingleSource(target, source) {
        return Object.keys(source).reduce(function (acc, key) {
            acc[key] = source[key];
            return acc;
        }, target);
    };

    var decode = function decode(str) {
        try {
            return decodeURIComponent(str.replace(/\+/g, ' '));
        } catch (e) {
            return str;
        }
    };

    var encode = function encode(str) {
        if (str.length === 0) {
            return str;
        }

        var string = typeof str === 'string' ? str : String(str);
        var out = '';

        for (var i = 0; i < string.length; ++i) {
            var c = string.charCodeAt(i);

            if (c === 0x2D || c === 0x2E || c === 0x5F || c === 0x7E || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A) {
                    out += string.charAt(i);
                    continue;
                }

            if (c < 0x80) {
                out = out + hexTable[c];
                continue;
            }

            if (c < 0x800) {
                out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
                continue;
            }

            if (c < 0xD800 || c >= 0xE000) {
                out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
                continue;
            }

            i += 1;
            c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
            out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
        }

        return out;
    };

    var compact = function compact(value) {
        var queue = [{
            obj: {
                o: value
            },
            prop: 'o'
        }];
        var refs = [];

        for (var i = 0; i < queue.length; ++i) {
            var item = queue[i];
            var obj = item.obj[item.prop];
            var keys = Object.keys(obj);

            for (var j = 0; j < keys.length; ++j) {
                var key = keys[j];
                var val = obj[key];

                if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                    queue.push({
                        obj: obj,
                        prop: key
                    });
                    refs.push(val);
                }
            }
        }

        return compactQueue(queue);
    };

    var isRegExp = function isRegExp(obj) {
        return Object.prototype.toString.call(obj) === '[object RegExp]';
    };

    var isBuffer = function isBuffer(obj) {
        if (obj === null || typeof obj === 'undefined') {
            return false;
        }

        return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };

    module.exports = {
        arrayToObject: arrayToObject,
        assign: assign,
        compact: compact,
        decode: decode,
        encode: encode,
        isBuffer: isBuffer,
        isRegExp: isRegExp,
        merge: merge
    };
},340,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    module.exports = {
        'default': 'RFC3986',
        formatters: {
            RFC1738: function RFC1738(value) {
                return replace.call(value, percentTwenties, '+');
            },
            RFC3986: function RFC3986(value) {
                return value;
            }
        },
        RFC1738: 'RFC1738',
        RFC3986: 'RFC3986'
    };
},341,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var utils = _require(_dependencyMap[0]);

    var has = Object.prototype.hasOwnProperty;
    var defaults = {
        allowDots: false,
        allowPrototypes: false,
        arrayLimit: 20,
        decoder: utils.decode,
        delimiter: '&',
        depth: 5,
        parameterLimit: 1000,
        plainObjects: false,
        strictNullHandling: false
    };

    var parseValues = function parseQueryStringValues(str, options) {
        var obj = {};
        var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
        var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
        var parts = cleanStr.split(options.delimiter, limit);

        for (var i = 0; i < parts.length; ++i) {
            var part = parts[i];
            var bracketEqualsPos = part.indexOf(']=');
            var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
            var key, val;

            if (pos === -1) {
                key = options.decoder(part, defaults.decoder);
                val = options.strictNullHandling ? null : '';
            } else {
                key = options.decoder(part.slice(0, pos), defaults.decoder);
                val = options.decoder(part.slice(pos + 1), defaults.decoder);
            }

            if (has.call(obj, key)) {
                obj[key] = [].concat(obj[key]).concat(val);
            } else {
                obj[key] = val;
            }
        }

        return obj;
    };

    var parseObject = function parseObject(chain, val, options) {
        var leaf = val;

        for (var i = chain.length - 1; i >= 0; --i) {
            var obj;
            var root = chain[i];

            if (root === '[]') {
                obj = [];
                obj = obj.concat(leaf);
            } else {
                obj = options.plainObjects ? Object.create(null) : {};
                var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
                var index = parseInt(cleanRoot, 10);

                if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
                    obj = [];
                    obj[index] = leaf;
                } else {
                    obj[cleanRoot] = leaf;
                }
            }

            leaf = obj;
        }

        return leaf;
    };

    var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
        if (!givenKey) {
            return;
        }

        var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;
        var brackets = /(\[[^[\]]*])/;
        var child = /(\[[^[\]]*])/g;
        var segment = brackets.exec(key);
        var parent = segment ? key.slice(0, segment.index) : key;
        var keys = [];

        if (parent) {
            if (!options.plainObjects && has.call(Object.prototype, parent)) {
                if (!options.allowPrototypes) {
                    return;
                }
            }

            keys.push(parent);
        }

        var i = 0;

        while ((segment = child.exec(key)) !== null && i < options.depth) {
            i += 1;

            if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
                if (!options.allowPrototypes) {
                    return;
                }
            }

            keys.push(segment[1]);
        }

        if (segment) {
            keys.push('[' + key.slice(segment.index) + ']');
        }

        return parseObject(keys, val, options);
    };

    module.exports = function (str, opts) {
        var options = opts ? utils.assign({}, opts) : {};

        if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
            throw new TypeError('Decoder has to be a function.');
        }

        options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
        options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
        options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
        options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
        options.parseArrays = options.parseArrays !== false;
        options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
        options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
        options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
        options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
        options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
        options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

        if (str === '' || str === null || typeof str === 'undefined') {
            return options.plainObjects ? Object.create(null) : {};
        }

        var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
        var obj = options.plainObjects ? Object.create(null) : {};
        var keys = Object.keys(tempObj);

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            var newObj = parseKeys(key, tempObj[key], options);
            obj = utils.merge(obj, newObj, options);
        }

        return utils.compact(obj);
    };
},342,[340]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var _qs = _require(_dependencyMap[1]);

  var _qs2 = babelHelpers.interopRequireDefault(_qs);

  var _Constants = _require(_dependencyMap[2]);

  var _Constants2 = babelHelpers.interopRequireDefault(_Constants);

  var manifest = _Constants2.default.manifest;
  var USES_CUSTOM_SCHEME = _Constants2.default.appOwnership === 'standalone' && manifest.scheme;
  var HOST_URI = manifest.hostUri;

  if (!HOST_URI && !USES_CUSTOM_SCHEME) {
    HOST_URI = _removeScheme(_Constants2.default.linkingUri).replace(/\/--($|\/.*$)/, '');
  }

  var IS_EXPO_HOSTED = HOST_URI && (/^(.*\.)?(expo\.io|exp\.host|exp\.direct|expo\.test)(:.*)?(\/.*)?$/.test(HOST_URI) || manifest.developer);

  function _removeScheme(url) {
    return url.replace(/^[a-zA-Z0-9+\.\-]+:\/\//, '');
  }

  function _removePort(url) {
    return url.replace(/(?=([a-zA-Z0-9+\.\-]+:\/\/)?[^\/]):\d+/, '');
  }

  function _removeLeadingSlash(url) {
    return url.replace(/^\//, '');
  }

  function _removeTrailingSlash(url) {
    return url.replace(/\/$/, '');
  }

  function _removeTrailingSlashAndQueryString(url) {
    return url.replace(/\/?\?.*$/, '');
  }

  function makeUrl(path) {
    var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var scheme = 'exp';

    if (_Constants2.default.appOwnership === 'standalone') {
      scheme = manifest.scheme || manifest.detach && manifest.detach.scheme;
    }

    if (!scheme) {
      throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');
    }

    var hostUri = HOST_URI || '';

    if (USES_CUSTOM_SCHEME && IS_EXPO_HOSTED) {
      hostUri = '';
    }

    if (path) {
      if (IS_EXPO_HOSTED && hostUri) {
        path = "/--/" + _removeLeadingSlash(path);
      }

      if (!path.startsWith('/') && hostUri) {
        path = "/" + path;
      } else if (path.startsWith('/') && !hostUri) {
        path = path.substr(1);
      }
    } else {
      path = '';
    }

    var queryString = '';
    var queryStringMatchResult = hostUri.match(/(.*)\?(.+)/);

    if (queryStringMatchResult) {
      hostUri = queryStringMatchResult[1];
      queryString = queryStringMatchResult[2];
      var paramsFromHostUri = {};

      try {
        var parsedParams = _qs2.default.parse(queryString);

        if (typeof parsedParams === 'object') {
          paramsFromHostUri = parsedParams;
        }
      } catch (e) {}

      queryParams = babelHelpers.extends({}, queryParams, paramsFromHostUri);
    }

    queryString = _qs2.default.stringify(queryParams);

    if (queryString) {
      queryString = "?" + queryString;
    }

    hostUri = _removeTrailingSlash(hostUri);
    return encodeURI(scheme + "://" + hostUri + path + queryString);
  }

  function parse(url) {
    if (!url) {
      throw new Error('parse cannot be called with a null value');
    }

    var decodedUrl = _removePort(decodeURI(url));

    var path = null;
    var queryParams = {};
    var queryStringMatchResult = decodedUrl.match(/(.*)\?(.+)/);

    if (queryStringMatchResult) {
      decodedUrl = queryStringMatchResult[1];
      queryParams = _qs2.default.parse(queryStringMatchResult[2]);
    }

    var hostUri = HOST_URI || '';

    var hostUriStripped = _removePort(_removeTrailingSlashAndQueryString(hostUri));

    if (hostUriStripped && decodedUrl.indexOf(hostUriStripped) > -1) {
      path = decodedUrl.substr(decodedUrl.indexOf(hostUriStripped) + hostUriStripped.length);
    } else {
      path = _removeScheme(decodedUrl);
    }

    path = _removeLeadingSlash(path);

    if (IS_EXPO_HOSTED && !USES_CUSTOM_SCHEME && path.startsWith('--/')) {
      path = path.substr(3);
    } else if (path.indexOf('+') > -1) {
      path = path.substr(path.indexOf('+') + 1);
    }

    return {
      path: path,
      queryParams: queryParams
    };
  }

  function parseInitialURLAsync() {
    var initialUrl;
    return regeneratorRuntime.async(function parseInitialURLAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(_reactNative.Linking.getInitialURL());

          case 2:
            initialUrl = _context.sent;
            return _context.abrupt("return", parse(initialUrl));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  var newLinking = new _reactNative.Linking.constructor();
  newLinking.makeUrl = makeUrl;
  newLinking.parse = parse;
  newLinking.parseInitialURLAsync = parseInitialURLAsync;
  exports.default = newLinking;
},343,[14,338,310]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _reactNative = _require(_dependencyMap[1]);

  var ExponentWebBrowser = _reactNative.NativeModules.ExponentWebBrowser;

  function openBrowserAsync(url) {
    return regeneratorRuntime.async(function openBrowserAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", ExponentWebBrowser.openBrowserAsync(url));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function dismissBrowser() {
    ExponentWebBrowser.dismissBrowser();
  }

  function openAuthSessionAsync(url, redirectUrl) {
    return regeneratorRuntime.async(function openAuthSessionAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!_authSessionIsNativelySupported()) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl));

          case 4:
            return _context2.abrupt("return", _openAuthSessionPolyfillAsync(url, redirectUrl));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function dismissAuthSession() {
    if (_authSessionIsNativelySupported()) {
      ExponentWebBrowser.dismissAuthSession();
    } else {
      ExponentWebBrowser.dismissBrowser();
    }
  }

  function _authSessionIsNativelySupported() {
    {
      return false;
    }
    var versionNumber = parseInt(_reactNative.Platform.Version, 10);
    return versionNumber >= 11;
  }

  var _redirectHandler = void 0;

  function _openAuthSessionPolyfillAsync(startUrl, returnUrl) {
    return regeneratorRuntime.async(function _openAuthSessionPolyfillAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            (0, _invariant2.default)(!_redirectHandler, 'WebBrowser.openAuthSessionAsync is in a bad state. _redirectHandler is defined when it should not be.');
            _context3.prev = 1;
            _context3.next = 4;
            return regeneratorRuntime.awrap(Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]));

          case 4:
            return _context3.abrupt("return", _context3.sent);

          case 5:
            _context3.prev = 5;
            dismissBrowser();

            _reactNative.Linking.removeEventListener('url', _redirectHandler);

            _redirectHandler = null;
            return _context3.finish(5);

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this, [[1,, 5, 10]]);
  }

  function _waitForRedirectAsync(returnUrl) {
    return new Promise(function (resolve) {
      _redirectHandler = function _redirectHandler(event) {
        if (event.url.startsWith(returnUrl)) {
          resolve({
            url: event.url,
            type: 'success'
          });
        }
      };

      _reactNative.Linking.addEventListener('url', _redirectHandler);
    });
  }

  exports.default = {
    openBrowserAsync: openBrowserAsync,
    openAuthSessionAsync: openAuthSessionAsync,
    dismissBrowser: dismissBrowser,
    dismissAuthSession: dismissAuthSession
  };
},344,[319,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentErrorRecovery = _reactNative.NativeModules.ExponentErrorRecovery;
  exports.default = {
    setRecoveryProps: function setRecoveryProps(props) {
      return ExponentErrorRecovery.setRecoveryProps(props);
    }
  };
},345,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp2;

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _Camera = _require(_dependencyMap[3]);

  var _Camera2 = babelHelpers.interopRequireDefault(_Camera);

  var _Constants = _require(_dependencyMap[4]);

  var _Constants2 = babelHelpers.interopRequireDefault(_Constants);

  var GLView = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(GLView, _React$Component);

    function GLView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, GLView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = GLView.__proto__ || Object.getPrototypeOf(GLView)).call.apply(_ref, [this].concat(args))), _this), _this._setNativeRef = function (nativeRef) {
        if (_this.props.nativeRef_EXPERIMENTAL) {
          _this.props.nativeRef_EXPERIMENTAL(nativeRef);
        }

        _this.nativeRef = nativeRef;
      }, _this._onSurfaceCreate = function (_ref2) {
        var exglCtxId = _ref2.nativeEvent.exglCtxId;
        var gl = getGl(exglCtxId);
        _this.exglCtxId = exglCtxId;

        if (_this.props.onContextCreate) {
          _this.props.onContextCreate(gl);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(GLView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            onContextCreate = _props.onContextCreate,
            msaaSamples = _props.msaaSamples,
            viewProps = babelHelpers.objectWithoutProperties(_props, ["onContextCreate", "msaaSamples"]);
        return React.createElement(
          _reactNative.View,
          viewProps,
          React.createElement(GLView.NativeView, {
            ref: this._setNativeRef,
            style: babelHelpers.extends({
              flex: 1
            }, {}),
            onSurfaceCreate: this._onSurfaceCreate,
            msaaSamples: undefined
          })
        );
      }
    }, {
      key: "startARSessionAsync",
      value: function startARSessionAsync() {
        return _reactNative.NativeModules.ExponentGLViewManager.startARSessionAsync((0, _reactNative.findNodeHandle)(this.nativeRef));
      }
    }, {
      key: "createCameraTextureAsync",
      value: function createCameraTextureAsync(cameraRef) {
        var viewTag, cameraTag, _ref3, exglObjId;

        return regeneratorRuntime.async(function createCameraTextureAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                viewTag = (0, _reactNative.findNodeHandle)(this.nativeRef);
                cameraTag = (0, _reactNative.findNodeHandle)(cameraRef);
                _context.next = 4;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentGLObjectManager.createCameraTextureAsync(viewTag, cameraTag));

              case 4:
                _ref3 = _context.sent;
                exglObjId = _ref3.exglObjId;
                return _context.abrupt("return", new WebGLTexture(exglObjId));

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "destroyObjectAsync",
      value: function destroyObjectAsync(glObject) {
        return _reactNative.NativeModules.ExponentGLObjectManager.destroyObjectAsync(glObject.id);
      }
    }, {
      key: "takeSnapshotAsync",
      value: function takeSnapshotAsync() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var exglCtxId = this.exglCtxId;
        return GLView.takeSnapshotAsync(exglCtxId, options);
      }
    }], [{
      key: "createContextAsync",
      value: function createContextAsync() {
        var _ref4, exglCtxId;

        return regeneratorRuntime.async(function createContextAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentGLObjectManager.createContextAsync());

              case 2:
                _ref4 = _context2.sent;
                exglCtxId = _ref4.exglCtxId;
                return _context2.abrupt("return", getGl(exglCtxId));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "destroyContextAsync",
      value: function destroyContextAsync(exgl) {
        var exglCtxId;
        return regeneratorRuntime.async(function destroyContextAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                exglCtxId = getContextId(exgl);
                return _context3.abrupt("return", _reactNative.NativeModules.ExponentGLObjectManager.destroyContextAsync(exglCtxId));

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "takeSnapshotAsync",
      value: function takeSnapshotAsync(exgl) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var exglCtxId;
        return regeneratorRuntime.async(function takeSnapshotAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                exglCtxId = getContextId(exgl);
                return _context4.abrupt("return", _reactNative.NativeModules.ExponentGLObjectManager.takeSnapshotAsync(exglCtxId, options));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      }
    }]);
    return GLView;
  }(React.Component), _class.propTypes = babelHelpers.extends({
    onContextCreate: _propTypes2.default.func,
    msaaSamples: _propTypes2.default.number,
    nativeRef_EXPERIMENTAL: _propTypes2.default.func
  }, _reactNative.ViewPropTypes), _class.defaultProps = {
    msaaSamples: 4
  }, _class.NativeView = (0, _reactNative.requireNativeComponent)('ExponentGLView', GLView, {
    nativeOnly: {
      onSurfaceCreate: true
    }
  }), _temp2);
  exports.default = GLView;

  var WebGLRenderingContext = function WebGLRenderingContext() {
    babelHelpers.classCallCheck(this, WebGLRenderingContext);
  };

  var WebGL2RenderingContext = function (_WebGLRenderingContex) {
    babelHelpers.inherits(WebGL2RenderingContext, _WebGLRenderingContex);

    function WebGL2RenderingContext() {
      babelHelpers.classCallCheck(this, WebGL2RenderingContext);
      return babelHelpers.possibleConstructorReturn(this, (WebGL2RenderingContext.__proto__ || Object.getPrototypeOf(WebGL2RenderingContext)).apply(this, arguments));
    }

    return WebGL2RenderingContext;
  }(WebGLRenderingContext);

  var idToObject = {};

  var WebGLObject = function () {
    function WebGLObject(id) {
      babelHelpers.classCallCheck(this, WebGLObject);

      if (idToObject[id]) {
        throw new Error("WebGL object with underlying EXGLObjectId '" + id + "' already exists!");
      }

      this.id = id;
    }

    babelHelpers.createClass(WebGLObject, [{
      key: "toString",
      value: function toString() {
        return "[WebGLObject " + this.id + "]";
      }
    }]);
    return WebGLObject;
  }();

  var wrapObject = function wrapObject(type, id) {
    var found = idToObject[id];

    if (found) {
      return found;
    }

    return idToObject[id] = new type(id);
  };

  var objectId = function objectId(obj) {
    return obj && obj.id;
  };

  var WebGLBuffer = function (_WebGLObject) {
    babelHelpers.inherits(WebGLBuffer, _WebGLObject);

    function WebGLBuffer() {
      babelHelpers.classCallCheck(this, WebGLBuffer);
      return babelHelpers.possibleConstructorReturn(this, (WebGLBuffer.__proto__ || Object.getPrototypeOf(WebGLBuffer)).apply(this, arguments));
    }

    return WebGLBuffer;
  }(WebGLObject);

  var WebGLFramebuffer = function (_WebGLObject2) {
    babelHelpers.inherits(WebGLFramebuffer, _WebGLObject2);

    function WebGLFramebuffer() {
      babelHelpers.classCallCheck(this, WebGLFramebuffer);
      return babelHelpers.possibleConstructorReturn(this, (WebGLFramebuffer.__proto__ || Object.getPrototypeOf(WebGLFramebuffer)).apply(this, arguments));
    }

    return WebGLFramebuffer;
  }(WebGLObject);

  var WebGLProgram = function (_WebGLObject3) {
    babelHelpers.inherits(WebGLProgram, _WebGLObject3);

    function WebGLProgram() {
      babelHelpers.classCallCheck(this, WebGLProgram);
      return babelHelpers.possibleConstructorReturn(this, (WebGLProgram.__proto__ || Object.getPrototypeOf(WebGLProgram)).apply(this, arguments));
    }

    return WebGLProgram;
  }(WebGLObject);

  var WebGLRenderbuffer = function (_WebGLObject4) {
    babelHelpers.inherits(WebGLRenderbuffer, _WebGLObject4);

    function WebGLRenderbuffer() {
      babelHelpers.classCallCheck(this, WebGLRenderbuffer);
      return babelHelpers.possibleConstructorReturn(this, (WebGLRenderbuffer.__proto__ || Object.getPrototypeOf(WebGLRenderbuffer)).apply(this, arguments));
    }

    return WebGLRenderbuffer;
  }(WebGLObject);

  var WebGLShader = function (_WebGLObject5) {
    babelHelpers.inherits(WebGLShader, _WebGLObject5);

    function WebGLShader() {
      babelHelpers.classCallCheck(this, WebGLShader);
      return babelHelpers.possibleConstructorReturn(this, (WebGLShader.__proto__ || Object.getPrototypeOf(WebGLShader)).apply(this, arguments));
    }

    return WebGLShader;
  }(WebGLObject);

  var WebGLTexture = function (_WebGLObject6) {
    babelHelpers.inherits(WebGLTexture, _WebGLObject6);

    function WebGLTexture() {
      babelHelpers.classCallCheck(this, WebGLTexture);
      return babelHelpers.possibleConstructorReturn(this, (WebGLTexture.__proto__ || Object.getPrototypeOf(WebGLTexture)).apply(this, arguments));
    }

    return WebGLTexture;
  }(WebGLObject);

  var WebGLUniformLocation = function WebGLUniformLocation(id) {
    babelHelpers.classCallCheck(this, WebGLUniformLocation);
    this.id = id;
  };

  var WebGLActiveInfo = function WebGLActiveInfo(obj) {
    babelHelpers.classCallCheck(this, WebGLActiveInfo);
    babelHelpers.extends(this, obj);
  };

  var WebGLShaderPrecisionFormat = function WebGLShaderPrecisionFormat(obj) {
    babelHelpers.classCallCheck(this, WebGLShaderPrecisionFormat);
    babelHelpers.extends(this, obj);
  };

  var WebGLQuery = function (_WebGLObject7) {
    babelHelpers.inherits(WebGLQuery, _WebGLObject7);

    function WebGLQuery() {
      babelHelpers.classCallCheck(this, WebGLQuery);
      return babelHelpers.possibleConstructorReturn(this, (WebGLQuery.__proto__ || Object.getPrototypeOf(WebGLQuery)).apply(this, arguments));
    }

    return WebGLQuery;
  }(WebGLObject);

  var WebGLSampler = function (_WebGLObject8) {
    babelHelpers.inherits(WebGLSampler, _WebGLObject8);

    function WebGLSampler() {
      babelHelpers.classCallCheck(this, WebGLSampler);
      return babelHelpers.possibleConstructorReturn(this, (WebGLSampler.__proto__ || Object.getPrototypeOf(WebGLSampler)).apply(this, arguments));
    }

    return WebGLSampler;
  }(WebGLObject);

  var WebGLSync = function (_WebGLObject9) {
    babelHelpers.inherits(WebGLSync, _WebGLObject9);

    function WebGLSync() {
      babelHelpers.classCallCheck(this, WebGLSync);
      return babelHelpers.possibleConstructorReturn(this, (WebGLSync.__proto__ || Object.getPrototypeOf(WebGLSync)).apply(this, arguments));
    }

    return WebGLSync;
  }(WebGLObject);

  var WebGLTransformFeedback = function (_WebGLObject10) {
    babelHelpers.inherits(WebGLTransformFeedback, _WebGLObject10);

    function WebGLTransformFeedback() {
      babelHelpers.classCallCheck(this, WebGLTransformFeedback);
      return babelHelpers.possibleConstructorReturn(this, (WebGLTransformFeedback.__proto__ || Object.getPrototypeOf(WebGLTransformFeedback)).apply(this, arguments));
    }

    return WebGLTransformFeedback;
  }(WebGLObject);

  var WebGLVertexArrayObject = function (_WebGLObject11) {
    babelHelpers.inherits(WebGLVertexArrayObject, _WebGLObject11);

    function WebGLVertexArrayObject() {
      babelHelpers.classCallCheck(this, WebGLVertexArrayObject);
      return babelHelpers.possibleConstructorReturn(this, (WebGLVertexArrayObject.__proto__ || Object.getPrototypeOf(WebGLVertexArrayObject)).apply(this, arguments));
    }

    return WebGLVertexArrayObject;
  }(WebGLObject);

  var wrapMethods = function wrapMethods(gl) {
    var _getParameterTypes;

    var wrap = function wrap(methodNames, wrapper) {
      return (Array.isArray(methodNames) ? methodNames : [methodNames]).forEach(function (methodName) {
        return gl[methodName] = wrapper(gl[methodName]);
      });
    };

    var getParameterTypes = (_getParameterTypes = {}, babelHelpers.defineProperty(_getParameterTypes, gl.ARRAY_BUFFER_BINDING, WebGLBuffer), babelHelpers.defineProperty(_getParameterTypes, gl.COPY_READ_BUFFER_BINDING, WebGLBuffer), babelHelpers.defineProperty(_getParameterTypes, gl.COPY_WRITE_BUFFER_BINDING, WebGLBuffer), babelHelpers.defineProperty(_getParameterTypes, gl.CURRENT_PROGRAM, WebGLProgram), babelHelpers.defineProperty(_getParameterTypes, gl.DRAW_FRAMEBUFFER_BINDING, WebGLFramebuffer), babelHelpers.defineProperty(_getParameterTypes, gl.ELEMENT_ARRAY_BUFFER_BINDING, WebGLBuffer), babelHelpers.defineProperty(_getParameterTypes, gl.READ_FRAMEBUFFER_BINDING, WebGLFramebuffer), babelHelpers.defineProperty(_getParameterTypes, gl.RENDERBUFFER_BINDING, WebGLRenderbuffer), babelHelpers.defineProperty(_getParameterTypes, gl.SAMPLER_BINDING, WebGLSampler), babelHelpers.defineProperty(_getParameterTypes, gl.TEXTURE_BINDING_2D_ARRAY, WebGLTexture), babelHelpers.defineProperty(_getParameterTypes, gl.TEXTURE_BINDING_2D, WebGLTexture), babelHelpers.defineProperty(_getParameterTypes, gl.TEXTURE_BINDING_3D, WebGLTexture), babelHelpers.defineProperty(_getParameterTypes, gl.TEXTURE_BINDING_CUBE_MAP, WebGLTexture), babelHelpers.defineProperty(_getParameterTypes, gl.TRANSFORM_FEEDBACK_BINDING, WebGLTransformFeedback), babelHelpers.defineProperty(_getParameterTypes, gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, WebGLBuffer), babelHelpers.defineProperty(_getParameterTypes, gl.UNIFORM_BUFFER_BINDING, WebGLBuffer), babelHelpers.defineProperty(_getParameterTypes, gl.VERTEX_ARRAY_BINDING, WebGLVertexArrayObject), _getParameterTypes);
    wrap('getParameter', function (orig) {
      return function (pname) {
        var ret = orig.call(gl, pname);

        if (pname === gl.VERSION) {
          ret = "WebGL 2.0 (Expo-android-" + _Constants2.default.expoVersion + ") (" + ret + ")";
        }

        var type = getParameterTypes[pname];
        return type ? wrapObject(type, ret) : ret;
      };
    });
    wrap('bindBuffer', function (orig) {
      return function (target, buffer) {
        return orig.call(gl, target, buffer && buffer.id);
      };
    });
    wrap('createBuffer', function (orig) {
      return function () {
        return wrapObject(WebGLBuffer, orig.call(gl));
      };
    });
    wrap('deleteBuffer', function (orig) {
      return function (buffer) {
        return orig.call(gl, buffer && buffer.id);
      };
    });
    wrap('isBuffer', function (orig) {
      return function (buffer) {
        return buffer instanceof WebGLBuffer && orig.call(gl, buffer.id);
      };
    });
    wrap('bindFramebuffer', function (orig) {
      return function (target, framebuffer) {
        return orig.call(gl, target, framebuffer && framebuffer.id);
      };
    });
    wrap('createFramebuffer', function (orig) {
      return function () {
        return wrapObject(WebGLFramebuffer, orig.call(gl));
      };
    });
    wrap('deleteFramebuffer', function (orig) {
      return function (framebuffer) {
        return orig.call(gl, framebuffer && framebuffer.id);
      };
    });
    wrap('framebufferRenderbuffer', function (orig) {
      return function (target, attachment, rbtarget, rb) {
        return orig.call(gl, target, attachment, rbtarget, rb && rb.id);
      };
    });
    wrap('framebufferTexture2D', function (orig) {
      return function (target, attachment, textarget, tex, level) {
        return orig.call(gl, target, attachment, textarget, tex && tex.id, level);
      };
    });
    wrap('isFramebuffer', function (orig) {
      return function (framebuffer) {
        return framebuffer instanceof WebGLFramebuffer && orig.call(gl, framebuffer.id);
      };
    });
    wrap('framebufferTextureLayer', function (orig) {
      return function (target, attachment, texture, level, layer) {
        return orig.call(gl, target, attachment, objectId(texture), level, layer);
      };
    });
    wrap('bindRenderbuffer', function (orig) {
      return function (target, renderbuffer) {
        return orig.call(gl, target, renderbuffer && renderbuffer.id);
      };
    });
    wrap('createRenderbuffer', function (orig) {
      return function () {
        return wrapObject(WebGLRenderbuffer, orig.call(gl));
      };
    });
    wrap('deleteRenderbuffer', function (orig) {
      return function (renderbuffer) {
        return orig.call(gl, renderbuffer && renderbuffer.id);
      };
    });
    wrap('isRenderbuffer', function (orig) {
      return function (renderbuffer) {
        return renderbuffer instanceof WebGLRenderbuffer && orig.call(gl, renderbuffer.id);
      };
    });
    wrap('bindTexture', function (orig) {
      return function (target, texture) {
        return orig.call(gl, target, texture && texture.id);
      };
    });
    wrap('createTexture', function (orig) {
      return function () {
        return wrapObject(WebGLTexture, orig.call(gl));
      };
    });
    wrap('deleteTexture', function (orig) {
      return function (texture) {
        return orig.call(gl, texture && texture.id);
      };
    });
    wrap('isTexture', function (orig) {
      return function (texture) {
        return texture instanceof WebGLTexture && orig.call(gl, texture.id);
      };
    });
    wrap('attachShader', function (orig) {
      return function (program, shader) {
        return orig.call(gl, program && program.id, shader && shader.id);
      };
    });
    wrap('bindAttribLocation', function (orig) {
      return function (program, index, name) {
        return orig.call(gl, program && program.id, index, name);
      };
    });
    wrap('compileShader', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('createProgram', function (orig) {
      return function () {
        return wrapObject(WebGLProgram, orig.call(gl));
      };
    });
    wrap('createShader', function (orig) {
      return function (type) {
        return wrapObject(WebGLShader, orig.call(gl, type));
      };
    });
    wrap('deleteProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('deleteShader', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('detachShader', function (orig) {
      return function (program, shader) {
        return orig.call(gl, program && program.id, shader && shader.id);
      };
    });
    wrap('getAttachedShaders', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id).map(function (id) {
          return wrapObject(WebGLShader, id);
        });
      };
    });
    wrap('getProgramParameter', function (orig) {
      return function (program, pname) {
        return orig.call(gl, program && program.id, pname);
      };
    });
    wrap('getProgramInfoLog', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('getShaderParameter', function (orig) {
      return function (shader, pname) {
        return orig.call(gl, shader && shader.id, pname);
      };
    });
    wrap('getShaderPrecisionFormat', function (orig) {
      return function (shadertype, precisiontype) {
        return new WebGLShaderPrecisionFormat(orig.call(gl, shadertype, precisiontype));
      };
    });
    wrap('getShaderInfoLog', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('getShaderSource', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('linkProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('shaderSource', function (orig) {
      return function (shader, source) {
        return orig.call(gl, shader && shader.id, source);
      };
    });
    wrap('useProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('validateProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('isShader', function (orig) {
      return function (shader) {
        return shader instanceof WebGLShader && orig.call(gl, shader.id);
      };
    });
    wrap('isProgram', function (orig) {
      return function (program) {
        return program instanceof WebGLProgram && orig.call(gl, program.id);
      };
    });
    wrap('getFragDataLocation', function (orig) {
      return function (program) {
        return orig.call(gl, objectId(program));
      };
    });
    wrap('getActiveAttrib', function (orig) {
      return function (program, index) {
        return new WebGLActiveInfo(orig.call(gl, program && program.id, index));
      };
    });
    wrap('getActiveUniform', function (orig) {
      return function (program, index) {
        return new WebGLActiveInfo(orig.call(gl, program && program.id, index));
      };
    });
    wrap('getAttribLocation', function (orig) {
      return function (program, name) {
        return orig.call(gl, program && program.id, name);
      };
    });
    wrap('getUniform', function (orig) {
      return function (program, location) {
        return orig.call(gl, program && program.id, location && location.id);
      };
    });
    wrap('getUniformLocation', function (orig) {
      return function (program, name) {
        return new WebGLUniformLocation(orig.call(gl, program && program.id, name));
      };
    });
    wrap(['uniform1f', 'uniform1i', 'uniform1ui'], function (orig) {
      return function (loc, x) {
        return orig.call(gl, objectId(loc), x);
      };
    });
    wrap(['uniform2f', 'uniform2i', 'uniform2ui'], function (orig) {
      return function (loc, x, y) {
        return orig.call(gl, objectId(loc), x, y);
      };
    });
    wrap(['uniform3f', 'uniform3i', 'uniform3ui'], function (orig) {
      return function (loc, x, y, z) {
        return orig.call(gl, objectId(loc), x, y, z);
      };
    });
    wrap(['uniform4f', 'uniform4i', 'uniform4ui'], function (orig) {
      return function (loc, x, y, z, w) {
        return orig.call(gl, objectId(loc), x, y, z, w);
      };
    });
    wrap(['uniform1fv', 'uniform2fv', 'uniform3fv', 'uniform4fv'], function (orig) {
      return function (loc, val) {
        return orig.call(gl, objectId(loc), new Float32Array(val));
      };
    });
    wrap(['uniform1iv', 'uniform2iv', 'uniform3iv', 'uniform4iv'], function (orig) {
      return function (loc, val) {
        return orig.call(gl, objectId(loc), new Int32Array(val));
      };
    });
    wrap(['uniform1uiv', 'uniform2uiv', 'uniform3uiv', 'uniform4uiv'], function (orig) {
      return function (loc, val) {
        return orig.call(gl, objectId(loc), new Uint32Array(val));
      };
    });
    wrap(['uniformMatrix2fv', 'uniformMatrix3fv', 'uniformMatrix4fv', 'uniformMatrix3x2fv', 'uniformMatrix4x2fv', 'uniformMatrix2x3fv', 'uniformMatrix4x3fv', 'uniformMatrix2x4fv', 'uniformMatrix3x4fv'], function (orig) {
      return function (loc, transpose, val) {
        return orig.call(gl, loc && loc.id, transpose, new Float32Array(val));
      };
    });
    wrap(['vertexAttrib1fv', 'vertexAttrib2fv', 'vertexAttrib3fv', 'vertexAttrib4fv'], function (orig) {
      return function (index, val) {
        return orig.call(gl, index, new Float32Array(val));
      };
    });
    wrap('vertexAttribI4iv', function (orig) {
      return function (index, val) {
        return orig.call(gl, index, new Int32Array(val));
      };
    });
    wrap('vertexAttribI4uiv', function (orig) {
      return function (index, val) {
        return orig.call(gl, index, new Uint32Array(val));
      };
    });
    wrap('createQuery', function (orig) {
      return function () {
        return wrapObject(WebGLQuery, orig.call(gl));
      };
    });
    wrap('deleteQuery', function (orig) {
      return function (query) {
        return orig.call(gl, objectId(query));
      };
    });
    wrap('beginQuery', function (orig) {
      return function (target, query) {
        return orig.call(gl, target, objectId(query));
      };
    });
    wrap('getQuery', function (orig) {
      return function (target, pname) {
        var id = orig.call(gl, target, pname);
        return id ? wrapObject(WebGLQuery, id) : id;
      };
    });
    wrap('getQueryParameter', function (orig) {
      return function (query, pname) {
        return orig.call(gl, objectId(query), pname);
      };
    });
    wrap('bindSampler', function (orig) {
      return function (unit, sampler) {
        return orig.call(gl, unit, objectId(sampler));
      };
    });
    wrap('createSampler', function (orig) {
      return function () {
        return wrapObject(WebGLSampler, orig.call(gl));
      };
    });
    wrap('deleteSampler', function (orig) {
      return function (sampler) {
        return orig.call(gl, objectId(sampler));
      };
    });
    wrap('isSampler', function (orig) {
      return function (sampler) {
        return sampler instanceof WebGLSampler && orig.call(gl, sampler.id);
      };
    });
    wrap(['samplerParameteri', 'samplerParameterf'], function (orig) {
      return function (sampler, pname, param) {
        return orig.call(gl, objectId(sampler), pname, param);
      };
    });
    wrap('getSamplerParameter', function (orig) {
      return function (sampler, pname) {
        return orig.call(gl, objectId(sampler), pname);
      };
    });
    wrap('bindTransformFeedback', function (orig) {
      return function (target, transformFeedback) {
        return orig.call(gl, target, objectId(transformFeedback));
      };
    });
    wrap('createTransformFeedback', function (orig) {
      return function () {
        return wrapObject(WebGLTransformFeedback, orig.call(gl));
      };
    });
    wrap('deleteTransformFeedback', function (orig) {
      return function (transformFeedback) {
        return orig.call(gl, objectId(transformFeedback));
      };
    });
    wrap('transformFeedbackVaryings', function (orig) {
      return function (program, varyings, bufferMode) {
        return orig.call(gl, objectId(program), varyings, bufferMode);
      };
    });
    wrap('getTransformFeedbackVarying', function (orig) {
      return function (program, index) {
        return new WebGLActiveInfo(orig.call(gl, objectId(program), index));
      };
    });
    wrap(['bindBufferBase', 'bindBufferRange'], function (orig) {
      return function (target, index, buffer) {
        for (var _len2 = arguments.length, rest = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
          rest[_key2 - 3] = arguments[_key2];
        }

        return orig.call.apply(orig, [gl, target, index, objectId(buffer)].concat(rest));
      };
    });
    wrap('getUniformIndices', function (orig) {
      return function (program, uniformNames) {
        var uintArray = orig.call(gl, objectId(program), uniformNames);
        return Array.from(uintArray);
      };
    });
    wrap('getActiveUniforms', function (orig) {
      return function (program, uniformIndices, pname) {
        var intArray = orig.call(gl, objectId(program), new Uint32Array(uniformIndices), pname);
        var boolResult = pname === gl.UNIFORM_IS_ROW_MAJOR;
        var arr = Array.from(intArray);
        return boolResult ? arr.map(function (val) {
          return !!val;
        }) : arr;
      };
    });
    wrap('getUniformBlockIndex', function (orig) {
      return function (program, uniformBlockName) {
        return orig.call(gl, objectId(program), uniformBlockName);
      };
    });
    wrap('getActiveUniformBlockName', function (orig) {
      return function (program, uniformBlockIndex) {
        return orig.call(gl, objectId(program), uniformBlockIndex);
      };
    });
    wrap('uniformBlockBinding', function (orig) {
      return function (program, uniformBlockIndex, uniformBlockBinding) {
        return orig.call(gl, objectId(program), uniformBlockIndex, uniformBlockBinding);
      };
    });
    wrap('bindVertexArray', function (orig) {
      return function (vertexArray) {
        return orig.call(gl, vertexArray && vertexArray.id);
      };
    });
    wrap('createVertexArray', function (orig) {
      return function () {
        return wrapObject(WebGLVertexArrayObject, orig.call(gl));
      };
    });
    wrap('deleteVertexArray', function (orig) {
      return function (vertexArray) {
        return orig.call(gl, vertexArray && vertexArray.id);
      };
    });
    wrap('isVertexArray', function (orig) {
      return function (vertexArray) {
        return vertexArray instanceof WebGLVertexArrayObject && orig.call(gl, vertexArray.id);
      };
    });
  };

  var getGl = function getGl(exglCtxId) {
    var gl = global.__EXGLContexts[exglCtxId];
    gl.__exglCtxId = exglCtxId;
    delete global.__EXGLContexts[exglCtxId];
    var glesVersion = gl.getParameter(gl.VERSION);
    var supportsWebGL2 = parseFloat(glesVersion.split(/[^\d.]+/g).join(' ')) >= 3.0;
    var prototype = supportsWebGL2 ? global.WebGL2RenderingContext.prototype : global.WebGLRenderingContext.prototype;

    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(gl, prototype);
    } else {
      gl.__proto__ = prototype;
    }

    wrapMethods(gl);
    gl.canvas = null;
    var viewport = gl.getParameter(gl.VIEWPORT);
    gl.drawingBufferWidth = viewport[2];
    gl.drawingBufferHeight = viewport[3];
    var enableLogging = false;
    Object.defineProperty(gl, 'enableLogging', {
      configurable: true,
      get: function get() {
        return enableLogging;
      },
      set: function set(enable) {
        if (enable === enableLogging) {
          return;
        }

        if (enable) {
          Object.keys(gl).forEach(function (key) {
            if (typeof gl[key] === 'function') {
              var original = gl[key];

              gl[key] = function () {
                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                console.log("EXGL: " + key + "(" + args.join(', ') + ")");
                var r = original.apply(gl, args);
                console.log("EXGL:    = " + r);
                return r;
              };

              gl[key].original = original;
            }
          });
        } else {
          Object.keys(gl).forEach(function (key) {
            if (typeof gl[key] === 'function' && gl[key].original) {
              gl[key] = gl[key].original;
            }
          });
        }

        enableLogging = enable;
      }
    });
    return gl;
  };

  var getContextId = function getContextId(exgl) {
    var exglCtxId = exgl && typeof exgl === 'object' ? exgl.__exglCtxId : exgl;

    if (!exglCtxId || typeof exglCtxId !== 'number') {
      throw new Error("Invalid EXGLContext id: " + String(exglCtxId));
    }

    return exglCtxId;
  };

  global.WebGLRenderingContext = WebGLRenderingContext;
  global.WebGL2RenderingContext = WebGL2RenderingContext;
  global.WebGLObject = WebGLObject;
  global.WebGLBuffer = WebGLBuffer;
  global.WebGLFramebuffer = WebGLFramebuffer;
  global.WebGLProgram = WebGLProgram;
  global.WebGLRenderbuffer = WebGLRenderbuffer;
  global.WebGLShader = WebGLShader;
  global.WebGLTexture = WebGLTexture;
  global.WebGLUniformLocation = WebGLUniformLocation;
  global.WebGLActiveInfo = WebGLActiveInfo;
  global.WebGLShaderPrecisionFormat = WebGLShaderPrecisionFormat;
  global.WebGLQuery = WebGLQuery;
  global.WebGLSampler = WebGLSampler;
  global.WebGLSync = WebGLSync;
  global.WebGLTransformFeedback = WebGLTransformFeedback;
  global.WebGLVertexArrayObject = WebGLVertexArrayObject;
},346,[121,103,14,347,310]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Constants = exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _lodash = _require(_dependencyMap[2]);

  var _reactNative = _require(_dependencyMap[3]);

  var CameraManager = _reactNative.NativeModules.ExponentCameraManager || _reactNative.NativeModules.ExponentCameraModule;
  var EventThrottleMs = 500;
  var Camera = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Camera, _React$Component);

    function Camera(props) {
      babelHelpers.classCallCheck(this, Camera);

      var _this = babelHelpers.possibleConstructorReturn(this, (Camera.__proto__ || Object.getPrototypeOf(Camera)).call(this, props));

      _this._onCameraReady = function () {
        if (_this.props.onCameraReady) {
          _this.props.onCameraReady();
        }
      };

      _this._onMountError = function (_ref) {
        var nativeEvent = _ref.nativeEvent;

        if (_this.props.onMountError) {
          _this.props.onMountError(nativeEvent);
        }
      };

      _this._onObjectDetected = function (callback) {
        return function (_ref2) {
          var nativeEvent = _ref2.nativeEvent;
          var type = nativeEvent.type;

          if (_this._lastEvents[type] && _this._lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this._lastEvents[type] && new Date() - _this._lastEventsTimes[type] < EventThrottleMs) {
            return;
          }

          if (callback) {
            callback(nativeEvent);
            _this._lastEventsTimes[type] = new Date();
            _this._lastEvents[type] = JSON.stringify(nativeEvent);
          }
        };
      };

      _this._setReference = function (ref) {
        if (ref) {
          _this._cameraRef = ref;
          _this._cameraHandle = (0, _reactNative.findNodeHandle)(ref);
        } else {
          _this._cameraRef = null;
          _this._cameraHandle = null;
        }
      };

      _this._lastEvents = {};
      _this._lastEventsTimes = {};
      return _this;
    }

    babelHelpers.createClass(Camera, [{
      key: "takePictureAsync",
      value: function takePictureAsync(options) {
        return regeneratorRuntime.async(function takePictureAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!options) {
                  options = {};
                }

                if (!options.quality) {
                  options.quality = 1;
                }

                _context.next = 4;
                return regeneratorRuntime.awrap(CameraManager.takePicture(options, this._cameraHandle));

              case 4:
                return _context.abrupt("return", _context.sent);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "getSupportedRatiosAsync",
      value: function getSupportedRatiosAsync() {
        return regeneratorRuntime.async(function getSupportedRatiosAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return regeneratorRuntime.awrap(CameraManager.getSupportedRatios(this._cameraHandle));

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "recordAsync",
      value: function recordAsync(options) {
        return regeneratorRuntime.async(function recordAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!options || typeof options !== 'object') {
                  options = {};
                } else if (typeof options.quality === 'string') {
                  options.quality = Camera.Constants.VideoQuality[options.quality];
                }

                _context3.next = 3;
                return regeneratorRuntime.awrap(CameraManager.record(options, this._cameraHandle));

              case 3:
                return _context3.abrupt("return", _context3.sent);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "stopRecording",
      value: function stopRecording() {
        CameraManager.stopRecording(this._cameraHandle);
      }
    }, {
      key: "render",
      value: function render() {
        var nativeProps = this._convertNativeProps(this.props);

        return _react2.default.createElement(ExponentCamera, babelHelpers.extends({}, nativeProps, {
          ref: this._setReference,
          onCameraReady: this._onCameraReady,
          onMountError: this._onMountError,
          onBarCodeRead: this._onObjectDetected(this.props.onBarCodeRead),
          onFacesDetected: this._onObjectDetected(this.props.onFacesDetected)
        }));
      }
    }, {
      key: "_convertNativeProps",
      value: function _convertNativeProps(props) {
        var newProps = (0, _lodash.mapValues)(props, this._convertProp);

        if (props.onBarCodeRead) {
          newProps.barCodeScannerEnabled = true;
        }

        if (props.onFacesDetected) {
          newProps.faceDetectorEnabled = true;
        }

        return newProps;
      }
    }, {
      key: "_convertProp",
      value: function _convertProp(value, key) {
        if (typeof value === 'string' && Camera.ConversionTables[key]) {
          return Camera.ConversionTables[key][value];
        }

        return value;
      }
    }]);
    return Camera;
  }(_react2.default.Component), _class.Constants = {
    Type: CameraManager.Type,
    FlashMode: CameraManager.FlashMode,
    AutoFocus: CameraManager.AutoFocus,
    WhiteBalance: CameraManager.WhiteBalance,
    VideoQuality: CameraManager.VideoQuality,
    BarCodeType: CameraManager.BarCodeType,
    FaceDetection: CameraManager.FaceDetection
  }, _class.ConversionTables = {
    type: CameraManager.Type,
    flashMode: CameraManager.FlashMode,
    autoFocus: CameraManager.AutoFocus,
    whiteBalance: CameraManager.WhiteBalance,
    faceDetectionMode: CameraManager.FaceDetection.Mode,
    faceDetectionLandmarks: CameraManager.FaceDetection.Landmarks,
    faceDetectionClassifications: CameraManager.FaceDetection.Classifications
  }, _class.propTypes = babelHelpers.extends({}, _reactNative.ViewPropTypes, {
    zoom: _propTypes2.default.number,
    ratio: _propTypes2.default.string,
    focusDepth: _propTypes2.default.number,
    onMountError: _propTypes2.default.func,
    onCameraReady: _propTypes2.default.func,
    onBarCodeRead: _propTypes2.default.func,
    onFacesDetected: _propTypes2.default.func,
    useCamera2Api: _propTypes2.default.bool,
    faceDetectionMode: _propTypes2.default.number,
    faceDetectionLandmarks: _propTypes2.default.number,
    faceDetectionClassifications: _propTypes2.default.number,
    barCodeTypes: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
    type: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    flashMode: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    whiteBalance: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    autoFocus: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.bool])
  }), _class.defaultProps = {
    zoom: 0,
    ratio: '4:3',
    focusDepth: 0,
    type: CameraManager.Type.back,
    autoFocus: CameraManager.AutoFocus.on,
    flashMode: CameraManager.FlashMode.off,
    whiteBalance: CameraManager.WhiteBalance.auto,
    faceDetectionMode: CameraManager.FaceDetection.fast,
    barCodeTypes: Object.values(CameraManager.BarCodeType),
    faceDetectionLandmarks: CameraManager.FaceDetection.Landmarks.none,
    faceDetectionClassifications: CameraManager.FaceDetection.Classifications.none
  }, _temp);
  exports.default = Camera;
  var Constants = exports.Constants = Camera.Constants;
  var ExponentCamera = (0, _reactNative.requireNativeComponent)('ExponentCamera', Camera, {
    nativeOnly: {
      onCameraReady: true,
      onMountError: true,
      onBarCodeRead: true,
      onFaceDetected: true,
      faceDetectorEnabled: true,
      barCodeScannerEnabled: true
    }
  });
},347,[103,121,348,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright JS Foundation and other contributors <https://js.foundation/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */;
  (function () {
    var undefined;
    var VERSION = '4.17.10';
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = '__lodash_placeholder__';
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 800,
        HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
    var INFINITY = Infinity,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = NaN;
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff",
        rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = "\\u2700-\\u27bf",
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = "\\u2000-\\u206f",
        rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = "\\ufe0e\\ufe0f",
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = "\\ud83c[\\udffb-\\udfff]",
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
        rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = "\\u200d";
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      '\xc0': 'A',
      '\xc1': 'A',
      '\xc2': 'A',
      '\xc3': 'A',
      '\xc4': 'A',
      '\xc5': 'A',
      '\xe0': 'a',
      '\xe1': 'a',
      '\xe2': 'a',
      '\xe3': 'a',
      '\xe4': 'a',
      '\xe5': 'a',
      '\xc7': 'C',
      '\xe7': 'c',
      '\xd0': 'D',
      '\xf0': 'd',
      '\xc8': 'E',
      '\xc9': 'E',
      '\xca': 'E',
      '\xcb': 'E',
      '\xe8': 'e',
      '\xe9': 'e',
      '\xea': 'e',
      '\xeb': 'e',
      '\xcc': 'I',
      '\xcd': 'I',
      '\xce': 'I',
      '\xcf': 'I',
      '\xec': 'i',
      '\xed': 'i',
      '\xee': 'i',
      '\xef': 'i',
      '\xd1': 'N',
      '\xf1': 'n',
      '\xd2': 'O',
      '\xd3': 'O',
      '\xd4': 'O',
      '\xd5': 'O',
      '\xd6': 'O',
      '\xd8': 'O',
      '\xf2': 'o',
      '\xf3': 'o',
      '\xf4': 'o',
      '\xf5': 'o',
      '\xf6': 'o',
      '\xf8': 'o',
      '\xd9': 'U',
      '\xda': 'U',
      '\xdb': 'U',
      '\xdc': 'U',
      '\xf9': 'u',
      '\xfa': 'u',
      '\xfb': 'u',
      '\xfc': 'u',
      '\xdd': 'Y',
      '\xfd': 'y',
      '\xff': 'y',
      '\xc6': 'Ae',
      '\xe6': 'ae',
      '\xde': 'Th',
      '\xfe': 'th',
      '\xdf': 'ss',
      "\u0100": 'A',
      "\u0102": 'A',
      "\u0104": 'A',
      "\u0101": 'a',
      "\u0103": 'a',
      "\u0105": 'a',
      "\u0106": 'C',
      "\u0108": 'C',
      "\u010A": 'C',
      "\u010C": 'C',
      "\u0107": 'c',
      "\u0109": 'c',
      "\u010B": 'c',
      "\u010D": 'c',
      "\u010E": 'D',
      "\u0110": 'D',
      "\u010F": 'd',
      "\u0111": 'd',
      "\u0112": 'E',
      "\u0114": 'E',
      "\u0116": 'E',
      "\u0118": 'E',
      "\u011A": 'E',
      "\u0113": 'e',
      "\u0115": 'e',
      "\u0117": 'e',
      "\u0119": 'e',
      "\u011B": 'e',
      "\u011C": 'G',
      "\u011E": 'G',
      "\u0120": 'G',
      "\u0122": 'G',
      "\u011D": 'g',
      "\u011F": 'g',
      "\u0121": 'g',
      "\u0123": 'g',
      "\u0124": 'H',
      "\u0126": 'H',
      "\u0125": 'h',
      "\u0127": 'h',
      "\u0128": 'I',
      "\u012A": 'I',
      "\u012C": 'I',
      "\u012E": 'I',
      "\u0130": 'I',
      "\u0129": 'i',
      "\u012B": 'i',
      "\u012D": 'i',
      "\u012F": 'i',
      "\u0131": 'i',
      "\u0134": 'J',
      "\u0135": 'j',
      "\u0136": 'K',
      "\u0137": 'k',
      "\u0138": 'k',
      "\u0139": 'L',
      "\u013B": 'L',
      "\u013D": 'L',
      "\u013F": 'L',
      "\u0141": 'L',
      "\u013A": 'l',
      "\u013C": 'l',
      "\u013E": 'l',
      "\u0140": 'l',
      "\u0142": 'l',
      "\u0143": 'N',
      "\u0145": 'N',
      "\u0147": 'N',
      "\u014A": 'N',
      "\u0144": 'n',
      "\u0146": 'n',
      "\u0148": 'n',
      "\u014B": 'n',
      "\u014C": 'O',
      "\u014E": 'O',
      "\u0150": 'O',
      "\u014D": 'o',
      "\u014F": 'o',
      "\u0151": 'o',
      "\u0154": 'R',
      "\u0156": 'R',
      "\u0158": 'R',
      "\u0155": 'r',
      "\u0157": 'r',
      "\u0159": 'r',
      "\u015A": 'S',
      "\u015C": 'S',
      "\u015E": 'S',
      "\u0160": 'S',
      "\u015B": 's',
      "\u015D": 's',
      "\u015F": 's',
      "\u0161": 's',
      "\u0162": 'T',
      "\u0164": 'T',
      "\u0166": 'T',
      "\u0163": 't',
      "\u0165": 't',
      "\u0167": 't',
      "\u0168": 'U',
      "\u016A": 'U',
      "\u016C": 'U',
      "\u016E": 'U',
      "\u0170": 'U',
      "\u0172": 'U',
      "\u0169": 'u',
      "\u016B": 'u',
      "\u016D": 'u',
      "\u016F": 'u',
      "\u0171": 'u',
      "\u0173": 'u',
      "\u0174": 'W',
      "\u0175": 'w',
      "\u0176": 'Y',
      "\u0177": 'y',
      "\u0178": 'Y',
      "\u0179": 'Z',
      "\u017B": 'Z',
      "\u017D": 'Z',
      "\u017A": 'z',
      "\u017C": 'z',
      "\u017E": 'z',
      "\u0132": 'IJ',
      "\u0133": 'ij',
      "\u0152": 'Oe',
      "\u0153": 'oe',
      "\u0149": "'n",
      "\u017F": 's'
    };
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      "\u2028": 'u2028',
      "\u2029": 'u2029'
    };
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;

    var nodeUtil = function () {
      try {
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);

        case 1:
          return func.call(thisArg, args[0]);

        case 2:
          return func.call(thisArg, args[0], args[1]);

        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }

      return func.apply(thisArg, args);
    }

    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }

      return accumulator;
    }

    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }

      return true;
    }

    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }

      return result;
    }

    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }

      return false;
    }

    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }

      return result;
    }

    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }

      return array;
    }

    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }

      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }

      return accumulator;
    }

    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[--length];
      }

      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }

      return accumulator;
    }

    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }

      return false;
    }

    var asciiSize = baseProperty('length');

    function asciiToArray(string) {
      return string.split('');
    }

    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function (value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }

      return -1;
    }

    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }

      return -1;
    }

    function baseIsNaN(value) {
      return value !== value;
    }

    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }

    function baseProperty(key) {
      return function (object) {
        return object == null ? undefined : object[key];
      };
    }

    function basePropertyOf(object) {
      return function (key) {
        return object == null ? undefined : object[key];
      };
    }

    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function (value, index, collection) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);

      while (length--) {
        array[length] = array[length].value;
      }

      return array;
    }

    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);

        if (current !== undefined) {
          result = result === undefined ? current : result + current;
        }
      }

      return result;
    }

    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }

      return result;
    }

    function baseToPairs(object, props) {
      return arrayMap(props, function (key) {
        return [key, object[key]];
      });
    }

    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }

    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }

    function cacheHas(cache, key) {
      return cache.has(key);
    }

    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }

      return result;
    }

    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }

      return result;
    }

    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);
      map.forEach(function (value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }

    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }

      return result;
    }

    function safeGet(object, key) {
      return key == '__proto__' ? undefined : object[key];
    }

    function setToArray(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }

    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = [value, value];
      });
      return result;
    }

    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }

      return -1;
    }

    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;

      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }

      return index;
    }

    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }

    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }

    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;

      while (reUnicode.test(string)) {
        ++result;
      }

      return result;
    }

    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    var runInContext = function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;
      var coreJsData = context['__core-js_shared__'];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;

      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();

      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var oldDash = root._;
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      var Buffer = moduleExports ? context.Buffer : undefined,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined,
          symIterator = Symbol ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : undefined,
          symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

      var defineProperty = function () {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();

      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);
      var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }

          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }

        return new LodashWrapper(value);
      }

      var baseCreate = function () {
        function object() {}

        return function (proto) {
          if (!isObject(proto)) {
            return {};
          }

          if (objectCreate) {
            return objectCreate(proto);
          }

          object.prototype = proto;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }();

      function baseLodash() {}

      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      lodash.templateSettings = {
        'escape': reEscape,
        'evaluate': reEvaluate,
        'interpolate': reInterpolate,
        'variable': '',
        'imports': {
          '_': lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }

        return result;
      }

      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }

        var result = [];

        outer: while (length-- && resIndex < takeCount) {
          index += dir;
          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }

          result[resIndex++] = value;
        }

        return result;
      }

      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      function hashGet(key) {
        var data = this.__data__;

        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }

        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
      }

      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }

      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }

        var lastIndex = data.length - 1;

        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }

        --this.size;
        return true;
      }

      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }

      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }

        return this;
      }

      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }

      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
          this.add(values[index]);
        }
      }

      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);

        return this;
      }

      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }

      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);
        this.size = data.size;
        return result;
      }

      function stackGet(key) {
        return this.__data__.get(key);
      }

      function stackHas(key) {
        return this.__data__.has(key);
      }

      function stackSet(key, value) {
        var data = this.__data__;

        if (data instanceof ListCache) {
          var pairs = data.__data__;

          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }

          data = this.__data__ = new MapCache(pairs);
        }

        data.set(key, value);
        this.size = data.size;
        return this;
      }

      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
            result.push(key);
          }
        }

        return result;
      }

      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }

      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assignValue(object, key, value) {
        var objValue = object[key];

        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assocIndexOf(array, key) {
        var length = array.length;

        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }

        return -1;
      }

      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function (value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined : get(object, paths[index]);
        }

        return result;
      }

      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }

          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }

        return number;
      }

      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }

        if (result !== undefined) {
          return result;
        }

        if (!isObject(value)) {
          return value;
        }

        var isArr = isArray(value);

        if (isArr) {
          result = initCloneArray(value);

          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }

          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);

            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }

            result = initCloneByTag(value, tag, isDeep);
          }
        }

        stack || (stack = new Stack());
        var stacked = stack.get(value);

        if (stacked) {
          return stacked;
        }

        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function (subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
          return result;
        }

        if (isMap(value)) {
          value.forEach(function (subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }

          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      function baseConforms(source) {
        var props = keys(source);
        return function (object) {
          return baseConformsTo(object, source, props);
        };
      }

      function baseConformsTo(object, source, props) {
        var length = props.length;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if (value === undefined && !(key in object) || !predicate(value)) {
            return false;
          }
        }

        return true;
      }

      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return setTimeout(function () {
          func.apply(undefined, args);
        }, wait);
      }

      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }

        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }

        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;

            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }

            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }

        return result;
      }

      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current,
                result = value;
          }
        }

        return result;
      }

      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end === undefined || end > length ? length : toInteger(end);

        if (end < 0) {
          end += length;
        }

        end = start > end ? 0 : toLength(end);

        while (start < end) {
          array[start++] = value;
        }

        return array;
      }

      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];

          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }

        return result;
      }

      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);

      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      function baseFunctions(object, props) {
        return arrayFilter(props, function (key) {
          return isFunction(object[key]);
        });
      }

      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }

        return index && index == length ? object : undefined;
      }

      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }

      function baseGt(value, other) {
        return value > other;
      }

      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];

          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }

          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
        }

        array = arrays[0];
        var index = -1,
            seen = caches[0];

        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;

            while (--othIndex) {
              var cache = caches[othIndex];

              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }

            if (seen) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function (value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined : apply(func, object, args);
      }

      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }

        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }

        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }

          objIsArr = true;
          objIsObj = false;
        }

        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }

        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }

        if (!isSameTag) {
          return false;
        }

        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (index--) {
          var data = matchData[index];

          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }

        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();

            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }

            if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }

        return true;
      }

      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }

        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      function baseIteratee(value) {
        if (typeof value == 'function') {
          return value;
        }

        if (value == null) {
          return identity;
        }

        if (typeof value == 'object') {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }

        return property(value);
      }

      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }

        var result = [];

        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }

        return result;
      }

      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }

        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }

        return result;
      }

      function baseLt(value, other) {
        return value < other;
      }

      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      function baseMatches(source) {
        var matchData = getMatchData(source);

        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }

        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }

        return function (object) {
          var objValue = get(object, path);
          return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }

      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }

        baseFor(source, function (srcValue, key) {
          if (isObject(srcValue)) {
            stack || (stack = new Stack());
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }

            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }

        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;

          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;

            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }

        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }

        assignMergeValue(object, key, newValue);
      }

      function baseNth(array, n) {
        var length = array.length;

        if (!length) {
          return;
        }

        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
        var result = baseMap(collection, function (value, key, collection) {
          var criteria = arrayMap(iteratees, function (iteratee) {
            return iteratee(value);
          });
          return {
            'criteria': criteria,
            'index': ++index,
            'value': value
          };
        });
        return baseSortBy(result, function (object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      function basePick(object, paths) {
        return basePickBy(object, paths, function (value, path) {
          return hasIn(object, path);
        });
      }

      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }

        return result;
      }

      function basePropertyDeep(path) {
        return function (object) {
          return baseGet(object, path);
        };
      }

      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }

        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }

        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }

            splice.call(array, fromIndex, 1);
          }
        }

        return array;
      }

      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];

          if (length == lastIndex || index !== previous) {
            var previous = index;

            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }

        return array;
      }

      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }

        return result;
      }

      function baseRepeat(string, n) {
        var result = '';

        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }

        do {
          if (n % 2) {
            result += string;
          }

          n = nativeFloor(n / 2);

          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      function baseSample(collection) {
        return arraySample(values(collection));
      }

      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }

        path = castPath(path, object);
        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;

            if (newValue === undefined) {
              newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
            }
          }

          assignValue(nested, key, newValue);
          nested = nested[key];
        }

        return object;
      }

      var baseSetData = !metaMap ? identity : function (func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end > length ? length : end;

        if (end < 0) {
          end += length;
        }

        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);

        while (++index < length) {
          result[index] = array[index + start];
        }

        return result;
      }

      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }

          return high;
        }

        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);
        var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }

          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }

        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }

        return result;
      }

      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        return +value;
      }

      function baseToString(value) {
        if (typeof value == 'string') {
          return value;
        }

        if (isArray(value)) {
          return arrayMap(value, baseToString) + '';
        }

        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);

          if (set) {
            return setToArray(set);
          }

          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var seenIndex = seen.length;

            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }

            if (iteratee) {
              seen.push(computed);
            }

            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }

      function baseWrapperValue(value, actions) {
        var result = value;

        if (result instanceof LazyWrapper) {
          result = result.value();
        }

        return arrayReduce(actions, function (result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;

        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }

        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }

        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }

        return result;
      }

      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }

        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      var castRest = baseRest;

      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }

      var clearTimeout = ctxClearTimeout || function (id) {
        return root.clearTimeout(id);
      };

      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }

        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }

      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }

          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }

        return 0;
      }

      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);

          if (result) {
            if (index >= ordersLength) {
              return result;
            }

            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }

        return object.index - other.index;
      }

      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }

        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }

        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }

        return result;
      }

      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }

        var offset = argsIndex;

        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }

        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }

        return result;
      }

      function copyArray(source, array) {
        var index = -1,
            length = source.length;
        array || (array = Array(length));

        while (++index < length) {
          array[index] = source[index];
        }

        return array;
      }

      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }

          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }

        return object;
      }

      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      function createAggregator(setter, initializer) {
        return function (collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }

          object = Object(object);

          while (++index < length) {
            var source = sources[index];

            if (source) {
              assigner(object, source, index, customizer);
            }
          }

          return object;
        });
      }

      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }

          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }

          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }

          return collection;
        };
      }

      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];

            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }

          return object;
        };
      }

      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }

        return wrapper;
      }

      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }

      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      function createCtor(Ctor) {
        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return new Ctor();

            case 1:
              return new Ctor(args[0]);

            case 2:
              return new Ctor(args[0], args[1]);

            case 3:
              return new Ctor(args[0], args[1], args[2]);

            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);

            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);

            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }

          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        };
      }

      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }

          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;

          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
          }

          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }

        return wrapper;
      }

      function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
          var iterable = Object(collection);

          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);

            predicate = function predicate(key) {
              return iteratee(iterable[key], key, iterable);
            };
          }

          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }

      function createFlow(fromRight) {
        return flatRest(function (funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }

          while (index--) {
            var func = funcs[index];

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }

          index = wrapper ? index : length;

          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }

          return function () {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }

            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }

            return result;
          };
        });
      }

      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }

          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }

          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }

          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }

          length -= holdersCount;

          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
          }

          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
          length = args.length;

          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }

          if (isAry && ary < length) {
            args.length = ary;
          }

          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }

          return fn.apply(thisBinding, args);
        }

        return wrapper;
      }

      function createInverter(setter, toIteratee) {
        return function (object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      function createMathOperation(operator, defaultValue) {
        return function (value, other) {
          var result;

          if (value === undefined && other === undefined) {
            return defaultValue;
          }

          if (value !== undefined) {
            result = value;
          }

          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }

            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }

            result = operator(value, other);
          }

          return result;
        };
      }

      function createOver(arrayFunc) {
        return flatRest(function (iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function (args) {
            var thisArg = this;
            return arrayFunc(iteratees, function (iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);
        var charsLength = chars.length;

        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }

        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
      }

      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = this && this !== root && this instanceof wrapper ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }

          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }

          return apply(fn, isBind ? thisArg : this, args);
        }

        return wrapper;
      }

      function createRange(fromRight) {
        return function (start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }

          start = toFinite(start);

          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }

          step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      function createRelationalOperation(operator) {
        return function (value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }

          return operator(value, other);
        };
      }

      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }

        var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
        var result = wrapFunc.apply(undefined, newData);

        if (isLaziable(func)) {
          setData(result, newData);
        }

        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      function createRound(methodName) {
        var func = Math[methodName];
        return function (number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);

          if (precision) {
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }

          return func(number);
        };
      }

      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };

      function createToPairs(keysFunc) {
        return function (object) {
          var tag = getTag(object);

          if (tag == mapTag) {
            return mapToArray(object);
          }

          if (tag == setTag) {
            return setToPairs(object);
          }

          return baseToPairs(object, keysFunc(object));
        };
      }

      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;

        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var length = partials ? partials.length : 0;

        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined;
        }

        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;
          partials = holders = undefined;
        }

        var data = isBindKey ? undefined : getData(func);
        var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

        if (data) {
          mergeData(newData, data);
        }

        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }

        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }

        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }

        return objValue;
      }

      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }

        return objValue;
      }

      function customOmitClone(value) {
        return isPlainObject(value) ? undefined : value;
      }

      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }

        var stacked = stack.get(array);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var index = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
        stack.set(array, other);
        stack.set(other, array);

        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }

          if (compared !== undefined) {
            if (compared) {
              continue;
            }

            result = false;
            break;
          }

          if (seen) {
            if (!arraySome(other, function (othValue, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }

        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }

            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }

            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            return object == other + '';

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }

            var stacked = stack.get(object);

            if (stacked) {
              return stacked == other;
            }

            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }

        }

        return false;
      }

      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }

        var index = objLength;

        while (index--) {
          var key = objProps[index];

          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }

        var stacked = stack.get(object);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;

        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }

          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }

          skipCtor || (skipCtor = key == 'constructor');
        }

        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }

        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }

      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      var getData = !metaMap ? noop : function (func) {
        return metaMap.get(func);
      };

      function getFuncName(func) {
        var result = func.name + '',
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;

          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }

        return result;
      }

      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }

        return result;
      }

      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);

        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }

        return result;
      }

      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
        if (object == null) {
          return [];
        }

        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function (symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
        var result = [];

        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }

        return result;
      };
      var getTag = baseGetTag;

      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;

              case mapCtorString:
                return mapTag;

              case promiseCtorString:
                return promiseTag;

              case setCtorString:
                return setTag;

              case weakMapCtorString:
                return weakMapTag;
            }
          }

          return result;
        };
      }

      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':
              start += size;
              break;

            case 'dropRight':
              end -= size;
              break;

            case 'take':
              end = nativeMin(end, start + size);
              break;

            case 'takeRight':
              start = nativeMax(start, end - size);
              break;
          }
        }

        return {
          'start': start,
          'end': end
        };
      }

      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);

          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }

          object = object[key];
        }

        if (result || ++index != length) {
          return result;
        }

        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }

      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }

        return result;
      }

      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }

      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;

        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor();

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor();

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      function insertWrapDetails(source, details) {
        var length = details.length;

        if (!length) {
          return source;
        }

        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }

        var type = typeof index;

        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }

        return false;
      }

      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }

        var type = typeof value;

        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }

        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      function isKeyable(value) {
        var type = typeof value;
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }

        if (func === other) {
          return true;
        }

        var data = getData(other);
        return !!data && func === data[0];
      }

      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      var isMaskable = coreJsData ? isFunction : stubFalse;

      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
        return value === proto;
      }

      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }

          return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
        };
      }

      function memoizeCapped(func) {
        var result = memoize(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }

          return key;
        });
        var cache = result.cache;
        return result;
      }

      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

        if (!(isCommon || isCombo)) {
          return data;
        }

        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }

        var value = source[3];

        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }

        value = source[5];

        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }

        value = source[7];

        if (value) {
          data[7] = value;
        }

        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }

        if (data[9] == null) {
          data[9] = source[9];
        }

        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }

      function nativeKeysIn(object) {
        var result = [];

        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }

        return result;
      }

      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          index = -1;
          var otherArgs = Array(start + 1);

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }

        return array;
      }

      var setData = shortOut(baseSetData);

      var setTimeout = ctxSetTimeout || function (func, wait) {
        return root.setTimeout(func, wait);
      };

      var setToString = shortOut(baseSetToString);

      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + '';
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }

          return func.apply(undefined, arguments);
        };
      }

      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;
        size = size === undefined ? length : size;

        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }

        array.length = size;
        return array;
      }

      var stringToPath = memoizeCapped(function (string) {
        var result = [];

        if (string.charCodeAt(0) === 46) {
            result.push('');
          }

        string.replace(rePropName, function (match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });

      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }

      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function (pair) {
          var value = '_.' + pair[0];

          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }

        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__ = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }

        var length = array == null ? 0 : array.length;

        if (!length || size < 1) {
          return [];
        }

        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, index += size);
        }

        return result;
      }

      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (value) {
            result[resIndex++] = value;
          }
        }

        return result;
      }

      function concat() {
        var length = arguments.length;

        if (!length) {
          return [];
        }

        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }

        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function (array, values) {
        var iteratee = last(values);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
      });
      var differenceWith = baseRest(function (array, values) {
        var comparator = last(values);

        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
      });

      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }

      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }

      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }

        return baseFill(array, value, start, end);
      }

      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length - 1;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }

        return result;
      }

      function head(array) {
        return array && array.length ? array[0] : undefined;
      }

      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseIndexOf(array, value, index);
      }

      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      var intersection = baseRest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function (arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
      });
      var intersectionWith = baseRest(function (arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == 'function' ? comparator : undefined;

        if (comparator) {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
      });

      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
      }

      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }

      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined;
      }

      var pull = baseRest(pullAll);

      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }

      function pullAllBy(array, values, iteratee) {
        return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
      }

      function pullAllWith(array, values, comparator) {
        return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
      }

      var pullAt = flatRest(function (array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function (index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result;
      });

      function remove(array, predicate) {
        var result = [];

        if (!(array && array.length)) {
          return result;
        }

        var index = -1,
            indexes = [],
            length = array.length;
        predicate = getIteratee(predicate, 3);

        while (++index < length) {
          var value = array[index];

          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }

        basePullAt(array, indexes);
        return result;
      }

      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }

        return baseSlice(array, start, end);
      }

      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value);

          if (index < length && eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;

          if (eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }

      function sortedUniqBy(array, iteratee) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }

      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }

      var union = baseRest(function (arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });
      var unionWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }

      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return array && array.length ? baseUniq(array, undefined, comparator) : [];
      }

      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }

        var length = 0;
        array = arrayFilter(array, function (group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function (index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }

        var result = unzip(array);

        if (iteratee == null) {
          return result;
        }

        return arrayMap(result, function (group) {
          return apply(iteratee, undefined, group);
        });
      }

      var without = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      var xor = baseRest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });
      var xorWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });
      var zip = baseRest(unzip);

      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      var zipWith = baseRest(function (arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;
        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      function thru(value, interceptor) {
        return interceptor(value);
      }

      var wrapperAt = flatRest(function (paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function interceptor(object) {
          return baseAt(object, paths);
        };

        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }

        value = value.slice(start, +start + (length ? 1 : 0));

        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });

        return new LodashWrapper(value, this.__chain__).thru(function (array) {
          if (length && !array.length) {
            array.push(undefined);
          }

          return array;
        });
      });

      function wrapperChain() {
        return chain(this);
      }

      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }

        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];
        return {
          'done': done,
          'value': value
        };
      }

      function wrapperToIterator() {
        return this;
      }

      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;

          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }

          var previous = clone;
          parent = parent.__wrapped__;
        }

        previous.__wrapped__ = value;
        return result;
      }

      function wrapperReverse() {
        var value = this.__wrapped__;

        if (value instanceof LazyWrapper) {
          var wrapped = value;

          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }

          wrapped = wrapped.reverse();

          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });

          return new LodashWrapper(wrapped, this.__chain__);
        }

        return this.thru(reverse);
      }

      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      var countBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      var find = createFind(findIndex);
      var findLast = createFind(findLastIndex);

      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      var groupBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;

        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }

        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }

      var invokeMap = baseRest(function (collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });
      var keyBy = createAggregator(function (result, value, key) {
        baseAssignValue(result, key, value);
      });

      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }

        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }

        orders = guard ? undefined : orders;

        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }

        return baseOrderBy(collection, iteratees, orders);
      }

      var partition = createAggregator(function (result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function () {
        return [[], []];
      });

      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      function size(collection) {
        if (collection == null) {
          return 0;
        }

        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }

        var tag = getTag(collection);

        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }

        return baseKeys(collection).length;
      }

      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      var sortBy = baseRest(function (collection, iteratees) {
        if (collection == null) {
          return [];
        }

        var length = iteratees.length;

        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }

        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      var now = ctxNow || function () {
        return root.Date.now();
      };

      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      function before(n, func) {
        var result;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }

          if (n <= 1) {
            func = undefined;
          }

          return result;
        };
      }

      var bind = baseRest(function (func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function (object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(key, bitmask, object, partials, holders);
      });

      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        wait = toNumber(wait) || 0;

        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }

        function timerExpired() {
          var time = now();

          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }

          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          if (trailing && lastArgs) {
            return invokeFunc(time);
          }

          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }

          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }

            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }

          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }

          return result;
        }

        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var memoized = function memoized() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };

        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }

      memoize.Cache = MapCache;

      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return !predicate.call(this);

            case 1:
              return !predicate.call(this, args[0]);

            case 2:
              return !predicate.call(this, args[0], args[1]);

            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }

          return !predicate.apply(this, args);
        };
      }

      function once(func) {
        return before(2, func);
      }

      var overArgs = castRest(function (func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function (args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }

          return apply(func, this, args);
        });
      });
      var partial = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
      });
      var partialRight = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });
      var rearg = flatRest(function (func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
      });

      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }

      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function (args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }

          return apply(func, this, otherArgs);
        });
      }

      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      function unary(func) {
        return ary(func, 1);
      }

      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      function castArray() {
        if (!arguments.length) {
          return [];
        }

        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }

      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }

      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function (value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function () {
        return arguments;
      }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      var isArray = Array.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }

      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      function isEmpty(value) {
        if (value == null) {
          return true;
        }

        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }

        var tag = getTag(value);

        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }

        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }

        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }

        return true;
      }

      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
      }

      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
      }

      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      function isNaN(value) {
        return isNumber(value) && value != +value;
      }

      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }

        return baseIsNative(value);
      }

      function isNull(value) {
        return value === null;
      }

      function isNil(value) {
        return value == null;
      }

      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
      }

      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }

        var proto = getPrototype(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }

      function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }

      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      function isUndefined(value) {
        return value === undefined;
      }

      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function (value, other) {
        return value <= other;
      });

      function toArray(value) {
        if (!value) {
          return [];
        }

        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }

        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }

        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }

      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }

        value = toNumber(value);

        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }

        return value === value ? value : 0;
      }

      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }

      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }

        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }

        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }

      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }

      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      var assign = createAssigner(function (object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }

        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function (object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);

      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      var defaults = baseRest(function (object, sources) {
        object = Object(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });
      var defaultsDeep = baseRest(function (args) {
        args.push(undefined, customDefaultsMerge);
        return apply(mergeWith, undefined, args);
      });

      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      function forIn(object, iteratee) {
        return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      function forInRight(object, iteratee) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      var invert = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);

      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function (object, paths) {
        var result = {};

        if (object == null) {
          return result;
        }

        var isDeep = false;
        paths = arrayMap(paths, function (path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);

        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }

        var length = paths.length;

        while (length--) {
          baseUnset(result, paths[length]);
        }

        return result;
      });

      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      var pick = flatRest(function (object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }

        var props = arrayMap(getAllKeysIn(object), function (prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function (value, path) {
          return predicate(value, path[0]);
        });
      }

      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index = -1,
            length = path.length;

        if (!length) {
          length = 1;
          object = undefined;
        }

        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];

          if (value === undefined) {
            index = length;
            value = defaultValue;
          }

          object = isFunction(value) ? value.call(object) : value;
        }

        return object;
      }

      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);

      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee = getIteratee(iteratee, 4);

        if (accumulator == null) {
          var Ctor = object && object.constructor;

          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }

        (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }

        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }

        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }

        return baseClamp(toNumber(number), lower, upper);
      }

      function inRange(number, start, end) {
        start = toFinite(start);

        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }

        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }

        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }

        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);

          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }

        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }

        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
        }

        return baseRandom(lower, upper);
      }

      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }

      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
      }

      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });
      var lowerCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst('toLowerCase');

      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;

        if (!length || strLength >= length) {
          return string;
        }

        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }

      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }

      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }

      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }

        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        return baseRepeat(toString(string), n);
      }

      function replace() {
        var args = arguments,
            string = toString(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }

        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

        if (!limit) {
          return [];
        }

        string = toString(string);

        if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);

          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }

        return string.split(separator, limit);
      }

      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      function template(string, options, guard) {
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }

        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
        var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }

          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }

          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }

          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = options.variable;

        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }

        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var result = attempt(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        });
        result.source = source;

        if (isError(result)) {
          throw result;
        }

        return result;
      }

      function toLower(value) {
        return toString(value).toLowerCase();
      }

      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      function trim(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join('');
      }

      function trimEnd(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join('');
      }

      function trimStart(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join('');
      }

      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }

        string = toString(string);
        var strLength = string.length;

        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }

        if (length >= strLength) {
          return string;
        }

        var end = length - stringSize(omission);

        if (end < 1) {
          return omission;
        }

        var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }

        if (strSymbols) {
          end += result.length - end;
        }

        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }

            separator.lastIndex = 0;

            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }

            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);

          if (index > -1) {
            result = result.slice(0, index);
          }
        }

        return result + omission;
      }

      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }

      var upperCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });
      var upperFirst = createCaseFirst('toUpperCase');

      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }

        return string.match(pattern) || [];
      }

      var attempt = baseRest(function (func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });
      var bindAll = flatRest(function (object, methodNames) {
        arrayEach(methodNames, function (key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function (pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function (args) {
          var index = -1;

          while (++index < length) {
            var pair = pairs[index];

            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      function constant(value) {
        return function () {
          return value;
        };
      }

      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }

      var flow = createFlow();
      var flowRight = createFlow(true);

      function identity(value) {
        return value;
      }

      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      var method = baseRest(function (path, args) {
        return function (object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function (object, args) {
        return function (path) {
          return baseInvoke(object, path, args);
        };
      });

      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }

        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);
        arrayEach(methodNames, function (methodName) {
          var func = source[methodName];
          object[methodName] = func;

          if (isFunc) {
            object.prototype[methodName] = function () {
              var chainAll = this.__chain__;

              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);
                actions.push({
                  'func': func,
                  'args': arguments,
                  'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
              }

              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }

      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }

        return this;
      }

      function noop() {}

      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function (args) {
          return baseNth(args, n);
        });
      }

      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);

      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      function propertyOf(object) {
        return function (path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      var range = createRange();
      var rangeRight = createRange(true);

      function stubArray() {
        return [];
      }

      function stubFalse() {
        return false;
      }

      function stubObject() {
        return {};
      }

      function stubString() {
        return '';
      }

      function stubTrue() {
        return true;
      }

      function times(n, iteratee) {
        n = toInteger(n);

        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }

        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;
        var result = baseTimes(length, iteratee);

        while (++index < n) {
          iteratee(index);
        }

        return result;
      }

      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }

        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      var add = createMathOperation(function (augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound('ceil');
      var divide = createMathOperation(function (dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound('floor');

      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
      }

      function maxBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
      }

      function mean(array) {
        return baseMean(array, identity);
      }

      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
      }

      function minBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
      }

      var multiply = createMathOperation(function (multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound('round');
      var subtract = createMathOperation(function (minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }

      function sumBy(array, iteratee) {
        return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
      }

      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {
        'chain': false
      });
      lodash.VERSION = VERSION;
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(['drop', 'take'], function (methodName, index) {
        LazyWrapper.prototype[methodName] = function (n) {
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
          var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }

          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function (iteratee) {
          var result = this.clone();

          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });

          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });
      arrayEach(['head', 'last'], function (methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function () {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(['initial', 'tail'], function (methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function () {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function () {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function (predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function (predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }

        return this.map(function (value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function (predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function (start, end) {
        start = toInteger(start);
        var result = this;

        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }

        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }

        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }

        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function (predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function () {
        return this.take(MAX_ARRAY_LENGTH);
      };

      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }

        lodash.prototype[methodName] = function () {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function interceptor(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return isTaker && chainAll ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            isLazy = useLazy = false;
          }

          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);

            result.__actions__.push({
              'func': thru,
              'args': [interceptor],
              'thisArg': undefined
            });

            return new LodashWrapper(result, chainAll);
          }

          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }

          result = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
        };
      });
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function () {
          var args = arguments;

          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }

          return this[chainName](function (value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var lodashFunc = lodash[methodName];

        if (lodashFunc) {
          var key = lodashFunc.name + '',
              names = realNames[key] || (realNames[key] = []);
          names.push({
            'name': methodName,
            'func': lodashFunc
          });
        }
      });
      realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }

      return lodash;
    };

    var _ = runInContext();

    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      root._ = _;
      define(function () {
        return _;
      });
    } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
  }).call(this);
},348,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var _ThreeAxisSensor = _require(_dependencyMap[1]);

  var _ThreeAxisSensor2 = babelHelpers.interopRequireDefault(_ThreeAxisSensor);

  var ExponentGyroscope = _reactNative.NativeModules.ExponentGyroscope;
  exports.default = new _ThreeAxisSensor2.default(ExponentGyroscope, 'gyroscopeDidUpdate');
},349,[14,335]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var _ThreeAxisSensor = _require(_dependencyMap[1]);

  var _ThreeAxisSensor2 = babelHelpers.interopRequireDefault(_ThreeAxisSensor);

  var ExponentMagnetometer = _reactNative.NativeModules.ExponentMagnetometer;
  exports.default = new _ThreeAxisSensor2.default(ExponentMagnetometer, 'magnetometerDidUpdate');
},350,[14,335]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var _ThreeAxisSensor = _require(_dependencyMap[1]);

  var _ThreeAxisSensor2 = babelHelpers.interopRequireDefault(_ThreeAxisSensor);

  var ExponentMagnetometerUncalibrated = _reactNative.NativeModules.ExponentMagnetometerUncalibrated;
  exports.default = new _ThreeAxisSensor2.default(ExponentMagnetometerUncalibrated, 'magnetometerUncalibratedDidUpdate');
},351,[14,335]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  _require(_dependencyMap[0]);

  var _lodash = _require(_dependencyMap[1]);

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  var _lodash3 = _require(_dependencyMap[2]);

  var _lodash4 = babelHelpers.interopRequireDefault(_lodash3);

  var _reactNative = _require(_dependencyMap[3]);

  var _custom = _require(_dependencyMap[4]);

  var _custom2 = babelHelpers.interopRequireDefault(_custom);

  var ExponentSQLite = _reactNative.NativeModules.ExponentSQLite;

  function SQLiteResult(error, insertId, rowsAffected, rows) {
    this.error = error;
    this.insertId = insertId;
    this.rowsAffected = rowsAffected;
    this.rows = rows;
  }

  function massageError(err) {
    return typeof err === 'string' ? new Error(err) : err;
  }

  function SQLiteDatabase(name) {
    this._name = name;
  }

  function dearrayifyRow(res) {
    var rawError = res[0];

    if (rawError) {
      return new SQLiteResult(massageError(res[0]));
    }

    var insertId = res[1];

    if (insertId === null) {
      insertId = undefined;
    }

    var rowsAffected = res[2];
    var columns = res[3];
    var rows = res[4];
    var zippedRows = [];

    for (var i = 0, len = rows.length; i < len; i++) {
      zippedRows.push((0, _lodash4.default)(columns, rows[i]));
    }

    return new SQLiteResult(null, insertId, rowsAffected, zippedRows);
  }

  function arrayifyQuery(query) {
    return [query.sql, escapeForAndroid(query.args || [])];
  }

  function escapeForAndroid(args) {
    {
      return (0, _lodash2.default)(args, escapeBlob);
    }
  }

  function escapeBlob(data) {
    if (typeof data === 'string') {
      return data.replace(/\u0002/g, "\x02\x02").replace(/\u0001/g, "\x01\x02").replace(/\u0000/g, "\x01\x01");
    } else {
      return data;
    }
  }

  SQLiteDatabase.prototype.exec = function exec(queries, readOnly, callback) {
    function onSuccess(rawResults) {
      var results = (0, _lodash2.default)(rawResults, dearrayifyRow);
      callback(null, results);
    }

    function onError(err) {
      callback(massageError(err));
    }

    ExponentSQLite.exec(this._name, (0, _lodash2.default)(queries, arrayifyQuery), readOnly).then(onSuccess, onError);
  };

  var openDB = (0, _custom2.default)(SQLiteDatabase);

  function openDatabase(name, version, description, size, callback) {
    if (!size) {
      size = 1;
    }

    if (!description) {
      description = name;
    }

    if (!version) {
      version = '1.0';
    }

    if (typeof name === 'undefined') {
      throw new Error('please be sure to call: openDatabase("myname.db")');
    }

    return openDB(name, version, description, size, callback);
  }

  exports.default = {
    openDatabase: openDatabase
  };
},352,[353,354,355,14,356]);
__d(function (global, _require, module, exports, _dependencyMap) {
  if (!process.nextTick) {
    process.nextTick = function (callback) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      setTimeout(function () {
        return callback.apply(undefined, args);
      }, 0);
    };
  }
},353,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var LARGE_ARRAY_SIZE = 200;
  var FUNC_ERROR_TEXT = 'Expected a function';
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;
  var INFINITY = Infinity,
      MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reEscapeChar = /\\(\\)?/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding('util');
    } catch (e) {}
  }();

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  function arraySome(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var Symbol = root.Symbol,
      Uint8Array = root.Uint8Array,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice;
  var nativeKeys = overArg(Object.keys, Object);
  var DataView = getNative(root, 'DataView'),
      Map = getNative(root, 'Map'),
      Promise = getNative(root, 'Promise'),
      Set = getNative(root, 'Set'),
      WeakMap = getNative(root, 'WeakMap'),
      nativeCreate = getNative(Object, 'create');
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function listCacheClear() {
    this.__data__ = [];
  }

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    return true;
  }

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  function SetCache(values) {
    var index = -1,
        length = values ? values.length : 0;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  }

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }

  function stackClear() {
    this.__data__ = new ListCache();
  }

  function stackDelete(key) {
    return this.__data__['delete'](key);
  }

  function stackGet(key) {
    return this.__data__.get(key);
  }

  function stackHas(key) {
    return this.__data__.has(key);
  }

  function stackSet(key, value) {
    var cache = this.__data__;

    if (cache instanceof ListCache) {
      var pairs = cache.__data__;

      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        return this;
      }

      cache = this.__data__ = new MapCache(pairs);
    }

    cache.set(key, value);
    return this;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length,
        skipIndexes = !!length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  var baseEach = createBaseEach(baseForOwn);
  var baseFor = createBaseFor();

  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  function baseGet(object, path) {
    path = isKey(path, object) ? [path] : castPath(path);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  function baseGetTag(value) {
    return objectToString.call(value);
  }

  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  function baseIsEqual(value, other, customizer, bitmask, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
  }

  function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = arrayTag,
        othTag = arrayTag;

    if (!objIsArr) {
      objTag = getTag(object);
      objTag = objTag == argsTag ? objectTag : objTag;
    }

    if (!othIsArr) {
      othTag = getTag(other);
      othTag = othTag == argsTag ? objectTag : othTag;
    }

    var objIsObj = objTag == objectTag && !isHostObject(object),
        othIsObj = othTag == objectTag && !isHostObject(other),
        isSameTag = objTag == othTag;

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
    }

    if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
  }

  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
  }

  function baseIteratee(value) {
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity;
    }

    if (typeof value == 'object') {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }

    return property(value);
  }

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike(collection) ? Array(collection.length) : [];
    baseEach(collection, function (value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  function baseMatches(source) {
    var matchData = getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }

    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
    };
  }

  function basePropertyDeep(path) {
    return function (object) {
      return baseGet(object, path);
    };
  }

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  function castPath(value) {
    return isArray(value) ? value : stringToPath(value);
  }

  function createBaseEach(eachFunc, fromRight) {
    return function (collection, iteratee) {
      if (collection == null) {
        return collection;
      }

      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }

      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }

      return collection;
    };
  }

  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }

  function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!seen.has(othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
            return seen.add(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= UNORDERED_COMPARE_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];
      result[length] = [key, value, isStrictComparable(value)];
    }

    return result;
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var getTag = baseGetTag;

  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
      var result = objectToString.call(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : undefined;

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;

          case mapCtorString:
            return mapTag;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag;

          case weakMapCtorString:
            return weakMapTag;
        }
      }

      return result;
    };
  }

  function hasPath(object, path, hasFunc) {
    path = isKey(path, object) ? [path] : castPath(path);
    var result,
        index = -1,
        length = path.length;

    while (++index < length) {
      var key = toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result) {
      return result;
    }

    var length = object ? object.length : 0;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value;

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  var stringToPath = memoize(function (string) {
    string = toString(string);
    var result = [];

    if (reLeadingDot.test(string)) {
      result.push('');
    }

    string.replace(rePropName, function (match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function map(collection, iteratee) {
    var func = isArray(collection) ? arrayMap : baseMap;
    return func(collection, baseIteratee(iteratee, 3));
  }

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  function identity(value) {
    return value;
  }

  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  module.exports = map;
},354,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      object[key] = value;
    }
  }

  function baseZipObject(props, values, assignFunc) {
    var index = -1,
        length = props.length,
        valsLength = values.length,
        result = {};

    while (++index < length) {
      var value = index < valsLength ? values[index] : undefined;
      assignFunc(result, props[index], value);
    }

    return result;
  }

  function zipObject(props, values) {
    return baseZipObject(props || [], values || [], assignValue);
  }

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = zipObject;
},355,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]);
},356,[357]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var immediate = _require(_dependencyMap[0]);

  var argsarray = _require(_dependencyMap[1]);

  var WebSQLDatabase = _require(_dependencyMap[2]);

  function customOpenDatabase(SQLiteDatabase) {
    function createDb(dbName, dbVersion) {
      var sqliteDatabase = new SQLiteDatabase(dbName);
      return new WebSQLDatabase(dbVersion, sqliteDatabase);
    }

    function openDatabase(args) {
      if (args.length < 4) {
        throw new Error("Failed to execute 'openDatabase': 4 arguments required, but only " + args.length + ' present');
      }

      var dbName = args[0];
      var dbVersion = args[1];
      var callback = args[4];
      var db = createDb(dbName, dbVersion);

      if (typeof callback === 'function') {
        immediate(function () {
          callback(db);
        });
      }

      return db;
    }

    return argsarray(openDatabase);
  }

  module.exports = customOpenDatabase;
},357,[358,364,365]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var types = [_require(_dependencyMap[0]), _require(_dependencyMap[1]), _require(_dependencyMap[2]), _require(_dependencyMap[3]), _require(_dependencyMap[4])];
  var draining;
  var currentQueue;
  var queueIndex = -1;
  var queue = [];
  var scheduled = false;

  function cleanUpNextTick() {
    if (!draining || !currentQueue) {
      return;
    }

    draining = false;

    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }

    if (queue.length) {
      nextTick();
    }
  }

  function nextTick() {
    if (draining) {
      return;
    }

    scheduled = false;
    draining = true;
    var len = queue.length;
    var timeout = setTimeout(cleanUpNextTick);

    while (len) {
      currentQueue = queue;
      queue = [];

      while (currentQueue && ++queueIndex < len) {
        currentQueue[queueIndex].run();
      }

      queueIndex = -1;
      len = queue.length;
    }

    currentQueue = null;
    queueIndex = -1;
    draining = false;
    clearTimeout(timeout);
  }

  var scheduleDrain;
  var i = -1;
  var len = types.length;

  while (++i < len) {
    if (types[i] && types[i].test && types[i].test()) {
      scheduleDrain = types[i].install(nextTick);
      break;
    }
  }

  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }

  Item.prototype.run = function () {
    var fun = this.fun;
    var array = this.array;

    switch (array.length) {
      case 0:
        return fun();

      case 1:
        return fun(array[0]);

      case 2:
        return fun(array[0], array[1]);

      case 3:
        return fun(array[0], array[1], array[2]);

      default:
        return fun.apply(null, array);
    }
  };

  module.exports = immediate;

  function immediate(task) {
    var args = new Array(arguments.length - 1);

    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }

    queue.push(new Item(task, args));

    if (!scheduled && !draining) {
      scheduled = true;
      scheduleDrain();
    }
  }
},358,[359,360,361,362,363]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.test = function () {
    return typeof process !== 'undefined' && !process.browser;
  };

  exports.install = function (func) {
    return function () {
      process.nextTick(func);
    };
  };
},359,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Mutation = global.MutationObserver || global.WebKitMutationObserver;

  exports.test = function () {
    return Mutation;
  };

  exports.install = function (handle) {
    var called = 0;
    var observer = new Mutation(handle);
    var element = global.document.createTextNode('');
    observer.observe(element, {
      characterData: true
    });
    return function () {
      element.data = called = ++called % 2;
    };
  };
},360,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.test = function () {
    if (global.setImmediate) {
      return false;
    }

    return typeof global.MessageChannel !== 'undefined';
  };

  exports.install = function (func) {
    var channel = new global.MessageChannel();
    channel.port1.onmessage = func;
    return function () {
      channel.port2.postMessage(0);
    };
  };
},361,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.test = function () {
    return 'document' in global && 'onreadystatechange' in global.document.createElement('script');
  };

  exports.install = function (handle) {
    return function () {
      var scriptEl = global.document.createElement('script');

      scriptEl.onreadystatechange = function () {
        handle();
        scriptEl.onreadystatechange = null;
        scriptEl.parentNode.removeChild(scriptEl);
        scriptEl = null;
      };

      global.document.documentElement.appendChild(scriptEl);
      return handle;
    };
  };
},362,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.test = function () {
    return true;
  };

  exports.install = function (t) {
    return function () {
      setTimeout(t, 0);
    };
  };
},363,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = argsArray;

  function argsArray(fun) {
    return function () {
      var len = arguments.length;

      if (len) {
        var args = [];
        var i = -1;

        while (++i < len) {
          args[i] = arguments[i];
        }

        return fun.call(this, args);
      } else {
        return fun.call(this, []);
      }
    };
  }
},364,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Queue = _require(_dependencyMap[0]);

  var immediate = _require(_dependencyMap[1]);

  var noop = _require(_dependencyMap[2]);

  var WebSQLTransaction = _require(_dependencyMap[3]);

  var ROLLBACK = [{
    sql: 'ROLLBACK;',
    args: []
  }];
  var COMMIT = [{
    sql: 'END;',
    args: []
  }];

  function TransactionTask(readOnly, txnCallback, errorCallback, successCallback) {
    this.readOnly = readOnly;
    this.txnCallback = txnCallback;
    this.errorCallback = errorCallback;
    this.successCallback = successCallback;
  }

  function WebSQLDatabase(dbVersion, db) {
    this.version = dbVersion;
    this._db = db;
    this._txnQueue = new Queue();
    this._running = false;
    this._currentTask = null;
  }

  WebSQLDatabase.prototype._onTransactionComplete = function (err) {
    var self = this;

    function done() {
      if (err) {
        self._currentTask.errorCallback(err);
      } else {
        self._currentTask.successCallback();
      }

      self._running = false;
      self._currentTask = null;

      self._runNextTransaction();
    }

    if (self._currentTask.readOnly) {
      done();
    } else if (err) {
      self._db.exec(ROLLBACK, false, done);
    } else {
      self._db.exec(COMMIT, false, done);
    }
  };

  WebSQLDatabase.prototype._runTransaction = function () {
    var self = this;
    var txn = new WebSQLTransaction(self);
    immediate(function () {
      self._currentTask.txnCallback(txn);

      txn._checkDone();
    });
  };

  WebSQLDatabase.prototype._runNextTransaction = function () {
    if (this._running) {
      return;
    }

    var task = this._txnQueue.shift();

    if (!task) {
      return;
    }

    this._currentTask = task;
    this._running = true;

    this._runTransaction();
  };

  WebSQLDatabase.prototype._createTransaction = function (readOnly, txnCallback, errorCallback, successCallback) {
    errorCallback = errorCallback || noop;
    successCallback = successCallback || noop;

    if (typeof txnCallback !== 'function') {
      throw new Error('The callback provided as parameter 1 is not a function.');
    }

    this._txnQueue.push(new TransactionTask(readOnly, txnCallback, errorCallback, successCallback));

    this._runNextTransaction();
  };

  WebSQLDatabase.prototype.transaction = function (txnCallback, errorCallback, successCallback) {
    this._createTransaction(false, txnCallback, errorCallback, successCallback);
  };

  WebSQLDatabase.prototype.readTransaction = function (txnCallback, errorCallback, successCallback) {
    this._createTransaction(true, txnCallback, errorCallback, successCallback);
  };

  module.exports = WebSQLDatabase;
},365,[366,358,367,368]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function Queue() {
    this.length = 0;
  }

  Queue.prototype.push = function (item) {
    var node = {
      item: item
    };

    if (this.last) {
      this.last = this.last.next = node;
    } else {
      this.last = this.first = node;
    }

    this.length++;
  };

  Queue.prototype.shift = function () {
    var node = this.first;

    if (node) {
      this.first = node.next;

      if (! --this.length) {
        this.last = undefined;
      }

      return node.item;
    }
  };

  Queue.prototype.slice = function (start, end) {
    start = typeof start === 'undefined' ? 0 : start;
    end = typeof end === 'undefined' ? Infinity : end;
    var output = [];
    var i = 0;

    for (var node = this.first; node; node = node.next) {
      if (--end < 0) {
        break;
      } else if (++i > start) {
        output.push(node.item);
      }
    }

    return output;
  };

  module.exports = Queue;
},366,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = function () {};
},367,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var noop = _require(_dependencyMap[0]);

  var Queue = _require(_dependencyMap[1]);

  var immediate = _require(_dependencyMap[2]);

  var WebSQLResultSet = _require(_dependencyMap[3]);

  function errorUnhandled() {
    return true;
  }

  function massageSQLResult(sql, insertId, rowsAffected, rows) {
    if (/^\s*UPDATE\b/i.test(sql)) {
      insertId = void 0;
    } else if (/^\s*CREATE\s+TABLE\b/i.test(sql)) {
      insertId = 0;
      rowsAffected = 0;
    } else if (/^\s*DROP\s+TABLE\b/i.test(sql)) {
      insertId = void 0;
      rowsAffected = 0;
    } else if (!/^\s*INSERT\b/i.test(sql)) {
      insertId = void 0;
    }

    return new WebSQLResultSet(insertId, rowsAffected, rows);
  }

  function SQLTask(sql, args, sqlCallback, sqlErrorCallback) {
    this.sql = sql;
    this.args = args;
    this.sqlCallback = sqlCallback;
    this.sqlErrorCallback = sqlErrorCallback;
  }

  function runBatch(self, batch) {
    function onDone() {
      self._running = false;
      runAllSql(self);
    }

    var readOnly = self._websqlDatabase._currentTask.readOnly;

    self._websqlDatabase._db.exec(batch, readOnly, function (err, results) {
      if (err) {
        self._error = err;
        return onDone();
      }

      for (var i = 0; i < results.length; i++) {
        var res = results[i];
        var batchTask = batch[i];

        if (res.error) {
          if (batchTask.sqlErrorCallback(self, res.error)) {
            self._error = res.error;
            return onDone();
          }
        } else {
          batchTask.sqlCallback(self, massageSQLResult(batch[i].sql, res.insertId, res.rowsAffected, res.rows));
        }
      }

      onDone();
    });
  }

  function runAllSql(self) {
    if (self._running || self._complete) {
      return;
    }

    if (self._error || !self._sqlQueue.length) {
      self._complete = true;
      return self._websqlDatabase._onTransactionComplete(self._error);
    }

    self._running = true;
    var batch = [];
    var task;

    while (task = self._sqlQueue.shift()) {
      batch.push(task);
    }

    runBatch(self, batch);
  }

  function executeSql(self, sql, args, sqlCallback, sqlErrorCallback) {
    self._sqlQueue.push(new SQLTask(sql, args, sqlCallback, sqlErrorCallback));

    if (self._runningTimeout) {
      return;
    }

    self._runningTimeout = true;
    immediate(function () {
      self._runningTimeout = false;
      runAllSql(self);
    });
  }

  function WebSQLTransaction(websqlDatabase) {
    this._websqlDatabase = websqlDatabase;
    this._error = null;
    this._complete = false;
    this._runningTimeout = false;
    this._sqlQueue = new Queue();

    if (!websqlDatabase._currentTask.readOnly) {
      this._sqlQueue.push(new SQLTask('BEGIN;', [], noop, noop));
    }
  }

  WebSQLTransaction.prototype.executeSql = function (sql, args, sqlCallback, sqlErrorCallback) {
    args = Array.isArray(args) ? args : [];
    sqlCallback = typeof sqlCallback === 'function' ? sqlCallback : noop;
    sqlErrorCallback = typeof sqlErrorCallback === 'function' ? sqlErrorCallback : errorUnhandled;
    executeSql(this, sql, args, sqlCallback, sqlErrorCallback);
  };

  WebSQLTransaction.prototype._checkDone = function () {
    runAllSql(this);
  };

  module.exports = WebSQLTransaction;
},368,[367,366,358,369]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function WebSQLRows(array) {
    this._array = array;
    this.length = array.length;
  }

  WebSQLRows.prototype.item = function (i) {
    return this._array[i];
  };

  function WebSQLResultSet(insertId, rowsAffected, rows) {
    this.insertId = insertId;
    this.rowsAffected = rowsAffected;
    this.rows = new WebSQLRows(rows);
  }

  module.exports = WebSQLResultSet;
},369,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var AdMobBanner = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(AdMobBanner, _React$Component);

    function AdMobBanner() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, AdMobBanner);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AdMobBanner.__proto__ || Object.getPrototypeOf(AdMobBanner)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        style: {}
      }, _this._handleSizeChange = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        var height = nativeEvent.height,
            width = nativeEvent.width;

        _this.setState({
          style: {
            width: width,
            height: height
          }
        });
      }, _this._handleDidFailToReceiveAdWithError = function (_ref3) {
        var nativeEvent = _ref3.nativeEvent;
        return _this.props.onDidFailToReceiveAdWithError && _this.props.onDidFailToReceiveAdWithError(nativeEvent.error);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(AdMobBanner, [{
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: this.props.style
          },
          _react2.default.createElement(RNBanner, {
            style: this.state.style,
            adUnitID: this.props.adUnitID,
            bannerSize: this.props.bannerSize,
            testDeviceID: this.props.testDeviceID,
            onSizeChange: this._handleSizeChange,
            onAdViewDidReceiveAd: this.props.onAdViewDidReceiveAd,
            onDidFailToReceiveAdWithError: this._handleDidFailToReceiveAdWithError,
            onAdViewWillPresentScreen: this.props.onAdViewWillPresentScreen,
            onAdViewWillDismissScreen: this.props.onAdViewWillDismissScreen,
            onAdViewDidDismissScreen: this.props.onAdViewDidDismissScreen,
            onAdViewWillLeaveApplication: this.props.onAdViewWillLeaveApplication
          })
        );
      }
    }]);
    return AdMobBanner;
  }(_react2.default.Component), _class.propTypes = babelHelpers.extends({
    bannerSize: _propTypes2.default.oneOf(['banner', 'largeBanner', 'mediumRectangle', 'fullBanner', 'leaderboard', 'smartBannerPortrait', 'smartBannerLandscape']),
    adUnitID: _propTypes2.default.string,
    testDeviceID: _propTypes2.default.string,
    onAdViewDidReceiveAd: _propTypes2.default.func,
    onDidFailToReceiveAdWithError: _propTypes2.default.func,
    onAdViewWillPresentScreen: _propTypes2.default.func,
    onAdViewWillDismissScreen: _propTypes2.default.func,
    onAdViewDidDismissScreen: _propTypes2.default.func,
    onAdViewWillLeaveApplication: _propTypes2.default.func
  }, _reactNative.ViewPropTypes), _class.defaultProps = {
    bannerSize: 'smartBannerPortrait'
  }, _temp2);
  exports.default = AdMobBanner;
  var RNBanner = (0, _reactNative.requireNativeComponent)('RNAdMob', AdMobBanner, {
    nativeOnly: {
      onSizeChange: true
    }
  });
},370,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var PublisherBanner = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(PublisherBanner, _React$Component);

    function PublisherBanner() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, PublisherBanner);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = PublisherBanner.__proto__ || Object.getPrototypeOf(PublisherBanner)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        style: {}
      }, _this._handleSizeChange = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        var height = nativeEvent.height,
            width = nativeEvent.width;

        _this.setState({
          style: {
            width: width,
            height: height
          }
        });
      }, _this._handleDidFailToReceiveAdWithError = function (_ref3) {
        var nativeEvent = _ref3.nativeEvent;
        return _this.props.onDidFailToReceiveAdWithError && _this.props.onDidFailToReceiveAdWithError(nativeEvent.error);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(PublisherBanner, [{
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: this.props.style
          },
          _react2.default.createElement(RNBanner, {
            style: this.state.style,
            adUnitID: this.props.adUnitID,
            bannerSize: this.props.bannerSize,
            testDeviceID: this.props.testDeviceID,
            onSizeChange: this._handleSizeChange,
            onAdViewDidReceiveAd: this.props.onAdViewDidReceiveAd,
            onDidFailToReceiveAdWithError: this._handleDidFailToReceiveAdWithError,
            onAdViewWillPresentScreen: this.props.onAdViewWillPresentScreen,
            onAdViewWillDismissScreen: this.props.onAdViewWillDismissScreen,
            onAdViewDidDismissScreen: this.props.onAdViewDidDismissScreen,
            onAdViewWillLeaveApplication: this.props.onAdViewWillLeaveApplication,
            onAdmobDispatchAppEvent: this.props.onAdMobDispatchAppEvent
          })
        );
      }
    }]);
    return PublisherBanner;
  }(_react2.default.Component), _class.propTypes = babelHelpers.extends({
    bannerSize: _propTypes2.default.oneOf(['banner', 'largeBanner', 'mediumRectangle', 'fullBanner', 'leaderboard', 'smartBannerPortrait', 'smartBannerLandscape']),
    adUnitID: _propTypes2.default.string,
    testDeviceID: _propTypes2.default.string,
    onAdViewDidReceiveAd: _propTypes2.default.func,
    onDidFailToReceiveAdWithError: _propTypes2.default.func,
    onAdViewWillPresentScreen: _propTypes2.default.func,
    onAdViewWillDismissScreen: _propTypes2.default.func,
    onAdViewDidDismissScreen: _propTypes2.default.func,
    onAdViewWillLeaveApplication: _propTypes2.default.func,
    onAdmobDispatchAppEvent: _propTypes2.default.func
  }, _reactNative.ViewPropTypes), _class.defaultProps = {
    bannerSize: 'smartBannerPortrait'
  }, _temp2);
  exports.default = PublisherBanner;
  var RNBanner = (0, _reactNative.requireNativeComponent)('RNAdMobDFP', PublisherBanner, {
    nativeOnly: {
      onSizeChange: true
    }
  });
},371,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _reactNative = _require(_dependencyMap[0]);

  var RNAdMobInterstitial = _reactNative.NativeModules.RNAdMobInterstitial;
  var adMobInterstitialEmitter = new _reactNative.NativeEventEmitter(RNAdMobInterstitial);
  var eventNames = ['interstitialDidLoad', 'interstitialDidFailToLoad', 'interstitialDidOpen', 'interstitialDidClose', 'interstitialWillLeaveApplication'];
  var eventHandlers = {};
  eventNames.forEach(function (eventName) {
    eventHandlers[eventName] = new Map();
  });

  var addEventListener = function addEventListener(type, handler) {
    if (eventNames.includes(type)) {
      eventHandlers[type].set(handler, adMobInterstitialEmitter.addListener(type, handler));
    } else {
      console.log("Event with type " + type + " does not exist.");
    }
  };

  var removeEventListener = function removeEventListener(type, handler) {
    var eventSubscription = eventHandlers[type].get(handler);

    if (!eventHandlers[type].has(handler) || !eventSubscription) {
      return;
    }

    eventSubscription.remove();
    eventHandlers[type].delete(handler);
  };

  var removeAllListeners = function removeAllListeners() {
    return eventNames.forEach(function (eventName) {
      return adMobInterstitialEmitter.removeAllListeners(eventName);
    });
  };

  module.exports = babelHelpers.extends({}, RNAdMobInterstitial, {
    requestAdAsync: function requestAdAsync() {
      return RNAdMobInterstitial.requestAd();
    },
    showAdAsync: function showAdAsync() {
      return RNAdMobInterstitial.showAd();
    },
    dismissAdAsync: function dismissAdAsync() {
      return new Promise(function (resolve, reject) {
        {
          reject(new Error('Dismissing ads programmatically is supported only on iOS.'));
        }
      });
    },
    getIsReadyAsync: function getIsReadyAsync() {
      return RNAdMobInterstitial.getIsReady();
    },
    addEventListener: addEventListener,
    removeEventListener: removeEventListener,
    removeAllListeners: removeAllListeners
  });
},372,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _reactNative = _require(_dependencyMap[0]);

  var RNAdMobRewarded = _reactNative.NativeModules.RNAdMobRewarded;
  var adMobRewardedEventEmitter = new _reactNative.NativeEventEmitter(RNAdMobRewarded);
  var eventNames = ['rewardedVideoDidRewardUser', 'rewardedVideoDidLoad', 'rewardedVideoDidFailToLoad', 'rewardedVideoDidOpen', 'rewardedVideoDidStart', 'rewardedVideoDidClose', 'rewardedVideoWillLeaveApplication'];
  var eventHandlers = {};
  eventNames.forEach(function (eventName) {
    eventHandlers[eventName] = new Map();
  });

  var addEventListener = function addEventListener(type, handler) {
    if (eventNames.includes(type)) {
      eventHandlers[type].set(handler, adMobRewardedEventEmitter.addListener(type, handler));
    } else {
      console.log("Event with type " + type + " does not exist.");
    }
  };

  var removeEventListener = function removeEventListener(type, handler) {
    var eventSubscription = eventHandlers[type].get(handler);

    if (!eventHandlers[type].has(handler) || !eventSubscription) {
      return;
    }

    eventSubscription.remove();
    eventHandlers[type].delete(handler);
  };

  var removeAllListeners = function removeAllListeners() {
    return eventNames.forEach(function (eventName) {
      return adMobRewardedEventEmitter.removeAllListeners(eventName);
    });
  };

  module.exports = babelHelpers.extends({}, RNAdMobRewarded, {
    requestAdAsync: function requestAdAsync() {
      return RNAdMobRewarded.requestAd();
    },
    showAdAsync: function showAdAsync() {
      return RNAdMobRewarded.showAd();
    },
    dismissAdAsync: function dismissAdAsync() {
      return new Promise(function (resolve, reject) {
        {
          reject(new Error('Dismissing ads programmatically is supported only on iOS.'));
        }
      });
    },
    getIsReadyAsync: function getIsReadyAsync() {
      return RNAdMobRewarded.getIsReady();
    },
    addEventListener: addEventListener,
    removeEventListener: removeEventListener,
    removeAllListeners: removeAllListeners
  });
},373,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var BarCodeScannerManager = _reactNative.NativeModules.ExponentBarCodeScannerModule;
  var BarCodeScannerImplementation = void 0;

  if (BarCodeScannerManager) {
    BarCodeScannerImplementation = _require(_dependencyMap[1]).default;
  } else {
    BarCodeScannerImplementation = _require(_dependencyMap[2]).default;
  }

  exports.default = BarCodeScannerImplementation;
},1105,[14,1106,375]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Constants = exports.default = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var BarCodeScannerManager = _reactNative.NativeModules.ExponentBarCodeScannerManager || _reactNative.NativeModules.ExponentBarCodeScannerModule;

  function convertNativeProps(props) {
    var newProps = babelHelpers.extends({}, props);

    if (typeof props.torchMode === 'string') {
      newProps.torchMode = BarCodeScanner.Constants.TorchMode[props.torchMode];
    }

    if (typeof props.type === 'string') {
      newProps.type = BarCodeScanner.Constants.Type[props.type];
    }

    return newProps;
  }

  var EventThrottleMs = 500;
  var BarCodeScanner = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(BarCodeScanner, _React$Component);

    function BarCodeScanner() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, BarCodeScanner);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = BarCodeScanner.__proto__ || Object.getPrototypeOf(BarCodeScanner)).call.apply(_ref, [this].concat(args))), _this), _this._setRef = function (component) {
        _this._component = component;
      }, _this._onBarCodeRead = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;

        if (_this._lastEvent && JSON.stringify(nativeEvent) === _this._lastEvent && new Date() - _this._lastEventTime < EventThrottleMs) {
          return;
        }

        if (_this.props.onBarCodeRead) {
          _this.props.onBarCodeRead(nativeEvent);

          _this._lastEvent = JSON.stringify(nativeEvent);
          _this._lastEventTime = new Date();
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(BarCodeScanner, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var nativeProps = convertNativeProps(props);

        this._component.setNativeProps(nativeProps);
      }
    }, {
      key: "render",
      value: function render() {
        var nativeProps = convertNativeProps(this.props);
        return _react2.default.createElement(ExponentBarCodeScanner, babelHelpers.extends({}, nativeProps, {
          ref: this._setRef,
          onBarCodeRead: this._onBarCodeRead
        }));
      }
    }]);
    return BarCodeScanner;
  }(_react2.default.Component), _class.Constants = {
    BarCodeType: BarCodeScannerManager.BarCodeType,
    Type: BarCodeScannerManager.Type,
    TorchMode: BarCodeScannerManager.TorchMode
  }, _class.propTypes = babelHelpers.extends({}, _reactNative.ViewPropTypes, {
    onBarCodeRead: _propTypes2.default.func,
    barCodeTypes: _propTypes2.default.array,
    torchMode: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    type: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
  }), _class.defaultProps = {
    type: BarCodeScannerManager.Type.back,
    torchMode: BarCodeScannerManager.TorchMode.off,
    barCodeTypes: Object.values(BarCodeScannerManager.BarCodeType)
  }, _temp2);
  exports.default = BarCodeScanner;
  var Constants = exports.Constants = BarCodeScanner.Constants;
  var ExponentBarCodeScanner = (0, _reactNative.requireNativeComponent)('ExponentBarCodeScanner', BarCodeScanner, {
    nativeOnly: {
      onBarCodeRead: true
    }
  });
},1106,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Constants = exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _Camera = _require(_dependencyMap[1]);

  var _Camera2 = babelHelpers.interopRequireDefault(_Camera);

  var BarCodeScanner = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(BarCodeScanner, _React$Component);

    function BarCodeScanner() {
      babelHelpers.classCallCheck(this, BarCodeScanner);
      return babelHelpers.possibleConstructorReturn(this, (BarCodeScanner.__proto__ || Object.getPrototypeOf(BarCodeScanner)).apply(this, arguments));
    }

    babelHelpers.createClass(BarCodeScanner, [{
      key: "render",
      value: function render() {
        var props = babelHelpers.extends({}, this.props);

        if (props.torchMode !== undefined) {
          if (typeof props.torchMode === 'string') {
            props.flashMode = BarCodeScanner.Constants.TorchMode[props.torchMode];
          } else {
            props.flashMode = props.torchMode;
          }

          delete props.torchMode;
        }

        return _react2.default.createElement(_Camera2.default, props);
      }
    }]);
    return BarCodeScanner;
  }(_react2.default.Component), _class.Constants = babelHelpers.extends({}, _Camera2.default.Constants, {
    TorchMode: {
      on: _Camera2.default.Constants.FlashMode.torch,
      off: _Camera2.default.Constants.FlashMode.off
    }
  }), _temp);
  exports.default = BarCodeScanner;
  var Constants = exports.Constants = BarCodeScanner.Constants;
},375,[103,347]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var BlurView = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(BlurView, _React$Component);

    function BlurView() {
      babelHelpers.classCallCheck(this, BlurView);
      return babelHelpers.possibleConstructorReturn(this, (BlurView.__proto__ || Object.getPrototypeOf(BlurView)).apply(this, arguments));
    }

    babelHelpers.createClass(BlurView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            tint = _props.tint,
            props = babelHelpers.objectWithoutProperties(_props, ["tint"]);
        var backgroundColor = void 0;

        if (tint === 'dark') {
          backgroundColor = 'rgba(0,0,0,0.5)';
        } else if (tint === 'light') {
          backgroundColor = 'rgba(255,255,255,0.7)';
        } else {
          backgroundColor = 'rgba(255,255,255,0.4)';
        }

        return React.createElement(_reactNative.View, babelHelpers.extends({}, props, {
          style: [this.props.style, {
            backgroundColor: backgroundColor
          }]
        }));
      }
    }]);
    return BlurView;
  }(React.Component), _class.propTypes = babelHelpers.extends({
    tint: _propTypes2.default.oneOf(['light', 'default', 'dark'])
  }, _reactNative.ViewPropTypes), _temp);
  exports.default = BlurView;
},1107,[121,103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Constants = exports.default = undefined;

  var _class, _temp;

  var _reactNative = _require(_dependencyMap[0]);

  var faceDetectionDisabledMessage = 'Face detection has not been included in this build.';
  var FaceDetectorModule = _reactNative.NativeModules.ExpoFaceDetector || {
    stubbed: true,
    Mode: {},
    Landmarks: {},
    Classifications: {},
    detectFaces: function detectFaces() {
      return new Promise(function (_, reject) {
        return reject(faceDetectionDisabledMessage);
      });
    }
  };
  var FaceDetector = (_temp = _class = function () {
    function FaceDetector() {
      babelHelpers.classCallCheck(this, FaceDetector);
    }

    babelHelpers.createClass(FaceDetector, null, [{
      key: "detectFacesAsync",
      value: function detectFacesAsync(uri, options) {
        return FaceDetectorModule.detectFaces(babelHelpers.extends({}, options, {
          uri: uri
        }));
      }
    }]);
    return FaceDetector;
  }(), _class.Constants = {
    Mode: FaceDetectorModule.Mode,
    Landmarks: FaceDetectorModule.Landmarks,
    Classifications: FaceDetectorModule.Classifications
  }, _temp);
  exports.default = FaceDetector;
  var Constants = exports.Constants = FaceDetector.Constants;
},377,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNativeGestureHandler = _require(_dependencyMap[0]);

  var _reactNativeGestureHandler2 = babelHelpers.interopRequireDefault(_reactNativeGestureHandler);

  exports.default = _reactNativeGestureHandler2.default;
},378,[379]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DrawerLayout = exports.Swipeable = exports.gestureHandlerRootHOC = exports.FlatList = exports.BorderlessButton = exports.RectButton = exports.BaseButton = exports.RawButton = exports.State = exports.RotationGestureHandler = exports.PinchGestureHandler = exports.PanGestureHandler = exports.LongPressGestureHandler = exports.TapGestureHandler = exports.NativeViewGestureHandler = exports.WebView = exports.DrawerLayoutAndroid = exports.ViewPagerAndroid = exports.ToolbarAndroid = exports.TextInput = exports.Switch = exports.Slider = exports.ScrollView = undefined;

  var _stateToPropMappings, _class3, _temp4, _class4, _temp5, _class5, _temp6;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _ReactNativeBridgeEventPlugin = _require(_dependencyMap[2]);

  var _ReactNativeBridgeEventPlugin2 = babelHelpers.interopRequireDefault(_ReactNativeBridgeEventPlugin);

  var _areEqual = _require(_dependencyMap[3]);

  var _areEqual2 = babelHelpers.interopRequireDefault(_areEqual);

  var _propTypes = _require(_dependencyMap[4]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _gestureHandlerRootHOC = _require(_dependencyMap[5]);

  var _gestureHandlerRootHOC2 = babelHelpers.interopRequireDefault(_gestureHandlerRootHOC);

  var _Swipeable = _require(_dependencyMap[6]);

  var _Swipeable2 = babelHelpers.interopRequireDefault(_Swipeable);

  var _DrawerLayout = _require(_dependencyMap[7]);

  var _DrawerLayout2 = babelHelpers.interopRequireDefault(_DrawerLayout);

  var RNGestureHandlerModule = _reactNative.NativeModules.RNGestureHandlerModule;
  var UIManager = _reactNative.NativeModules.UIManager;
  var oldSetJSResponder = UIManager.setJSResponder,
      oldClearJSResponder = UIManager.clearJSResponder;

  UIManager.setJSResponder = function (tag, blockNativeResponder) {
    RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);
    oldSetJSResponder(tag, blockNativeResponder);
  };

  UIManager.clearJSResponder = function () {
    RNGestureHandlerModule.handleClearJSResponder();
    oldClearJSResponder();
  };

  _ReactNativeBridgeEventPlugin2.default.processEventTypes({
    directEventTypes: {
      topGestureHandlerEvent: {
        registrationName: 'onGestureHandlerEvent'
      },
      topGestureHandlerStateChange: {
        registrationName: 'onGestureHandlerStateChange'
      }
    }
  });

  var State = RNGestureHandlerModule.State;
  var handlerTag = 1;
  var handlerIDToTag = {};
  var GestureHandlerPropTypes = {
    id: _propTypes2.default.string,
    enabled: _propTypes2.default.bool,
    waitFor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
    simultaneousHandlers: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
    shouldCancelWhenOutside: _propTypes2.default.bool,
    hitSlop: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
      left: _propTypes2.default.number,
      top: _propTypes2.default.number,
      right: _propTypes2.default.number,
      bottom: _propTypes2.default.number,
      vertical: _propTypes2.default.number,
      horizontal: _propTypes2.default.number,
      width: _propTypes2.default.number,
      height: _propTypes2.default.number
    })]),
    onGestureEvent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object]),
    onHandlerStateChange: _propTypes2.default.func,
    onBegan: _propTypes2.default.func,
    onFailed: _propTypes2.default.func,
    onCancelled: _propTypes2.default.func,
    onActivated: _propTypes2.default.func,
    onEnded: _propTypes2.default.func
  };
  var stateToPropMappings = (_stateToPropMappings = {}, babelHelpers.defineProperty(_stateToPropMappings, State.BEGAN, 'onBegan'), babelHelpers.defineProperty(_stateToPropMappings, State.FAILED, 'onFailed'), babelHelpers.defineProperty(_stateToPropMappings, State.CANCELLED, 'onCancelled'), babelHelpers.defineProperty(_stateToPropMappings, State.ACTIVE, 'onActivated'), babelHelpers.defineProperty(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);

  function canUseNativeParam(param) {
    return param !== undefined && typeof param !== 'function' && (typeof param !== 'object' || !('__isNative' in param));
  }

  function transformIntoHandlerTags(handlerIDs) {
    if (!Array.isArray(handlerIDs)) {
      handlerIDs = [handlerIDs];
    }

    return handlerIDs.map(function (handlerID) {
      return handlerIDToTag[handlerID] || -1;
    }).filter(function (handlerTag) {
      return handlerTag > 0;
    });
  }

  function filterConfig(props, validProps) {
    var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var res = babelHelpers.extends({}, defaults);
    Object.keys(validProps).forEach(function (key) {
      var value = props[key];

      if (canUseNativeParam(value)) {
        var _value = props[key];

        if (key === 'simultaneousHandlers' || key === 'waitFor') {
          _value = transformIntoHandlerTags(props[key]);
        } else if (key === 'hitSlop') {
          if (typeof _value !== 'object') {
            _value = {
              top: _value,
              left: _value,
              bottom: _value,
              right: _value
            };
          }
        }

        res[key] = _value;
      }
    });
    return res;
  }

  function createHandler(handlerName) {
    var _class, _temp;

    var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var Handler = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(Handler, _React$Component);

      function Handler(props) {
        babelHelpers.classCallCheck(this, Handler);

        var _this = babelHelpers.possibleConstructorReturn(this, (Handler.__proto__ || Object.getPrototypeOf(Handler)).call(this, props));

        _this._onGestureHandlerEvent = function (event) {
          if (event.nativeEvent.handlerTag === _this._handlerTag) {
            _this.props.onGestureEvent && _this.props.onGestureEvent(event);
          } else {
            _this.props.onGestureHandlerEvent && _this.props.onGestureHandlerEvent(event);
          }
        };

        _this._onGestureHandlerStateChange = function (event) {
          if (event.nativeEvent.handlerTag === _this._handlerTag) {
            _this.props.onHandlerStateChange && _this.props.onHandlerStateChange(event);
            var stateEventName = stateToPropMappings[event.nativeEvent.state];

            if (typeof _this.props[stateEventName] === 'function') {
              _this.props[stateEventName](event);
            }
          } else {
            _this.props.onGestureHandlerStateChange && _this.props.onGestureHandlerStateChange(event);
          }
        };

        _this._refHandler = function (node) {
          _this._viewNode = node;

          var child = _react2.default.Children.only(_this.props.children);

          var ref = child.ref;

          if (typeof ref === 'function') {
            ref(node);
          }
        };

        _this._handlerTag = handlerTag++;
        _this._config = {};

        if (props.id) {
          if (handlerIDToTag[props.id] !== undefined) {
            throw new Error("Handler with ID \"" + props.id + "\" already registered");
          }

          handlerIDToTag[props.id] = _this._handlerTag;
        }

        return _this;
      }

      babelHelpers.createClass(Handler, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          RNGestureHandlerModule.dropGestureHandler(this._handlerTag);

          if (this.props.id) {
            delete handlerIDToTag[this.props.id];
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this._viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);
          this._config = filterConfig(this.props, this.constructor.propTypes, config);
          RNGestureHandlerModule.createGestureHandler(handlerName, this._handlerTag, this._config);
          RNGestureHandlerModule.attachGestureHandler(this._handlerTag, this._viewTag);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps, prevState) {
          var viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);

          if (this._viewTag !== viewTag) {
            this._viewTag = viewTag;
            RNGestureHandlerModule.attachGestureHandler(this._handlerTag, viewTag);
          }

          var newConfig = filterConfig(this.props, this.constructor.propTypes, config);

          if (!(0, _areEqual2.default)(this._config, newConfig)) {
            this._config = newConfig;
            RNGestureHandlerModule.updateGestureHandler(this._handlerTag, this._config);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var gestureEventHandler = this._onGestureHandlerEvent;
          var _props = this.props,
              onGestureEvent = _props.onGestureEvent,
              onGestureHandlerEvent = _props.onGestureHandlerEvent;

          if (onGestureEvent && typeof onGestureEvent !== 'function') {
            if (onGestureHandlerEvent) {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }

            gestureEventHandler = this.props.onGestureEvent;
          } else {
            if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }
          }

          var gestureStateEventHandler = this._onGestureHandlerStateChange;
          var _props2 = this.props,
              onHandlerStateChange = _props2.onHandlerStateChange,
              onGestureHandlerStateChange = _props2.onGestureHandlerStateChange;

          if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {
            if (onGestureHandlerStateChange) {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }

            gestureStateEventHandler = this.props.onHandlerStateChange;
          } else {
            if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }
          }

          var child = _react2.default.Children.only(this.props.children);

          return _react2.default.cloneElement(child, {
            ref: this._refHandler,
            collapsable: false,
            onGestureHandlerEvent: gestureEventHandler,
            onGestureHandlerStateChange: gestureStateEventHandler
          });
        }
      }]);
      return Handler;
    }(_react2.default.Component), _class.propTypes = babelHelpers.extends({}, GestureHandlerPropTypes, propTypes), _temp);
    return Handler;
  }

  var NativeViewGestureHandler = createHandler('NativeViewGestureHandler', {
    shouldActivateOnStart: _propTypes2.default.bool,
    disallowInterruption: _propTypes2.default.bool
  });
  var TapGestureHandler = createHandler('TapGestureHandler', {
    maxDurationMs: _propTypes2.default.number,
    maxDelayMs: _propTypes2.default.number,
    numberOfTaps: _propTypes2.default.number
  }, {});
  var LongPressGestureHandler = createHandler('LongPressGestureHandler', {
    minDurationMs: _propTypes2.default.number,
    maxDist: _propTypes2.default.number
  }, {});
  var PanGestureHandler = createHandler('PanGestureHandler', {
    minDeltaX: _propTypes2.default.number,
    minDeltaY: _propTypes2.default.number,
    maxDeltaX: _propTypes2.default.number,
    maxDeltaY: _propTypes2.default.number,
    minOffsetX: _propTypes2.default.number,
    minOffsetY: _propTypes2.default.number,
    minDist: _propTypes2.default.number,
    minVelocity: _propTypes2.default.number,
    minVelocityX: _propTypes2.default.number,
    minVelocityY: _propTypes2.default.number,
    minPointers: _propTypes2.default.number,
    maxPointers: _propTypes2.default.number,
    avgTouches: _propTypes2.default.bool
  }, {});
  var PinchGestureHandler = createHandler('PinchGestureHandler', {}, {});
  var RotationGestureHandler = createHandler('RotationGestureHandler', {}, {});
  var NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);
  var NATIVE_WRAPPER_PROPS_FILTER = babelHelpers.extends({}, NativeViewGestureHandler.propTypes, {
    onGestureHandlerEvent: _propTypes2.default.func,
    onGestureHandlerStateChange: _propTypes2.default.func
  });

  function createNativeWrapper(Component) {
    var _class2, _temp3;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ComponentWrapper = (_temp3 = _class2 = function (_React$Component2) {
      babelHelpers.inherits(ComponentWrapper, _React$Component2);

      function ComponentWrapper() {
        var _ref;

        var _temp2, _this2, _ret;

        babelHelpers.classCallCheck(this, ComponentWrapper);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp2 = (_this2 = babelHelpers.possibleConstructorReturn(this, (_ref = ComponentWrapper.__proto__ || Object.getPrototypeOf(ComponentWrapper)).call.apply(_ref, [this].concat(args))), _this2), _this2._refHandler = function (node) {
          for (var methodName in node) {
            var method = node[methodName];

            if (!methodName.startsWith('_') && !methodName.startsWith('component') && !NATIVE_WRAPPER_BIND_BLACKLIST.has(methodName) && typeof method === 'function' && _this2[methodName] === undefined) {
              _this2[methodName] = method;
            }
          }
        }, _temp2), babelHelpers.possibleConstructorReturn(_this2, _ret);
      }

      babelHelpers.createClass(ComponentWrapper, [{
        key: "render",
        value: function render() {
          var _this3 = this;

          var gestureHandlerProps = Object.keys(this.props).reduce(function (props, key) {
            if (key in NATIVE_WRAPPER_PROPS_FILTER) {
              props[key] = _this3.props[key];
            }

            return props;
          }, babelHelpers.extends({}, config));
          return _react2.default.createElement(
            NativeViewGestureHandler,
            gestureHandlerProps,
            _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
              ref: this._refHandler
            }))
          );
        }
      }]);
      return ComponentWrapper;
    }(_react2.default.Component), _class2.propTypes = babelHelpers.extends({}, Component.propTypes), _temp3);
    return ComponentWrapper;
  }

  var WrappedScrollView = createNativeWrapper(_reactNative.ScrollView, {
    disallowInterruption: true
  });
  var WrappedSlider = createNativeWrapper(_reactNative.Slider, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: true,
    disallowInterruption: true
  });
  var WrappedSwitch = createNativeWrapper(_reactNative.Switch, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: true,
    disallowInterruption: true
  });
  var WrappedTextInput = createNativeWrapper(_reactNative.TextInput);
  var WrappedWebView = createNativeWrapper(_reactNative.WebView);
  var WrappedToolbarAndroid = createNativeWrapper(_reactNative.ToolbarAndroid);
  var WrappedViewPagerAndroid = createNativeWrapper(_reactNative.ViewPagerAndroid, {
    disallowInterruption: true
  });
  var WrappedDrawerLayoutAndroid = createNativeWrapper(_reactNative.DrawerLayoutAndroid, {
    disallowInterruption: true
  });
  WrappedDrawerLayoutAndroid.positions = _reactNative.DrawerLayoutAndroid.positions;

  State.print = function (state) {
    var keys = Object.keys(State);

    for (var i = 0; i < keys.length; i++) {
      if (state === State[keys[i]]) {
        return keys[i];
      }
    }
  };

  var RawButton = createNativeWrapper((0, _reactNative.requireNativeComponent)('RNGestureHandlerButton', null), {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: false
  });
  var BaseButton = (_temp4 = _class3 = function (_React$Component3) {
    babelHelpers.inherits(BaseButton, _React$Component3);

    function BaseButton(props) {
      babelHelpers.classCallCheck(this, BaseButton);

      var _this4 = babelHelpers.possibleConstructorReturn(this, (BaseButton.__proto__ || Object.getPrototypeOf(BaseButton)).call(this, props));

      _this4._handleEvent = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        var state = nativeEvent.state,
            oldState = nativeEvent.oldState,
            pointerInside = nativeEvent.pointerInside;
        var active = pointerInside && state === State.ACTIVE;

        if (active !== _this4._lastActive && _this4.props.onActiveStateChange) {
          _this4.props.onActiveStateChange(active);
        }

        if (oldState === State.ACTIVE && state !== State.CANCELLED && _this4._lastActive && _this4.props.onPress) {
          _this4.props.onPress(active);
        }

        _this4._lastActive = active;
      };

      _this4._onHandlerStateChange = function (e) {
        _this4.props.onHandlerStateChange && _this4.props.onHandlerStateChange(e);

        _this4._handleEvent(e);
      };

      _this4._onGestureEvent = function (e) {
        _this4.props.onGestureEvent && _this4.props.onGestureEvent(e);

        _this4._handleEvent(e);
      };

      _this4._lastActive = false;
      return _this4;
    }

    babelHelpers.createClass(BaseButton, [{
      key: "render",
      value: function render() {
        return _react2.default.createElement(RawButton, babelHelpers.extends({}, this.props, {
          onGestureEvent: this._onGestureEvent,
          onHandlerStateChange: this._onHandlerStateChange
        }));
      }
    }]);
    return BaseButton;
  }(_react2.default.Component), _class3.propTypes = babelHelpers.extends({}, RawButton.propTypes, {
    onPress: _propTypes2.default.func,
    onActiveStateChange: _propTypes2.default.func
  }), _temp4);

  var AnimatedBaseButton = _reactNative.Animated.createAnimatedComponent(BaseButton);

  var btnStyles = _reactNative.StyleSheet.create({
    underlay: {
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      top: 0
    }
  });

  var RectButton = (_temp5 = _class4 = function (_React$Component4) {
    babelHelpers.inherits(RectButton, _React$Component4);

    function RectButton(props) {
      babelHelpers.classCallCheck(this, RectButton);

      var _this5 = babelHelpers.possibleConstructorReturn(this, (RectButton.__proto__ || Object.getPrototypeOf(RectButton)).call(this, props));

      _this5._onActiveStateChange = function (active) {
        _this5.props.onActiveStateChange && _this5.props.onActiveStateChange(active);
      };

      _this5._opacity = new _reactNative.Animated.Value(0);
      return _this5;
    }

    babelHelpers.createClass(RectButton, [{
      key: "render",
      value: function render() {
        var _props3 = this.props,
            children = _props3.children,
            rest = babelHelpers.objectWithoutProperties(_props3, ["children"]);
        return _react2.default.createElement(
          BaseButton,
          babelHelpers.extends({}, rest, {
            onActiveStateChange: this._onActiveStateChange
          }),
          _react2.default.createElement(_reactNative.Animated.View, {
            style: [btnStyles.underlay, {
              opacity: this._opacity
            }, {
              backgroundColor: this.props.underlayColor
            }]
          }),
          children
        );
      }
    }]);
    return RectButton;
  }(_react2.default.Component), _class4.propTypes = BaseButton.propTypes, _class4.defaultProps = {
    activeOpacity: 0.105,
    underlayColor: 'black'
  }, _temp5);
  var BorderlessButton = (_temp6 = _class5 = function (_React$Component5) {
    babelHelpers.inherits(BorderlessButton, _React$Component5);

    function BorderlessButton(props) {
      babelHelpers.classCallCheck(this, BorderlessButton);

      var _this6 = babelHelpers.possibleConstructorReturn(this, (BorderlessButton.__proto__ || Object.getPrototypeOf(BorderlessButton)).call(this, props));

      _this6._onActiveStateChange = function (active) {
        _this6.props.onActiveStateChange && _this6.props.onActiveStateChange(active);
      };

      _this6._opacity = new _reactNative.Animated.Value(1);
      return _this6;
    }

    babelHelpers.createClass(BorderlessButton, [{
      key: "render",
      value: function render() {
        var _props4 = this.props,
            children = _props4.children,
            style = _props4.style,
            rest = babelHelpers.objectWithoutProperties(_props4, ["children", "style"]);
        return _react2.default.createElement(
          AnimatedBaseButton,
          babelHelpers.extends({}, rest, {
            onActiveStateChange: this._onActiveStateChange,
            style: [style, false]
          }),
          children
        );
      }
    }]);
    return BorderlessButton;
  }(_react2.default.Component), _class5.propTypes = babelHelpers.extends({}, BaseButton.propTypes, {
    borderless: _propTypes2.default.bool
  }), _class5.defaultProps = {
    activeOpacity: 0.3,
    borderless: true
  }, _temp6);

  var FlatListWithGHScroll = function FlatListWithGHScroll(props) {
    return _react2.default.createElement(_reactNative.FlatList, babelHelpers.extends({}, props, {
      renderScrollComponent: function renderScrollComponent(props) {
        return _react2.default.createElement(WrappedScrollView, props);
      }
    }));
  };

  exports.ScrollView = WrappedScrollView;
  exports.Slider = WrappedSlider;
  exports.Switch = WrappedSwitch;
  exports.TextInput = WrappedTextInput;
  exports.ToolbarAndroid = WrappedToolbarAndroid;
  exports.ViewPagerAndroid = WrappedViewPagerAndroid;
  exports.DrawerLayoutAndroid = WrappedDrawerLayoutAndroid;
  exports.WebView = WrappedWebView;
  exports.NativeViewGestureHandler = NativeViewGestureHandler;
  exports.TapGestureHandler = TapGestureHandler;
  exports.LongPressGestureHandler = LongPressGestureHandler;
  exports.PanGestureHandler = PanGestureHandler;
  exports.PinchGestureHandler = PinchGestureHandler;
  exports.RotationGestureHandler = RotationGestureHandler;
  exports.State = State;
  exports.RawButton = RawButton;
  exports.BaseButton = BaseButton;
  exports.RectButton = RectButton;
  exports.BorderlessButton = BorderlessButton;
  exports.FlatList = FlatListWithGHScroll;
  exports.gestureHandlerRootHOC = _gestureHandlerRootHOC2.default;
  exports.Swipeable = _Swipeable2.default;
  exports.DrawerLayout = _DrawerLayout2.default;
},379,[103,14,148,380,121,1108,382,383]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var aStackPool = [];
  var bStackPool = []; /**
                        * Checks if two values are equal. Values may be primitives, arrays, or objects.
                        * Returns true if both arguments have the same keys and values.
                        *
                        * @see http://underscorejs.org
                        * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
                        * @license MIT
                        */

  function areEqual(a, b) {
    var aStack = aStackPool.length ? aStackPool.pop() : [];
    var bStack = bStackPool.length ? bStackPool.pop() : [];
    var result = eq(a, b, aStack, bStack);
    aStack.length = 0;
    bStack.length = 0;
    aStackPool.push(aStack);
    bStackPool.push(bStack);
    return result;
  }

  function eq(a, b, aStack, bStack) {
    if (a === b) {
      return a !== 0 || 1 / a == 1 / b;
    }

    if (a == null || b == null) {
      return false;
    }

    if (typeof a != 'object' || typeof b != 'object') {
      return false;
    }

    var objToStr = Object.prototype.toString;
    var className = objToStr.call(a);

    if (className != objToStr.call(b)) {
      return false;
    }

    switch (className) {
      case '[object String]':
        return a == String(b);

      case '[object Number]':
        return isNaN(a) || isNaN(b) ? false : a == Number(b);

      case '[object Date]':
      case '[object Boolean]':
        return +a == +b;

      case '[object RegExp]':
        return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
    }

    var length = aStack.length;

    while (length--) {
      if (aStack[length] == a) {
        return bStack[length] == b;
      }
    }

    aStack.push(a);
    bStack.push(b);
    var size = 0;

    if (className === '[object Array]') {
      size = a.length;

      if (size !== b.length) {
        return false;
      }

      while (size--) {
        if (!eq(a[size], b[size], aStack, bStack)) {
          return false;
        }
      }
    } else {
      if (a.constructor !== b.constructor) {
        return false;
      }

      if (a.hasOwnProperty('valueOf') && b.hasOwnProperty('valueOf')) {
        return a.valueOf() == b.valueOf();
      }

      var keys = Object.keys(a);

      if (keys.length != Object.keys(b).length) {
        return false;
      }

      for (var i = 0; i < keys.length; i++) {
        if (!eq(a[keys[i]], b[keys[i]], aStack, bStack)) {
          return false;
        }
      }
    }

    aStack.pop();
    bStack.pop();
    return true;
  }

  module.exports = areEqual;
},380,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = gestureHandlerRootHOC;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _hoistNonReactStatics = _require(_dependencyMap[2]);

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var iface = {
    name: 'GestureHandlerRootView',
    propTypes: babelHelpers.extends({}, _reactNative.View.propTypes)
  };
  var GestureHandlerRootView = (0, _reactNative.requireNativeComponent)('GestureHandlerRootView', iface);

  function gestureHandlerRootHOC(Component) {
    var containerStyles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    var Wrapper = function (_React$Component) {
      babelHelpers.inherits(Wrapper, _React$Component);

      function Wrapper() {
        babelHelpers.classCallCheck(this, Wrapper);
        return babelHelpers.possibleConstructorReturn(this, (Wrapper.__proto__ || Object.getPrototypeOf(Wrapper)).apply(this, arguments));
      }

      babelHelpers.createClass(Wrapper, [{
        key: "render",
        value: function render() {
          return _react2.default.createElement(
            GestureHandlerRootView,
            {
              style: [styles.container, containerStyles]
            },
            _react2.default.createElement(Component, this.props)
          );
        }
      }]);
      return Wrapper;
    }(_react2.default.Component);

    (0, _hoistNonReactStatics2.default)(Wrapper, Component);
    return Wrapper;
  }

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},1108,[103,14,830]);
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
    };
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {
            if (objectPrototype) {
                var inheritedComponent = getPrototypeOf(sourceComponent);

                if (inheritedComponent && inheritedComponent !== objectPrototype) {
                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                }
            }

            var keys = getOwnPropertyNames(sourceComponent);

            if (getOwnPropertySymbols) {
                keys = keys.concat(getOwnPropertySymbols(sourceComponent));
            }

            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];

                if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

                    try {
                        defineProperty(targetComponent, key, descriptor);
                    } catch (e) {}
                }
            }

            return targetComponent;
        }

        return targetComponent;
    }

    module.exports = hoistNonReactStatics;
},830,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _AnimatedEvent = _require(_dependencyMap[2]);

  var _reactNativeGestureHandler = _require(_dependencyMap[3]);

  var DRAG_TOSS = 0.05;

  if (!Math.sign) {
    Math.sign = function (x) {
      return (x > 0) - (x < 0) || +x;
    };
  }

  var Swipeable = (_temp = _class = function (_Component) {
    babelHelpers.inherits(Swipeable, _Component);

    function Swipeable(props) {
      babelHelpers.classCallCheck(this, Swipeable);

      var _this = babelHelpers.possibleConstructorReturn(this, (Swipeable.__proto__ || Object.getPrototypeOf(Swipeable)).call(this, props));

      _initialiseProps.call(_this);

      var dragX = new _reactNative.Animated.Value(0);
      _this.state = {
        dragX: dragX,
        rowTranslation: new _reactNative.Animated.Value(0),
        rowState: 0,
        leftWidth: undefined,
        rightOffset: undefined,
        rowWidth: undefined
      };

      _this._updateAnimatedEvent(props, _this.state);

      _this._onGestureEvent = _reactNative.Animated.event([{
        nativeEvent: {
          translationX: dragX
        }
      }], {
        useNativeDriver: props.useNativeAnimations
      });
      return _this;
    }

    babelHelpers.createClass(Swipeable, [{
      key: "componentWillUpdate",
      value: function componentWillUpdate(props, state) {
        if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {
          this._updateAnimatedEvent(props, state);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var rowState = this.state.rowState;
        var _props = this.props,
            children = _props.children,
            renderLeftActions = _props.renderLeftActions,
            renderRightActions = _props.renderRightActions;

        var left = renderLeftActions && _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: [styles.leftActions, {
              transform: [{
                translateX: this._leftActionTranslate
              }]
            }]
          },
          renderLeftActions(this._showLeftAction, this._transX),
          _react2.default.createElement(_reactNative.View, {
            onLayout: function onLayout(_ref) {
              var nativeEvent = _ref.nativeEvent;
              return _this2.setState({
                leftWidth: nativeEvent.layout.x
              });
            }
          })
        );

        var right = renderRightActions && _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: [styles.rightActions, {
              transform: [{
                translateX: this._rightActionTranslate
              }]
            }]
          },
          renderRightActions(this._showRightAction, this._transX),
          _react2.default.createElement(_reactNative.View, {
            onLayout: function onLayout(_ref2) {
              var nativeEvent = _ref2.nativeEvent;
              return _this2.setState({
                rightOffset: nativeEvent.layout.x
              });
            }
          })
        );

        return _react2.default.createElement(
          _reactNativeGestureHandler.PanGestureHandler,
          babelHelpers.extends({}, this.props, {
            minDeltaX: 10,
            onGestureEvent: this._onGestureEvent,
            onHandlerStateChange: this._onHandlerStateChange
          }),
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              onLayout: this._onRowLayout,
              style: styles.container
            },
            left,
            right,
            _react2.default.createElement(
              _reactNativeGestureHandler.TapGestureHandler,
              {
                enabled: rowState !== 0,
                onHandlerStateChange: this._onTapHandlerStateChange
              },
              _react2.default.createElement(
                _reactNative.Animated.View,
                {
                  pointerEvents: rowState === 0 ? 'auto' : 'box-only',
                  style: {
                    transform: [{
                      translateX: this._transX
                    }]
                  }
                },
                children
              )
            )
          )
        );
      }
    }]);
    return Swipeable;
  }(_react.Component), _class.defaultProps = {
    friction: 1,
    useNativeAnimations: true
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._updateAnimatedEvent = function (props, state) {
      var friction = props.friction,
          useNativeAnimations = props.useNativeAnimations;
      var dragX = state.dragX,
          rowTranslation = state.rowTranslation,
          _state$leftWidth = state.leftWidth,
          leftWidth = _state$leftWidth === undefined ? 0 : _state$leftWidth,
          _state$rowWidth = state.rowWidth,
          rowWidth = _state$rowWidth === undefined ? 0 : _state$rowWidth;
      var _state$rightOffset = state.rightOffset,
          rightOffset = _state$rightOffset === undefined ? rowWidth : _state$rightOffset;
      var rightWidth = Math.max(0, rowWidth - rightOffset);
      var _props$overshootLeft = props.overshootLeft,
          overshootLeft = _props$overshootLeft === undefined ? leftWidth > 0 : _props$overshootLeft,
          _props$overshootRight = props.overshootRight,
          overshootRight = _props$overshootRight === undefined ? rightWidth > 0 : _props$overshootRight;

      var transX = _reactNative.Animated.add(rowTranslation, dragX.interpolate({
        inputRange: [0, friction],
        outputRange: [0, 1]
      })).interpolate({
        inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],
        outputRange: [-rightWidth - (overshootRight ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : 0)]
      });

      _this3._transX = transX;
      _this3._showLeftAction = transX.interpolate({
        inputRange: [-1, 0, leftWidth],
        outputRange: [0, 0, 1],
        extrapolate: 'clamp'
      });
      _this3._leftActionTranslate = _this3._showLeftAction.interpolate({
        inputRange: [0, Number.MIN_VALUE],
        outputRange: [-10000, 0],
        extrapolate: 'clamp'
      });
      _this3._showRightAction = transX.interpolate({
        inputRange: [-rightWidth, 0, 1],
        outputRange: [1, 0, 0],
        extrapolate: 'clamp'
      });
      _this3._rightActionTranslate = _this3._showRightAction.interpolate({
        inputRange: [0, Number.MIN_VALUE],
        outputRange: [-10000, 0],
        extrapolate: 'clamp'
      });
    };

    this._onTapHandlerStateChange = function (_ref3) {
      var nativeEvent = _ref3.nativeEvent;

      if (nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {
        _this3.close();
      }
    };

    this._onHandlerStateChange = function (_ref4) {
      var nativeEvent = _ref4.nativeEvent;

      if (nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {
        _this3._handleRelease(nativeEvent);
      }
    };

    this._handleRelease = function (nativeEvent) {
      var velocityX = nativeEvent.velocityX,
          dragX = nativeEvent.translationX;
      var _state = _this3.state,
          _state$leftWidth2 = _state.leftWidth,
          leftWidth = _state$leftWidth2 === undefined ? 0 : _state$leftWidth2,
          _state$rowWidth2 = _state.rowWidth,
          rowWidth = _state$rowWidth2 === undefined ? 0 : _state$rowWidth2,
          rowState = _state.rowState;
      var _state$rightOffset2 = _this3.state.rightOffset,
          rightOffset = _state$rightOffset2 === undefined ? rowWidth : _state$rightOffset2;
      var rightWidth = rowWidth - rightOffset;
      var _props2 = _this3.props,
          friction = _props2.friction,
          _props2$leftThreshold = _props2.leftThreshold,
          leftThreshold = _props2$leftThreshold === undefined ? leftWidth / 2 : _props2$leftThreshold,
          _props2$rightThreshol = _props2.rightThreshold,
          rightThreshold = _props2$rightThreshol === undefined ? rightWidth / 2 : _props2$rightThreshol;
      var startOffsetX = _this3._currentOffset() + dragX / friction;
      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;
      var toValue = 0;

      if (rowState === 0) {
        if (translationX > leftThreshold) {
          toValue = leftWidth;
        } else if (translationX < -rightThreshold) {
          toValue = -rightWidth;
        }
      } else if (rowState === 1) {
        if (translationX > -leftThreshold) {
          toValue = leftWidth;
        }
      } else {
        if (translationX < rightThreshold) {
          toValue = -rightWidth;
        }
      }

      _this3._animateRow(startOffsetX, toValue, velocityX / friction);
    };

    this._animateRow = function (fromValue, toValue, velocityX) {
      var _state2 = _this3.state,
          dragX = _state2.dragX,
          rowTranslation = _state2.rowTranslation;
      dragX.setValue(0);
      rowTranslation.setValue(fromValue);

      _this3.setState({
        rowState: Math.sign(toValue)
      });

      _reactNative.Animated.spring(rowTranslation, {
        velocity: velocityX,
        bounciness: 0,
        toValue: toValue,
        useNativeDriver: _this3.props.useNativeAnimations
      }).start(function (_ref5) {
        var finished = _ref5.finished;

        if (finished) {
          if (toValue > 0 && _this3.props.onSwipeableLeftOpen) {
            _this3.props.onSwipeableLeftOpen();
          } else if (toValue < 0 && _this3.props.onSwipeableRightOpen) {
            _this3.props.onSwipeableRightOpen();
          }

          if (toValue === 0) {
            _this3.props.onSwipeableClose && _this3.props.onSwipeableClose();
          } else {
            _this3.props.onSwipeableOpen && _this3.props.onSwipeableOpen();
          }
        }
      });
    };

    this._onRowLayout = function (_ref6) {
      var nativeEvent = _ref6.nativeEvent;

      _this3.setState({
        rowWidth: nativeEvent.layout.width
      });
    };

    this._currentOffset = function () {
      var _state3 = _this3.state,
          _state3$leftWidth = _state3.leftWidth,
          leftWidth = _state3$leftWidth === undefined ? 0 : _state3$leftWidth,
          _state3$rowWidth = _state3.rowWidth,
          rowWidth = _state3$rowWidth === undefined ? 0 : _state3$rowWidth,
          rowState = _state3.rowState;
      var _state$rightOffset3 = _this3.state.rightOffset,
          rightOffset = _state$rightOffset3 === undefined ? rowWidth : _state$rightOffset3;
      var rightWidth = rowWidth - rightOffset;

      if (rowState === 1) {
        return leftWidth;
      } else if (rowState === -1) {
        return -rightWidth;
      }

      return 0;
    };

    this.close = function () {
      _this3._animateRow(_this3._currentOffset(), 0);
    };
  }, _temp);
  exports.default = Swipeable;

  var styles = _reactNative.StyleSheet.create({
    container: {
      overflow: 'hidden'
    },
    leftActions: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      flexDirection: 'row'
    }),
    rightActions: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      flexDirection: 'row-reverse'
    })
  });
},382,[103,14,180,379]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _invariant = _require(_dependencyMap[2]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _AnimatedEvent = _require(_dependencyMap[3]);

  var _reactNativeGestureHandler = _require(_dependencyMap[4]);

  var DRAG_TOSS = 0.05;
  var IDLE = 'Idle';
  var DRAGGING = 'Dragging';
  var SETTLING = 'Settling';
  var DrawerLayout = (_temp = _class = function (_Component) {
    babelHelpers.inherits(DrawerLayout, _Component);

    function DrawerLayout(props, context) {
      babelHelpers.classCallCheck(this, DrawerLayout);

      var _this = babelHelpers.possibleConstructorReturn(this, (DrawerLayout.__proto__ || Object.getPrototypeOf(DrawerLayout)).call(this, props, context));

      _initialiseProps.call(_this);

      var dragX = new _reactNative.Animated.Value(0);
      var touchX = new _reactNative.Animated.Value(0);
      var drawerTranslation = new _reactNative.Animated.Value(0);
      _this.state = {
        dragX: dragX,
        touchX: touchX,
        drawerTranslation: drawerTranslation,
        drawerShown: false,
        containerWidth: 0
      };

      _this._updateAnimatedEvent(props, _this.state);

      return _this;
    }

    babelHelpers.createClass(DrawerLayout, [{
      key: "componentWillUpdate",
      value: function componentWillUpdate(props, state) {
        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {
          this._updateAnimatedEvent(props, state);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _state = this.state,
            drawerShown = _state.drawerShown,
            containerWidth = _state.containerWidth;
        var _props = this.props,
            drawerPosition = _props.drawerPosition,
            drawerType = _props.drawerType,
            edgeWidth = _props.edgeWidth,
            minSwipeDistance = _props.minSwipeDistance;
        var fromLeft = drawerPosition === 'left';
        var gestureOrientation = (fromLeft ? 1 : -1) * (drawerShown ? -1 : 1);
        var hitSlop = fromLeft ? {
          right: drawerShown ? 0 : edgeWidth - containerWidth
        } : {
          left: drawerShown ? 0 : edgeWidth - containerWidth
        };
        return _react2.default.createElement(
          _reactNativeGestureHandler.PanGestureHandler,
          {
            hitSlop: hitSlop,
            minOffsetX: gestureOrientation * minSwipeDistance,
            onGestureEvent: this._onGestureEvent,
            onHandlerStateChange: this._openingHandlerStateChange
          },
          this._renderDrawer()
        );
      }
    }]);
    return DrawerLayout;
  }(_react.Component), _class.defaultProps = {
    drawerWidth: 0,
    drawerPosition: 'left',
    useNativeAnimations: true,
    drawerType: 'front',
    edgeWidth: 20,
    minSwipeDistance: 3,
    overlayColor: 'black'
  }, _class.positions = {
    Left: 'left',
    Right: 'right'
  }, _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._updateAnimatedEvent = function (props, state) {
      var drawerPosition = props.drawerPosition,
          drawerWidth = props.drawerWidth,
          drawerType = props.drawerType;
      var dragXValue = state.dragX,
          touchXValue = state.touchX,
          drawerTranslation = state.drawerTranslation,
          containerWidth = state.containerWidth;
      var dragX = dragXValue;
      var touchX = touchXValue;

      if (drawerPosition !== 'left') {
        dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);
        touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));
        touchXValue.setValue(containerWidth);
      } else {
        touchXValue.setValue(0);
      }

      var translationX = dragX;

      if (drawerType === 'front') {
        var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));

        var dragOffsetFromOnStartPosition = startPositionX.interpolate({
          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],
          outputRange: [0, 0, 1]
        });
        translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);
      }

      _this2._openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({
        inputRange: [0, drawerWidth],
        outputRange: [0, 1],
        extrapolate: 'clamp'
      });
      _this2._onGestureEvent = _reactNative.Animated.event([{
        nativeEvent: {
          translationX: dragXValue,
          x: touchXValue
        }
      }], {
        useNativeDriver: props.useNativeAnimations
      });
    };

    this._handleContainerLayout = function (_ref) {
      var nativeEvent = _ref.nativeEvent;

      _this2.setState({
        containerWidth: nativeEvent.layout.width
      });
    };

    this._emitStateChanged = function (newState, drawerWillShow) {
      _this2.props.onDrawerStateChanged && _this2.props.onDrawerStateChanged(newState, drawerWillShow);
    };

    this._openingHandlerStateChange = function (_ref2) {
      var nativeEvent = _ref2.nativeEvent;

      if (nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {
        _this2._handleRelease(nativeEvent);
      } else if (nativeEvent.state === _reactNativeGestureHandler.State.ACTIVE) {
        _this2._emitStateChanged(DRAGGING, false);

        if (_this2.props.keyboardDismissMode === 'on-drag') {
          _reactNative.Keyboard.dismiss();
        }

        if (_this2.props.hideStatusBar) {
          _reactNative.StatusBar.setHidden(true, _this2.props.statusBarAnimation || 'slide');
        }
      }
    };

    this._onTapHandlerStateChange = function (_ref3) {
      var nativeEvent = _ref3.nativeEvent;

      if (_this2.state.drawerShown && nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {
        _this2.closeDrawer();
      }
    };

    this._handleRelease = function (nativeEvent) {
      var _props2 = _this2.props,
          drawerWidth = _props2.drawerWidth,
          drawerPosition = _props2.drawerPosition,
          drawerType = _props2.drawerType;
      var _state2 = _this2.state,
          drawerShown = _state2.drawerShown,
          containerWidth = _state2.containerWidth;
      var dragX = nativeEvent.translationX,
          velocityX = nativeEvent.velocityX,
          touchX = nativeEvent.x;

      if (drawerPosition !== 'left') {
        dragX = -dragX;
        touchX = containerWidth - touchX;
        velocityX = -velocityX;
      }

      var gestureStartX = touchX - dragX;
      var dragOffsetBasedOnStart = 0;

      if (drawerType === 'front') {
        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;
      }

      var startOffsetX = dragX + dragOffsetBasedOnStart + (drawerShown ? drawerWidth : 0);
      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;
      var shouldOpen = projOffsetX > drawerWidth / 2;

      if (shouldOpen) {
        _this2._animateDrawer(startOffsetX, drawerWidth, velocityX);
      } else {
        _this2._animateDrawer(startOffsetX, 0, velocityX);
      }
    };

    this._animateDrawer = function (fromValue, toValue, velocity) {
      _this2.state.dragX.setValue(0);

      _this2.state.touchX.setValue(_this2.props.drawerPosition === 'left' ? 0 : _this2.state.containerWidth);

      _this2.state.drawerTranslation.setValue(fromValue);

      var willShow = toValue !== 0;

      _this2.setState({
        drawerShown: willShow
      });

      _this2._emitStateChanged(SETTLING, willShow);

      if (_this2.props.hideStatusBar) {
        _reactNative.StatusBar.setHidden(willShow, _this2.props.statusBarAnimation || 'slide');
      }

      _reactNative.Animated.spring(_this2.state.drawerTranslation, {
        velocity: velocity,
        bounciness: 0,
        toValue: toValue,
        useNativeDriver: _this2.props.useNativeAnimations
      }).start(function (_ref4) {
        var finished = _ref4.finished;

        if (finished) {
          _this2._emitStateChanged(IDLE, willShow);

          if (willShow) {
            _this2.props.onDrawerOpen && _this2.props.onDrawerOpen();
          } else {
            _this2.props.onDrawerClose && _this2.props.onDrawerClose();
          }
        }
      });
    };

    this.openDrawer = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _this2._animateDrawer(0, _this2.props.drawerWidth, options.velocity ? options.velocity : 0);
    };

    this.closeDrawer = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _this2._animateDrawer(_this2.props.drawerWidth, 0, options.velocity ? options.velocity : 0);
    };

    this._renderOverlay = function () {
      (0, _invariant2.default)(_this2._openValue, 'should be set');

      var overlayOpacity = _this2._openValue.interpolate({
        inputRange: [0, 1],
        outputRange: [0, 0.7],
        extrapolate: 'clamp'
      });

      var dynamicOverlayStyles = {
        opacity: overlayOpacity,
        backgroundColor: _this2.props.overlayColor
      };
      return _react2.default.createElement(
        _reactNativeGestureHandler.TapGestureHandler,
        {
          onHandlerStateChange: _this2._onTapHandlerStateChange
        },
        _react2.default.createElement(_reactNative.Animated.View, {
          pointerEvents: _this2.state.drawerShown ? 'auto' : 'none',
          style: [styles.overlay, dynamicOverlayStyles]
        })
      );
    };

    this._renderDrawer = function () {
      var drawerShown = _this2.state.drawerShown;
      var _props3 = _this2.props,
          drawerBackgroundColor = _props3.drawerBackgroundColor,
          drawerWidth = _props3.drawerWidth,
          drawerPosition = _props3.drawerPosition,
          drawerType = _props3.drawerType;
      var fromLeft = drawerPosition === 'left';
      var drawerSlide = drawerType !== 'back';
      var containerSlide = drawerType !== 'front';
      var dynamicDrawerStyles = {
        backgroundColor: drawerBackgroundColor,
        width: drawerWidth
      };
      var openValue = _this2._openValue;
      (0, _invariant2.default)(openValue, 'should be set');
      var containerStyles = void 0;

      if (containerSlide) {
        var containerTranslateX = openValue.interpolate({
          inputRange: [0, 1],
          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],
          extrapolate: 'clamp'
        });
        containerStyles = {
          transform: [{
            translateX: containerTranslateX
          }]
        };
      }

      var drawerTranslateX = 0;

      if (drawerSlide) {
        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;
        drawerTranslateX = openValue.interpolate({
          inputRange: [0, 1],
          outputRange: [closedDrawerOffset, 0],
          extrapolate: 'clamp'
        });
      }

      var drawerStyles = {
        transform: [{
          translateX: drawerTranslateX
        }],
        flexDirection: fromLeft ? 'row' : 'row-reverse'
      };
      return _react2.default.createElement(
        _reactNative.Animated.View,
        {
          style: styles.main,
          onLayout: _this2._handleContainerLayout
        },
        _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles]
          },
          _this2.props.children,
          _this2._renderOverlay()
        ),
        _react2.default.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: "box-none",
            accessibilityViewIsModal: drawerShown,
            style: [styles.drawerContainer, drawerStyles]
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.drawer, dynamicDrawerStyles]
            },
            _this2.props.renderNavigationView(_this2._openValue)
          )
        )
      );
    };
  }, _temp);
  exports.default = DrawerLayout;

  var styles = _reactNative.StyleSheet.create({
    drawer: {
      flex: 0
    },
    drawerContainer: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1001,
      flexDirection: 'row'
    }),
    containerInFront: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1002
    }),
    containerOnBack: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject),
    main: {
      flex: 1,
      zIndex: 0,
      overflow: 'hidden'
    },
    overlay: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1000
    })
  });
},383,[103,14,319,180,379]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  exports.activate = activate;
  exports.deactivate = deactivate;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var ExponentKeepAwake = _reactNative.NativeModules.ExponentKeepAwake;
  var KeepAwake = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(KeepAwake, _React$PureComponent);

    function KeepAwake() {
      babelHelpers.classCallCheck(this, KeepAwake);
      return babelHelpers.possibleConstructorReturn(this, (KeepAwake.__proto__ || Object.getPrototypeOf(KeepAwake)).apply(this, arguments));
    }

    babelHelpers.createClass(KeepAwake, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        ExponentKeepAwake.activate();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        ExponentKeepAwake.deactivate();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return KeepAwake;
  }(_react2.default.PureComponent), _class.activate = activate, _class.deactivate = deactivate, _temp);
  exports.default = KeepAwake;

  function activate() {
    ExponentKeepAwake.activate();
  }

  function deactivate() {
    ExponentKeepAwake.deactivate();
  }
},384,[103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var LinearGradient = (_temp = _class = function (_Component) {
    babelHelpers.inherits(LinearGradient, _Component);

    function LinearGradient() {
      babelHelpers.classCallCheck(this, LinearGradient);
      return babelHelpers.possibleConstructorReturn(this, (LinearGradient.__proto__ || Object.getPrototypeOf(LinearGradient)).apply(this, arguments));
    }

    babelHelpers.createClass(LinearGradient, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            colors = _props.colors,
            end = _props.end,
            locations = _props.locations,
            start = _props.start,
            style = _props.style,
            otherProps = babelHelpers.objectWithoutProperties(_props, ["children", "colors", "end", "locations", "start", "style"]);

        if (colors && locations && colors.length !== locations.length) {
          console.warn('LinearGradient colors and locations props should be arrays of the same length');
        }

        var flatStyle = _reactNative.StyleSheet.flatten(style) || {};
        var borderRadius = flatStyle.borderRadius || 0;
        var borderRadiiPerCorner = [flatStyle.borderTopLeftRadius || borderRadius, flatStyle.borderTopLeftRadius || borderRadius, flatStyle.borderTopRightRadius || borderRadius, flatStyle.borderTopRightRadius || borderRadius, flatStyle.borderBottomRightRadius || borderRadius, flatStyle.borderBottomRightRadius || borderRadius, flatStyle.borderBottomLeftRadius || borderRadius, flatStyle.borderBottomLeftRadius || borderRadius];
        var startProp = start;
        var endProp = end;

        if (start && start.x !== undefined && start.y !== undefined) {
          startProp = [start.x, start.y];
        }

        if (end && end.x !== undefined && end.y !== undefined) {
          endProp = [end.x, end.y];
        }

        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({}, otherProps, {
            style: style
          }),
          _react2.default.createElement(NativeLinearGradient, {
            style: {
              position: 'absolute',
              top: 0,
              left: 0,
              bottom: 0,
              right: 0
            },
            colors: colors.map(_reactNative.processColor),
            startPoint: startProp,
            endPoint: endProp,
            locations: locations ? locations.slice(0, colors.length) : null,
            borderRadii: borderRadiiPerCorner
          }),
          children
        );
      }
    }]);
    return LinearGradient;
  }(_react.Component), _class.propTypes = babelHelpers.extends({
    start: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.number), _propTypes2.default.object]),
    end: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.number), _propTypes2.default.object]),
    colors: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
    locations: _propTypes2.default.arrayOf(_propTypes2.default.number)
  }, _reactNative.ViewPropTypes), _temp);
  exports.default = LinearGradient;
  var NativeLinearGradient = (0, _reactNative.requireNativeComponent)('ExponentLinearGradient', null);
},1109,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNativeMaps = _require(_dependencyMap[0]);

  var _reactNativeMaps2 = babelHelpers.interopRequireDefault(_reactNativeMaps);

  exports.default = _reactNativeMaps2.default;
},386,[387]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.OverlayAnimated = exports.MarkerAnimated = exports.PROVIDER_DEFAULT = exports.PROVIDER_GOOGLE = exports.ProviderPropType = exports.MAP_TYPES = exports.Animated = exports.Overlay = exports.Marker = exports.AnimatedRegion = exports.Callout = exports.LocalTile = exports.UrlTile = exports.Circle = exports.Polygon = exports.Polyline = undefined;

  var _MapPolyline = _require(_dependencyMap[0]);

  Object.defineProperty(exports, "Polyline", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_MapPolyline).default;
    }
  });

  var _MapPolygon = _require(_dependencyMap[1]);

  Object.defineProperty(exports, "Polygon", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_MapPolygon).default;
    }
  });

  var _MapCircle = _require(_dependencyMap[2]);

  Object.defineProperty(exports, "Circle", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_MapCircle).default;
    }
  });

  var _MapUrlTile = _require(_dependencyMap[3]);

  Object.defineProperty(exports, "UrlTile", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_MapUrlTile).default;
    }
  });

  var _MapLocalTile = _require(_dependencyMap[4]);

  Object.defineProperty(exports, "LocalTile", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_MapLocalTile).default;
    }
  });

  var _MapCallout = _require(_dependencyMap[5]);

  Object.defineProperty(exports, "Callout", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_MapCallout).default;
    }
  });

  var _AnimatedRegion = _require(_dependencyMap[6]);

  Object.defineProperty(exports, "AnimatedRegion", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_AnimatedRegion).default;
    }
  });

  var _MapView = _require(_dependencyMap[7]);

  var _MapView2 = babelHelpers.interopRequireDefault(_MapView);

  var _MapMarker = _require(_dependencyMap[8]);

  var _MapMarker2 = babelHelpers.interopRequireDefault(_MapMarker);

  var _MapOverlay = _require(_dependencyMap[9]);

  var _MapOverlay2 = babelHelpers.interopRequireDefault(_MapOverlay);

  exports.Marker = _MapMarker2.default;
  exports.Overlay = _MapOverlay2.default;
  exports.Animated = _MapView.Animated;
  exports.MAP_TYPES = _MapView.MAP_TYPES;
  exports.ProviderPropType = _MapView.ProviderPropType;
  var PROVIDER_GOOGLE = exports.PROVIDER_GOOGLE = _MapView2.default.PROVIDER_GOOGLE;
  var PROVIDER_DEFAULT = exports.PROVIDER_DEFAULT = _MapView2.default.PROVIDER_DEFAULT;
  var MarkerAnimated = exports.MarkerAnimated = _MapMarker2.default.Animated;
  var OverlayAnimated = exports.OverlayAnimated = _MapOverlay2.default.Animated;
  exports.default = _MapView2.default;
},387,[388,391,392,393,394,395,396,397,398,399]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _decorateMapComponent = _require(_dependencyMap[3]);

  var _decorateMapComponent2 = babelHelpers.interopRequireDefault(_decorateMapComponent);

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = babelHelpers.extends({}, viewPropTypes, {
    coordinates: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    })),
    onPress: _propTypes2.default.func,
    tappable: _propTypes2.default.bool,
    fillColor: _propTypes2.default.string,
    strokeWidth: _propTypes2.default.number,
    strokeColor: _propTypes2.default.string,
    strokeColors: _propTypes2.default.arrayOf(_propTypes2.default.string),
    zIndex: _propTypes2.default.number,
    lineCap: _propTypes2.default.oneOf(['butt', 'round', 'square']),
    lineJoin: _propTypes2.default.oneOf(['miter', 'round', 'bevel']),
    miterLimit: _propTypes2.default.number,
    geodesic: _propTypes2.default.bool,
    lineDashPhase: _propTypes2.default.number,
    lineDashPattern: _propTypes2.default.arrayOf(_propTypes2.default.number)
  });
  var defaultProps = {
    strokeColor: '#000',
    strokeWidth: 1,
    lineJoin: 'round',
    lineCap: 'round'
  };

  var MapPolyline = function (_React$Component) {
    babelHelpers.inherits(MapPolyline, _React$Component);

    function MapPolyline() {
      babelHelpers.classCallCheck(this, MapPolyline);
      return babelHelpers.possibleConstructorReturn(this, (MapPolyline.__proto__ || Object.getPrototypeOf(MapPolyline)).apply(this, arguments));
    }

    babelHelpers.createClass(MapPolyline, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.polyline.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var AIRMapPolyline = this.getAirComponent();
        return _react2.default.createElement(AIRMapPolyline, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2.polyline = _ref;
          }
        }));
      }
    }]);
    return MapPolyline;
  }(_react2.default.Component);

  MapPolyline.propTypes = propTypes;
  MapPolyline.defaultProps = defaultProps;
  exports.default = (0, _decorateMapComponent2.default)(MapPolyline, {
    componentType: 'Polyline',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},388,[121,103,14,389]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.googleMapIsInstalled = exports.createNotSupportedComponent = exports.contextTypes = exports.NOT_SUPPORTED = exports.USES_DEFAULT_IMPLEMENTATION = exports.SUPPORTED = undefined;
  exports.getAirMapName = getAirMapName;
  exports.default = decorateMapComponent;

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[1]);

  var _ProviderConstants = _require(_dependencyMap[2]);

  var SUPPORTED = exports.SUPPORTED = 'SUPPORTED';
  var USES_DEFAULT_IMPLEMENTATION = exports.USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';
  var NOT_SUPPORTED = exports.NOT_SUPPORTED = 'NOT_SUPPORTED';

  function getAirMapName(provider) {
    return 'AIRMap';
    if (provider === _ProviderConstants.PROVIDER_GOOGLE) return 'AIRGoogleMap';
    return 'AIRMap';
  }

  function getAirComponentName(provider, component) {
    return "" + getAirMapName(provider) + component;
  }

  var contextTypes = exports.contextTypes = {
    provider: _propTypes2.default.string
  };

  var createNotSupportedComponent = exports.createNotSupportedComponent = function createNotSupportedComponent(message) {
    return function () {
      console.error(message);
      return null;
    };
  };

  var googleMapIsInstalled = exports.googleMapIsInstalled = !!_reactNative.NativeModules.UIManager[getAirMapName(_ProviderConstants.PROVIDER_GOOGLE)];

  function decorateMapComponent(Component, _ref) {
    var componentType = _ref.componentType,
        providers = _ref.providers;
    var components = {};

    var getDefaultComponent = function getDefaultComponent() {
      return (0, _reactNative.requireNativeComponent)(getAirComponentName(null, componentType), Component);
    };

    Component.contextTypes = contextTypes;

    Component.prototype.getAirComponent = function getAirComponent() {
      var provider = this.context.provider || _ProviderConstants.PROVIDER_DEFAULT;
      if (components[provider]) return components[provider];

      if (provider === _ProviderConstants.PROVIDER_DEFAULT) {
        components[_ProviderConstants.PROVIDER_DEFAULT] = getDefaultComponent();
        return components[_ProviderConstants.PROVIDER_DEFAULT];
      }

      var providerInfo = providers[provider];
      var platformSupport = providerInfo["android"];
      var componentName = getAirComponentName(provider, componentType);

      if (platformSupport === NOT_SUPPORTED) {
        components[provider] = createNotSupportedComponent("react-native-maps: " + componentName + " is not supported on " + "android");
      } else if (platformSupport === SUPPORTED) {
        if (provider !== _ProviderConstants.PROVIDER_GOOGLE || false) {
          components[provider] = (0, _reactNative.requireNativeComponent)(componentName, Component);
        }
      } else {
        if (!components[_ProviderConstants.PROVIDER_DEFAULT]) components[_ProviderConstants.PROVIDER_DEFAULT] = getDefaultComponent();
        components[provider] = components[_ProviderConstants.PROVIDER_DEFAULT];
      }

      return components[provider];
    };

    Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {
      return _reactNative.NativeModules.UIManager[getAirComponentName(this.context.provider, componentType)].Commands[name];
    };

    Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) {
      var airComponentName = getAirComponentName(this.context.provider, componentType) + "Manager";
      return _reactNative.NativeModules[airComponentName][name];
    };

    return Component;
  }
},389,[121,14,390]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var PROVIDER_DEFAULT = exports.PROVIDER_DEFAULT = null;
  var PROVIDER_GOOGLE = exports.PROVIDER_GOOGLE = 'google';
},390,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _decorateMapComponent = _require(_dependencyMap[3]);

  var _decorateMapComponent2 = babelHelpers.interopRequireDefault(_decorateMapComponent);

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = babelHelpers.extends({}, viewPropTypes, {
    coordinates: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    })),
    holes: _propTypes2.default.arrayOf(_propTypes2.default.arrayOf(_propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    }))),
    onPress: _propTypes2.default.func,
    tappable: _propTypes2.default.bool,
    strokeWidth: _propTypes2.default.number,
    strokeColor: _propTypes2.default.string,
    fillColor: _propTypes2.default.string,
    zIndex: _propTypes2.default.number,
    lineCap: _propTypes2.default.oneOf(['butt', 'round', 'square']),
    lineJoin: _propTypes2.default.oneOf(['miter', 'round', 'bevel']),
    miterLimit: _propTypes2.default.number,
    geodesic: _propTypes2.default.bool,
    lineDashPhase: _propTypes2.default.number,
    lineDashPattern: _propTypes2.default.arrayOf(_propTypes2.default.number)
  });
  var defaultProps = {
    strokeColor: '#000',
    strokeWidth: 1
  };

  var MapPolygon = function (_React$Component) {
    babelHelpers.inherits(MapPolygon, _React$Component);

    function MapPolygon() {
      babelHelpers.classCallCheck(this, MapPolygon);
      return babelHelpers.possibleConstructorReturn(this, (MapPolygon.__proto__ || Object.getPrototypeOf(MapPolygon)).apply(this, arguments));
    }

    babelHelpers.createClass(MapPolygon, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.polygon.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var AIRMapPolygon = this.getAirComponent();
        return _react2.default.createElement(AIRMapPolygon, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2.polygon = _ref;
          }
        }));
      }
    }]);
    return MapPolygon;
  }(_react2.default.Component);

  MapPolygon.propTypes = propTypes;
  MapPolygon.defaultProps = defaultProps;
  exports.default = (0, _decorateMapComponent2.default)(MapPolygon, {
    componentType: 'Polygon',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},391,[121,103,14,389]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _decorateMapComponent = _require(_dependencyMap[3]);

  var _decorateMapComponent2 = babelHelpers.interopRequireDefault(_decorateMapComponent);

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = babelHelpers.extends({}, viewPropTypes, {
    center: _propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    }).isRequired,
    radius: _propTypes2.default.number.isRequired,
    onPress: _propTypes2.default.func,
    strokeWidth: _propTypes2.default.number,
    strokeColor: _propTypes2.default.string,
    fillColor: _propTypes2.default.string,
    zIndex: _propTypes2.default.number,
    lineCap: _propTypes2.default.oneOf(['butt', 'round', 'square']),
    lineJoin: _propTypes2.default.oneOf(['miter', 'round', 'bevel']),
    miterLimit: _propTypes2.default.number,
    lineDashPhase: _propTypes2.default.number,
    lineDashPattern: _propTypes2.default.arrayOf(_propTypes2.default.number)
  });
  var defaultProps = {
    strokeColor: '#000',
    strokeWidth: 1
  };

  var MapCircle = function (_React$Component) {
    babelHelpers.inherits(MapCircle, _React$Component);

    function MapCircle() {
      babelHelpers.classCallCheck(this, MapCircle);
      return babelHelpers.possibleConstructorReturn(this, (MapCircle.__proto__ || Object.getPrototypeOf(MapCircle)).apply(this, arguments));
    }

    babelHelpers.createClass(MapCircle, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.circle.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var AIRMapCircle = this.getAirComponent();
        return _react2.default.createElement(AIRMapCircle, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2.circle = _ref;
          }
        }));
      }
    }]);
    return MapCircle;
  }(_react2.default.Component);

  MapCircle.propTypes = propTypes;
  MapCircle.defaultProps = defaultProps;
  exports.default = (0, _decorateMapComponent2.default)(MapCircle, {
    componentType: 'Circle',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},392,[121,103,14,389]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _decorateMapComponent = _require(_dependencyMap[3]);

  var _decorateMapComponent2 = babelHelpers.interopRequireDefault(_decorateMapComponent);

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = babelHelpers.extends({}, viewPropTypes, {
    urlTemplate: _propTypes2.default.string.isRequired,
    zIndex: _propTypes2.default.number,
    maximumZ: _propTypes2.default.number
  });

  var MapUrlTile = function (_React$Component) {
    babelHelpers.inherits(MapUrlTile, _React$Component);

    function MapUrlTile() {
      babelHelpers.classCallCheck(this, MapUrlTile);
      return babelHelpers.possibleConstructorReturn(this, (MapUrlTile.__proto__ || Object.getPrototypeOf(MapUrlTile)).apply(this, arguments));
    }

    babelHelpers.createClass(MapUrlTile, [{
      key: "render",
      value: function render() {
        var AIRMapUrlTile = this.getAirComponent();
        return _react2.default.createElement(AIRMapUrlTile, this.props);
      }
    }]);
    return MapUrlTile;
  }(_react2.default.Component);

  MapUrlTile.propTypes = propTypes;
  exports.default = (0, _decorateMapComponent2.default)(MapUrlTile, {
    componentType: 'UrlTile',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},393,[121,103,14,389]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _decorateMapComponent = _require(_dependencyMap[3]);

  var _decorateMapComponent2 = babelHelpers.interopRequireDefault(_decorateMapComponent);

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = babelHelpers.extends({}, viewPropTypes, {
    pathTemplate: _propTypes2.default.string.isRequired,
    zIndex: _propTypes2.default.number,
    tileSize: _propTypes2.default.number
  });

  var MapLocalTile = function (_React$Component) {
    babelHelpers.inherits(MapLocalTile, _React$Component);

    function MapLocalTile() {
      babelHelpers.classCallCheck(this, MapLocalTile);
      return babelHelpers.possibleConstructorReturn(this, (MapLocalTile.__proto__ || Object.getPrototypeOf(MapLocalTile)).apply(this, arguments));
    }

    babelHelpers.createClass(MapLocalTile, [{
      key: "render",
      value: function render() {
        var AIRMapLocalTile = this.getAirComponent();
        return _react2.default.createElement(AIRMapLocalTile, this.props);
      }
    }]);
    return MapLocalTile;
  }(_react2.default.Component);

  MapLocalTile.propTypes = propTypes;
  exports.default = (0, _decorateMapComponent2.default)(MapLocalTile, {
    componentType: 'LocalTile',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},394,[121,103,14,389]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _decorateMapComponent = _require(_dependencyMap[3]);

  var _decorateMapComponent2 = babelHelpers.interopRequireDefault(_decorateMapComponent);

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = babelHelpers.extends({}, viewPropTypes, {
    tooltip: _propTypes2.default.bool,
    onPress: _propTypes2.default.func
  });
  var defaultProps = {
    tooltip: false
  };

  var MapCallout = function (_React$Component) {
    babelHelpers.inherits(MapCallout, _React$Component);

    function MapCallout() {
      babelHelpers.classCallCheck(this, MapCallout);
      return babelHelpers.possibleConstructorReturn(this, (MapCallout.__proto__ || Object.getPrototypeOf(MapCallout)).apply(this, arguments));
    }

    babelHelpers.createClass(MapCallout, [{
      key: "render",
      value: function render() {
        var AIRMapCallout = this.getAirComponent();
        return _react2.default.createElement(AIRMapCallout, babelHelpers.extends({}, this.props, {
          style: [styles.callout, this.props.style]
        }));
      }
    }]);
    return MapCallout;
  }(_react2.default.Component);

  MapCallout.propTypes = propTypes;
  MapCallout.defaultProps = defaultProps;

  var styles = _reactNative.StyleSheet.create({
    callout: {
      position: 'absolute'
    }
  });

  exports.default = (0, _decorateMapComponent2.default)(MapCallout, {
    componentType: 'Callout',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},395,[121,103,14,389]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  var AnimatedWithChildren = Object.getPrototypeOf(_reactNative.Animated.ValueXY);
  var _uniqueId = 1;

  var AnimatedMapRegion = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedMapRegion, _AnimatedWithChildren);

    function AnimatedMapRegion(valueIn) {
      babelHelpers.classCallCheck(this, AnimatedMapRegion);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedMapRegion.__proto__ || Object.getPrototypeOf(AnimatedMapRegion)).call(this));

      var value = valueIn || {
        latitude: 0,
        longitude: 0,
        latitudeDelta: 0,
        longitudeDelta: 0
      };
      _this.latitude = value.latitude instanceof _reactNative.Animated.Value ? value.latitude : new _reactNative.Animated.Value(value.latitude);
      _this.longitude = value.longitude instanceof _reactNative.Animated.Value ? value.longitude : new _reactNative.Animated.Value(value.longitude);
      _this.latitudeDelta = value.latitudeDelta instanceof _reactNative.Animated.Value ? value.latitudeDelta : new _reactNative.Animated.Value(value.latitudeDelta);
      _this.longitudeDelta = value.longitudeDelta instanceof _reactNative.Animated.Value ? value.longitudeDelta : new _reactNative.Animated.Value(value.longitudeDelta);
      _this._listeners = {};
      return _this;
    }

    babelHelpers.createClass(AnimatedMapRegion, [{
      key: "setValue",
      value: function setValue(value) {
        this.latitude._value = value.latitude;
        this.longitude._value = value.longitude;
        this.latitudeDelta._value = value.latitudeDelta;
        this.longitudeDelta._value = value.longitudeDelta;
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.latitude.setOffset(offset.latitude);
        this.longitude.setOffset(offset.longitude);
        this.latitudeDelta.setOffset(offset.latitudeDelta);
        this.longitudeDelta.setOffset(offset.longitudeDelta);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.latitude.flattenOffset();
        this.longitude.flattenOffset();
        this.latitudeDelta.flattenOffset();
        this.longitudeDelta.flattenOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          latitude: this.latitude.__getValue(),
          longitude: this.longitude.__getValue(),
          latitudeDelta: this.latitudeDelta.__getValue(),
          longitudeDelta: this.longitudeDelta.__getValue()
        };
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this.latitude.__addChild(this);

        this.longitude.__addChild(this);

        this.latitudeDelta.__addChild(this);

        this.longitudeDelta.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this.latitude.__removeChild(this);

        this.longitude.__removeChild(this);

        this.latitudeDelta.__removeChild(this);

        this.longitudeDelta.__removeChild(this);
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.latitude.stopAnimation();
        this.longitude.stopAnimation();
        this.latitudeDelta.stopAnimation();
        this.longitudeDelta.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback() {
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          latitude: this.latitude.addListener(jointCallback),
          longitude: this.longitude.addListener(jointCallback),
          latitudeDelta: this.latitudeDelta.addListener(jointCallback),
          longitudeDelta: this.longitudeDelta.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.latitude.removeListener(this._listeners[id].latitude);
        this.longitude.removeListener(this._listeners[id].longitude);
        this.latitudeDelta.removeListener(this._listeners[id].latitudeDelta);
        this.longitudeDelta.removeListener(this._listeners[id].longitudeDelta);
        delete this._listeners[id];
      }
    }, {
      key: "spring",
      value: function spring(config) {
        var animations = [];
        config.hasOwnProperty('latitude') && animations.push(_reactNative.Animated.spring(this.latitude, babelHelpers.extends({}, config, {
          toValue: config.latitude
        })));
        config.hasOwnProperty('longitude') && animations.push(_reactNative.Animated.spring(this.longitude, babelHelpers.extends({}, config, {
          toValue: config.longitude
        })));
        config.hasOwnProperty('latitudeDelta') && animations.push(_reactNative.Animated.spring(this.latitudeDelta, babelHelpers.extends({}, config, {
          toValue: config.latitudeDelta
        })));
        config.hasOwnProperty('longitudeDelta') && animations.push(_reactNative.Animated.spring(this.longitudeDelta, babelHelpers.extends({}, config, {
          toValue: config.longitudeDelta
        })));
        return _reactNative.Animated.parallel(animations);
      }
    }, {
      key: "timing",
      value: function timing(config) {
        var animations = [];
        config.hasOwnProperty('latitude') && animations.push(_reactNative.Animated.timing(this.latitude, babelHelpers.extends({}, config, {
          toValue: config.latitude
        })));
        config.hasOwnProperty('longitude') && animations.push(_reactNative.Animated.timing(this.longitude, babelHelpers.extends({}, config, {
          toValue: config.longitude
        })));
        config.hasOwnProperty('latitudeDelta') && animations.push(_reactNative.Animated.timing(this.latitudeDelta, babelHelpers.extends({}, config, {
          toValue: config.latitudeDelta
        })));
        config.hasOwnProperty('longitudeDelta') && animations.push(_reactNative.Animated.timing(this.longitudeDelta, babelHelpers.extends({}, config, {
          toValue: config.longitudeDelta
        })));
        return _reactNative.Animated.parallel(animations);
      }
    }]);
    return AnimatedMapRegion;
  }(AnimatedWithChildren);

  exports.default = AnimatedMapRegion;
},396,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProviderPropType = exports.Animated = exports.MAP_TYPES = undefined;

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _MapMarker = _require(_dependencyMap[3]);

  var _MapMarker2 = babelHelpers.interopRequireDefault(_MapMarker);

  var _MapPolyline = _require(_dependencyMap[4]);

  var _MapPolyline2 = babelHelpers.interopRequireDefault(_MapPolyline);

  var _MapPolygon = _require(_dependencyMap[5]);

  var _MapPolygon2 = babelHelpers.interopRequireDefault(_MapPolygon);

  var _MapCircle = _require(_dependencyMap[6]);

  var _MapCircle2 = babelHelpers.interopRequireDefault(_MapCircle);

  var _MapCallout = _require(_dependencyMap[7]);

  var _MapCallout2 = babelHelpers.interopRequireDefault(_MapCallout);

  var _MapOverlay = _require(_dependencyMap[8]);

  var _MapOverlay2 = babelHelpers.interopRequireDefault(_MapOverlay);

  var _MapUrlTile = _require(_dependencyMap[9]);

  var _MapUrlTile2 = babelHelpers.interopRequireDefault(_MapUrlTile);

  var _MapLocalTile = _require(_dependencyMap[10]);

  var _MapLocalTile2 = babelHelpers.interopRequireDefault(_MapLocalTile);

  var _AnimatedRegion = _require(_dependencyMap[11]);

  var _AnimatedRegion2 = babelHelpers.interopRequireDefault(_AnimatedRegion);

  var _decorateMapComponent = _require(_dependencyMap[12]);

  var _ProviderConstants = _require(_dependencyMap[13]);

  var ProviderConstants = babelHelpers.interopRequireWildcard(_ProviderConstants);
  var MAP_TYPES = exports.MAP_TYPES = {
    STANDARD: 'standard',
    SATELLITE: 'satellite',
    HYBRID: 'hybrid',
    TERRAIN: 'terrain',
    NONE: 'none',
    MUTEDSTANDARD: 'mutedStandard'
  };
  var GOOGLE_MAPS_ONLY_TYPES = [MAP_TYPES.TERRAIN, MAP_TYPES.NONE];
  var viewConfig = {
    uiViewClassName: 'AIR<provider>Map',
    validAttributes: {
      region: true
    }
  };
  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = babelHelpers.extends({}, viewPropTypes, {
    provider: _propTypes2.default.oneOf(['google']),
    style: viewPropTypes.style,
    customMapStyle: _propTypes2.default.array,
    customMapStyleString: _propTypes2.default.string,
    showsUserLocation: _propTypes2.default.bool,
    userLocationAnnotationTitle: _propTypes2.default.string,
    showsMyLocationButton: _propTypes2.default.bool,
    followsUserLocation: _propTypes2.default.bool,
    showsPointsOfInterest: _propTypes2.default.bool,
    showsCompass: _propTypes2.default.bool,
    zoomEnabled: _propTypes2.default.bool,
    zoomControlEnabled: _propTypes2.default.bool,
    rotateEnabled: _propTypes2.default.bool,
    cacheEnabled: _propTypes2.default.bool,
    loadingEnabled: _propTypes2.default.bool,
    loadingBackgroundColor: _reactNative.ColorPropType,
    loadingIndicatorColor: _reactNative.ColorPropType,
    scrollEnabled: _propTypes2.default.bool,
    pitchEnabled: _propTypes2.default.bool,
    toolbarEnabled: _propTypes2.default.bool,
    moveOnMarkerPress: _propTypes2.default.bool,
    showsScale: _propTypes2.default.bool,
    showsBuildings: _propTypes2.default.bool,
    showsTraffic: _propTypes2.default.bool,
    showsIndoors: _propTypes2.default.bool,
    showsIndoorLevelPicker: _propTypes2.default.bool,
    mapType: _propTypes2.default.oneOf(Object.values(MAP_TYPES)),
    region: _propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired,
      latitudeDelta: _propTypes2.default.number.isRequired,
      longitudeDelta: _propTypes2.default.number.isRequired
    }),
    initialRegion: _propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired,
      latitudeDelta: _propTypes2.default.number.isRequired,
      longitudeDelta: _propTypes2.default.number.isRequired
    }),
    liteMode: _propTypes2.default.bool,
    mapPadding: _reactNative.EdgeInsetsPropType,
    maxDelta: _propTypes2.default.number,
    minDelta: _propTypes2.default.number,
    legalLabelInsets: _reactNative.EdgeInsetsPropType,
    onMapReady: _propTypes2.default.func,
    onKmlReady: _propTypes2.default.func,
    onRegionChange: _propTypes2.default.func,
    onRegionChangeComplete: _propTypes2.default.func,
    onPress: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    onUserLocationChange: _propTypes2.default.func,
    onPanDrag: _propTypes2.default.func,
    onPoiClick: _propTypes2.default.func,
    onMarkerPress: _propTypes2.default.func,
    onMarkerSelect: _propTypes2.default.func,
    onMarkerDeselect: _propTypes2.default.func,
    onCalloutPress: _propTypes2.default.func,
    onMarkerDragStart: _propTypes2.default.func,
    onMarkerDrag: _propTypes2.default.func,
    onMarkerDragEnd: _propTypes2.default.func,
    minZoomLevel: _propTypes2.default.number,
    maxZoomLevel: _propTypes2.default.number,
    kmlSrc: _propTypes2.default.string
  });

  var MapView = function (_React$Component) {
    babelHelpers.inherits(MapView, _React$Component);

    function MapView(props) {
      babelHelpers.classCallCheck(this, MapView);

      var _this = babelHelpers.possibleConstructorReturn(this, (MapView.__proto__ || Object.getPrototypeOf(MapView)).call(this, props));

      _this.state = {
        isReady: false
      };
      _this._onMapReady = _this._onMapReady.bind(_this);
      _this._onMarkerPress = _this._onMarkerPress.bind(_this);
      _this._onChange = _this._onChange.bind(_this);
      _this._onLayout = _this._onLayout.bind(_this);
      return _this;
    }

    babelHelpers.createClass(MapView, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          provider: this.props.provider
        };
      }
    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate(nextProps) {
        var a = this.__lastRegion;
        var b = nextProps.region;
        if (!a || !b) return;

        if (a.latitude !== b.latitude || a.longitude !== b.longitude || a.latitudeDelta !== b.latitudeDelta || a.longitudeDelta !== b.longitudeDelta) {
          this.map.setNativeProps({
            region: b
          });
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var isReady = this.state.isReady;

        if (isReady) {
          this._updateStyle();
        }
      }
    }, {
      key: "_updateStyle",
      value: function _updateStyle() {
        var customMapStyle = this.props.customMapStyle;
        this.map.setNativeProps({
          customMapStyleString: JSON.stringify(customMapStyle)
        });
      }
    }, {
      key: "_onMapReady",
      value: function _onMapReady() {
        var _props = this.props,
            region = _props.region,
            initialRegion = _props.initialRegion,
            onMapReady = _props.onMapReady;

        if (region) {
          this.map.setNativeProps({
            region: region
          });
        } else if (initialRegion) {
          this.map.setNativeProps({
            initialRegion: initialRegion
          });
        }

        this._updateStyle();

        this.setState({
          isReady: true
        }, function () {
          if (onMapReady) onMapReady();
        });
      }
    }, {
      key: "_onLayout",
      value: function _onLayout(e) {
        var layout = e.nativeEvent.layout;
        if (!layout.width || !layout.height) return;

        if (this.state.isReady && !this.__layoutCalled) {
          var _props2 = this.props,
              region = _props2.region,
              initialRegion = _props2.initialRegion;

          if (region) {
            this.__layoutCalled = true;
            this.map.setNativeProps({
              region: region
            });
          } else if (initialRegion) {
            this.__layoutCalled = true;
            this.map.setNativeProps({
              initialRegion: initialRegion
            });
          }
        }

        if (this.props.onLayout) {
          this.props.onLayout(e);
        }
      }
    }, {
      key: "_onMarkerPress",
      value: function _onMarkerPress(event) {
        if (this.props.onMarkerPress) {
          this.props.onMarkerPress(event.nativeEvent);
        }
      }
    }, {
      key: "_onChange",
      value: function _onChange(event) {
        this.__lastRegion = event.nativeEvent.region;

        if (event.nativeEvent.continuous) {
          if (this.props.onRegionChange) {
            this.props.onRegionChange(event.nativeEvent.region);
          }
        } else if (this.props.onRegionChangeComplete) {
          this.props.onRegionChangeComplete(event.nativeEvent.region);
        }
      }
    }, {
      key: "animateToRegion",
      value: function animateToRegion(region, duration) {
        this._runCommand('animateToRegion', [region, duration || 500]);
      }
    }, {
      key: "animateToCoordinate",
      value: function animateToCoordinate(latLng, duration) {
        this._runCommand('animateToCoordinate', [latLng, duration || 500]);
      }
    }, {
      key: "animateToBearing",
      value: function animateToBearing(bearing, duration) {
        this._runCommand('animateToBearing', [bearing, duration || 500]);
      }
    }, {
      key: "animateToViewingAngle",
      value: function animateToViewingAngle(angle, duration) {
        this._runCommand('animateToViewingAngle', [angle, duration || 500]);
      }
    }, {
      key: "fitToElements",
      value: function fitToElements(animated) {
        this._runCommand('fitToElements', [animated]);
      }
    }, {
      key: "fitToSuppliedMarkers",
      value: function fitToSuppliedMarkers(markers, animated) {
        this._runCommand('fitToSuppliedMarkers', [markers, animated]);
      }
    }, {
      key: "fitToCoordinates",
      value: function fitToCoordinates() {
        var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$edgePadding = options.edgePadding,
            edgePadding = _options$edgePadding === undefined ? {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        } : _options$edgePadding,
            _options$animated = options.animated,
            animated = _options$animated === undefined ? true : _options$animated;

        this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);
      }
    }, {
      key: "setMapBoundaries",
      value: function setMapBoundaries(northEast, southWest) {
        this._runCommand('setMapBoundaries', [northEast, southWest]);
      }
    }, {
      key: "takeSnapshot",
      value: function takeSnapshot(args) {
        var _this2 = this;

        var config = {
          width: args.width || 0,
          height: args.height || 0,
          region: args.region || {},
          format: args.format || 'png',
          quality: args.quality || 1.0,
          result: args.result || 'file'
        };
        if (config.format !== 'png' && config.format !== 'jpg') throw new Error('Invalid format specified');
        if (config.result !== 'file' && config.result !== 'base64') throw new Error('Invalid result specified');
        {
          return _reactNative.NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);
        }
        return Promise.reject('takeSnapshot not supported on this platform');
      }
    }, {
      key: "pointForCoordinate",
      value: function pointForCoordinate(coordinate) {
        {
          return _reactNative.NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);
        }
        return Promise.reject('pointForCoordinate not supported on this platform');
      }
    }, {
      key: "coordinateForPoint",
      value: function coordinateForPoint(point) {
        {
          return _reactNative.NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);
        }
        return Promise.reject('coordinateForPoint not supported on this platform');
      }
    }, {
      key: "_uiManagerCommand",
      value: function _uiManagerCommand(name) {
        return _reactNative.NativeModules.UIManager[(0, _decorateMapComponent.getAirMapName)(this.props.provider)].Commands[name];
      }
    }, {
      key: "_mapManagerCommand",
      value: function _mapManagerCommand(name) {
        return _reactNative.NativeModules[(0, _decorateMapComponent.getAirMapName)(this.props.provider) + "Manager"][name];
      }
    }, {
      key: "_getHandle",
      value: function _getHandle() {
        return (0, _reactNative.findNodeHandle)(this.map);
      }
    }, {
      key: "_runCommand",
      value: function _runCommand(name, args) {
        switch ("android") {
          case 'android':
            return _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this._uiManagerCommand(name), args);

          case 'ios':
            return this._mapManagerCommand(name).apply(undefined, [this._getHandle()].concat(babelHelpers.toConsumableArray(args)));

          default:
            return Promise.reject("Invalid platform was passed: android");
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var props = void 0;

        if (this.state.isReady) {
          props = babelHelpers.extends({
            region: null,
            initialRegion: null,
            onMarkerPress: this._onMarkerPress,
            onChange: this._onChange,
            onMapReady: this._onMapReady,
            onLayout: this._onLayout
          }, this.props);
          props.handlePanDrag = !!props.onPanDrag;
        } else {
          props = {
            style: this.props.style,
            region: null,
            initialRegion: null,
            onMarkerPress: this._onMarkerPress,
            onChange: this._onChange,
            onMapReady: this._onMapReady,
            onLayout: this._onLayout
          };
        }

        if (this.props.liteMode) {
          return _react2.default.createElement(AIRMapLite, babelHelpers.extends({
            ref: function ref(_ref) {
              _this3.map = _ref;
            }
          }, props));
        }

        var AIRMap = getAirMapComponent(this.props.provider);
        return _react2.default.createElement(AIRMap, babelHelpers.extends({
          ref: function ref(_ref2) {
            _this3.map = _ref2;
          }
        }, props));
      }
    }]);
    return MapView;
  }(_react2.default.Component);

  MapView.propTypes = propTypes;
  MapView.viewConfig = viewConfig;
  MapView.childContextTypes = _decorateMapComponent.contextTypes;
  MapView.MAP_TYPES = MAP_TYPES;

  var nativeComponent = function nativeComponent(Component) {
    return (0, _reactNative.requireNativeComponent)(Component, MapView, {
      nativeOnly: {
        onChange: true,
        onMapReady: true,
        onKmlReady: true,
        handlePanDrag: true
      }
    });
  };

  var airMaps = {
    default: nativeComponent('AIRMap')
  };
  {
    airMaps.google = airMaps.default;
  }

  var getAirMapComponent = function getAirMapComponent(provider) {
    return airMaps[provider || 'default'];
  };

  var AIRMapLite = _reactNative.NativeModules.UIManager.AIRMapLite && (0, _reactNative.requireNativeComponent)('AIRMapLite', MapView, {
    nativeOnly: {
      onChange: true,
      onMapReady: true,
      handlePanDrag: true
    }
  });

  var Animated = exports.Animated = _reactNative.Animated.createAnimatedComponent(MapView);

  var ProviderPropType = exports.ProviderPropType = _propTypes2.default.oneOf(Object.values(ProviderConstants));

  MapView.Marker = _MapMarker2.default;
  MapView.Polyline = _MapPolyline2.default;
  MapView.Polygon = _MapPolygon2.default;
  MapView.Circle = _MapCircle2.default;
  MapView.UrlTile = _MapUrlTile2.default;
  MapView.LocalTile = _MapLocalTile2.default;
  MapView.Overlay = _MapOverlay2.default;
  MapView.Callout = _MapCallout2.default;
  babelHelpers.extends(MapView, ProviderConstants);
  MapView.ProviderPropType = ProviderPropType;
  MapView.Animated = Animated;
  MapView.AnimatedRegion = _AnimatedRegion2.default;
  exports.default = MapView;
},397,[121,103,14,398,388,391,392,395,399,393,394,396,389,390]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _resolveAssetSource = _require(_dependencyMap[3]);

  var _resolveAssetSource2 = babelHelpers.interopRequireDefault(_resolveAssetSource);

  var _decorateMapComponent = _require(_dependencyMap[4]);

  var _decorateMapComponent2 = babelHelpers.interopRequireDefault(_decorateMapComponent);

  var viewConfig = {
    uiViewClassName: 'AIR<provider>MapMarker',
    validAttributes: {
      coordinate: true
    }
  };
  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = babelHelpers.extends({}, viewPropTypes, {
    identifier: _propTypes2.default.string,
    reuseIdentifier: _propTypes2.default.string,
    title: _propTypes2.default.string,
    description: _propTypes2.default.string,
    image: _propTypes2.default.any,
    opacity: _propTypes2.default.number,
    pinColor: _propTypes2.default.string,
    coordinate: _propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    }).isRequired,
    centerOffset: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    calloutOffset: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    anchor: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    calloutAnchor: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    flat: _propTypes2.default.bool,
    draggable: _propTypes2.default.bool,
    tracksViewChanges: _propTypes2.default.bool,
    tracksInfoWindowChanges: _propTypes2.default.bool,
    stopPropagation: _propTypes2.default.bool,
    onPress: _propTypes2.default.func,
    onSelect: _propTypes2.default.func,
    onDeselect: _propTypes2.default.func,
    onCalloutPress: _propTypes2.default.func,
    onDragStart: _propTypes2.default.func,
    onDrag: _propTypes2.default.func,
    onDragEnd: _propTypes2.default.func
  });
  var defaultProps = {
    stopPropagation: false
  };

  var MapMarker = function (_React$Component) {
    babelHelpers.inherits(MapMarker, _React$Component);

    function MapMarker(props) {
      babelHelpers.classCallCheck(this, MapMarker);

      var _this = babelHelpers.possibleConstructorReturn(this, (MapMarker.__proto__ || Object.getPrototypeOf(MapMarker)).call(this, props));

      _this.showCallout = _this.showCallout.bind(_this);
      _this.hideCallout = _this.hideCallout.bind(_this);
      _this.animateMarkerToCoordinate = _this.animateMarkerToCoordinate.bind(_this);
      return _this;
    }

    babelHelpers.createClass(MapMarker, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.marker.setNativeProps(props);
      }
    }, {
      key: "showCallout",
      value: function showCallout() {
        this._runCommand('showCallout', []);
      }
    }, {
      key: "hideCallout",
      value: function hideCallout() {
        this._runCommand('hideCallout', []);
      }
    }, {
      key: "animateMarkerToCoordinate",
      value: function animateMarkerToCoordinate(coordinate, duration) {
        this._runCommand('animateMarkerToCoordinate', [coordinate, duration || 500]);
      }
    }, {
      key: "_getHandle",
      value: function _getHandle() {
        return (0, _reactNative.findNodeHandle)(this.marker);
      }
    }, {
      key: "_runCommand",
      value: function _runCommand(name, args) {
        switch ("android") {
          case 'android':
            _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this.getUIManagerCommand(name), args);

            break;

          case 'ios':
            this.getMapManagerCommand(name).apply(undefined, [this._getHandle()].concat(babelHelpers.toConsumableArray(args)));
            break;

          default:
            break;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var image = void 0;

        if (this.props.image) {
          image = (0, _resolveAssetSource2.default)(this.props.image) || {};
          image = image.uri || this.props.image;
        }

        var AIRMapMarker = this.getAirComponent();
        return _react2.default.createElement(AIRMapMarker, babelHelpers.extends({
          ref: function ref(_ref) {
            _this2.marker = _ref;
          }
        }, this.props, {
          image: image,
          style: [styles.marker, this.props.style],
          onPress: function onPress(event) {
            if (_this2.props.stopPropagation) {
              event.stopPropagation();
            }

            if (_this2.props.onPress) {
              _this2.props.onPress(event);
            }
          }
        }));
      }
    }]);
    return MapMarker;
  }(_react2.default.Component);

  MapMarker.propTypes = propTypes;
  MapMarker.defaultProps = defaultProps;
  MapMarker.viewConfig = viewConfig;

  var styles = _reactNative.StyleSheet.create({
    marker: {
      position: 'absolute',
      backgroundColor: 'transparent'
    }
  });

  MapMarker.Animated = _reactNative.Animated.createAnimatedComponent(MapMarker);
  exports.default = (0, _decorateMapComponent2.default)(MapMarker, {
    componentType: 'Marker',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},398,[121,103,14,153,389]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _resolveAssetSource = _require(_dependencyMap[3]);

  var _resolveAssetSource2 = babelHelpers.interopRequireDefault(_resolveAssetSource);

  var _decorateMapComponent = _require(_dependencyMap[4]);

  var _decorateMapComponent2 = babelHelpers.interopRequireDefault(_decorateMapComponent);

  var viewConfig = {
    uiViewClassName: 'AIR<provider>MapOverlay',
    validAttributes: {
      image: true
    }
  };
  var propTypes = babelHelpers.extends({}, _reactNative.View.propTypes, {
    image: _propTypes2.default.any.isRequired,
    bounds: _propTypes2.default.arrayOf(_propTypes2.default.array.isRequired).isRequired
  });

  var MapOverlay = function (_Component) {
    babelHelpers.inherits(MapOverlay, _Component);

    function MapOverlay() {
      babelHelpers.classCallCheck(this, MapOverlay);
      return babelHelpers.possibleConstructorReturn(this, (MapOverlay.__proto__ || Object.getPrototypeOf(MapOverlay)).apply(this, arguments));
    }

    babelHelpers.createClass(MapOverlay, [{
      key: "render",
      value: function render() {
        var image = void 0;

        if (this.props.image) {
          if (typeof this.props.image.startsWith === 'function' && this.props.image.startsWith('http')) {
            image = this.props.image;
          } else {
            image = (0, _resolveAssetSource2.default)(this.props.image) || {};
            image = image.uri;
          }
        }

        var AIRMapOverlay = this.getAirComponent();
        return _react2.default.createElement(AIRMapOverlay, babelHelpers.extends({}, this.props, {
          image: image,
          style: [styles.overlay, this.props.style]
        }));
      }
    }]);
    return MapOverlay;
  }(_react.Component);

  MapOverlay.propTypes = propTypes;
  MapOverlay.viewConfig = viewConfig;

  var styles = _reactNative.StyleSheet.create({
    overlay: {
      position: 'absolute',
      backgroundColor: 'transparent'
    }
  });

  MapOverlay.Animated = _reactNative.Animated.createAnimatedComponent(MapOverlay);
  exports.default = (0, _decorateMapComponent2.default)(MapOverlay, {
    componentType: 'Overlay',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},399,[103,121,14,153,389]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _ModalHost = _require(_dependencyMap[2]);

  var _ModalImplementation = _require(_dependencyMap[3]);

  var _ModalImplementation2 = babelHelpers.interopRequireDefault(_ModalImplementation);

  var Modal = (_temp = _class = function (_Component) {
    babelHelpers.inherits(Modal, _Component);

    function Modal() {
      babelHelpers.classCallCheck(this, Modal);
      return babelHelpers.possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));
    }

    babelHelpers.createClass(Modal, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        var register = this.context[_ModalHost.channel].register;
        this._handle = register(function (layout, key) {
          return _react2.default.createElement(_ModalImplementation2.default, babelHelpers.extends({}, _this2.props, {
            key: key,
            layout: layout
          }));
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        this._handle.update(function (layout, key) {
          return _react2.default.createElement(_ModalImplementation2.default, babelHelpers.extends({}, nextProps, {
            key: key,
            layout: layout
          }));
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._handle.remove();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return Modal;
  }(_react.Component), _class.contextTypes = babelHelpers.defineProperty({}, _ModalHost.channel, _propTypes2.default.object), _temp);
  exports.default = Modal;
},400,[103,121,401,403]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.channel = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _PureContainer = _require(_dependencyMap[3]);

  var _PureContainer2 = babelHelpers.interopRequireDefault(_PureContainer);

  var channel = exports.channel = '__$expo_modal_host';
  var ModalHost = (_temp2 = _class = function (_Component) {
    babelHelpers.inherits(ModalHost, _Component);

    function ModalHost() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ModalHost);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ModalHost.__proto__ || Object.getPrototypeOf(ModalHost)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        modals: [],
        layout: {
          height: 0,
          width: 0,
          measured: false
        }
      }, _this._currentKey = 0, _this._register = function (renderer) {
        var key = _this._currentKey;
        _this._currentKey++;

        _this.setState(function (state) {
          return {
            modals: [].concat(babelHelpers.toConsumableArray(state.modals), [{
              key: key,
              renderer: renderer
            }])
          };
        });

        var update = function update(r) {
          return _this.setState(function (state) {
            return {
              modals: state.modals.map(function (m) {
                return m.key === key ? {
                  key: key,
                  renderer: r
                } : m;
              })
            };
          });
        };

        var remove = function remove() {
          return _this.setState(function (state) {
            return {
              modals: state.modals.filter(function (m) {
                return m.key !== key;
              })
            };
          });
        };

        return {
          update: update,
          remove: remove
        };
      }, _this._handleLayout = function (e) {
        var layout = e.nativeEvent.layout;

        if (layout.height !== _this.state.layout.height || layout.width !== _this.state.layout.width) {
          _this.setState({
            layout: babelHelpers.extends({}, e.nativeEvent.layout, {
              measured: true
            })
          });
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ModalHost, [{
      key: "getChildContext",
      value: function getChildContext() {
        return babelHelpers.defineProperty({}, channel, {
          register: this._register
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.host,
            onLayout: this._handleLayout
          },
          _react2.default.createElement(
            _PureContainer2.default,
            this.props,
            this.props.children
          ),
          this.state.layout.measured ? this.state.modals.map(function (_ref3) {
            var key = _ref3.key,
                renderer = _ref3.renderer;
            return renderer(_this2.state.layout, key);
          }) : null
        );
      }
    }]);
    return ModalHost;
  }(_react.Component), _class.childContextTypes = babelHelpers.defineProperty({}, channel, _propTypes2.default.object), _temp2);
  exports.default = ModalHost;

  var styles = _reactNative.StyleSheet.create({
    host: {
      flex: 1
    }
  });
},401,[103,121,14,402]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var PureContainer = function (_PureComponent) {
    babelHelpers.inherits(PureContainer, _PureComponent);

    function PureContainer() {
      babelHelpers.classCallCheck(this, PureContainer);
      return babelHelpers.possibleConstructorReturn(this, (PureContainer.__proto__ || Object.getPrototypeOf(PureContainer)).apply(this, arguments));
    }

    babelHelpers.createClass(PureContainer, [{
      key: "render",
      value: function render() {
        return _react.Children.only(this.props.children);
      }
    }]);
    return PureContainer;
  }(_react.PureComponent);

  exports.default = PureContainer;
},402,[103]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var ModalImplementation = function (_Component) {
    babelHelpers.inherits(ModalImplementation, _Component);

    function ModalImplementation(props) {
      babelHelpers.classCallCheck(this, ModalImplementation);

      var _this = babelHelpers.possibleConstructorReturn(this, (ModalImplementation.__proto__ || Object.getPrototypeOf(ModalImplementation)).call(this, props));

      _this._handleHardwareBack = function () {
        if (_this.props.onRequestClose && _this.props.visible) {
          _this.props.onRequestClose();

          return true;
        }

        return false;
      };

      _this.state = {
        visible: new _reactNative.Animated.Value(props.visible ? 1 : 0),
        rendered: props.visible
      };
      return _this;
    }

    babelHelpers.createClass(ModalImplementation, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        _reactNative.BackHandler.addEventListener('hardwareBackPress', this._handleHardwareBack);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var _this2 = this;

        if (this.props.visible !== nextProps.visible) {
          if (nextProps.animationType === 'none') {
            this.setState({
              rendered: nextProps.visible
            });
          } else {
            if (nextProps.visible) {
              this.setState({
                rendered: true
              }, function () {
                return _reactNative.Animated.timing(_this2.state.visible, {
                  toValue: 1,
                  duration: 300,
                  easing: _reactNative.Easing.quad,
                  useNativeDriver: true
                }).start(nextProps.onShow);
              });
            } else {
              _reactNative.Animated.timing(this.state.visible, {
                toValue: 0,
                duration: 250,
                easing: _reactNative.Easing.quad,
                useNativeDriver: true
              }).start(function (finished) {
                if (finished) {
                  _this2.setState({
                    rendered: false
                  });
                }
              });
            }
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _reactNative.BackHandler.removeEventListener('hardwareBackPress', this._handleHardwareBack);
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            animationType = _props.animationType,
            transparent = _props.transparent,
            layout = _props.layout;
        var _state = this.state,
            visible = _state.visible,
            rendered = _state.rendered;

        if (!rendered) {
          return null;
        }

        var opacity = animationType === 'fade' ? visible : 1;
        var translate = animationType === 'slide' ? visible.interpolate({
          inputRange: [0, 1],
          outputRange: [layout.height, 0]
        }) : 0;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            pointerEvents: visible ? 'auto' : 'none'
          },
          transparent ? null : _react2.default.createElement(_reactNative.Animated.View, {
            style: [styles.backdrop, styles.container, {
              opacity: visible
            }]
          }),
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.content, transparent ? null : styles.background, {
                opacity: opacity,
                transform: [{
                  translateY: translate
                }]
              }]
            },
            this.props.children
          )
        );
      }
    }]);
    return ModalImplementation;
  }(_react.Component);

  exports.default = ModalImplementation;

  var styles = _reactNative.StyleSheet.create({
    container: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    content: {
      flex: 1
    },
    background: {
      backgroundColor: 'white'
    },
    backdrop: {
      backgroundColor: 'rgba(0, 0, 0, .6)'
    }
  });
},403,[103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = exports.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = exports.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = exports.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = exports.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _lodash = _require(_dependencyMap[2]);

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  var _reactNative = _require(_dependencyMap[3]);

  var _AV = _require(_dependencyMap[4]);

  var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = exports.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;
  var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = exports.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;
  var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = exports.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;
  var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = exports.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;
  var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;
  var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;
  var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;
  var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;

  var _STYLES = _reactNative.StyleSheet.create({
    base: {
      overflow: 'hidden'
    },
    poster: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      resizeMode: 'contain'
    },
    video: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    }
  });

  var ExpoVideoManagerConstants = _reactNative.NativeModules.UIManager.ExponentVideo ? _reactNative.NativeModules.UIManager.ExponentVideo.Constants : _reactNative.NativeModules.ExponentVideoManager;
  var Video = (_temp = _class = function (_Component) {
    babelHelpers.inherits(Video, _Component);

    function Video(props) {
      var _this2 = this;

      babelHelpers.classCallCheck(this, Video);

      var _this = babelHelpers.possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).call(this, props));

      _this._assignRoot = function (component) {
        _this._root = component;
      };

      _this._handleNewStatus = function (status) {
        if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {
          _this.setState({
            showPoster: false
          });
        }

        if (_this.props.onPlaybackStatusUpdate) {
          _this.props.onPlaybackStatusUpdate(status);
        }
      };

      _this._performOperationAndHandleStatusAsync = function _callee(operation) {
        var _status;

        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this._root) {
                  _context.next = 8;
                  break;
                }

                _context.next = 3;
                return regeneratorRuntime.awrap(operation((0, _reactNative.findNodeHandle)(_this._root)));

              case 3:
                _status = _context.sent;

                _this._handleNewStatus(_status);

                return _context.abrupt("return", _status);

              case 8:
                throw new Error('Cannot complete operation because the Video component has not yet loaded.');

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this2);
      };

      _this._setFullscreen = function _callee2(value) {
        return regeneratorRuntime.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentVideoManager.setFullscreen(tag, value);
                }));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, null, _this2);
      };

      _this.presentFullscreenPlayer = function _callee3() {
        return regeneratorRuntime.async(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", _this._setFullscreen(true));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, null, _this2);
      };

      _this.presentIOSFullscreenPlayer = function () {
        console.warn("You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.");
        return _this.presentFullscreenPlayer();
      };

      _this.presentFullscreenPlayerAsync = function () {
        return _this._performOperationAndHandleStatusAsync(function (tag) {
          return _reactNative.NativeModules.ExponentAV.presentFullscreenPlayer(tag);
        });
      };

      _this.dismissFullscreenPlayer = function _callee4() {
        return regeneratorRuntime.async(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", _this._setFullscreen(false));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, null, _this2);
      };

      _this.dismissIOSFullscreenPlayer = function () {
        console.warn("You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.");

        _this.dismissFullscreenPlayer();
      };

      _this.getStatusAsync = function _callee5() {
        return regeneratorRuntime.async(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.getStatusForVideo(tag);
                }));

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, null, _this2);
      };

      _this.setOnPlaybackStatusUpdate = function (onPlaybackStatusUpdate) {
        _this.setNativeProps({
          onPlaybackStatusUpdate: onPlaybackStatusUpdate
        });

        _this.getStatusAsync();
      };

      _this.loadAsync = function _callee6(source) {
        var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        var _ref, nativeSource, fullInitialStatus;

        return regeneratorRuntime.async(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return regeneratorRuntime.awrap((0, _AV._getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst));

              case 2:
                _ref = _context6.sent;
                nativeSource = _ref.nativeSource;
                fullInitialStatus = _ref.fullInitialStatus;
                return _context6.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus);
                }));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, null, _this2);
      };

      _this.unloadAsync = function _callee7() {
        return regeneratorRuntime.async(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.unloadForVideo(tag);
                }));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, null, _this2);
      };

      _this.setStatusAsync = function _callee8(status) {
        return regeneratorRuntime.async(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                (0, _AV._throwErrorIfValuesOutOfBoundsInStatus)(status);
                return _context8.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.setStatusForVideo(tag, status);
                }));

              case 2:
              case "end":
                return _context8.stop();
            }
          }
        }, null, _this2);
      };

      _this.replayAsync = function _callee9() {
        var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return regeneratorRuntime.async(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(status.positionMillis && status.positionMillis !== 0)) {
                  _context9.next = 2;
                  break;
                }

                throw new Error('Requested position after replay has to be 0.');

              case 2:
                return _context9.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.replayVideo(tag, babelHelpers.extends({}, status, {
                    positionMillis: 0,
                    shouldPlay: true
                  }));
                }));

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, null, _this2);
      };

      _this._nativeOnPlaybackStatusUpdate = function (event) {
        _this._handleNewStatus(event.nativeEvent);
      };

      _this._nativeOnLoadStart = function (event) {
        if (_this.props.onLoadStart) {
          _this.props.onLoadStart();
        }
      };

      _this._nativeOnLoad = function (event) {
        if (_this.props.onLoad) {
          _this.props.onLoad(event.nativeEvent);
        }

        _this._handleNewStatus(event.nativeEvent);
      };

      _this._nativeOnError = function (event) {
        var error = event.nativeEvent.error;

        if (_this.props.onError) {
          _this.props.onError(error);
        }

        _this._handleNewStatus((0, _AV._getUnloadedStatus)(error));
      };

      _this._nativeOnReadyForDisplay = function (event) {
        if (_this.props.onReadyForDisplay) {
          _this.props.onReadyForDisplay(event.nativeEvent);
        }
      };

      _this._nativeOnFullscreenUpdate = function (event) {
        if (_this.props.onIOSFullscreenUpdate && _this.props.onFullscreenUpdate) {
          console.warn("You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.");
        } else if (_this.props.onIOSFullscreenUpdate) {
          console.warn("You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.");
        }

        if (_this.props.onIOSFullscreenUpdate) {
          _this.props.onIOSFullscreenUpdate(event.nativeEvent);
        }

        if (_this.props.onFullscreenUpdate) {
          _this.props.onFullscreenUpdate(event.nativeEvent);
        }
      };

      _this._renderPoster = function () {
        return _this.props.usePoster && _this.state.showPoster ? _react2.default.createElement(_reactNative.Image, {
          style: _STYLES.poster,
          source: _this.props.posterSource
        }) : null;
      };

      _this.state = {
        showPoster: props.usePoster != null && props.usePoster
      };
      return _this;
    }

    babelHelpers.createClass(Video, [{
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        this._root.setNativeProps(nativeProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var source = (0, _AV._getNativeSourceFromSource)(this.props.source);
        var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;

        if (this.props.resizeMode) {
          var _resizeMode = this.props.resizeMode;

          if (_resizeMode === Video.RESIZE_MODE_STRETCH) {
            nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;
          } else if (_resizeMode === Video.RESIZE_MODE_CONTAIN) {
            nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;
          } else if (_resizeMode === Video.RESIZE_MODE_COVER) {
            nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;
          }
        }

        var status = babelHelpers.extends({}, this.props.status);
        ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {
          if (prop in _this3.props) {
            status[prop] = _this3.props[prop];
          }
        });
        var nativeProps = babelHelpers.extends({
          style: _STYLES.base
        }, (0, _lodash2.default)(this.props, 'source'), {
          source: source,
          nativeResizeMode: nativeResizeMode,
          status: status,
          onStatusUpdateNative: this._nativeOnPlaybackStatusUpdate,
          onLoadStartNative: this._nativeOnLoadStart,
          onLoadNative: this._nativeOnLoad,
          onErrorNative: this._nativeOnError,
          onReadyForDisplayNative: this._nativeOnReadyForDisplay,
          onFullscreenUpdateNative: this._nativeOnFullscreenUpdate
        });
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: nativeProps.style,
            pointerEvents: "box-none"
          },
          _react2.default.createElement(ExponentVideo, babelHelpers.extends({
            ref: this._assignRoot
          }, nativeProps, {
            style: _STYLES.video
          })),
          this._renderPoster()
        );
      }
    }]);
    return Video;
  }(_react.Component), _class.RESIZE_MODE_CONTAIN = 'contain', _class.RESIZE_MODE_COVER = 'cover', _class.RESIZE_MODE_STRETCH = 'stretch', _class.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT, _class.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT, _class.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS, _class.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS, _class.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT, _class.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT, _class.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS, _class.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS, _temp);
  exports.default = Video;
  babelHelpers.extends(Video.prototype, _AV._COMMON_AV_PLAYBACK_METHODS);
  Video.propTypes = babelHelpers.extends({
    source: _propTypes2.default.oneOfType([_propTypes2.default.shape({
      uri: _propTypes2.default.string,
      overrideFileExtensionAndroid: _propTypes2.default.string
    }), _propTypes2.default.number]),
    posterSource: _propTypes2.default.oneOfType([_propTypes2.default.shape({
      uri: _propTypes2.default.string
    }), _propTypes2.default.number]),
    onPlaybackStatusUpdate: _propTypes2.default.func,
    onLoadStart: _propTypes2.default.func,
    onLoad: _propTypes2.default.func,
    onError: _propTypes2.default.func,
    onIOSFullscreenUpdate: _propTypes2.default.func,
    onFullscreenUpdate: _propTypes2.default.func,
    onReadyForDisplay: _propTypes2.default.func,
    useNativeControls: _propTypes2.default.bool,
    resizeMode: _propTypes2.default.string,
    usePoster: _propTypes2.default.bool,
    status: _propTypes2.default.shape({
      progressUpdateIntervalMillis: _propTypes2.default.number,
      positionMillis: _propTypes2.default.number,
      shouldPlay: _propTypes2.default.bool,
      rate: _propTypes2.default.number,
      shouldCorrectPitch: _propTypes2.default.bool,
      volume: _propTypes2.default.number,
      isMuted: _propTypes2.default.bool,
      isLooping: _propTypes2.default.bool
    }),
    progressUpdateIntervalMillis: _propTypes2.default.number,
    positionMillis: _propTypes2.default.number,
    shouldPlay: _propTypes2.default.bool,
    rate: _propTypes2.default.number,
    shouldCorrectPitch: _propTypes2.default.bool,
    volume: _propTypes2.default.number,
    isMuted: _propTypes2.default.bool,
    isLooping: _propTypes2.default.bool,
    scaleX: _propTypes2.default.number,
    scaleY: _propTypes2.default.number,
    translateX: _propTypes2.default.number,
    translateY: _propTypes2.default.number,
    rotation: _propTypes2.default.number
  }, _reactNative.ViewPropTypes);
  var ExponentVideo = (0, _reactNative.requireNativeComponent)('ExponentVideo', Video, {
    nativeOnly: {
      source: true,
      nativeResizeMode: true,
      onStatusUpdateNative: true,
      onLoadStartNative: true,
      onLoadNative: true,
      onErrorNative: true,
      onReadyForDisplayNative: true,
      onFullscreenUpdateNative: true
    }
  });
},404,[103,121,405,14,406]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var INFINITY = Infinity,
      MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      symbolTag = '[object Symbol]';
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();

  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return baseFindIndex(array, baseIsNaN, fromIndex);
    }

    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  function baseIsNaN(value) {
    return value !== value;
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  function cacheHas(cache, key) {
    return cache.has(key);
  }

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var Symbol = root.Symbol,
      getPrototype = overArg(Object.getPrototypeOf, Object),
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice,
      spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;
  var nativeGetSymbols = Object.getOwnPropertySymbols,
      nativeMax = Math.max;
  var Map = getNative(root, 'Map'),
      nativeCreate = getNative(Object, 'create');

  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function listCacheClear() {
    this.__data__ = [];
  }

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    return true;
  }

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  function SetCache(values) {
    var index = -1,
        length = values ? values.length : 0;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  }

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length,
        skipIndexes = !!length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  function basePick(object, props) {
    object = Object(object);
    return basePickBy(object, props, function (value, key) {
      return key in object;
    });
  }

  function basePickBy(object, props, predicate) {
    var index = -1,
        length = props.length,
        result = {};

    while (++index < length) {
      var key = props[index],
          value = object[key];

      if (predicate(value, key)) {
        result[key] = value;
      }
    }

    return result;
  }

  function baseRest(func, start) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }

  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }

    return result;
  };

  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  var omit = baseRest(function (object, props) {
    if (object == null) {
      return {};
    }

    props = arrayMap(baseFlatten(props, 1), toKey);
    return basePick(object, baseDifference(getAllKeysIn(object), props));
  });

  function stubArray() {
    return [];
  }

  module.exports = omit;
},405,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._COMMON_AV_PLAYBACK_METHODS = exports._getUnloadedStatus = exports._getNativeSourceAndFullInitialStatusForLoadAsync = exports._throwErrorIfValuesOutOfBoundsInStatus = exports._getNativeSourceFromSource = exports._DEFAULT_INITIAL_PLAYBACK_STATUS = exports._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = undefined;

  var _this = this;

  var _Asset = _require(_dependencyMap[0]);

  var _Asset2 = babelHelpers.interopRequireDefault(_Asset);

  var _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = exports._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = 500;

  var _DEFAULT_INITIAL_PLAYBACK_STATUS = exports._DEFAULT_INITIAL_PLAYBACK_STATUS = {
    positionMillis: 0,
    progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,
    shouldPlay: false,
    rate: 1.0,
    shouldCorrectPitch: false,
    volume: 1.0,
    isMuted: false,
    isLooping: false
  };

  var _getAssetFromPlaybackSource = function _getAssetFromPlaybackSource(source) {
    if (source == null) {
      return null;
    }

    var asset = null;

    if (typeof source === 'number') {
      asset = _Asset2.default.fromModule(source);
    } else if ('constructor' in source && source.constructor.name === 'Asset') {
      asset = source;
    }

    return asset;
  };

  var _getNativeSourceFromSource = exports._getNativeSourceFromSource = function _getNativeSourceFromSource(source) {
    var uri = null;
    var overridingExtension = null;

    var asset = _getAssetFromPlaybackSource(source);

    if (asset != null) {
      uri = asset.localUri || asset.uri;
    } else if (source != null && typeof source !== 'number' && 'uri' in source && typeof source.uri === 'string') {
      uri = source.uri;
    }

    if (uri == null) {
      return null;
    }

    if (source != null && typeof source !== 'number' && 'overrideFileExtensionAndroid' in source && typeof source.overrideFileExtensionAndroid === 'string') {
      overridingExtension = source.overrideFileExtensionAndroid;
    }

    return {
      uri: uri,
      overridingExtension: overridingExtension
    };
  };

  var _throwErrorIfValuesOutOfBoundsInStatus = exports._throwErrorIfValuesOutOfBoundsInStatus = function _throwErrorIfValuesOutOfBoundsInStatus(status) {
    if (typeof status.rate === 'number' && (status.rate < 0.0 || status.rate > 32.0)) {
      throw new Error('Rate value must be between 0.0 and 32.0.');
    }

    if (typeof status.volume === 'number' && (status.volume < 0.0 || status.volume > 1.0)) {
      throw new Error('Volume value must be between 0.0 and 1.0.');
    }
  };

  var _getNativeSourceAndFullInitialStatusForLoadAsync = exports._getNativeSourceAndFullInitialStatusForLoadAsync = function _getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst) {
    var asset, nativeSource, fullInitialStatus;
    return regeneratorRuntime.async(function _getNativeSourceAndFullInitialStatusForLoadAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            asset = _getAssetFromPlaybackSource(source);

            if (!(downloadFirst && asset != null)) {
              _context.next = 4;
              break;
            }

            _context.next = 4;
            return regeneratorRuntime.awrap(asset.downloadAsync());

          case 4:
            nativeSource = _getNativeSourceFromSource(source);

            if (!(nativeSource == null)) {
              _context.next = 7;
              break;
            }

            throw new Error('Cannot load null source!');

          case 7:
            fullInitialStatus = initialStatus == null ? _DEFAULT_INITIAL_PLAYBACK_STATUS : babelHelpers.extends({}, _DEFAULT_INITIAL_PLAYBACK_STATUS, initialStatus);

            _throwErrorIfValuesOutOfBoundsInStatus(fullInitialStatus);

            return _context.abrupt("return", {
              nativeSource: nativeSource,
              fullInitialStatus: fullInitialStatus
            });

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, null, _this);
  };

  var _getUnloadedStatus = exports._getUnloadedStatus = function _getUnloadedStatus() {
    var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var status = {
      isLoaded: false
    };

    if (error) {
      status.error = error;
    }

    return status;
  };

  var _COMMON_AV_PLAYBACK_METHODS = exports._COMMON_AV_PLAYBACK_METHODS = {
    playAsync: function playAsync() {
      return regeneratorRuntime.async(function playAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.setStatusAsync({
                shouldPlay: true
              }));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    },
    playFromPositionAsync: function playFromPositionAsync(positionMillis) {
      var tolerances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return regeneratorRuntime.async(function playFromPositionAsync$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.setStatusAsync({
                positionMillis: positionMillis,
                shouldPlay: true,
                seekMillisToleranceAfter: tolerances.toleranceMillisAfter,
                seekMillisToleranceBefore: tolerances.toleranceMillisBefore
              }));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    },
    pauseAsync: function pauseAsync() {
      return regeneratorRuntime.async(function pauseAsync$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this.setStatusAsync({
                shouldPlay: false
              }));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    },
    stopAsync: function stopAsync() {
      return regeneratorRuntime.async(function stopAsync$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", this.setStatusAsync({
                positionMillis: 0,
                shouldPlay: false
              }));

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    },
    setPositionAsync: function setPositionAsync(positionMillis) {
      var tolerances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return regeneratorRuntime.async(function setPositionAsync$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", this.setStatusAsync({
                positionMillis: positionMillis,
                seekMillisToleranceAfter: tolerances.toleranceMillisAfter,
                seekMillisToleranceBefore: tolerances.toleranceMillisBefore
              }));

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    },
    setRateAsync: function setRateAsync(rate, shouldCorrectPitch) {
      return regeneratorRuntime.async(function setRateAsync$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", this.setStatusAsync({
                rate: rate,
                shouldCorrectPitch: shouldCorrectPitch
              }));

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    },
    setVolumeAsync: function setVolumeAsync(volume) {
      return regeneratorRuntime.async(function setVolumeAsync$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", this.setStatusAsync({
                volume: volume
              }));

            case 1:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    },
    setIsMutedAsync: function setIsMutedAsync(isMuted) {
      return regeneratorRuntime.async(function setIsMutedAsync$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", this.setStatusAsync({
                isMuted: isMuted
              }));

            case 1:
            case "end":
              return _context9.stop();
          }
        }
      }, null, this);
    },
    setIsLoopingAsync: function setIsLoopingAsync(isLooping) {
      return regeneratorRuntime.async(function setIsLoopingAsync$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", this.setStatusAsync({
                isLooping: isLooping
              }));

            case 1:
            case "end":
              return _context10.stop();
          }
        }
      }, null, this);
    },
    setProgressUpdateIntervalAsync: function setProgressUpdateIntervalAsync(progressUpdateIntervalMillis) {
      return regeneratorRuntime.async(function setProgressUpdateIntervalAsync$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", this.setStatusAsync({
                progressUpdateIntervalMillis: progressUpdateIntervalMillis
              }));

            case 1:
            case "end":
              return _context11.stop();
          }
        }
      }, null, this);
    }
  };
},406,[328]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNativeSvg = _require(_dependencyMap[0]);

  var SvgModules = babelHelpers.interopRequireWildcard(_reactNativeSvg);
  var Svg = SvgModules.Svg;

  for (var key in SvgModules) {
    if (key !== 'default' && key !== 'Svg') {
      Svg[key] = SvgModules[key];
    }
  }

  exports.default = Svg;
},407,[408]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ClipPath = exports.Stop = exports.RadialGradient = exports.LinearGradient = exports.Defs = exports.Symbol = exports.Image = exports.Use = exports.Rect = exports.Line = exports.Polyline = exports.Polygon = exports.Path = exports.TextPath = exports.TSpan = exports.Text = exports.G = exports.Ellipse = exports.Circle = exports.Svg = undefined;

    var _Rect = _require(_dependencyMap[0]);

    var _Rect2 = babelHelpers.interopRequireDefault(_Rect);

    var _Circle = _require(_dependencyMap[1]);

    var _Circle2 = babelHelpers.interopRequireDefault(_Circle);

    var _Ellipse = _require(_dependencyMap[2]);

    var _Ellipse2 = babelHelpers.interopRequireDefault(_Ellipse);

    var _Polygon = _require(_dependencyMap[3]);

    var _Polygon2 = babelHelpers.interopRequireDefault(_Polygon);

    var _Polyline = _require(_dependencyMap[4]);

    var _Polyline2 = babelHelpers.interopRequireDefault(_Polyline);

    var _Line = _require(_dependencyMap[5]);

    var _Line2 = babelHelpers.interopRequireDefault(_Line);

    var _Svg = _require(_dependencyMap[6]);

    var _Svg2 = babelHelpers.interopRequireDefault(_Svg);

    var _Path = _require(_dependencyMap[7]);

    var _Path2 = babelHelpers.interopRequireDefault(_Path);

    var _G = _require(_dependencyMap[8]);

    var _G2 = babelHelpers.interopRequireDefault(_G);

    var _Text = _require(_dependencyMap[9]);

    var _Text2 = babelHelpers.interopRequireDefault(_Text);

    var _TSpan = _require(_dependencyMap[10]);

    var _TSpan2 = babelHelpers.interopRequireDefault(_TSpan);

    var _TextPath = _require(_dependencyMap[11]);

    var _TextPath2 = babelHelpers.interopRequireDefault(_TextPath);

    var _Use = _require(_dependencyMap[12]);

    var _Use2 = babelHelpers.interopRequireDefault(_Use);

    var _Image = _require(_dependencyMap[13]);

    var _Image2 = babelHelpers.interopRequireDefault(_Image);

    var _Symbol = _require(_dependencyMap[14]);

    var _Symbol2 = babelHelpers.interopRequireDefault(_Symbol);

    var _Defs = _require(_dependencyMap[15]);

    var _Defs2 = babelHelpers.interopRequireDefault(_Defs);

    var _LinearGradient = _require(_dependencyMap[16]);

    var _LinearGradient2 = babelHelpers.interopRequireDefault(_LinearGradient);

    var _RadialGradient = _require(_dependencyMap[17]);

    var _RadialGradient2 = babelHelpers.interopRequireDefault(_RadialGradient);

    var _Stop = _require(_dependencyMap[18]);

    var _Stop2 = babelHelpers.interopRequireDefault(_Stop);

    var _ClipPath = _require(_dependencyMap[19]);

    var _ClipPath2 = babelHelpers.interopRequireDefault(_ClipPath);

    exports.Svg = _Svg2.default;
    exports.Circle = _Circle2.default;
    exports.Ellipse = _Ellipse2.default;
    exports.G = _G2.default;
    exports.Text = _Text2.default;
    exports.TSpan = _TSpan2.default;
    exports.TextPath = _TextPath2.default;
    exports.Path = _Path2.default;
    exports.Polygon = _Polygon2.default;
    exports.Polyline = _Polyline2.default;
    exports.Line = _Line2.default;
    exports.Rect = _Rect2.default;
    exports.Use = _Use2.default;
    exports.Image = _Image2.default;
    exports.Symbol = _Symbol2.default;
    exports.Defs = _Defs2.default;
    exports.LinearGradient = _LinearGradient2.default;
    exports.RadialGradient = _RadialGradient2.default;
    exports.Stop = _Stop2.default;
    exports.ClipPath = _ClipPath2.default;
    exports.default = _Svg2.default;
},408,[409,455,456,457,459,460,461,410,463,466,465,467,468,469,470,471,472,477,476,478]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    _require(_dependencyMap[1]);

    var _createReactNativeComponentClass = _require(_dependencyMap[2]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _props = _require(_dependencyMap[3]);

    var _attributes = _require(_dependencyMap[4]);

    var _extractProps = _require(_dependencyMap[5]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var _Shape2 = _require(_dependencyMap[6]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var _default = (_temp2 = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var props = this.props;
                return _react2.default.createElement(RNSVGRect, babelHelpers.extends({
                    ref: function ref(ele) {
                        _this2.root = ele;
                    }
                }, (0, _extractProps2.default)(babelHelpers.extends({}, props, {
                    x: null,
                    y: null
                }), this), {
                    x: props.x.toString(),
                    y: props.y.toString(),
                    width: props.width.toString(),
                    height: props.height.toString(),
                    rx: props.rx.toString(),
                    ry: props.ry.toString()
                }));
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'Rect', _class.propTypes = babelHelpers.extends({}, _props.pathProps, {
        x: _props.numberProp.isRequired,
        y: _props.numberProp.isRequired,
        width: _props.numberProp.isRequired,
        height: _props.numberProp.isRequired,
        rx: _props.numberProp,
        ry: _props.numberProp
    }), _class.defaultProps = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        rx: 0,
        ry: 0
    }, _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root;

            (_root = _this3.root).setNativeProps.apply(_root, arguments);
        };
    }, _temp2);

    exports.default = _default;
    var RNSVGRect = (0, _createReactNativeComponentClass2.default)('RNSVGRect', function () {
        return {
            validAttributes: _attributes.RectAttributes,
            uiViewClassName: 'RNSVGRect'
        };
    });
},409,[103,410,411,415,412,416,413]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _createReactNativeComponentClass = _require(_dependencyMap[2]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _attributes = _require(_dependencyMap[3]);

    var _Shape2 = _require(_dependencyMap[4]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var _props = _require(_dependencyMap[5]);

    var _extractProps = _require(_dependencyMap[6]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var _default = (_temp2 = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var props = this.props;
                return _react2.default.createElement(RNSVGPath, babelHelpers.extends({
                    ref: function ref(ele) {
                        _this2.root = ele;
                    }
                }, (0, _extractProps2.default)(props, this), {
                    d: props.d
                }));
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'Path', _class.propTypes = babelHelpers.extends({}, _props.pathProps, {
        d: _propTypes2.default.string.isRequired
    }), _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root;

            (_root = _this3.root).setNativeProps.apply(_root, arguments);
        };
    }, _temp2);

    exports.default = _default;
    var RNSVGPath = (0, _createReactNativeComponentClass2.default)('RNSVGPath', function () {
        return {
            validAttributes: _attributes.PathAttributes,
            uiViewClassName: 'RNSVGPath'
        };
    });
},410,[103,121,411,412,413,415,416]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createReactNativeComponentClass = _require(_dependencyMap[0]);

  var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

  exports.default = function (uiViewClassName, getViewConfig) {
    return _createReactNativeComponentClass2.default.length >= 2 ? (0, _createReactNativeComponentClass2.default)(uiViewClassName, getViewConfig) : (0, _createReactNativeComponentClass2.default)(getViewConfig());
  };
},411,[149]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function arrayDiffer(a, b) {
        if (!a || !b) {
            return true;
        }

        if (a.length !== b.length) {
            return true;
        }

        for (var i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
                return true;
            }
        }

        return false;
    }

    function fontDiffer(a, b) {
        if (a === b) {
            return false;
        }

        return a.fontStyle !== b.fontStyle || a.fontVariant !== b.fontVariant || a.fontWeight !== b.fontWeight || a.fontStretch !== b.fontStretch || a.fontSize !== b.fontSize || a.fontFamily !== b.fontFamily || a.textAnchor !== b.textAnchor || a.textDecoration !== b.textDecoration || a.letterSpacing !== b.letterSpacing || a.wordSpacing !== b.wordSpacing || a.kerning !== b.kerning || a.fontVariantLigatures !== b.fontVariantLigatures || a.fontData !== b.fontData || a.fontFeatureSettings !== b.fontFeatureSettings;
    }

    var ViewBoxAttributes = {
        minX: true,
        minY: true,
        vbWidth: true,
        vbHeight: true,
        align: true,
        meetOrSlice: true
    };
    var NodeAttributes = {
        name: true,
        matrix: {
            diff: arrayDiffer
        },
        scaleX: true,
        scaleY: true,
        opacity: true,
        clipRule: true,
        clipPath: true,
        propList: {
            diff: arrayDiffer
        },
        responsible: true
    };
    var FillAndStrokeAttributes = {
        fill: {
            diff: arrayDiffer
        },
        fillOpacity: true,
        fillRule: true,
        stroke: {
            diff: arrayDiffer
        },
        strokeOpacity: true,
        strokeWidth: true,
        strokeLinecap: true,
        strokeLinejoin: true,
        strokeDasharray: {
            diff: arrayDiffer
        },
        strokeDashoffset: true,
        strokeMiterlimit: true
    };
    var RenderableAttributes = babelHelpers.extends({}, NodeAttributes, FillAndStrokeAttributes);
    var GroupAttributes = babelHelpers.extends({}, RenderableAttributes, {
        font: {
            diff: fontDiffer
        }
    });
    var UseAttributes = babelHelpers.extends({}, RenderableAttributes, {
        href: true,
        width: true,
        height: true
    });
    var SymbolAttributes = babelHelpers.extends({}, ViewBoxAttributes, {
        name: true
    });
    var PathAttributes = babelHelpers.extends({}, RenderableAttributes, {
        d: true
    });
    var TextSpecificAttributes = babelHelpers.extends({}, RenderableAttributes, {
        alignmentBaseline: true,
        baselineShift: true,
        verticalAlign: true,
        lengthAdjust: true,
        textLength: true
    });
    var TextAttributes = babelHelpers.extends({}, TextSpecificAttributes, {
        font: {
            diff: fontDiffer
        },
        deltaX: arrayDiffer,
        deltaY: arrayDiffer,
        rotate: arrayDiffer,
        positionX: arrayDiffer,
        positionY: arrayDiffer
    });
    var TextPathAttributes = babelHelpers.extends({}, TextSpecificAttributes, {
        href: true,
        startOffset: true,
        method: true,
        spacing: true,
        side: true,
        midLine: true
    });
    var TSpanAttibutes = babelHelpers.extends({}, TextAttributes, {
        content: true
    });
    var ClipPathAttributes = {
        name: true
    };
    var GradientAttributes = babelHelpers.extends({}, ClipPathAttributes, {
        gradient: {
            diff: arrayDiffer
        },
        gradientUnits: true,
        gradientTransform: {
            diff: arrayDiffer
        }
    });
    var LinearGradientAttributes = babelHelpers.extends({}, GradientAttributes, {
        x1: true,
        y1: true,
        x2: true,
        y2: true
    });
    var RadialGradientAttributes = babelHelpers.extends({}, GradientAttributes, {
        fx: true,
        fy: true,
        rx: true,
        ry: true,
        cx: true,
        cy: true,
        r: true
    });
    var CircleAttributes = babelHelpers.extends({}, RenderableAttributes, {
        cx: true,
        cy: true,
        r: true
    });
    var EllipseAttributes = babelHelpers.extends({}, RenderableAttributes, {
        cx: true,
        cy: true,
        rx: true,
        ry: true
    });
    var ImageAttributes = babelHelpers.extends({}, RenderableAttributes, {
        x: true,
        y: true,
        width: true,
        height: true,
        src: true,
        align: true,
        meetOrSlice: true
    });
    var LineAttributes = babelHelpers.extends({}, RenderableAttributes, {
        x1: true,
        y1: true,
        x2: true,
        y2: true
    });
    var RectAttributes = babelHelpers.extends({}, RenderableAttributes, {
        x: true,
        y: true,
        width: true,
        height: true,
        rx: true,
        ry: true
    });
    exports.PathAttributes = PathAttributes;
    exports.TextAttributes = TextAttributes;
    exports.TSpanAttibutes = TSpanAttibutes;
    exports.TextPathAttributes = TextPathAttributes;
    exports.GroupAttributes = GroupAttributes;
    exports.ClipPathAttributes = ClipPathAttributes;
    exports.CircleAttributes = CircleAttributes;
    exports.EllipseAttributes = EllipseAttributes;
    exports.ImageAttributes = ImageAttributes;
    exports.LineAttributes = LineAttributes;
    exports.RectAttributes = RectAttributes;
    exports.UseAttributes = UseAttributes;
    exports.SymbolAttributes = SymbolAttributes;
    exports.LinearGradientAttributes = LinearGradientAttributes;
    exports.RadialGradientAttributes = RadialGradientAttributes;
    exports.ViewBoxAttributes = ViewBoxAttributes;
},412,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react = _require(_dependencyMap[0]);

    var _SvgTouchableMixin = _require(_dependencyMap[1]);

    var _SvgTouchableMixin2 = babelHelpers.interopRequireDefault(_SvgTouchableMixin);

    var _lodash = _require(_dependencyMap[2]);

    var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

    var Shape = function (_Component) {
        babelHelpers.inherits(Shape, _Component);

        function Shape() {
            babelHelpers.classCallCheck(this, Shape);

            var _this = babelHelpers.possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));

            _lodash2.default.forEach(_SvgTouchableMixin2.default, function (method, key) {
                _this[key] = method.bind(_this);
            });

            _this.state = _this.touchableGetInitialState();
            return _this;
        }

        return Shape;
    }(_react.Component);

    exports.default = Shape;
},413,[103,414,348]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _Touchable = _require(_dependencyMap[0]);

    var _Touchable2 = babelHelpers.interopRequireDefault(_Touchable);

    var PRESS_RETENTION_OFFSET = {
        top: 20,
        left: 20,
        right: 20,
        bottom: 30
    };
    exports.default = babelHelpers.extends({}, _Touchable2.default.Mixin, {
        touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder(e) {
            if (this.props.onStartShouldSetResponder) {
                return this.props.onStartShouldSetResponder(e);
            } else {
                return _Touchable2.default.Mixin.touchableHandleStartShouldSetResponder.call(this, e);
            }
        },
        touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest(e) {
            if (this.props.onResponderTerminationRequest) {
                return this.props.onResponderTerminationRequest(e);
            } else {
                return _Touchable2.default.Mixin.touchableHandleResponderTerminationRequest.call(this, e);
            }
        },
        touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
            if (this.props.onResponderGrant) {
                return this.props.onResponderGrant(e);
            } else {
                return _Touchable2.default.Mixin.touchableHandleResponderGrant.call(this, e);
            }
        },
        touchableHandleResponderMove: function touchableHandleResponderMove(e) {
            if (this.props.onResponderMove) {
                return this.props.onResponderMove(e);
            } else {
                return _Touchable2.default.Mixin.touchableHandleResponderMove.call(this, e);
            }
        },
        touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
            if (this.props.onResponderRelease) {
                return this.props.onResponderRelease(e);
            } else {
                return _Touchable2.default.Mixin.touchableHandleResponderRelease.call(this, e);
            }
        },
        touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
            if (this.props.onResponderTerminate) {
                return this.props.onResponderTerminate(e);
            } else {
                return _Touchable2.default.Mixin.touchableHandleResponderTerminate.call(this, e);
            }
        },
        touchableHandlePress: function touchableHandlePress(e) {
            this.props.onPress && this.props.onPress(e);
        },
        touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
            this.props.onPressIn && this.props.onPressIn(e);
        },
        touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
            this.props.onPressOut && this.props.onPressOut(e);
        },
        touchableHandleLongPress: function touchableHandleLongPress(e) {
            this.props.onLongPress && this.props.onLongPress(e);
        },
        touchableGetPressRectOffset: function touchableGetPressRectOffset() {
            return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
        },
        touchableGetHitSlop: function touchableGetHitSlop() {
            return this.props.hitSlop;
        },
        touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
            return this.props.delayPressIn || 0;
        },
        touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
            return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
        },
        touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
            return this.props.delayPressOut || 0;
        }
    });
},414,[169]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.touchableProps = exports.responderProps = exports.pathProps = exports.clipProps = exports.textPathProps = exports.textProps = exports.fontProps = exports.strokeProps = exports.fillProps = exports.numberProp = undefined;

    var _propTypes = _require(_dependencyMap[0]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[1]);

    var numberProp = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]);

    var numberArrayProp = _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(numberProp), numberProp]);

    var touchableProps = {
        disabled: _propTypes2.default.bool,
        onPress: _propTypes2.default.func,
        onPressIn: _propTypes2.default.func,
        onPressOut: _propTypes2.default.func,
        onLongPress: _propTypes2.default.func,
        delayPressIn: _propTypes2.default.number,
        delayPressOut: _propTypes2.default.number,
        delayLongPress: _propTypes2.default.number
    };
    var responderProps = [].concat(babelHelpers.toConsumableArray(Object.keys(_reactNative.PanResponder.create({}).panHandlers)), ['pointerEvents']).reduce(function (props, name) {
        props[name] = _propTypes2.default.func;
        return props;
    }, {});
    var fillProps = {
        fill: _propTypes2.default.string,
        fillOpacity: numberProp,
        fillRule: _propTypes2.default.oneOf(['evenodd', 'nonzero'])
    };
    var clipProps = {
        clipRule: _propTypes2.default.oneOf(['evenodd', 'nonzero']),
        clipPath: _propTypes2.default.string
    };
    var definationProps = {
        name: _propTypes2.default.string
    };
    var strokeProps = {
        stroke: _propTypes2.default.string,
        strokeWidth: numberProp,
        strokeOpacity: numberProp,
        strokeDasharray: numberArrayProp,
        strokeDashoffset: numberProp,
        strokeLinecap: _propTypes2.default.oneOf(['butt', 'square', 'round']),
        strokeLinejoin: _propTypes2.default.oneOf(['miter', 'bevel', 'round']),
        strokeMiterlimit: numberProp
    };
    var transformProps = {
        scale: numberProp,
        scaleX: numberProp,
        scaleY: numberProp,
        rotate: numberProp,
        rotation: numberProp,
        translate: numberProp,
        translateX: numberProp,
        translateY: numberProp,
        x: numberProp,
        y: numberProp,
        origin: numberProp,
        originX: numberProp,
        originY: numberProp,
        skew: numberProp,
        skewX: numberProp,
        skewY: numberProp,
        transform: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string])
    };
    var pathProps = babelHelpers.extends({}, fillProps, strokeProps, clipProps, transformProps, responderProps, touchableProps, definationProps);

    var fontStyle = _propTypes2.default.oneOf(['normal', 'italic', 'oblique']);

    var fontVariant = _propTypes2.default.oneOf(['normal', 'small-caps']);

    var fontWeight = _propTypes2.default.oneOf(['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '700', '800', '900']);

    var fontStretch = _propTypes2.default.oneOf(['normal', 'wider', 'narrower', 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded']);

    var fontSize = numberProp;
    var fontFamily = _propTypes2.default.string;
    var font = _propTypes2.default.object;

    var textAnchor = _propTypes2.default.oneOf(['start', 'middle', 'end']);

    var textDecoration = _propTypes2.default.oneOf(['none', 'underline', 'overline', 'line-through', 'blink']);

    var letterSpacing = numberProp;
    var wordSpacing = numberProp;
    var kerning = numberProp;

    var fontVariantLigatures = _propTypes2.default.oneOf(['normal', 'none']);

    var fontProps = {
        fontStyle: fontStyle,
        fontVariant: fontVariant,
        fontWeight: fontWeight,
        fontStretch: fontStretch,
        fontSize: fontSize,
        fontFamily: fontFamily,
        textAnchor: textAnchor,
        textDecoration: textDecoration,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        kerning: kerning,
        fontVariantLigatures: fontVariantLigatures,
        font: font
    };

    var lengthAdjust = _propTypes2.default.oneOf(['spacing', 'spacingAndGlyphs']);

    var textLength = numberProp;
    var verticalAlign = numberProp;

    var alignmentBaseline = _propTypes2.default.oneOf(['baseline', 'text-bottom', 'alphabetic', 'ideographic', 'middle', 'central', 'mathematical', 'text-top', 'bottom', 'center', 'top', 'text-before-edge', 'text-after-edge', 'before-edge', 'after-edge', 'hanging']);

    var baselineShift = _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['sub', 'super', 'baseline']), _propTypes2.default.arrayOf(numberProp), numberProp]);

    var fontFeatureSettings = _propTypes2.default.string;
    var textSpecificProps = babelHelpers.extends({}, pathProps, fontProps, {
        alignmentBaseline: alignmentBaseline,
        baselineShift: baselineShift,
        verticalAlign: verticalAlign,
        lengthAdjust: lengthAdjust,
        textLength: textLength,
        fontData: _propTypes2.default.object,
        fontFeatureSettings: fontFeatureSettings
    });
    var textProps = babelHelpers.extends({}, textSpecificProps, {
        dx: numberArrayProp,
        dy: numberArrayProp
    });

    var side = _propTypes2.default.oneOf(['left', 'right']);

    var startOffset = numberProp;

    var method = _propTypes2.default.oneOf(['align', 'stretch']);

    var spacing = _propTypes2.default.oneOf(['auto', 'exact']);

    var midLine = _propTypes2.default.oneOf(['sharp', 'smooth']);

    var textPathProps = babelHelpers.extends({}, textSpecificProps, {
        href: _propTypes2.default.string.isRequired,
        startOffset: startOffset,
        method: method,
        spacing: spacing,
        side: side,
        midLine: midLine
    });
    exports.numberProp = numberProp;
    exports.fillProps = fillProps;
    exports.strokeProps = strokeProps;
    exports.fontProps = fontProps;
    exports.textProps = textProps;
    exports.textPathProps = textPathProps;
    exports.clipProps = clipProps;
    exports.pathProps = pathProps;
    exports.responderProps = responderProps;
    exports.touchableProps = touchableProps;
},415,[121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (props, ref) {
        var styleProperties = [];
        var extractedProps = {
            opacity: (0, _extractOpacity2.default)(props.opacity),
            propList: styleProperties
        };

        if (props.id) {
            extractedProps.name = props.id;
        }

        if (props.clipPath) {
            babelHelpers.extends(extractedProps, (0, _extractClipPath2.default)(props));
        }

        babelHelpers.extends(extractedProps, (0, _extractStroke2.default)(props, styleProperties));
        babelHelpers.extends(extractedProps, (0, _extractFill2.default)(props, styleProperties));
        extractedProps.matrix = (0, _extractTransform2.default)(props);
        babelHelpers.extends(extractedProps, (0, _extractTransform.props2transform)(props));
        babelHelpers.extends(extractedProps, (0, _extractResponder2.default)(props, ref));
        return extractedProps;
    };

    var _extractFill = _require(_dependencyMap[0]);

    var _extractFill2 = babelHelpers.interopRequireDefault(_extractFill);

    var _extractStroke = _require(_dependencyMap[1]);

    var _extractStroke2 = babelHelpers.interopRequireDefault(_extractStroke);

    var _extractTransform = _require(_dependencyMap[2]);

    var _extractTransform2 = babelHelpers.interopRequireDefault(_extractTransform);

    var _extractClipPath = _require(_dependencyMap[3]);

    var _extractClipPath2 = babelHelpers.interopRequireDefault(_extractClipPath);

    var _extractResponder = _require(_dependencyMap[4]);

    var _extractResponder2 = babelHelpers.interopRequireDefault(_extractResponder);

    var _extractOpacity = _require(_dependencyMap[5]);

    var _extractOpacity2 = babelHelpers.interopRequireDefault(_extractOpacity);
},416,[417,430,432,453,454,429]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (props, styleProperties) {
        fillKeys.forEach(function (name) {
            if (props.hasOwnProperty(name)) {
                styleProperties.push(name);
            }
        });
        return {
            fill: (0, _extractBrush2.default)(props.fill || '#000'),
            fillOpacity: (0, _extractOpacity2.default)(props.fillOpacity),
            fillRule: fillRules[props.fillRule] === 0 ? 0 : 1
        };
    };

    var _extractBrush = _require(_dependencyMap[0]);

    var _extractBrush2 = babelHelpers.interopRequireDefault(_extractBrush);

    var _extractOpacity = _require(_dependencyMap[1]);

    var _extractOpacity2 = babelHelpers.interopRequireDefault(_extractOpacity);

    var _props = _require(_dependencyMap[2]);

    var fillRules = {
        evenodd: 0,
        nonzero: 1
    };
    var fillKeys = Object.keys(_props.fillProps);
},417,[418,429,415]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (colorOrBrush) {
        if (colorOrBrush === 'none' || !colorOrBrush) {
            return null;
        }

        try {
            var matched = colorOrBrush.match(_patternReg2.default);

            if (matched) {
                return [1, matched[1]];
            } else {
                var _Color$rgb$array = (0, _color2.default)(colorOrBrush).rgb().array(),
                    _Color$rgb$array2 = babelHelpers.slicedToArray(_Color$rgb$array, 4),
                    r = _Color$rgb$array2[0],
                    g = _Color$rgb$array2[1],
                    b = _Color$rgb$array2[2],
                    _Color$rgb$array2$ = _Color$rgb$array2[3],
                    a = _Color$rgb$array2$ === undefined ? 1 : _Color$rgb$array2$;

                return [0, r / 255, g / 255, b / 255, a];
            }
        } catch (err) {
            console.warn("\"" + colorOrBrush + "\" is not a valid color or brush");
            return null;
        }
    };

    var _color = _require(_dependencyMap[0]);

    var _color2 = babelHelpers.interopRequireDefault(_color);

    var _patternReg = _require(_dependencyMap[1]);

    var _patternReg2 = babelHelpers.interopRequireDefault(_patternReg);
},418,[419,428]);
__d(function (global, _require, module, exports, _dependencyMap) {
	'use strict';

	var colorString = _require(_dependencyMap[0]);

	var convert = _require(_dependencyMap[1]);

	var _slice = [].slice;
	var skippedModels = ['keyword', 'gray', 'hex'];
	var hashedModelKeys = {};
	Object.keys(convert).forEach(function (model) {
		hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
	});
	var limiters = {};

	function Color(obj, model) {
		if (!(this instanceof Color)) {
			return new Color(obj, model);
		}

		if (model && model in skippedModels) {
			model = null;
		}

		if (model && !(model in convert)) {
			throw new Error('Unknown model: ' + model);
		}

		var i;
		var channels;

		if (!obj) {
			this.model = 'rgb';
			this.color = [0, 0, 0];
			this.valpha = 1;
		} else if (obj instanceof Color) {
			this.model = obj.model;
			this.color = obj.color.slice();
			this.valpha = obj.valpha;
		} else if (typeof obj === 'string') {
			var result = colorString.get(obj);

			if (result === null) {
				throw new Error('Unable to parse color from string: ' + obj);
			}

			this.model = result.model;
			channels = convert[this.model].channels;
			this.color = result.value.slice(0, channels);
			this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
		} else if (obj.length) {
			this.model = model || 'rgb';
			channels = convert[this.model].channels;

			var newArr = _slice.call(obj, 0, channels);

			this.color = zeroArray(newArr, channels);
			this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
		} else if (typeof obj === 'number') {
			obj &= 0xFFFFFF;
			this.model = 'rgb';
			this.color = [obj >> 16 & 0xFF, obj >> 8 & 0xFF, obj & 0xFF];
			this.valpha = 1;
		} else {
			this.valpha = 1;
			var keys = Object.keys(obj);

			if ('alpha' in obj) {
				keys.splice(keys.indexOf('alpha'), 1);
				this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
			}

			var hashedKeys = keys.sort().join('');

			if (!(hashedKeys in hashedModelKeys)) {
				throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
			}

			this.model = hashedModelKeys[hashedKeys];
			var labels = convert[this.model].labels;
			var color = [];

			for (i = 0; i < labels.length; i++) {
				color.push(obj[labels[i]]);
			}

			this.color = zeroArray(color);
		}

		if (limiters[this.model]) {
			channels = convert[this.model].channels;

			for (i = 0; i < channels; i++) {
				var limit = limiters[this.model][i];

				if (limit) {
					this.color[i] = limit(this.color[i]);
				}
			}
		}

		this.valpha = Math.max(0, Math.min(1, this.valpha));

		if (Object.freeze) {
			Object.freeze(this);
		}
	}

	Color.prototype = {
		toString: function toString() {
			return this.string();
		},
		toJSON: function toJSON() {
			return this[this.model]();
		},
		string: function string(places) {
			var self = this.model in colorString.to ? this : this.rgb();
			self = self.round(typeof places === 'number' ? places : 1);
			var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
			return colorString.to[self.model](args);
		},
		percentString: function percentString(places) {
			var self = this.rgb().round(typeof places === 'number' ? places : 1);
			var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
			return colorString.to.rgb.percent(args);
		},
		array: function array() {
			return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
		},
		object: function object() {
			var result = {};
			var channels = convert[this.model].channels;
			var labels = convert[this.model].labels;

			for (var i = 0; i < channels; i++) {
				result[labels[i]] = this.color[i];
			}

			if (this.valpha !== 1) {
				result.alpha = this.valpha;
			}

			return result;
		},
		unitArray: function unitArray() {
			var rgb = this.rgb().color;
			rgb[0] /= 255;
			rgb[1] /= 255;
			rgb[2] /= 255;

			if (this.valpha !== 1) {
				rgb.push(this.valpha);
			}

			return rgb;
		},
		unitObject: function unitObject() {
			var rgb = this.rgb().object();
			rgb.r /= 255;
			rgb.g /= 255;
			rgb.b /= 255;

			if (this.valpha !== 1) {
				rgb.alpha = this.valpha;
			}

			return rgb;
		},
		round: function round(places) {
			places = Math.max(places || 0, 0);
			return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
		},
		alpha: function alpha(val) {
			if (arguments.length) {
				return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
			}

			return this.valpha;
		},
		red: getset('rgb', 0, maxfn(255)),
		green: getset('rgb', 1, maxfn(255)),
		blue: getset('rgb', 2, maxfn(255)),
		hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) {
			return (val % 360 + 360) % 360;
		}),
		saturationl: getset('hsl', 1, maxfn(100)),
		lightness: getset('hsl', 2, maxfn(100)),
		saturationv: getset('hsv', 1, maxfn(100)),
		value: getset('hsv', 2, maxfn(100)),
		chroma: getset('hcg', 1, maxfn(100)),
		gray: getset('hcg', 2, maxfn(100)),
		white: getset('hwb', 1, maxfn(100)),
		wblack: getset('hwb', 2, maxfn(100)),
		cyan: getset('cmyk', 0, maxfn(100)),
		magenta: getset('cmyk', 1, maxfn(100)),
		yellow: getset('cmyk', 2, maxfn(100)),
		black: getset('cmyk', 3, maxfn(100)),
		x: getset('xyz', 0, maxfn(100)),
		y: getset('xyz', 1, maxfn(100)),
		z: getset('xyz', 2, maxfn(100)),
		l: getset('lab', 0, maxfn(100)),
		a: getset('lab', 1),
		b: getset('lab', 2),
		keyword: function keyword(val) {
			if (arguments.length) {
				return new Color(val);
			}

			return convert[this.model].keyword(this.color);
		},
		hex: function hex(val) {
			if (arguments.length) {
				return new Color(val);
			}

			return colorString.to.hex(this.rgb().round().color);
		},
		rgbNumber: function rgbNumber() {
			var rgb = this.rgb().color;
			return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;
		},
		luminosity: function luminosity() {
			var rgb = this.rgb().color;
			var lum = [];

			for (var i = 0; i < rgb.length; i++) {
				var chan = rgb[i] / 255;
				lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
			}

			return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
		},
		contrast: function contrast(color2) {
			var lum1 = this.luminosity();
			var lum2 = color2.luminosity();

			if (lum1 > lum2) {
				return (lum1 + 0.05) / (lum2 + 0.05);
			}

			return (lum2 + 0.05) / (lum1 + 0.05);
		},
		level: function level(color2) {
			var contrastRatio = this.contrast(color2);

			if (contrastRatio >= 7.1) {
				return 'AAA';
			}

			return contrastRatio >= 4.5 ? 'AA' : '';
		},
		dark: function dark() {
			var rgb = this.rgb().color;
			var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
			return yiq < 128;
		},
		light: function light() {
			return !this.dark();
		},
		negate: function negate() {
			var rgb = this.rgb();

			for (var i = 0; i < 3; i++) {
				rgb.color[i] = 255 - rgb.color[i];
			}

			return rgb;
		},
		lighten: function lighten(ratio) {
			var hsl = this.hsl();
			hsl.color[2] += hsl.color[2] * ratio;
			return hsl;
		},
		darken: function darken(ratio) {
			var hsl = this.hsl();
			hsl.color[2] -= hsl.color[2] * ratio;
			return hsl;
		},
		saturate: function saturate(ratio) {
			var hsl = this.hsl();
			hsl.color[1] += hsl.color[1] * ratio;
			return hsl;
		},
		desaturate: function desaturate(ratio) {
			var hsl = this.hsl();
			hsl.color[1] -= hsl.color[1] * ratio;
			return hsl;
		},
		whiten: function whiten(ratio) {
			var hwb = this.hwb();
			hwb.color[1] += hwb.color[1] * ratio;
			return hwb;
		},
		blacken: function blacken(ratio) {
			var hwb = this.hwb();
			hwb.color[2] += hwb.color[2] * ratio;
			return hwb;
		},
		grayscale: function grayscale() {
			var rgb = this.rgb().color;
			var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
			return Color.rgb(val, val, val);
		},
		fade: function fade(ratio) {
			return this.alpha(this.valpha - this.valpha * ratio);
		},
		opaquer: function opaquer(ratio) {
			return this.alpha(this.valpha + this.valpha * ratio);
		},
		rotate: function rotate(degrees) {
			var hsl = this.hsl();
			var hue = hsl.color[0];
			hue = (hue + degrees) % 360;
			hue = hue < 0 ? 360 + hue : hue;
			hsl.color[0] = hue;
			return hsl;
		},
		mix: function mix(mixinColor, weight) {
			var color1 = mixinColor.rgb();
			var color2 = this.rgb();
			var p = weight === undefined ? 0.5 : weight;
			var w = 2 * p - 1;
			var a = color1.alpha() - color2.alpha();
			var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
			var w2 = 1 - w1;
			return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
		}
	};
	Object.keys(convert).forEach(function (model) {
		if (skippedModels.indexOf(model) !== -1) {
			return;
		}

		var channels = convert[model].channels;

		Color.prototype[model] = function () {
			if (this.model === model) {
				return new Color(this);
			}

			if (arguments.length) {
				return new Color(arguments, model);
			}

			var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
			return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
		};

		Color[model] = function (color) {
			if (typeof color === 'number') {
				color = zeroArray(_slice.call(arguments), channels);
			}

			return new Color(color, model);
		};
	});

	function roundTo(num, places) {
		return Number(num.toFixed(places));
	}

	function roundToPlace(places) {
		return function (num) {
			return roundTo(num, places);
		};
	}

	function getset(model, channel, modifier) {
		model = Array.isArray(model) ? model : [model];
		model.forEach(function (m) {
			(limiters[m] || (limiters[m] = []))[channel] = modifier;
		});
		model = model[0];
		return function (val) {
			var result;

			if (arguments.length) {
				if (modifier) {
					val = modifier(val);
				}

				result = this[model]();
				result.color[channel] = val;
				return result;
			}

			result = this[model]().color[channel];

			if (modifier) {
				result = modifier(result);
			}

			return result;
		};
	}

	function maxfn(max) {
		return function (v) {
			return Math.max(0, Math.min(max, v));
		};
	}

	function assertArray(val) {
		return Array.isArray(val) ? val : [val];
	}

	function zeroArray(arr, length) {
		for (var i = 0; i < length; i++) {
			if (typeof arr[i] !== 'number') {
				arr[i] = 0;
			}
		}

		return arr;
	}

	module.exports = Color;
},419,[420,424]);
__d(function (global, _require, module, exports, _dependencyMap) {
	var colorNames = _require(_dependencyMap[0]);

	var swizzle = _require(_dependencyMap[1]);

	var reverseNames = {};

	for (var name in colorNames) {
		if (colorNames.hasOwnProperty(name)) {
			reverseNames[colorNames[name]] = name;
		}
	}

	var cs = module.exports = {
		to: {},
		get: {}
	};

	cs.get = function (string) {
		var prefix = string.substring(0, 3).toLowerCase();
		var val;
		var model;

		switch (prefix) {
			case 'hsl':
				val = cs.get.hsl(string);
				model = 'hsl';
				break;

			case 'hwb':
				val = cs.get.hwb(string);
				model = 'hwb';
				break;

			default:
				val = cs.get.rgb(string);
				model = 'rgb';
				break;
		}

		if (!val) {
			return null;
		}

		return {
			model: model,
			value: val
		};
	};

	cs.get.rgb = function (string) {
		if (!string) {
			return null;
		}

		var abbr = /^#([a-f0-9]{3,4})$/i;
		var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
		var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var keyword = /(\D+)/;
		var rgb = [0, 0, 0, 1];
		var match;
		var i;
		var hexAlpha;

		if (match = string.match(hex)) {
			hexAlpha = match[2];
			match = match[1];

			for (i = 0; i < 3; i++) {
				var i2 = i * 2;
				rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
			}

			if (hexAlpha) {
				rgb[3] = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
			}
		} else if (match = string.match(abbr)) {
			match = match[1];
			hexAlpha = match[3];

			for (i = 0; i < 3; i++) {
				rgb[i] = parseInt(match[i] + match[i], 16);
			}

			if (hexAlpha) {
				rgb[3] = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
			}
		} else if (match = string.match(rgba)) {
			for (i = 0; i < 3; i++) {
				rgb[i] = parseInt(match[i + 1], 0);
			}

			if (match[4]) {
				rgb[3] = parseFloat(match[4]);
			}
		} else if (match = string.match(per)) {
			for (i = 0; i < 3; i++) {
				rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
			}

			if (match[4]) {
				rgb[3] = parseFloat(match[4]);
			}
		} else if (match = string.match(keyword)) {
			if (match[1] === 'transparent') {
				return [0, 0, 0, 0];
			}

			rgb = colorNames[match[1]];

			if (!rgb) {
				return null;
			}

			rgb[3] = 1;
			return rgb;
		} else {
			return null;
		}

		for (i = 0; i < 3; i++) {
			rgb[i] = clamp(rgb[i], 0, 255);
		}

		rgb[3] = clamp(rgb[3], 0, 1);
		return rgb;
	};

	cs.get.hsl = function (string) {
		if (!string) {
			return null;
		}

		var hsl = /^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var match = string.match(hsl);

		if (match) {
			var alpha = parseFloat(match[4]);
			var h = (parseFloat(match[1]) + 360) % 360;
			var s = clamp(parseFloat(match[2]), 0, 100);
			var l = clamp(parseFloat(match[3]), 0, 100);
			var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
			return [h, s, l, a];
		}

		return null;
	};

	cs.get.hwb = function (string) {
		if (!string) {
			return null;
		}

		var hwb = /^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
		var match = string.match(hwb);

		if (match) {
			var alpha = parseFloat(match[4]);
			var h = (parseFloat(match[1]) % 360 + 360) % 360;
			var w = clamp(parseFloat(match[2]), 0, 100);
			var b = clamp(parseFloat(match[3]), 0, 100);
			var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
			return [h, w, b, a];
		}

		return null;
	};

	cs.to.hex = function () {
		var rgba = swizzle(arguments);
		return '#' + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : '');
	};

	cs.to.rgb = function () {
		var rgba = swizzle(arguments);
		return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')' : 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
	};

	cs.to.rgb.percent = function () {
		var rgba = swizzle(arguments);
		var r = Math.round(rgba[0] / 255 * 100);
		var g = Math.round(rgba[1] / 255 * 100);
		var b = Math.round(rgba[2] / 255 * 100);
		return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)' : 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
	};

	cs.to.hsl = function () {
		var hsla = swizzle(arguments);
		return hsla.length < 4 || hsla[3] === 1 ? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)' : 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
	};

	cs.to.hwb = function () {
		var hwba = swizzle(arguments);
		var a = '';

		if (hwba.length >= 4 && hwba[3] !== 1) {
			a = ', ' + hwba[3];
		}

		return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
	};

	cs.to.keyword = function (rgb) {
		return reverseNames[rgb.slice(0, 3)];
	};

	function clamp(num, min, max) {
		return Math.min(Math.max(min, num), max);
	}

	function hexDouble(num) {
		var str = num.toString(16).toUpperCase();
		return str.length < 2 ? '0' + str : str;
	}
},420,[421,422]);
__d(function (global, _require, module, exports, _dependencyMap) {
	'use strict';

	module.exports = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};
},421,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	'use strict';

	var isArrayish = _require(_dependencyMap[0]);

	var concat = Array.prototype.concat;
	var slice = Array.prototype.slice;

	var swizzle = module.exports = function swizzle(args) {
		var results = [];

		for (var i = 0, len = args.length; i < len; i++) {
			var arg = args[i];

			if (isArrayish(arg)) {
				results = concat.call(results, slice.call(arg));
			} else {
				results.push(arg);
			}
		}

		return results;
	};

	swizzle.wrap = function (fn) {
		return function () {
			return fn(swizzle(arguments));
		};
	};
},422,[423]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = function isArrayish(obj) {
		if (!obj || typeof obj === 'string') {
			return false;
		}

		return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== 'String');
	};
},423,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	var conversions = _require(_dependencyMap[0]);

	var route = _require(_dependencyMap[1]);

	var convert = {};
	var models = Object.keys(conversions);

	function wrapRaw(fn) {
		var wrappedFn = function wrappedFn(args) {
			if (args === undefined || args === null) {
				return args;
			}

			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}

			return fn(args);
		};

		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	function wrapRounded(fn) {
		var wrappedFn = function wrappedFn(args) {
			if (args === undefined || args === null) {
				return args;
			}

			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}

			var result = fn(args);

			if (typeof result === 'object') {
				for (var len = result.length, i = 0; i < len; i++) {
					result[i] = Math.round(result[i]);
				}
			}

			return result;
		};

		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	models.forEach(function (fromModel) {
		convert[fromModel] = {};
		Object.defineProperty(convert[fromModel], 'channels', {
			value: conversions[fromModel].channels
		});
		Object.defineProperty(convert[fromModel], 'labels', {
			value: conversions[fromModel].labels
		});
		var routes = route(fromModel);
		var routeModels = Object.keys(routes);
		routeModels.forEach(function (toModel) {
			var fn = routes[toModel];
			convert[fromModel][toModel] = wrapRounded(fn);
			convert[fromModel][toModel].raw = wrapRaw(fn);
		});
	});
	module.exports = convert;
},424,[425,427]);
__d(function (global, _require, module, exports, _dependencyMap) {
	var cssKeywords = _require(_dependencyMap[0]);

	var reverseKeywords = {};

	for (var key in cssKeywords) {
		if (cssKeywords.hasOwnProperty(key)) {
			reverseKeywords[cssKeywords[key]] = key;
		}
	}

	var convert = module.exports = {
		rgb: {
			channels: 3,
			labels: 'rgb'
		},
		hsl: {
			channels: 3,
			labels: 'hsl'
		},
		hsv: {
			channels: 3,
			labels: 'hsv'
		},
		hwb: {
			channels: 3,
			labels: 'hwb'
		},
		cmyk: {
			channels: 4,
			labels: 'cmyk'
		},
		xyz: {
			channels: 3,
			labels: 'xyz'
		},
		lab: {
			channels: 3,
			labels: 'lab'
		},
		lch: {
			channels: 3,
			labels: 'lch'
		},
		hex: {
			channels: 1,
			labels: ['hex']
		},
		keyword: {
			channels: 1,
			labels: ['keyword']
		},
		ansi16: {
			channels: 1,
			labels: ['ansi16']
		},
		ansi256: {
			channels: 1,
			labels: ['ansi256']
		},
		hcg: {
			channels: 3,
			labels: ['h', 'c', 'g']
		},
		apple: {
			channels: 3,
			labels: ['r16', 'g16', 'b16']
		},
		gray: {
			channels: 1,
			labels: ['gray']
		}
	};

	for (var model in convert) {
		if (convert.hasOwnProperty(model)) {
			if (!('channels' in convert[model])) {
				throw new Error('missing channels property: ' + model);
			}

			if (!('labels' in convert[model])) {
				throw new Error('missing channel labels property: ' + model);
			}

			if (convert[model].labels.length !== convert[model].channels) {
				throw new Error('channel and label counts mismatch: ' + model);
			}

			var channels = convert[model].channels;
			var labels = convert[model].labels;
			delete convert[model].channels;
			delete convert[model].labels;
			Object.defineProperty(convert[model], 'channels', {
				value: channels
			});
			Object.defineProperty(convert[model], 'labels', {
				value: labels
			});
		}
	}

	convert.rgb.hsl = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var min = Math.min(r, g, b);
		var max = Math.max(r, g, b);
		var delta = max - min;
		var h;
		var s;
		var l;

		if (max === min) {
			h = 0;
		} else if (r === max) {
			h = (g - b) / delta;
		} else if (g === max) {
			h = 2 + (b - r) / delta;
		} else if (b === max) {
			h = 4 + (r - g) / delta;
		}

		h = Math.min(h * 60, 360);

		if (h < 0) {
			h += 360;
		}

		l = (min + max) / 2;

		if (max === min) {
			s = 0;
		} else if (l <= 0.5) {
			s = delta / (max + min);
		} else {
			s = delta / (2 - max - min);
		}

		return [h, s * 100, l * 100];
	};

	convert.rgb.hsv = function (rgb) {
		var rdif;
		var gdif;
		var bdif;
		var h;
		var s;
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var v = Math.max(r, g, b);
		var diff = v - Math.min(r, g, b);

		var diffc = function diffc(c) {
			return (v - c) / 6 / diff + 0.5;
		};

		if (diff === 0) {
			h = s = 0;
		} else {
			s = diff / v;
			rdif = diffc(r);
			gdif = diffc(g);
			bdif = diffc(b);

			if (r === v) {
				h = bdif - gdif;
			} else if (g === v) {
				h = 0.3333333333333333 + rdif - bdif;
			} else if (b === v) {
				h = 0.6666666666666666 + gdif - rdif;
			}

			if (h < 0) {
				h += 1;
			} else if (h > 1) {
				h -= 1;
			}
		}

		return [h * 360, s * 100, v * 100];
	};

	convert.rgb.hwb = function (rgb) {
		var r = rgb[0];
		var g = rgb[1];
		var b = rgb[2];
		var h = convert.rgb.hsl(rgb)[0];
		var w = 0.00392156862745098 * Math.min(r, Math.min(g, b));
		b = 1 - 0.00392156862745098 * Math.max(r, Math.max(g, b));
		return [h, w * 100, b * 100];
	};

	convert.rgb.cmyk = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var c;
		var m;
		var y;
		var k;
		k = Math.min(1 - r, 1 - g, 1 - b);
		c = (1 - r - k) / (1 - k) || 0;
		m = (1 - g - k) / (1 - k) || 0;
		y = (1 - b - k) / (1 - k) || 0;
		return [c * 100, m * 100, y * 100, k * 100];
	};

	function comparativeDistance(x, y) {
		return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
	}

	convert.rgb.keyword = function (rgb) {
		var reversed = reverseKeywords[rgb];

		if (reversed) {
			return reversed;
		}

		var currentClosestDistance = Infinity;
		var currentClosestKeyword;

		for (var keyword in cssKeywords) {
			if (cssKeywords.hasOwnProperty(keyword)) {
				var value = cssKeywords[keyword];
				var distance = comparativeDistance(rgb, value);

				if (distance < currentClosestDistance) {
					currentClosestDistance = distance;
					currentClosestKeyword = keyword;
				}
			}
		}

		return currentClosestKeyword;
	};

	convert.keyword.rgb = function (keyword) {
		return cssKeywords[keyword];
	};

	convert.rgb.xyz = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
		g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
		b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
		var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
		var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
		var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
		return [x * 100, y * 100, z * 100];
	};

	convert.rgb.lab = function (rgb) {
		var xyz = convert.rgb.xyz(rgb);
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;
		x /= 95.047;
		y /= 100;
		z /= 108.883;
		x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
		y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
		z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
		l = 116 * y - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);
		return [l, a, b];
	};

	convert.hsl.rgb = function (hsl) {
		var h = hsl[0] / 360;
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var t1;
		var t2;
		var t3;
		var rgb;
		var val;

		if (s === 0) {
			val = l * 255;
			return [val, val, val];
		}

		if (l < 0.5) {
			t2 = l * (1 + s);
		} else {
			t2 = l + s - l * s;
		}

		t1 = 2 * l - t2;
		rgb = [0, 0, 0];

		for (var i = 0; i < 3; i++) {
			t3 = h + 0.3333333333333333 * -(i - 1);

			if (t3 < 0) {
				t3++;
			}

			if (t3 > 1) {
				t3--;
			}

			if (6 * t3 < 1) {
				val = t1 + (t2 - t1) * 6 * t3;
			} else if (2 * t3 < 1) {
				val = t2;
			} else if (3 * t3 < 2) {
				val = t1 + (t2 - t1) * (0.6666666666666666 - t3) * 6;
			} else {
				val = t1;
			}

			rgb[i] = val * 255;
		}

		return rgb;
	};

	convert.hsl.hsv = function (hsl) {
		var h = hsl[0];
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var smin = s;
		var lmin = Math.max(l, 0.01);
		var sv;
		var v;
		l *= 2;
		s *= l <= 1 ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		v = (l + s) / 2;
		sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
		return [h, sv * 100, v * 100];
	};

	convert.hsv.rgb = function (hsv) {
		var h = hsv[0] / 60;
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var hi = Math.floor(h) % 6;
		var f = h - Math.floor(h);
		var p = 255 * v * (1 - s);
		var q = 255 * v * (1 - s * f);
		var t = 255 * v * (1 - s * (1 - f));
		v *= 255;

		switch (hi) {
			case 0:
				return [v, t, p];

			case 1:
				return [q, v, p];

			case 2:
				return [p, v, t];

			case 3:
				return [p, q, v];

			case 4:
				return [t, p, v];

			case 5:
				return [v, p, q];
		}
	};

	convert.hsv.hsl = function (hsv) {
		var h = hsv[0];
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var vmin = Math.max(v, 0.01);
		var lmin;
		var sl;
		var l;
		l = (2 - s) * v;
		lmin = (2 - s) * vmin;
		sl = s * vmin;
		sl /= lmin <= 1 ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;
		return [h, sl * 100, l * 100];
	};

	convert.hwb.rgb = function (hwb) {
		var h = hwb[0] / 360;
		var wh = hwb[1] / 100;
		var bl = hwb[2] / 100;
		var ratio = wh + bl;
		var i;
		var v;
		var f;
		var n;

		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}

		i = Math.floor(6 * h);
		v = 1 - bl;
		f = 6 * h - i;

		if ((i & 0x01) !== 0) {
			f = 1 - f;
		}

		n = wh + f * (v - wh);
		var r;
		var g;
		var b;

		switch (i) {
			default:
			case 6:
			case 0:
				r = v;
				g = n;
				b = wh;
				break;

			case 1:
				r = n;
				g = v;
				b = wh;
				break;

			case 2:
				r = wh;
				g = v;
				b = n;
				break;

			case 3:
				r = wh;
				g = n;
				b = v;
				break;

			case 4:
				r = n;
				g = wh;
				b = v;
				break;

			case 5:
				r = v;
				g = wh;
				b = n;
				break;
		}

		return [r * 255, g * 255, b * 255];
	};

	convert.cmyk.rgb = function (cmyk) {
		var c = cmyk[0] / 100;
		var m = cmyk[1] / 100;
		var y = cmyk[2] / 100;
		var k = cmyk[3] / 100;
		var r;
		var g;
		var b;
		r = 1 - Math.min(1, c * (1 - k) + k);
		g = 1 - Math.min(1, m * (1 - k) + k);
		b = 1 - Math.min(1, y * (1 - k) + k);
		return [r * 255, g * 255, b * 255];
	};

	convert.xyz.rgb = function (xyz) {
		var x = xyz[0] / 100;
		var y = xyz[1] / 100;
		var z = xyz[2] / 100;
		var r;
		var g;
		var b;
		r = x * 3.2406 + y * -1.5372 + z * -0.4986;
		g = x * -0.9689 + y * 1.8758 + z * 0.0415;
		b = x * 0.0557 + y * -0.2040 + z * 1.0570;
		r = r > 0.0031308 ? 1.055 * Math.pow(r, 0.4166666666666667) - 0.055 : r * 12.92;
		g = g > 0.0031308 ? 1.055 * Math.pow(g, 0.4166666666666667) - 0.055 : g * 12.92;
		b = b > 0.0031308 ? 1.055 * Math.pow(b, 0.4166666666666667) - 0.055 : b * 12.92;
		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);
		return [r * 255, g * 255, b * 255];
	};

	convert.xyz.lab = function (xyz) {
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;
		x /= 95.047;
		y /= 100;
		z /= 108.883;
		x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
		y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
		z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
		l = 116 * y - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);
		return [l, a, b];
	};

	convert.lab.xyz = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var x;
		var y;
		var z;
		y = (l + 16) / 116;
		x = a / 500 + y;
		z = y - b / 200;
		var y2 = Math.pow(y, 3);
		var x2 = Math.pow(x, 3);
		var z2 = Math.pow(z, 3);
		y = y2 > 0.008856 ? y2 : (y - 0.13793103448275862) / 7.787;
		x = x2 > 0.008856 ? x2 : (x - 0.13793103448275862) / 7.787;
		z = z2 > 0.008856 ? z2 : (z - 0.13793103448275862) / 7.787;
		x *= 95.047;
		y *= 100;
		z *= 108.883;
		return [x, y, z];
	};

	convert.lab.lch = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var hr;
		var h;
		var c;
		hr = Math.atan2(b, a);
		h = hr * 360 / 2 / Math.PI;

		if (h < 0) {
			h += 360;
		}

		c = Math.sqrt(a * a + b * b);
		return [l, c, h];
	};

	convert.lch.lab = function (lch) {
		var l = lch[0];
		var c = lch[1];
		var h = lch[2];
		var a;
		var b;
		var hr;
		hr = h / 360 * 2 * Math.PI;
		a = c * Math.cos(hr);
		b = c * Math.sin(hr);
		return [l, a, b];
	};

	convert.rgb.ansi16 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];
		var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
		value = Math.round(value / 50);

		if (value === 0) {
			return 30;
		}

		var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

		if (value === 2) {
			ansi += 60;
		}

		return ansi;
	};

	convert.hsv.ansi16 = function (args) {
		return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
	};

	convert.rgb.ansi256 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];

		if (r === g && g === b) {
			if (r < 8) {
				return 16;
			}

			if (r > 248) {
				return 231;
			}

			return Math.round((r - 8) / 247 * 24) + 232;
		}

		var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
		return ansi;
	};

	convert.ansi16.rgb = function (args) {
		var color = args % 10;

		if (color === 0 || color === 7) {
			if (args > 50) {
				color += 3.5;
			}

			color = color / 10.5 * 255;
			return [color, color, color];
		}

		var mult = (~~(args > 50) + 1) * 0.5;
		var r = (color & 1) * mult * 255;
		var g = (color >> 1 & 1) * mult * 255;
		var b = (color >> 2 & 1) * mult * 255;
		return [r, g, b];
	};

	convert.ansi256.rgb = function (args) {
		if (args >= 232) {
			var c = (args - 232) * 10 + 8;
			return [c, c, c];
		}

		args -= 16;
		var rem;
		var r = Math.floor(args / 36) / 5 * 255;
		var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		var b = rem % 6 / 5 * 255;
		return [r, g, b];
	};

	convert.rgb.hex = function (args) {
		var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert.hex.rgb = function (args) {
		var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

		if (!match) {
			return [0, 0, 0];
		}

		var colorString = match[0];

		if (match[0].length === 3) {
			colorString = colorString.split('').map(function (char) {
				return char + char;
			}).join('');
		}

		var integer = parseInt(colorString, 16);
		var r = integer >> 16 & 0xFF;
		var g = integer >> 8 & 0xFF;
		var b = integer & 0xFF;
		return [r, g, b];
	};

	convert.rgb.hcg = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var max = Math.max(Math.max(r, g), b);
		var min = Math.min(Math.min(r, g), b);
		var chroma = max - min;
		var grayscale;
		var hue;

		if (chroma < 1) {
			grayscale = min / (1 - chroma);
		} else {
			grayscale = 0;
		}

		if (chroma <= 0) {
			hue = 0;
		} else if (max === r) {
			hue = (g - b) / chroma % 6;
		} else if (max === g) {
			hue = 2 + (b - r) / chroma;
		} else {
			hue = 4 + (r - g) / chroma + 4;
		}

		hue /= 6;
		hue %= 1;
		return [hue * 360, chroma * 100, grayscale * 100];
	};

	convert.hsl.hcg = function (hsl) {
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var c = 1;
		var f = 0;

		if (l < 0.5) {
			c = 2.0 * s * l;
		} else {
			c = 2.0 * s * (1.0 - l);
		}

		if (c < 1.0) {
			f = (l - 0.5 * c) / (1.0 - c);
		}

		return [hsl[0], c * 100, f * 100];
	};

	convert.hsv.hcg = function (hsv) {
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var c = s * v;
		var f = 0;

		if (c < 1.0) {
			f = (v - c) / (1 - c);
		}

		return [hsv[0], c * 100, f * 100];
	};

	convert.hcg.rgb = function (hcg) {
		var h = hcg[0] / 360;
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;

		if (c === 0.0) {
			return [g * 255, g * 255, g * 255];
		}

		var pure = [0, 0, 0];
		var hi = h % 1 * 6;
		var v = hi % 1;
		var w = 1 - v;
		var mg = 0;

		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1;
				pure[1] = v;
				pure[2] = 0;
				break;

			case 1:
				pure[0] = w;
				pure[1] = 1;
				pure[2] = 0;
				break;

			case 2:
				pure[0] = 0;
				pure[1] = 1;
				pure[2] = v;
				break;

			case 3:
				pure[0] = 0;
				pure[1] = w;
				pure[2] = 1;
				break;

			case 4:
				pure[0] = v;
				pure[1] = 0;
				pure[2] = 1;
				break;

			default:
				pure[0] = 1;
				pure[1] = 0;
				pure[2] = w;
		}

		mg = (1.0 - c) * g;
		return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
	};

	convert.hcg.hsv = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var v = c + g * (1.0 - c);
		var f = 0;

		if (v > 0.0) {
			f = c / v;
		}

		return [hcg[0], f * 100, v * 100];
	};

	convert.hcg.hsl = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var l = g * (1.0 - c) + 0.5 * c;
		var s = 0;

		if (l > 0.0 && l < 0.5) {
			s = c / (2 * l);
		} else if (l >= 0.5 && l < 1.0) {
			s = c / (2 * (1 - l));
		}

		return [hcg[0], s * 100, l * 100];
	};

	convert.hcg.hwb = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var v = c + g * (1.0 - c);
		return [hcg[0], (v - c) * 100, (1 - v) * 100];
	};

	convert.hwb.hcg = function (hwb) {
		var w = hwb[1] / 100;
		var b = hwb[2] / 100;
		var v = 1 - b;
		var c = v - w;
		var g = 0;

		if (c < 1) {
			g = (v - c) / (1 - c);
		}

		return [hwb[0], c * 100, g * 100];
	};

	convert.apple.rgb = function (apple) {
		return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
	};

	convert.rgb.apple = function (rgb) {
		return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
	};

	convert.gray.rgb = function (args) {
		return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
	};

	convert.gray.hsl = convert.gray.hsv = function (args) {
		return [0, 0, args[0]];
	};

	convert.gray.hwb = function (gray) {
		return [0, 100, gray[0]];
	};

	convert.gray.cmyk = function (gray) {
		return [0, 0, 0, gray[0]];
	};

	convert.gray.lab = function (gray) {
		return [gray[0], 0, 0];
	};

	convert.gray.hex = function (gray) {
		var val = Math.round(gray[0] / 100 * 255) & 0xFF;
		var integer = (val << 16) + (val << 8) + val;
		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert.rgb.gray = function (rgb) {
		var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};
},425,[426]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};
},426,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	var conversions = _require(_dependencyMap[0]);

	function buildGraph() {
		var graph = {};
		var models = Object.keys(conversions);

		for (var len = models.length, i = 0; i < len; i++) {
			graph[models[i]] = {
				distance: -1,
				parent: null
			};
		}

		return graph;
	}

	function deriveBFS(fromModel) {
		var graph = buildGraph();
		var queue = [fromModel];
		graph[fromModel].distance = 0;

		while (queue.length) {
			var current = queue.pop();
			var adjacents = Object.keys(conversions[current]);

			for (var len = adjacents.length, i = 0; i < len; i++) {
				var adjacent = adjacents[i];
				var node = graph[adjacent];

				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}

		return graph;
	}

	function link(from, to) {
		return function (args) {
			return to(from(args));
		};
	}

	function wrapConversion(toModel, graph) {
		var path = [graph[toModel].parent, toModel];
		var fn = conversions[graph[toModel].parent][toModel];
		var cur = graph[toModel].parent;

		while (graph[cur].parent) {
			path.unshift(graph[cur].parent);
			fn = link(conversions[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}

		fn.conversion = path;
		return fn;
	}

	module.exports = function (fromModel) {
		var graph = deriveBFS(fromModel);
		var conversion = {};
		var models = Object.keys(graph);

		for (var len = models.length, i = 0; i < len; i++) {
			var toModel = models[i];
			var node = graph[toModel];

			if (node.parent === null) {
				continue;
			}

			conversion[toModel] = wrapConversion(toModel, graph);
		}

		return conversion;
	};
},427,[425]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = /^url\(#(.+?)\)$/;
},428,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (opacity) {
        var value = +opacity;
        return typeof value !== 'number' || isNaN(value) ? 1 : value;
    };
},429,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (props, styleProperties) {
        strokeKeys.forEach(function (name) {
            if (props.hasOwnProperty(name)) {
                styleProperties.push(name);
            }
        });
        var stroke = props.stroke;
        var strokeWidth = props.strokeWidth,
            strokeDasharray = props.strokeDasharray;

        if (!strokeDasharray || strokeDasharray === 'none') {
            strokeDasharray = null;
        } else {
            strokeDasharray = (0, _extractLengthList2.default)(strokeDasharray);

            if (strokeDasharray && strokeDasharray.length % 2 === 1) {
                strokeDasharray = strokeDasharray.concat(strokeDasharray);
            }
        }

        if (!strokeWidth || typeof strokeWidth !== 'string') {
            strokeWidth = "" + (strokeWidth || 1);
        }

        return {
            stroke: (0, _extractBrush2.default)(stroke),
            strokeOpacity: (0, _extractOpacity2.default)(props.strokeOpacity),
            strokeLinecap: caps[props.strokeLinecap] || 0,
            strokeLinejoin: joins[props.strokeLinejoin] || 0,
            strokeDasharray: strokeDasharray,
            strokeWidth: strokeWidth,
            strokeDashoffset: strokeDasharray ? +props.strokeDashoffset || 0 : null,
            strokeMiterlimit: props.strokeMiterlimit || 4
        };
    };

    var _extractBrush = _require(_dependencyMap[0]);

    var _extractBrush2 = babelHelpers.interopRequireDefault(_extractBrush);

    var _extractOpacity = _require(_dependencyMap[1]);

    var _extractOpacity2 = babelHelpers.interopRequireDefault(_extractOpacity);

    var _props = _require(_dependencyMap[2]);

    var _extractLengthList = _require(_dependencyMap[3]);

    var _extractLengthList2 = babelHelpers.interopRequireDefault(_extractLengthList);

    var caps = {
        butt: 0,
        square: 2,
        round: 1
    };
    var joins = {
        miter: 0,
        bevel: 2,
        round: 1
    };
    var strokeKeys = Object.keys(_props.strokeProps);
},430,[418,429,415,431]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (lengthList) {
        if (typeof lengthList === 'string') {
            return lengthList.trim().replace(commaReg, ' ').split(spaceReg);
        } else if (typeof lengthList === 'number') {
            return ["" + lengthList];
        } else if (lengthList && typeof lengthList.map === 'function') {
            return lengthList.map(function (d) {
                return "" + d;
            });
        } else {
            return [];
        }
    };

    var spaceReg = /\s+/;
    var commaReg = /,/g;
},431,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.props2transform = props2transform;

    exports.default = function (props) {
        return transformToMatrix(props2transform(props), props.transform ? props2transform(props.transform) : null);
    };

    var _Matrix2D = _require(_dependencyMap[0]);

    var _Matrix2D2 = babelHelpers.interopRequireDefault(_Matrix2D);

    var _lodash = _require(_dependencyMap[1]);

    var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

    var _pegjs = _require(_dependencyMap[2]);

    var _pegjs2 = babelHelpers.interopRequireDefault(_pegjs);

    var pooledMatrix = new _Matrix2D2.default();

    function transformToMatrix(props, transform) {
        pooledMatrix.reset();
        appendTransform(props);

        if (transform) {
            appendTransform(transform);
        }

        return pooledMatrix.toArray();
    }

    var transformParser = _pegjs2.default.generate("\n{\n    var deg2rad = Math.PI / 180;\n\n    /*\n     \u2554\u2550        \u2550\u2557   \u2554\u2550        \u2550\u2557   \u2554\u2550     \u2550\u2557\n     \u2551 al cl el \u2551   \u2551 ar cr er \u2551   \u2551 a c e \u2551\n     \u2551 bl dl fl \u2551 * \u2551 br dr fr \u2551 = \u2551 b d f \u2551\n     \u2551 0  0  1  \u2551   \u2551 0  0  1  \u2551   \u2551 0 0 1 \u2551\n     \u255A\u2550        \u2550\u255D   \u255A\u2550        \u2550\u255D   \u255A\u2550     \u2550\u255D\n    */\n    function multiply_matrices(l, r) {\n        var [al, cl, el, bl, dl, fl] = l;\n        var [ar, cr, er, br, dr, fr] = r;\n\n        var a = al * ar + cl * br;\n        var c = al * cr + cl * dr;\n        var e = al * er + cl * fr + el;\n        var b = bl * ar + dl * br;\n        var d = bl * cr + dl * dr;\n        var f = bl * er + dl * fr + fl;\n\n        return [a, c, e, b, d, f];\n    }\n}\n\ntransformList\n    = wsp* ts:transforms? wsp* { return ts; }\n\ntransforms\n    = t:transform commaWsp* ts:transforms\n    {\n        return multiply_matrices(t, ts);\n    }\n    / t:transform\n\ntransform\n    = matrix\n    / translate\n    / scale\n    / rotate\n    / skewX\n    / skewY\n\nmatrix\n    = \"matrix\" wsp* \"(\" wsp*\n        a:number commaWsp\n        b:number commaWsp\n        c:number commaWsp\n        d:number commaWsp\n        e:number commaWsp\n        f:number wsp* \")\"\n    {\n        return [\n            a, c, e,\n            b, d, f\n        ];\n    }\n\ntranslate\n    = \"translate\" wsp* \"(\" wsp* tx:number ty:commaWspNumber? wsp* \")\"\n    {\n        return [\n            1, 0, tx,\n            0, 1, ty || 0\n        ];\n    }\n\nscale\n    = \"scale\" wsp* \"(\" wsp* sx:number sy:commaWspNumber? wsp* \")\"\n    {\n        return [\n            sx, 0,                     0,\n            0,  sy === null ? sx : sy, 0\n        ];\n    }\n\nrotate\n    = \"rotate\" wsp* \"(\" wsp* angle:number c:commaWspTwoNumbers? wsp* \")\"\n    {\n        var cos = Math.cos(deg2rad * angle);\n        var sin = Math.sin(deg2rad * angle);\n        if (c !== null) {\n            var [x, y] = c;\n            return [\n                cos, -sin, cos * -x + -sin * -y + x,\n                sin,  cos, sin * -x +  cos * -y + y\n            ];\n        }\n        return [\n            cos, -sin, 0,\n            sin,  cos, 0\n        ];\n    }\n\nskewX\n    = \"skewX\" wsp* \"(\" wsp* angle:number wsp* \")\"\n    {\n        return [\n            1, Math.tan(deg2rad * angle), 0,\n            0, 1,                         0\n        ];\n    }\n\nskewY\n    = \"skewY\" wsp* \"(\" wsp* angle:number wsp* \")\"\n    {\n        return [\n            1,                         0, 0,\n            Math.tan(deg2rad * angle), 1, 0\n        ];\n    }\n\nnumber\n    = f:(sign? floatingPointConstant) { return parseFloat(f.join(\"\")); }\n    / i:(sign? integerConstant) { return parseInt(i.join(\"\")); }\n\ncommaWspNumber\n    = commaWsp n:number { return n; }\n\ncommaWspTwoNumbers\n    = commaWsp n1:number commaWsp n2:number { return [n1, n2]; }\n\ncommaWsp\n    = (wsp+ comma? wsp*) / (comma wsp*)\n\ncomma\n    = \",\"\n\nintegerConstant\n    = ds:digitSequence { return ds.join(\"\"); }\n\nfloatingPointConstant\n    = f:(fractionalConstant exponent?) { return f.join(\"\"); }\n    / d:(digitSequence exponent) { return d.join(\"\"); }\n\nfractionalConstant \"fractionalConstant\"\n    = d1:digitSequence? \".\" d2:digitSequence { return [d1 ? d1.join(\"\") : null, \".\", d2.join(\"\")].join(\"\"); }\n    / d:digitSequence \".\" { return d.join(\"\"); }\n\nexponent\n    =  e:([eE] sign? digitSequence) { return [e[0], e[1], e[2].join(\"\")].join(\"\"); }\n\nsign\n    = [+-]\n\ndigitSequence\n    = digit+\n\ndigit\n    = [0-9]\n\nwsp\n    = [\\u0020\\u0009\\u000D\\u000A]\n");

    function appendTransform(transform) {
        if (transform) {
            if (typeof transform === 'string') {
                try {
                    var _transformParser$pars = transformParser.parse(transform),
                        _transformParser$pars2 = babelHelpers.slicedToArray(_transformParser$pars, 6),
                        a = _transformParser$pars2[0],
                        c = _transformParser$pars2[1],
                        e = _transformParser$pars2[2],
                        b = _transformParser$pars2[3],
                        d = _transformParser$pars2[4],
                        f = _transformParser$pars2[5];

                    pooledMatrix.append.apply(pooledMatrix, [a, b, c, d, e, f]);
                } catch (e) {
                    console.error(e);
                }
            } else {
                pooledMatrix.appendTransform(transform.x + transform.originX, transform.y + transform.originY, transform.scaleX, transform.scaleY, transform.rotation, transform.skewX, transform.skewY, transform.originX, transform.originY);
            }
        }
    }

    function universal2axis(universal, axisX, axisY, defaultValue) {
        var coords = [];
        var x = void 0;
        var y = void 0;

        if (_lodash2.default.isString(universal)) {
            coords = universal.split(/\s*,\s*/);

            if (coords.length === 2) {
                x = +coords[0];
                y = +coords[1];
            } else if (coords.length === 1) {
                x = y = +coords[0];
            }
        } else if (_lodash2.default.isNumber(universal)) {
            x = y = universal;
        }

        axisX = +axisX;

        if (!isNaN(axisX)) {
            x = axisX;
        }

        axisY = +axisY;

        if (!isNaN(axisY)) {
            y = axisY;
        }

        return [x || defaultValue || 0, y || defaultValue || 0];
    }

    function props2transform(props) {
        if (props && typeof props === 'string') {
            return props;
        }

        var _universal2axis = universal2axis(props.origin, props.originX, props.originY),
            _universal2axis2 = babelHelpers.slicedToArray(_universal2axis, 2),
            originX = _universal2axis2[0],
            originY = _universal2axis2[1];

        var _universal2axis3 = universal2axis(props.scale, props.scaleX, props.scaleY, 1),
            _universal2axis4 = babelHelpers.slicedToArray(_universal2axis3, 2),
            scaleX = _universal2axis4[0],
            scaleY = _universal2axis4[1];

        var _universal2axis5 = universal2axis(props.skew, props.skewX, props.skewY),
            _universal2axis6 = babelHelpers.slicedToArray(_universal2axis5, 2),
            skewX = _universal2axis6[0],
            skewY = _universal2axis6[1];

        var _universal2axis7 = universal2axis(props.translate, _lodash2.default.isNil(props.translateX) ? props.x || 0 : props.translateX, _lodash2.default.isNil(props.translateY) ? props.y || 0 : props.translateY),
            _universal2axis8 = babelHelpers.slicedToArray(_universal2axis7, 2),
            translateX = _universal2axis8[0],
            translateY = _universal2axis8[1];

        return {
            rotation: +props.rotation || 0,
            scaleX: scaleX,
            scaleY: scaleY,
            originX: originX,
            originY: originY,
            skewX: skewX,
            skewY: skewY,
            x: translateX,
            y: translateY
        };
    }
},432,[433,348,434]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _class, _temp, _initialiseProps;

    var DEG_TO_RAD = Math.PI / 180;
    var Matrix2D = (_temp = _class = function Matrix2D(a, b, c, d, tx, ty) {
        babelHelpers.classCallCheck(this, Matrix2D);

        _initialiseProps.call(this);

        this.setTransform(a, b, c, d, tx, ty);
    }, _initialiseProps = function _initialiseProps() {
        this.setTransform = function (a, b, c, d, tx, ty) {
            this.a = a === null || a === undefined ? 1 : a;
            this.b = b || 0;
            this.c = c || 0;
            this.d = d === null || d === undefined ? 1 : d;
            this.tx = tx || 0;
            this.ty = ty || 0;
            return this;
        };

        this.reset = function () {
            this.a = this.d = 1;
            this.b = this.c = this.tx = this.ty = 0;
            return this;
        };

        this.toArray = function () {
            return [this.a, this.b, this.c, this.d, this.tx, this.ty];
        };

        this.copy = function (matrix) {
            return this.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
        };

        this.clone = function () {
            return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);
        };

        this.prepend = function (a, b, c, d, tx, ty) {
            var a1 = this.a;
            var c1 = this.c;
            var tx1 = this.tx;
            this.a = a * a1 + c * this.b;
            this.b = b * a1 + d * this.b;
            this.c = a * c1 + c * this.d;
            this.d = b * c1 + d * this.d;
            this.tx = a * tx1 + c * this.ty + tx;
            this.ty = b * tx1 + d * this.ty + ty;
            return this;
        };

        this.append = function (a, b, c, d, tx, ty) {
            var a1 = this.a;
            var b1 = this.b;
            var c1 = this.c;
            var d1 = this.d;

            if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {
                this.a = a1 * a + c1 * b;
                this.b = b1 * a + d1 * b;
                this.c = a1 * c + c1 * d;
                this.d = b1 * c + d1 * d;
            }

            this.tx = a1 * tx + c1 * ty + this.tx;
            this.ty = b1 * tx + d1 * ty + this.ty;
            return this;
        };

        this.appendTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
            var cos = void 0,
                sin = void 0;

            if (rotation % 360) {
                var r = rotation * DEG_TO_RAD;
                cos = Math.cos(r);
                sin = Math.sin(r);
            } else {
                cos = 1;
                sin = 0;
            }

            if (skewX || skewY) {
                skewX *= DEG_TO_RAD;
                skewY *= DEG_TO_RAD;
                this.append(Math.cos(skewY), Math.sin(skewY), Math.sin(skewX), Math.cos(skewX), x, y);
                this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);
            } else {
                this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);
            }

            if (regX || regY) {
                this.tx -= regX * this.a + regY * this.c;
                this.ty -= regX * this.b + regY * this.d;
            }

            return this;
        };

        this.prependTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
            var cos = void 0,
                sin = void 0;

            if (rotation % 360) {
                var r = rotation * DEG_TO_RAD;
                cos = Math.cos(r);
                sin = Math.sin(r);
            } else {
                cos = 1;
                sin = 0;
            }

            if (regX || regY) {
                this.tx -= regX;
                this.ty -= regY;
            }

            if (skewX || skewY) {
                skewX *= DEG_TO_RAD;
                skewY *= DEG_TO_RAD;
                this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);
                this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);
            } else {
                this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);
            }

            return this;
        };
    }, _temp);
    exports.default = Matrix2D;
},433,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _require(_dependencyMap[0]),
      objects = _require(_dependencyMap[1]);

  var peg = {
    VERSION: "0.10.0",
    GrammarError: _require(_dependencyMap[2]),
    parser: _require(_dependencyMap[3]),
    compiler: _require(_dependencyMap[4]),
    generate: function generate(grammar, options) {
      options = options !== void 0 ? options : {};

      function convertPasses(passes) {
        var converted = {},
            stage;

        for (stage in passes) {
          if (passes.hasOwnProperty(stage)) {
            converted[stage] = objects.values(passes[stage]);
          }
        }

        return converted;
      }

      options = objects.clone(options);
      var plugins = "plugins" in options ? options.plugins : [],
          config = {
        parser: peg.parser,
        passes: convertPasses(peg.compiler.passes)
      };
      arrays.each(plugins, function (p) {
        p.use(config, options);
      });
      return peg.compiler.compile(config.parser.parse(grammar), config.passes, options);
    }
  };
  module.exports = peg;
},434,[435,436,437,439,440]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrays = {
    range: function range(start, stop) {
      var length = stop - start,
          result = new Array(length),
          i,
          j;

      for (i = 0, j = start; i < length; i++, j++) {
        result[i] = j;
      }

      return result;
    },
    find: function find(array, valueOrPredicate) {
      var length = array.length,
          i;

      if (typeof valueOrPredicate === "function") {
        for (i = 0; i < length; i++) {
          if (valueOrPredicate(array[i])) {
            return array[i];
          }
        }
      } else {
        for (i = 0; i < length; i++) {
          if (array[i] === valueOrPredicate) {
            return array[i];
          }
        }
      }
    },
    indexOf: function indexOf(array, valueOrPredicate) {
      var length = array.length,
          i;

      if (typeof valueOrPredicate === "function") {
        for (i = 0; i < length; i++) {
          if (valueOrPredicate(array[i])) {
            return i;
          }
        }
      } else {
        for (i = 0; i < length; i++) {
          if (array[i] === valueOrPredicate) {
            return i;
          }
        }
      }

      return -1;
    },
    contains: function contains(array, valueOrPredicate) {
      return arrays.indexOf(array, valueOrPredicate) !== -1;
    },
    each: function each(array, iterator) {
      var length = array.length,
          i;

      for (i = 0; i < length; i++) {
        iterator(array[i], i);
      }
    },
    map: function map(array, iterator) {
      var length = array.length,
          result = new Array(length),
          i;

      for (i = 0; i < length; i++) {
        result[i] = iterator(array[i], i);
      }

      return result;
    },
    pluck: function pluck(array, key) {
      return arrays.map(array, function (e) {
        return e[key];
      });
    },
    every: function every(array, predicate) {
      var length = array.length,
          i;

      for (i = 0; i < length; i++) {
        if (!predicate(array[i])) {
          return false;
        }
      }

      return true;
    },
    some: function some(array, predicate) {
      var length = array.length,
          i;

      for (i = 0; i < length; i++) {
        if (predicate(array[i])) {
          return true;
        }
      }

      return false;
    }
  };
  module.exports = arrays;
},435,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var objects = {
    keys: function keys(object) {
      var result = [],
          key;

      for (key in object) {
        if (object.hasOwnProperty(key)) {
          result.push(key);
        }
      }

      return result;
    },
    values: function values(object) {
      var result = [],
          key;

      for (key in object) {
        if (object.hasOwnProperty(key)) {
          result.push(object[key]);
        }
      }

      return result;
    },
    clone: function clone(object) {
      var result = {},
          key;

      for (key in object) {
        if (object.hasOwnProperty(key)) {
          result[key] = object[key];
        }
      }

      return result;
    },
    defaults: function defaults(object, _defaults) {
      var key;

      for (key in _defaults) {
        if (_defaults.hasOwnProperty(key)) {
          if (!(key in object)) {
            object[key] = _defaults[key];
          }
        }
      }
    }
  };
  module.exports = objects;
},436,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var classes = _require(_dependencyMap[0]);

  function GrammarError(message, location) {
    this.name = "GrammarError";
    this.message = message;
    this.location = location;

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, GrammarError);
    }
  }

  classes.subclass(GrammarError, Error);
  module.exports = GrammarError;
},437,[438]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var classes = {
    subclass: function subclass(child, parent) {
      function ctor() {
        this.constructor = child;
      }

      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
    }
  };
  module.exports = classes;
},438,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },
      "class": function _class(expectation) {
        var escapedParts = "",
            i;

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
        }

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },
      any: function any(expectation) {
        return "any character";
      },
      end: function end(expectation) {
        return "end of input";
      },
      other: function other(expectation) {
        return expectation.description;
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function classEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i,
          j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }

        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},
        peg$startRuleFunctions = {
      Grammar: peg$parseGrammar
    },
        peg$startRuleFunction = peg$parseGrammar,
        peg$c0 = function peg$c0(initializer, rules) {
      return {
        type: "grammar",
        initializer: extractOptional(initializer, 0),
        rules: extractList(rules, 0),
        location: location()
      };
    },
        peg$c1 = function peg$c1(code) {
      return {
        type: "initializer",
        code: code,
        location: location()
      };
    },
        peg$c2 = "=",
        peg$c3 = peg$literalExpectation("=", false),
        peg$c4 = function peg$c4(name, displayName, expression) {
      return {
        type: "rule",
        name: name,
        expression: displayName !== null ? {
          type: "named",
          name: displayName[0],
          expression: expression,
          location: location()
        } : expression,
        location: location()
      };
    },
        peg$c5 = "/",
        peg$c6 = peg$literalExpectation("/", false),
        peg$c7 = function peg$c7(head, tail) {
      return tail.length > 0 ? {
        type: "choice",
        alternatives: buildList(head, tail, 3),
        location: location()
      } : head;
    },
        peg$c8 = function peg$c8(expression, code) {
      return code !== null ? {
        type: "action",
        expression: expression,
        code: code[1],
        location: location()
      } : expression;
    },
        peg$c9 = function peg$c9(head, tail) {
      return tail.length > 0 ? {
        type: "sequence",
        elements: buildList(head, tail, 1),
        location: location()
      } : head;
    },
        peg$c10 = ":",
        peg$c11 = peg$literalExpectation(":", false),
        peg$c12 = function peg$c12(label, expression) {
      return {
        type: "labeled",
        label: label,
        expression: expression,
        location: location()
      };
    },
        peg$c13 = function peg$c13(operator, expression) {
      return {
        type: OPS_TO_PREFIXED_TYPES[operator],
        expression: expression,
        location: location()
      };
    },
        peg$c14 = "$",
        peg$c15 = peg$literalExpectation("$", false),
        peg$c16 = "&",
        peg$c17 = peg$literalExpectation("&", false),
        peg$c18 = "!",
        peg$c19 = peg$literalExpectation("!", false),
        peg$c20 = function peg$c20(expression, operator) {
      return {
        type: OPS_TO_SUFFIXED_TYPES[operator],
        expression: expression,
        location: location()
      };
    },
        peg$c21 = "?",
        peg$c22 = peg$literalExpectation("?", false),
        peg$c23 = "*",
        peg$c24 = peg$literalExpectation("*", false),
        peg$c25 = "+",
        peg$c26 = peg$literalExpectation("+", false),
        peg$c27 = "(",
        peg$c28 = peg$literalExpectation("(", false),
        peg$c29 = ")",
        peg$c30 = peg$literalExpectation(")", false),
        peg$c31 = function peg$c31(expression) {
      return expression.type === 'labeled' || expression.type === 'sequence' ? {
        type: "group",
        expression: expression
      } : expression;
    },
        peg$c32 = function peg$c32(name) {
      return {
        type: "rule_ref",
        name: name,
        location: location()
      };
    },
        peg$c33 = function peg$c33(operator, code) {
      return {
        type: OPS_TO_SEMANTIC_PREDICATE_TYPES[operator],
        code: code,
        location: location()
      };
    },
        peg$c34 = peg$anyExpectation(),
        peg$c35 = peg$otherExpectation("whitespace"),
        peg$c36 = "\t",
        peg$c37 = peg$literalExpectation("\t", false),
        peg$c38 = "\x0B",
        peg$c39 = peg$literalExpectation("\x0B", false),
        peg$c40 = "\f",
        peg$c41 = peg$literalExpectation("\f", false),
        peg$c42 = " ",
        peg$c43 = peg$literalExpectation(" ", false),
        peg$c44 = "\xA0",
        peg$c45 = peg$literalExpectation("\xA0", false),
        peg$c46 = "\uFEFF",
        peg$c47 = peg$literalExpectation("\uFEFF", false),
        peg$c48 = /^[\n\r\u2028\u2029]/,
        peg$c49 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false),
        peg$c50 = peg$otherExpectation("end of line"),
        peg$c51 = "\n",
        peg$c52 = peg$literalExpectation("\n", false),
        peg$c53 = "\r\n",
        peg$c54 = peg$literalExpectation("\r\n", false),
        peg$c55 = "\r",
        peg$c56 = peg$literalExpectation("\r", false),
        peg$c57 = "\u2028",
        peg$c58 = peg$literalExpectation("\u2028", false),
        peg$c59 = "\u2029",
        peg$c60 = peg$literalExpectation("\u2029", false),
        peg$c61 = peg$otherExpectation("comment"),
        peg$c62 = "/*",
        peg$c63 = peg$literalExpectation("/*", false),
        peg$c64 = "*/",
        peg$c65 = peg$literalExpectation("*/", false),
        peg$c66 = "//",
        peg$c67 = peg$literalExpectation("//", false),
        peg$c68 = function peg$c68(name) {
      return name;
    },
        peg$c69 = peg$otherExpectation("identifier"),
        peg$c70 = function peg$c70(head, tail) {
      return head + tail.join("");
    },
        peg$c71 = "_",
        peg$c72 = peg$literalExpectation("_", false),
        peg$c73 = "\\",
        peg$c74 = peg$literalExpectation("\\", false),
        peg$c75 = function peg$c75(sequence) {
      return sequence;
    },
        peg$c76 = "\u200C",
        peg$c77 = peg$literalExpectation("\u200C", false),
        peg$c78 = "\u200D",
        peg$c79 = peg$literalExpectation("\u200D", false),
        peg$c80 = peg$otherExpectation("literal"),
        peg$c81 = "i",
        peg$c82 = peg$literalExpectation("i", false),
        peg$c83 = function peg$c83(value, ignoreCase) {
      return {
        type: "literal",
        value: value,
        ignoreCase: ignoreCase !== null,
        location: location()
      };
    },
        peg$c84 = peg$otherExpectation("string"),
        peg$c85 = "\"",
        peg$c86 = peg$literalExpectation("\"", false),
        peg$c87 = function peg$c87(chars) {
      return chars.join("");
    },
        peg$c88 = "'",
        peg$c89 = peg$literalExpectation("'", false),
        peg$c90 = function peg$c90() {
      return text();
    },
        peg$c91 = peg$otherExpectation("character class"),
        peg$c92 = "[",
        peg$c93 = peg$literalExpectation("[", false),
        peg$c94 = "^",
        peg$c95 = peg$literalExpectation("^", false),
        peg$c96 = "]",
        peg$c97 = peg$literalExpectation("]", false),
        peg$c98 = function peg$c98(inverted, parts, ignoreCase) {
      return {
        type: "class",
        parts: filterEmptyStrings(parts),
        inverted: inverted !== null,
        ignoreCase: ignoreCase !== null,
        location: location()
      };
    },
        peg$c99 = "-",
        peg$c100 = peg$literalExpectation("-", false),
        peg$c101 = function peg$c101(begin, end) {
      if (begin.charCodeAt(0) > end.charCodeAt(0)) {
        error("Invalid character range: " + text() + ".");
      }

      return [begin, end];
    },
        peg$c102 = function peg$c102() {
      return "";
    },
        peg$c103 = "0",
        peg$c104 = peg$literalExpectation("0", false),
        peg$c105 = function peg$c105() {
      return "\0";
    },
        peg$c106 = "b",
        peg$c107 = peg$literalExpectation("b", false),
        peg$c108 = function peg$c108() {
      return "\b";
    },
        peg$c109 = "f",
        peg$c110 = peg$literalExpectation("f", false),
        peg$c111 = function peg$c111() {
      return "\f";
    },
        peg$c112 = "n",
        peg$c113 = peg$literalExpectation("n", false),
        peg$c114 = function peg$c114() {
      return "\n";
    },
        peg$c115 = "r",
        peg$c116 = peg$literalExpectation("r", false),
        peg$c117 = function peg$c117() {
      return "\r";
    },
        peg$c118 = "t",
        peg$c119 = peg$literalExpectation("t", false),
        peg$c120 = function peg$c120() {
      return "\t";
    },
        peg$c121 = "v",
        peg$c122 = peg$literalExpectation("v", false),
        peg$c123 = function peg$c123() {
      return "\x0B";
    },
        peg$c124 = "x",
        peg$c125 = peg$literalExpectation("x", false),
        peg$c126 = "u",
        peg$c127 = peg$literalExpectation("u", false),
        peg$c128 = function peg$c128(digits) {
      return String.fromCharCode(parseInt(digits, 16));
    },
        peg$c129 = /^[0-9]/,
        peg$c130 = peg$classExpectation([["0", "9"]], false, false),
        peg$c131 = /^[0-9a-f]/i,
        peg$c132 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        peg$c133 = ".",
        peg$c134 = peg$literalExpectation(".", false),
        peg$c135 = function peg$c135() {
      return {
        type: "any",
        location: location()
      };
    },
        peg$c136 = peg$otherExpectation("code block"),
        peg$c137 = "{",
        peg$c138 = peg$literalExpectation("{", false),
        peg$c139 = "}",
        peg$c140 = peg$literalExpectation("}", false),
        peg$c141 = function peg$c141(code) {
      return code;
    },
        peg$c142 = /^[{}]/,
        peg$c143 = peg$classExpectation(["{", "}"], false, false),
        peg$c144 = /^[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]/,
        peg$c145 = peg$classExpectation([["a", "z"], "\xB5", ["\xDF", "\xF6"], ["\xF8", "\xFF"], "\u0101", "\u0103", "\u0105", "\u0107", "\u0109", "\u010B", "\u010D", "\u010F", "\u0111", "\u0113", "\u0115", "\u0117", "\u0119", "\u011B", "\u011D", "\u011F", "\u0121", "\u0123", "\u0125", "\u0127", "\u0129", "\u012B", "\u012D", "\u012F", "\u0131", "\u0133", "\u0135", ["\u0137", "\u0138"], "\u013A", "\u013C", "\u013E", "\u0140", "\u0142", "\u0144", "\u0146", ["\u0148", "\u0149"], "\u014B", "\u014D", "\u014F", "\u0151", "\u0153", "\u0155", "\u0157", "\u0159", "\u015B", "\u015D", "\u015F", "\u0161", "\u0163", "\u0165", "\u0167", "\u0169", "\u016B", "\u016D", "\u016F", "\u0171", "\u0173", "\u0175", "\u0177", "\u017A", "\u017C", ["\u017E", "\u0180"], "\u0183", "\u0185", "\u0188", ["\u018C", "\u018D"], "\u0192", "\u0195", ["\u0199", "\u019B"], "\u019E", "\u01A1", "\u01A3", "\u01A5", "\u01A8", ["\u01AA", "\u01AB"], "\u01AD", "\u01B0", "\u01B4", "\u01B6", ["\u01B9", "\u01BA"], ["\u01BD", "\u01BF"], "\u01C6", "\u01C9", "\u01CC", "\u01CE", "\u01D0", "\u01D2", "\u01D4", "\u01D6", "\u01D8", "\u01DA", ["\u01DC", "\u01DD"], "\u01DF", "\u01E1", "\u01E3", "\u01E5", "\u01E7", "\u01E9", "\u01EB", "\u01ED", ["\u01EF", "\u01F0"], "\u01F3", "\u01F5", "\u01F9", "\u01FB", "\u01FD", "\u01FF", "\u0201", "\u0203", "\u0205", "\u0207", "\u0209", "\u020B", "\u020D", "\u020F", "\u0211", "\u0213", "\u0215", "\u0217", "\u0219", "\u021B", "\u021D", "\u021F", "\u0221", "\u0223", "\u0225", "\u0227", "\u0229", "\u022B", "\u022D", "\u022F", "\u0231", ["\u0233", "\u0239"], "\u023C", ["\u023F", "\u0240"], "\u0242", "\u0247", "\u0249", "\u024B", "\u024D", ["\u024F", "\u0293"], ["\u0295", "\u02AF"], "\u0371", "\u0373", "\u0377", ["\u037B", "\u037D"], "\u0390", ["\u03AC", "\u03CE"], ["\u03D0", "\u03D1"], ["\u03D5", "\u03D7"], "\u03D9", "\u03DB", "\u03DD", "\u03DF", "\u03E1", "\u03E3", "\u03E5", "\u03E7", "\u03E9", "\u03EB", "\u03ED", ["\u03EF", "\u03F3"], "\u03F5", "\u03F8", ["\u03FB", "\u03FC"], ["\u0430", "\u045F"], "\u0461", "\u0463", "\u0465", "\u0467", "\u0469", "\u046B", "\u046D", "\u046F", "\u0471", "\u0473", "\u0475", "\u0477", "\u0479", "\u047B", "\u047D", "\u047F", "\u0481", "\u048B", "\u048D", "\u048F", "\u0491", "\u0493", "\u0495", "\u0497", "\u0499", "\u049B", "\u049D", "\u049F", "\u04A1", "\u04A3", "\u04A5", "\u04A7", "\u04A9", "\u04AB", "\u04AD", "\u04AF", "\u04B1", "\u04B3", "\u04B5", "\u04B7", "\u04B9", "\u04BB", "\u04BD", "\u04BF", "\u04C2", "\u04C4", "\u04C6", "\u04C8", "\u04CA", "\u04CC", ["\u04CE", "\u04CF"], "\u04D1", "\u04D3", "\u04D5", "\u04D7", "\u04D9", "\u04DB", "\u04DD", "\u04DF", "\u04E1", "\u04E3", "\u04E5", "\u04E7", "\u04E9", "\u04EB", "\u04ED", "\u04EF", "\u04F1", "\u04F3", "\u04F5", "\u04F7", "\u04F9", "\u04FB", "\u04FD", "\u04FF", "\u0501", "\u0503", "\u0505", "\u0507", "\u0509", "\u050B", "\u050D", "\u050F", "\u0511", "\u0513", "\u0515", "\u0517", "\u0519", "\u051B", "\u051D", "\u051F", "\u0521", "\u0523", "\u0525", "\u0527", "\u0529", "\u052B", "\u052D", "\u052F", ["\u0561", "\u0587"], ["\u13F8", "\u13FD"], ["\u1D00", "\u1D2B"], ["\u1D6B", "\u1D77"], ["\u1D79", "\u1D9A"], "\u1E01", "\u1E03", "\u1E05", "\u1E07", "\u1E09", "\u1E0B", "\u1E0D", "\u1E0F", "\u1E11", "\u1E13", "\u1E15", "\u1E17", "\u1E19", "\u1E1B", "\u1E1D", "\u1E1F", "\u1E21", "\u1E23", "\u1E25", "\u1E27", "\u1E29", "\u1E2B", "\u1E2D", "\u1E2F", "\u1E31", "\u1E33", "\u1E35", "\u1E37", "\u1E39", "\u1E3B", "\u1E3D", "\u1E3F", "\u1E41", "\u1E43", "\u1E45", "\u1E47", "\u1E49", "\u1E4B", "\u1E4D", "\u1E4F", "\u1E51", "\u1E53", "\u1E55", "\u1E57", "\u1E59", "\u1E5B", "\u1E5D", "\u1E5F", "\u1E61", "\u1E63", "\u1E65", "\u1E67", "\u1E69", "\u1E6B", "\u1E6D", "\u1E6F", "\u1E71", "\u1E73", "\u1E75", "\u1E77", "\u1E79", "\u1E7B", "\u1E7D", "\u1E7F", "\u1E81", "\u1E83", "\u1E85", "\u1E87", "\u1E89", "\u1E8B", "\u1E8D", "\u1E8F", "\u1E91", "\u1E93", ["\u1E95", "\u1E9D"], "\u1E9F", "\u1EA1", "\u1EA3", "\u1EA5", "\u1EA7", "\u1EA9", "\u1EAB", "\u1EAD", "\u1EAF", "\u1EB1", "\u1EB3", "\u1EB5", "\u1EB7", "\u1EB9", "\u1EBB", "\u1EBD", "\u1EBF", "\u1EC1", "\u1EC3", "\u1EC5", "\u1EC7", "\u1EC9", "\u1ECB", "\u1ECD", "\u1ECF", "\u1ED1", "\u1ED3", "\u1ED5", "\u1ED7", "\u1ED9", "\u1EDB", "\u1EDD", "\u1EDF", "\u1EE1", "\u1EE3", "\u1EE5", "\u1EE7", "\u1EE9", "\u1EEB", "\u1EED", "\u1EEF", "\u1EF1", "\u1EF3", "\u1EF5", "\u1EF7", "\u1EF9", "\u1EFB", "\u1EFD", ["\u1EFF", "\u1F07"], ["\u1F10", "\u1F15"], ["\u1F20", "\u1F27"], ["\u1F30", "\u1F37"], ["\u1F40", "\u1F45"], ["\u1F50", "\u1F57"], ["\u1F60", "\u1F67"], ["\u1F70", "\u1F7D"], ["\u1F80", "\u1F87"], ["\u1F90", "\u1F97"], ["\u1FA0", "\u1FA7"], ["\u1FB0", "\u1FB4"], ["\u1FB6", "\u1FB7"], "\u1FBE", ["\u1FC2", "\u1FC4"], ["\u1FC6", "\u1FC7"], ["\u1FD0", "\u1FD3"], ["\u1FD6", "\u1FD7"], ["\u1FE0", "\u1FE7"], ["\u1FF2", "\u1FF4"], ["\u1FF6", "\u1FF7"], "\u210A", ["\u210E", "\u210F"], "\u2113", "\u212F", "\u2134", "\u2139", ["\u213C", "\u213D"], ["\u2146", "\u2149"], "\u214E", "\u2184", ["\u2C30", "\u2C5E"], "\u2C61", ["\u2C65", "\u2C66"], "\u2C68", "\u2C6A", "\u2C6C", "\u2C71", ["\u2C73", "\u2C74"], ["\u2C76", "\u2C7B"], "\u2C81", "\u2C83", "\u2C85", "\u2C87", "\u2C89", "\u2C8B", "\u2C8D", "\u2C8F", "\u2C91", "\u2C93", "\u2C95", "\u2C97", "\u2C99", "\u2C9B", "\u2C9D", "\u2C9F", "\u2CA1", "\u2CA3", "\u2CA5", "\u2CA7", "\u2CA9", "\u2CAB", "\u2CAD", "\u2CAF", "\u2CB1", "\u2CB3", "\u2CB5", "\u2CB7", "\u2CB9", "\u2CBB", "\u2CBD", "\u2CBF", "\u2CC1", "\u2CC3", "\u2CC5", "\u2CC7", "\u2CC9", "\u2CCB", "\u2CCD", "\u2CCF", "\u2CD1", "\u2CD3", "\u2CD5", "\u2CD7", "\u2CD9", "\u2CDB", "\u2CDD", "\u2CDF", "\u2CE1", ["\u2CE3", "\u2CE4"], "\u2CEC", "\u2CEE", "\u2CF3", ["\u2D00", "\u2D25"], "\u2D27", "\u2D2D", "\uA641", "\uA643", "\uA645", "\uA647", "\uA649", "\uA64B", "\uA64D", "\uA64F", "\uA651", "\uA653", "\uA655", "\uA657", "\uA659", "\uA65B", "\uA65D", "\uA65F", "\uA661", "\uA663", "\uA665", "\uA667", "\uA669", "\uA66B", "\uA66D", "\uA681", "\uA683", "\uA685", "\uA687", "\uA689", "\uA68B", "\uA68D", "\uA68F", "\uA691", "\uA693", "\uA695", "\uA697", "\uA699", "\uA69B", "\uA723", "\uA725", "\uA727", "\uA729", "\uA72B", "\uA72D", ["\uA72F", "\uA731"], "\uA733", "\uA735", "\uA737", "\uA739", "\uA73B", "\uA73D", "\uA73F", "\uA741", "\uA743", "\uA745", "\uA747", "\uA749", "\uA74B", "\uA74D", "\uA74F", "\uA751", "\uA753", "\uA755", "\uA757", "\uA759", "\uA75B", "\uA75D", "\uA75F", "\uA761", "\uA763", "\uA765", "\uA767", "\uA769", "\uA76B", "\uA76D", "\uA76F", ["\uA771", "\uA778"], "\uA77A", "\uA77C", "\uA77F", "\uA781", "\uA783", "\uA785", "\uA787", "\uA78C", "\uA78E", "\uA791", ["\uA793", "\uA795"], "\uA797", "\uA799", "\uA79B", "\uA79D", "\uA79F", "\uA7A1", "\uA7A3", "\uA7A5", "\uA7A7", "\uA7A9", "\uA7B5", "\uA7B7", "\uA7FA", ["\uAB30", "\uAB5A"], ["\uAB60", "\uAB65"], ["\uAB70", "\uABBF"], ["\uFB00", "\uFB06"], ["\uFB13", "\uFB17"], ["\uFF41", "\uFF5A"]], false, false),
        peg$c146 = /^[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F]/,
        peg$c147 = peg$classExpectation([["\u02B0", "\u02C1"], ["\u02C6", "\u02D1"], ["\u02E0", "\u02E4"], "\u02EC", "\u02EE", "\u0374", "\u037A", "\u0559", "\u0640", ["\u06E5", "\u06E6"], ["\u07F4", "\u07F5"], "\u07FA", "\u081A", "\u0824", "\u0828", "\u0971", "\u0E46", "\u0EC6", "\u10FC", "\u17D7", "\u1843", "\u1AA7", ["\u1C78", "\u1C7D"], ["\u1D2C", "\u1D6A"], "\u1D78", ["\u1D9B", "\u1DBF"], "\u2071", "\u207F", ["\u2090", "\u209C"], ["\u2C7C", "\u2C7D"], "\u2D6F", "\u2E2F", "\u3005", ["\u3031", "\u3035"], "\u303B", ["\u309D", "\u309E"], ["\u30FC", "\u30FE"], "\uA015", ["\uA4F8", "\uA4FD"], "\uA60C", "\uA67F", ["\uA69C", "\uA69D"], ["\uA717", "\uA71F"], "\uA770", "\uA788", ["\uA7F8", "\uA7F9"], "\uA9CF", "\uA9E6", "\uAA70", "\uAADD", ["\uAAF3", "\uAAF4"], ["\uAB5C", "\uAB5F"], "\uFF70", ["\uFF9E", "\uFF9F"]], false, false),
        peg$c148 = /^[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
        peg$c149 = peg$classExpectation(["\xAA", "\xBA", "\u01BB", ["\u01C0", "\u01C3"], "\u0294", ["\u05D0", "\u05EA"], ["\u05F0", "\u05F2"], ["\u0620", "\u063F"], ["\u0641", "\u064A"], ["\u066E", "\u066F"], ["\u0671", "\u06D3"], "\u06D5", ["\u06EE", "\u06EF"], ["\u06FA", "\u06FC"], "\u06FF", "\u0710", ["\u0712", "\u072F"], ["\u074D", "\u07A5"], "\u07B1", ["\u07CA", "\u07EA"], ["\u0800", "\u0815"], ["\u0840", "\u0858"], ["\u08A0", "\u08B4"], ["\u0904", "\u0939"], "\u093D", "\u0950", ["\u0958", "\u0961"], ["\u0972", "\u0980"], ["\u0985", "\u098C"], ["\u098F", "\u0990"], ["\u0993", "\u09A8"], ["\u09AA", "\u09B0"], "\u09B2", ["\u09B6", "\u09B9"], "\u09BD", "\u09CE", ["\u09DC", "\u09DD"], ["\u09DF", "\u09E1"], ["\u09F0", "\u09F1"], ["\u0A05", "\u0A0A"], ["\u0A0F", "\u0A10"], ["\u0A13", "\u0A28"], ["\u0A2A", "\u0A30"], ["\u0A32", "\u0A33"], ["\u0A35", "\u0A36"], ["\u0A38", "\u0A39"], ["\u0A59", "\u0A5C"], "\u0A5E", ["\u0A72", "\u0A74"], ["\u0A85", "\u0A8D"], ["\u0A8F", "\u0A91"], ["\u0A93", "\u0AA8"], ["\u0AAA", "\u0AB0"], ["\u0AB2", "\u0AB3"], ["\u0AB5", "\u0AB9"], "\u0ABD", "\u0AD0", ["\u0AE0", "\u0AE1"], "\u0AF9", ["\u0B05", "\u0B0C"], ["\u0B0F", "\u0B10"], ["\u0B13", "\u0B28"], ["\u0B2A", "\u0B30"], ["\u0B32", "\u0B33"], ["\u0B35", "\u0B39"], "\u0B3D", ["\u0B5C", "\u0B5D"], ["\u0B5F", "\u0B61"], "\u0B71", "\u0B83", ["\u0B85", "\u0B8A"], ["\u0B8E", "\u0B90"], ["\u0B92", "\u0B95"], ["\u0B99", "\u0B9A"], "\u0B9C", ["\u0B9E", "\u0B9F"], ["\u0BA3", "\u0BA4"], ["\u0BA8", "\u0BAA"], ["\u0BAE", "\u0BB9"], "\u0BD0", ["\u0C05", "\u0C0C"], ["\u0C0E", "\u0C10"], ["\u0C12", "\u0C28"], ["\u0C2A", "\u0C39"], "\u0C3D", ["\u0C58", "\u0C5A"], ["\u0C60", "\u0C61"], ["\u0C85", "\u0C8C"], ["\u0C8E", "\u0C90"], ["\u0C92", "\u0CA8"], ["\u0CAA", "\u0CB3"], ["\u0CB5", "\u0CB9"], "\u0CBD", "\u0CDE", ["\u0CE0", "\u0CE1"], ["\u0CF1", "\u0CF2"], ["\u0D05", "\u0D0C"], ["\u0D0E", "\u0D10"], ["\u0D12", "\u0D3A"], "\u0D3D", "\u0D4E", ["\u0D5F", "\u0D61"], ["\u0D7A", "\u0D7F"], ["\u0D85", "\u0D96"], ["\u0D9A", "\u0DB1"], ["\u0DB3", "\u0DBB"], "\u0DBD", ["\u0DC0", "\u0DC6"], ["\u0E01", "\u0E30"], ["\u0E32", "\u0E33"], ["\u0E40", "\u0E45"], ["\u0E81", "\u0E82"], "\u0E84", ["\u0E87", "\u0E88"], "\u0E8A", "\u0E8D", ["\u0E94", "\u0E97"], ["\u0E99", "\u0E9F"], ["\u0EA1", "\u0EA3"], "\u0EA5", "\u0EA7", ["\u0EAA", "\u0EAB"], ["\u0EAD", "\u0EB0"], ["\u0EB2", "\u0EB3"], "\u0EBD", ["\u0EC0", "\u0EC4"], ["\u0EDC", "\u0EDF"], "\u0F00", ["\u0F40", "\u0F47"], ["\u0F49", "\u0F6C"], ["\u0F88", "\u0F8C"], ["\u1000", "\u102A"], "\u103F", ["\u1050", "\u1055"], ["\u105A", "\u105D"], "\u1061", ["\u1065", "\u1066"], ["\u106E", "\u1070"], ["\u1075", "\u1081"], "\u108E", ["\u10D0", "\u10FA"], ["\u10FD", "\u1248"], ["\u124A", "\u124D"], ["\u1250", "\u1256"], "\u1258", ["\u125A", "\u125D"], ["\u1260", "\u1288"], ["\u128A", "\u128D"], ["\u1290", "\u12B0"], ["\u12B2", "\u12B5"], ["\u12B8", "\u12BE"], "\u12C0", ["\u12C2", "\u12C5"], ["\u12C8", "\u12D6"], ["\u12D8", "\u1310"], ["\u1312", "\u1315"], ["\u1318", "\u135A"], ["\u1380", "\u138F"], ["\u1401", "\u166C"], ["\u166F", "\u167F"], ["\u1681", "\u169A"], ["\u16A0", "\u16EA"], ["\u16F1", "\u16F8"], ["\u1700", "\u170C"], ["\u170E", "\u1711"], ["\u1720", "\u1731"], ["\u1740", "\u1751"], ["\u1760", "\u176C"], ["\u176E", "\u1770"], ["\u1780", "\u17B3"], "\u17DC", ["\u1820", "\u1842"], ["\u1844", "\u1877"], ["\u1880", "\u18A8"], "\u18AA", ["\u18B0", "\u18F5"], ["\u1900", "\u191E"], ["\u1950", "\u196D"], ["\u1970", "\u1974"], ["\u1980", "\u19AB"], ["\u19B0", "\u19C9"], ["\u1A00", "\u1A16"], ["\u1A20", "\u1A54"], ["\u1B05", "\u1B33"], ["\u1B45", "\u1B4B"], ["\u1B83", "\u1BA0"], ["\u1BAE", "\u1BAF"], ["\u1BBA", "\u1BE5"], ["\u1C00", "\u1C23"], ["\u1C4D", "\u1C4F"], ["\u1C5A", "\u1C77"], ["\u1CE9", "\u1CEC"], ["\u1CEE", "\u1CF1"], ["\u1CF5", "\u1CF6"], ["\u2135", "\u2138"], ["\u2D30", "\u2D67"], ["\u2D80", "\u2D96"], ["\u2DA0", "\u2DA6"], ["\u2DA8", "\u2DAE"], ["\u2DB0", "\u2DB6"], ["\u2DB8", "\u2DBE"], ["\u2DC0", "\u2DC6"], ["\u2DC8", "\u2DCE"], ["\u2DD0", "\u2DD6"], ["\u2DD8", "\u2DDE"], "\u3006", "\u303C", ["\u3041", "\u3096"], "\u309F", ["\u30A1", "\u30FA"], "\u30FF", ["\u3105", "\u312D"], ["\u3131", "\u318E"], ["\u31A0", "\u31BA"], ["\u31F0", "\u31FF"], ["\u3400", "\u4DB5"], ["\u4E00", "\u9FD5"], ["\uA000", "\uA014"], ["\uA016", "\uA48C"], ["\uA4D0", "\uA4F7"], ["\uA500", "\uA60B"], ["\uA610", "\uA61F"], ["\uA62A", "\uA62B"], "\uA66E", ["\uA6A0", "\uA6E5"], "\uA78F", "\uA7F7", ["\uA7FB", "\uA801"], ["\uA803", "\uA805"], ["\uA807", "\uA80A"], ["\uA80C", "\uA822"], ["\uA840", "\uA873"], ["\uA882", "\uA8B3"], ["\uA8F2", "\uA8F7"], "\uA8FB", "\uA8FD", ["\uA90A", "\uA925"], ["\uA930", "\uA946"], ["\uA960", "\uA97C"], ["\uA984", "\uA9B2"], ["\uA9E0", "\uA9E4"], ["\uA9E7", "\uA9EF"], ["\uA9FA", "\uA9FE"], ["\uAA00", "\uAA28"], ["\uAA40", "\uAA42"], ["\uAA44", "\uAA4B"], ["\uAA60", "\uAA6F"], ["\uAA71", "\uAA76"], "\uAA7A", ["\uAA7E", "\uAAAF"], "\uAAB1", ["\uAAB5", "\uAAB6"], ["\uAAB9", "\uAABD"], "\uAAC0", "\uAAC2", ["\uAADB", "\uAADC"], ["\uAAE0", "\uAAEA"], "\uAAF2", ["\uAB01", "\uAB06"], ["\uAB09", "\uAB0E"], ["\uAB11", "\uAB16"], ["\uAB20", "\uAB26"], ["\uAB28", "\uAB2E"], ["\uABC0", "\uABE2"], ["\uAC00", "\uD7A3"], ["\uD7B0", "\uD7C6"], ["\uD7CB", "\uD7FB"], ["\uF900", "\uFA6D"], ["\uFA70", "\uFAD9"], "\uFB1D", ["\uFB1F", "\uFB28"], ["\uFB2A", "\uFB36"], ["\uFB38", "\uFB3C"], "\uFB3E", ["\uFB40", "\uFB41"], ["\uFB43", "\uFB44"], ["\uFB46", "\uFBB1"], ["\uFBD3", "\uFD3D"], ["\uFD50", "\uFD8F"], ["\uFD92", "\uFDC7"], ["\uFDF0", "\uFDFB"], ["\uFE70", "\uFE74"], ["\uFE76", "\uFEFC"], ["\uFF66", "\uFF6F"], ["\uFF71", "\uFF9D"], ["\uFFA0", "\uFFBE"], ["\uFFC2", "\uFFC7"], ["\uFFCA", "\uFFCF"], ["\uFFD2", "\uFFD7"], ["\uFFDA", "\uFFDC"]], false, false),
        peg$c150 = /^[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/,
        peg$c151 = peg$classExpectation(["\u01C5", "\u01C8", "\u01CB", "\u01F2", ["\u1F88", "\u1F8F"], ["\u1F98", "\u1F9F"], ["\u1FA8", "\u1FAF"], "\u1FBC", "\u1FCC", "\u1FFC"], false, false),
        peg$c152 = /^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A]/,
        peg$c153 = peg$classExpectation([["A", "Z"], ["\xC0", "\xD6"], ["\xD8", "\xDE"], "\u0100", "\u0102", "\u0104", "\u0106", "\u0108", "\u010A", "\u010C", "\u010E", "\u0110", "\u0112", "\u0114", "\u0116", "\u0118", "\u011A", "\u011C", "\u011E", "\u0120", "\u0122", "\u0124", "\u0126", "\u0128", "\u012A", "\u012C", "\u012E", "\u0130", "\u0132", "\u0134", "\u0136", "\u0139", "\u013B", "\u013D", "\u013F", "\u0141", "\u0143", "\u0145", "\u0147", "\u014A", "\u014C", "\u014E", "\u0150", "\u0152", "\u0154", "\u0156", "\u0158", "\u015A", "\u015C", "\u015E", "\u0160", "\u0162", "\u0164", "\u0166", "\u0168", "\u016A", "\u016C", "\u016E", "\u0170", "\u0172", "\u0174", "\u0176", ["\u0178", "\u0179"], "\u017B", "\u017D", ["\u0181", "\u0182"], "\u0184", ["\u0186", "\u0187"], ["\u0189", "\u018B"], ["\u018E", "\u0191"], ["\u0193", "\u0194"], ["\u0196", "\u0198"], ["\u019C", "\u019D"], ["\u019F", "\u01A0"], "\u01A2", "\u01A4", ["\u01A6", "\u01A7"], "\u01A9", "\u01AC", ["\u01AE", "\u01AF"], ["\u01B1", "\u01B3"], "\u01B5", ["\u01B7", "\u01B8"], "\u01BC", "\u01C4", "\u01C7", "\u01CA", "\u01CD", "\u01CF", "\u01D1", "\u01D3", "\u01D5", "\u01D7", "\u01D9", "\u01DB", "\u01DE", "\u01E0", "\u01E2", "\u01E4", "\u01E6", "\u01E8", "\u01EA", "\u01EC", "\u01EE", "\u01F1", "\u01F4", ["\u01F6", "\u01F8"], "\u01FA", "\u01FC", "\u01FE", "\u0200", "\u0202", "\u0204", "\u0206", "\u0208", "\u020A", "\u020C", "\u020E", "\u0210", "\u0212", "\u0214", "\u0216", "\u0218", "\u021A", "\u021C", "\u021E", "\u0220", "\u0222", "\u0224", "\u0226", "\u0228", "\u022A", "\u022C", "\u022E", "\u0230", "\u0232", ["\u023A", "\u023B"], ["\u023D", "\u023E"], "\u0241", ["\u0243", "\u0246"], "\u0248", "\u024A", "\u024C", "\u024E", "\u0370", "\u0372", "\u0376", "\u037F", "\u0386", ["\u0388", "\u038A"], "\u038C", ["\u038E", "\u038F"], ["\u0391", "\u03A1"], ["\u03A3", "\u03AB"], "\u03CF", ["\u03D2", "\u03D4"], "\u03D8", "\u03DA", "\u03DC", "\u03DE", "\u03E0", "\u03E2", "\u03E4", "\u03E6", "\u03E8", "\u03EA", "\u03EC", "\u03EE", "\u03F4", "\u03F7", ["\u03F9", "\u03FA"], ["\u03FD", "\u042F"], "\u0460", "\u0462", "\u0464", "\u0466", "\u0468", "\u046A", "\u046C", "\u046E", "\u0470", "\u0472", "\u0474", "\u0476", "\u0478", "\u047A", "\u047C", "\u047E", "\u0480", "\u048A", "\u048C", "\u048E", "\u0490", "\u0492", "\u0494", "\u0496", "\u0498", "\u049A", "\u049C", "\u049E", "\u04A0", "\u04A2", "\u04A4", "\u04A6", "\u04A8", "\u04AA", "\u04AC", "\u04AE", "\u04B0", "\u04B2", "\u04B4", "\u04B6", "\u04B8", "\u04BA", "\u04BC", "\u04BE", ["\u04C0", "\u04C1"], "\u04C3", "\u04C5", "\u04C7", "\u04C9", "\u04CB", "\u04CD", "\u04D0", "\u04D2", "\u04D4", "\u04D6", "\u04D8", "\u04DA", "\u04DC", "\u04DE", "\u04E0", "\u04E2", "\u04E4", "\u04E6", "\u04E8", "\u04EA", "\u04EC", "\u04EE", "\u04F0", "\u04F2", "\u04F4", "\u04F6", "\u04F8", "\u04FA", "\u04FC", "\u04FE", "\u0500", "\u0502", "\u0504", "\u0506", "\u0508", "\u050A", "\u050C", "\u050E", "\u0510", "\u0512", "\u0514", "\u0516", "\u0518", "\u051A", "\u051C", "\u051E", "\u0520", "\u0522", "\u0524", "\u0526", "\u0528", "\u052A", "\u052C", "\u052E", ["\u0531", "\u0556"], ["\u10A0", "\u10C5"], "\u10C7", "\u10CD", ["\u13A0", "\u13F5"], "\u1E00", "\u1E02", "\u1E04", "\u1E06", "\u1E08", "\u1E0A", "\u1E0C", "\u1E0E", "\u1E10", "\u1E12", "\u1E14", "\u1E16", "\u1E18", "\u1E1A", "\u1E1C", "\u1E1E", "\u1E20", "\u1E22", "\u1E24", "\u1E26", "\u1E28", "\u1E2A", "\u1E2C", "\u1E2E", "\u1E30", "\u1E32", "\u1E34", "\u1E36", "\u1E38", "\u1E3A", "\u1E3C", "\u1E3E", "\u1E40", "\u1E42", "\u1E44", "\u1E46", "\u1E48", "\u1E4A", "\u1E4C", "\u1E4E", "\u1E50", "\u1E52", "\u1E54", "\u1E56", "\u1E58", "\u1E5A", "\u1E5C", "\u1E5E", "\u1E60", "\u1E62", "\u1E64", "\u1E66", "\u1E68", "\u1E6A", "\u1E6C", "\u1E6E", "\u1E70", "\u1E72", "\u1E74", "\u1E76", "\u1E78", "\u1E7A", "\u1E7C", "\u1E7E", "\u1E80", "\u1E82", "\u1E84", "\u1E86", "\u1E88", "\u1E8A", "\u1E8C", "\u1E8E", "\u1E90", "\u1E92", "\u1E94", "\u1E9E", "\u1EA0", "\u1EA2", "\u1EA4", "\u1EA6", "\u1EA8", "\u1EAA", "\u1EAC", "\u1EAE", "\u1EB0", "\u1EB2", "\u1EB4", "\u1EB6", "\u1EB8", "\u1EBA", "\u1EBC", "\u1EBE", "\u1EC0", "\u1EC2", "\u1EC4", "\u1EC6", "\u1EC8", "\u1ECA", "\u1ECC", "\u1ECE", "\u1ED0", "\u1ED2", "\u1ED4", "\u1ED6", "\u1ED8", "\u1EDA", "\u1EDC", "\u1EDE", "\u1EE0", "\u1EE2", "\u1EE4", "\u1EE6", "\u1EE8", "\u1EEA", "\u1EEC", "\u1EEE", "\u1EF0", "\u1EF2", "\u1EF4", "\u1EF6", "\u1EF8", "\u1EFA", "\u1EFC", "\u1EFE", ["\u1F08", "\u1F0F"], ["\u1F18", "\u1F1D"], ["\u1F28", "\u1F2F"], ["\u1F38", "\u1F3F"], ["\u1F48", "\u1F4D"], "\u1F59", "\u1F5B", "\u1F5D", "\u1F5F", ["\u1F68", "\u1F6F"], ["\u1FB8", "\u1FBB"], ["\u1FC8", "\u1FCB"], ["\u1FD8", "\u1FDB"], ["\u1FE8", "\u1FEC"], ["\u1FF8", "\u1FFB"], "\u2102", "\u2107", ["\u210B", "\u210D"], ["\u2110", "\u2112"], "\u2115", ["\u2119", "\u211D"], "\u2124", "\u2126", "\u2128", ["\u212A", "\u212D"], ["\u2130", "\u2133"], ["\u213E", "\u213F"], "\u2145", "\u2183", ["\u2C00", "\u2C2E"], "\u2C60", ["\u2C62", "\u2C64"], "\u2C67", "\u2C69", "\u2C6B", ["\u2C6D", "\u2C70"], "\u2C72", "\u2C75", ["\u2C7E", "\u2C80"], "\u2C82", "\u2C84", "\u2C86", "\u2C88", "\u2C8A", "\u2C8C", "\u2C8E", "\u2C90", "\u2C92", "\u2C94", "\u2C96", "\u2C98", "\u2C9A", "\u2C9C", "\u2C9E", "\u2CA0", "\u2CA2", "\u2CA4", "\u2CA6", "\u2CA8", "\u2CAA", "\u2CAC", "\u2CAE", "\u2CB0", "\u2CB2", "\u2CB4", "\u2CB6", "\u2CB8", "\u2CBA", "\u2CBC", "\u2CBE", "\u2CC0", "\u2CC2", "\u2CC4", "\u2CC6", "\u2CC8", "\u2CCA", "\u2CCC", "\u2CCE", "\u2CD0", "\u2CD2", "\u2CD4", "\u2CD6", "\u2CD8", "\u2CDA", "\u2CDC", "\u2CDE", "\u2CE0", "\u2CE2", "\u2CEB", "\u2CED", "\u2CF2", "\uA640", "\uA642", "\uA644", "\uA646", "\uA648", "\uA64A", "\uA64C", "\uA64E", "\uA650", "\uA652", "\uA654", "\uA656", "\uA658", "\uA65A", "\uA65C", "\uA65E", "\uA660", "\uA662", "\uA664", "\uA666", "\uA668", "\uA66A", "\uA66C", "\uA680", "\uA682", "\uA684", "\uA686", "\uA688", "\uA68A", "\uA68C", "\uA68E", "\uA690", "\uA692", "\uA694", "\uA696", "\uA698", "\uA69A", "\uA722", "\uA724", "\uA726", "\uA728", "\uA72A", "\uA72C", "\uA72E", "\uA732", "\uA734", "\uA736", "\uA738", "\uA73A", "\uA73C", "\uA73E", "\uA740", "\uA742", "\uA744", "\uA746", "\uA748", "\uA74A", "\uA74C", "\uA74E", "\uA750", "\uA752", "\uA754", "\uA756", "\uA758", "\uA75A", "\uA75C", "\uA75E", "\uA760", "\uA762", "\uA764", "\uA766", "\uA768", "\uA76A", "\uA76C", "\uA76E", "\uA779", "\uA77B", ["\uA77D", "\uA77E"], "\uA780", "\uA782", "\uA784", "\uA786", "\uA78B", "\uA78D", "\uA790", "\uA792", "\uA796", "\uA798", "\uA79A", "\uA79C", "\uA79E", "\uA7A0", "\uA7A2", "\uA7A4", "\uA7A6", "\uA7A8", ["\uA7AA", "\uA7AD"], ["\uA7B0", "\uA7B4"], "\uA7B6", ["\uFF21", "\uFF3A"]], false, false),
        peg$c154 = /^[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]/,
        peg$c155 = peg$classExpectation(["\u0903", "\u093B", ["\u093E", "\u0940"], ["\u0949", "\u094C"], ["\u094E", "\u094F"], ["\u0982", "\u0983"], ["\u09BE", "\u09C0"], ["\u09C7", "\u09C8"], ["\u09CB", "\u09CC"], "\u09D7", "\u0A03", ["\u0A3E", "\u0A40"], "\u0A83", ["\u0ABE", "\u0AC0"], "\u0AC9", ["\u0ACB", "\u0ACC"], ["\u0B02", "\u0B03"], "\u0B3E", "\u0B40", ["\u0B47", "\u0B48"], ["\u0B4B", "\u0B4C"], "\u0B57", ["\u0BBE", "\u0BBF"], ["\u0BC1", "\u0BC2"], ["\u0BC6", "\u0BC8"], ["\u0BCA", "\u0BCC"], "\u0BD7", ["\u0C01", "\u0C03"], ["\u0C41", "\u0C44"], ["\u0C82", "\u0C83"], "\u0CBE", ["\u0CC0", "\u0CC4"], ["\u0CC7", "\u0CC8"], ["\u0CCA", "\u0CCB"], ["\u0CD5", "\u0CD6"], ["\u0D02", "\u0D03"], ["\u0D3E", "\u0D40"], ["\u0D46", "\u0D48"], ["\u0D4A", "\u0D4C"], "\u0D57", ["\u0D82", "\u0D83"], ["\u0DCF", "\u0DD1"], ["\u0DD8", "\u0DDF"], ["\u0DF2", "\u0DF3"], ["\u0F3E", "\u0F3F"], "\u0F7F", ["\u102B", "\u102C"], "\u1031", "\u1038", ["\u103B", "\u103C"], ["\u1056", "\u1057"], ["\u1062", "\u1064"], ["\u1067", "\u106D"], ["\u1083", "\u1084"], ["\u1087", "\u108C"], "\u108F", ["\u109A", "\u109C"], "\u17B6", ["\u17BE", "\u17C5"], ["\u17C7", "\u17C8"], ["\u1923", "\u1926"], ["\u1929", "\u192B"], ["\u1930", "\u1931"], ["\u1933", "\u1938"], ["\u1A19", "\u1A1A"], "\u1A55", "\u1A57", "\u1A61", ["\u1A63", "\u1A64"], ["\u1A6D", "\u1A72"], "\u1B04", "\u1B35", "\u1B3B", ["\u1B3D", "\u1B41"], ["\u1B43", "\u1B44"], "\u1B82", "\u1BA1", ["\u1BA6", "\u1BA7"], "\u1BAA", "\u1BE7", ["\u1BEA", "\u1BEC"], "\u1BEE", ["\u1BF2", "\u1BF3"], ["\u1C24", "\u1C2B"], ["\u1C34", "\u1C35"], "\u1CE1", ["\u1CF2", "\u1CF3"], ["\u302E", "\u302F"], ["\uA823", "\uA824"], "\uA827", ["\uA880", "\uA881"], ["\uA8B4", "\uA8C3"], ["\uA952", "\uA953"], "\uA983", ["\uA9B4", "\uA9B5"], ["\uA9BA", "\uA9BB"], ["\uA9BD", "\uA9C0"], ["\uAA2F", "\uAA30"], ["\uAA33", "\uAA34"], "\uAA4D", "\uAA7B", "\uAA7D", "\uAAEB", ["\uAAEE", "\uAAEF"], "\uAAF5", ["\uABE3", "\uABE4"], ["\uABE6", "\uABE7"], ["\uABE9", "\uABEA"], "\uABEC"], false, false),
        peg$c156 = /^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8-\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69E-\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/,
        peg$c157 = peg$classExpectation([["\u0300", "\u036F"], ["\u0483", "\u0487"], ["\u0591", "\u05BD"], "\u05BF", ["\u05C1", "\u05C2"], ["\u05C4", "\u05C5"], "\u05C7", ["\u0610", "\u061A"], ["\u064B", "\u065F"], "\u0670", ["\u06D6", "\u06DC"], ["\u06DF", "\u06E4"], ["\u06E7", "\u06E8"], ["\u06EA", "\u06ED"], "\u0711", ["\u0730", "\u074A"], ["\u07A6", "\u07B0"], ["\u07EB", "\u07F3"], ["\u0816", "\u0819"], ["\u081B", "\u0823"], ["\u0825", "\u0827"], ["\u0829", "\u082D"], ["\u0859", "\u085B"], ["\u08E3", "\u0902"], "\u093A", "\u093C", ["\u0941", "\u0948"], "\u094D", ["\u0951", "\u0957"], ["\u0962", "\u0963"], "\u0981", "\u09BC", ["\u09C1", "\u09C4"], "\u09CD", ["\u09E2", "\u09E3"], ["\u0A01", "\u0A02"], "\u0A3C", ["\u0A41", "\u0A42"], ["\u0A47", "\u0A48"], ["\u0A4B", "\u0A4D"], "\u0A51", ["\u0A70", "\u0A71"], "\u0A75", ["\u0A81", "\u0A82"], "\u0ABC", ["\u0AC1", "\u0AC5"], ["\u0AC7", "\u0AC8"], "\u0ACD", ["\u0AE2", "\u0AE3"], "\u0B01", "\u0B3C", "\u0B3F", ["\u0B41", "\u0B44"], "\u0B4D", "\u0B56", ["\u0B62", "\u0B63"], "\u0B82", "\u0BC0", "\u0BCD", "\u0C00", ["\u0C3E", "\u0C40"], ["\u0C46", "\u0C48"], ["\u0C4A", "\u0C4D"], ["\u0C55", "\u0C56"], ["\u0C62", "\u0C63"], "\u0C81", "\u0CBC", "\u0CBF", "\u0CC6", ["\u0CCC", "\u0CCD"], ["\u0CE2", "\u0CE3"], "\u0D01", ["\u0D41", "\u0D44"], "\u0D4D", ["\u0D62", "\u0D63"], "\u0DCA", ["\u0DD2", "\u0DD4"], "\u0DD6", "\u0E31", ["\u0E34", "\u0E3A"], ["\u0E47", "\u0E4E"], "\u0EB1", ["\u0EB4", "\u0EB9"], ["\u0EBB", "\u0EBC"], ["\u0EC8", "\u0ECD"], ["\u0F18", "\u0F19"], "\u0F35", "\u0F37", "\u0F39", ["\u0F71", "\u0F7E"], ["\u0F80", "\u0F84"], ["\u0F86", "\u0F87"], ["\u0F8D", "\u0F97"], ["\u0F99", "\u0FBC"], "\u0FC6", ["\u102D", "\u1030"], ["\u1032", "\u1037"], ["\u1039", "\u103A"], ["\u103D", "\u103E"], ["\u1058", "\u1059"], ["\u105E", "\u1060"], ["\u1071", "\u1074"], "\u1082", ["\u1085", "\u1086"], "\u108D", "\u109D", ["\u135D", "\u135F"], ["\u1712", "\u1714"], ["\u1732", "\u1734"], ["\u1752", "\u1753"], ["\u1772", "\u1773"], ["\u17B4", "\u17B5"], ["\u17B7", "\u17BD"], "\u17C6", ["\u17C9", "\u17D3"], "\u17DD", ["\u180B", "\u180D"], "\u18A9", ["\u1920", "\u1922"], ["\u1927", "\u1928"], "\u1932", ["\u1939", "\u193B"], ["\u1A17", "\u1A18"], "\u1A1B", "\u1A56", ["\u1A58", "\u1A5E"], "\u1A60", "\u1A62", ["\u1A65", "\u1A6C"], ["\u1A73", "\u1A7C"], "\u1A7F", ["\u1AB0", "\u1ABD"], ["\u1B00", "\u1B03"], "\u1B34", ["\u1B36", "\u1B3A"], "\u1B3C", "\u1B42", ["\u1B6B", "\u1B73"], ["\u1B80", "\u1B81"], ["\u1BA2", "\u1BA5"], ["\u1BA8", "\u1BA9"], ["\u1BAB", "\u1BAD"], "\u1BE6", ["\u1BE8", "\u1BE9"], "\u1BED", ["\u1BEF", "\u1BF1"], ["\u1C2C", "\u1C33"], ["\u1C36", "\u1C37"], ["\u1CD0", "\u1CD2"], ["\u1CD4", "\u1CE0"], ["\u1CE2", "\u1CE8"], "\u1CED", "\u1CF4", ["\u1CF8", "\u1CF9"], ["\u1DC0", "\u1DF5"], ["\u1DFC", "\u1DFF"], ["\u20D0", "\u20DC"], "\u20E1", ["\u20E5", "\u20F0"], ["\u2CEF", "\u2CF1"], "\u2D7F", ["\u2DE0", "\u2DFF"], ["\u302A", "\u302D"], ["\u3099", "\u309A"], "\uA66F", ["\uA674", "\uA67D"], ["\uA69E", "\uA69F"], ["\uA6F0", "\uA6F1"], "\uA802", "\uA806", "\uA80B", ["\uA825", "\uA826"], "\uA8C4", ["\uA8E0", "\uA8F1"], ["\uA926", "\uA92D"], ["\uA947", "\uA951"], ["\uA980", "\uA982"], "\uA9B3", ["\uA9B6", "\uA9B9"], "\uA9BC", "\uA9E5", ["\uAA29", "\uAA2E"], ["\uAA31", "\uAA32"], ["\uAA35", "\uAA36"], "\uAA43", "\uAA4C", "\uAA7C", "\uAAB0", ["\uAAB2", "\uAAB4"], ["\uAAB7", "\uAAB8"], ["\uAABE", "\uAABF"], "\uAAC1", ["\uAAEC", "\uAAED"], "\uAAF6", "\uABE5", "\uABE8", "\uABED", "\uFB1E", ["\uFE00", "\uFE0F"], ["\uFE20", "\uFE2F"]], false, false),
        peg$c158 = /^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/,
        peg$c159 = peg$classExpectation([["0", "9"], ["\u0660", "\u0669"], ["\u06F0", "\u06F9"], ["\u07C0", "\u07C9"], ["\u0966", "\u096F"], ["\u09E6", "\u09EF"], ["\u0A66", "\u0A6F"], ["\u0AE6", "\u0AEF"], ["\u0B66", "\u0B6F"], ["\u0BE6", "\u0BEF"], ["\u0C66", "\u0C6F"], ["\u0CE6", "\u0CEF"], ["\u0D66", "\u0D6F"], ["\u0DE6", "\u0DEF"], ["\u0E50", "\u0E59"], ["\u0ED0", "\u0ED9"], ["\u0F20", "\u0F29"], ["\u1040", "\u1049"], ["\u1090", "\u1099"], ["\u17E0", "\u17E9"], ["\u1810", "\u1819"], ["\u1946", "\u194F"], ["\u19D0", "\u19D9"], ["\u1A80", "\u1A89"], ["\u1A90", "\u1A99"], ["\u1B50", "\u1B59"], ["\u1BB0", "\u1BB9"], ["\u1C40", "\u1C49"], ["\u1C50", "\u1C59"], ["\uA620", "\uA629"], ["\uA8D0", "\uA8D9"], ["\uA900", "\uA909"], ["\uA9D0", "\uA9D9"], ["\uA9F0", "\uA9F9"], ["\uAA50", "\uAA59"], ["\uABF0", "\uABF9"], ["\uFF10", "\uFF19"]], false, false),
        peg$c160 = /^[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/,
        peg$c161 = peg$classExpectation([["\u16EE", "\u16F0"], ["\u2160", "\u2182"], ["\u2185", "\u2188"], "\u3007", ["\u3021", "\u3029"], ["\u3038", "\u303A"], ["\uA6E6", "\uA6EF"]], false, false),
        peg$c162 = /^[_\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]/,
        peg$c163 = peg$classExpectation(["_", ["\u203F", "\u2040"], "\u2054", ["\uFE33", "\uFE34"], ["\uFE4D", "\uFE4F"], "\uFF3F"], false, false),
        peg$c164 = /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,
        peg$c165 = peg$classExpectation([" ", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u202F", "\u205F", "\u3000"], false, false),
        peg$c166 = "break",
        peg$c167 = peg$literalExpectation("break", false),
        peg$c168 = "case",
        peg$c169 = peg$literalExpectation("case", false),
        peg$c170 = "catch",
        peg$c171 = peg$literalExpectation("catch", false),
        peg$c172 = "class",
        peg$c173 = peg$literalExpectation("class", false),
        peg$c174 = "const",
        peg$c175 = peg$literalExpectation("const", false),
        peg$c176 = "continue",
        peg$c177 = peg$literalExpectation("continue", false),
        peg$c178 = "debugger",
        peg$c179 = peg$literalExpectation("debugger", false),
        peg$c180 = "default",
        peg$c181 = peg$literalExpectation("default", false),
        peg$c182 = "delete",
        peg$c183 = peg$literalExpectation("delete", false),
        peg$c184 = "do",
        peg$c185 = peg$literalExpectation("do", false),
        peg$c186 = "else",
        peg$c187 = peg$literalExpectation("else", false),
        peg$c188 = "enum",
        peg$c189 = peg$literalExpectation("enum", false),
        peg$c190 = "export",
        peg$c191 = peg$literalExpectation("export", false),
        peg$c192 = "extends",
        peg$c193 = peg$literalExpectation("extends", false),
        peg$c194 = "false",
        peg$c195 = peg$literalExpectation("false", false),
        peg$c196 = "finally",
        peg$c197 = peg$literalExpectation("finally", false),
        peg$c198 = "for",
        peg$c199 = peg$literalExpectation("for", false),
        peg$c200 = "function",
        peg$c201 = peg$literalExpectation("function", false),
        peg$c202 = "if",
        peg$c203 = peg$literalExpectation("if", false),
        peg$c204 = "import",
        peg$c205 = peg$literalExpectation("import", false),
        peg$c206 = "instanceof",
        peg$c207 = peg$literalExpectation("instanceof", false),
        peg$c208 = "in",
        peg$c209 = peg$literalExpectation("in", false),
        peg$c210 = "new",
        peg$c211 = peg$literalExpectation("new", false),
        peg$c212 = "null",
        peg$c213 = peg$literalExpectation("null", false),
        peg$c214 = "return",
        peg$c215 = peg$literalExpectation("return", false),
        peg$c216 = "super",
        peg$c217 = peg$literalExpectation("super", false),
        peg$c218 = "switch",
        peg$c219 = peg$literalExpectation("switch", false),
        peg$c220 = "this",
        peg$c221 = peg$literalExpectation("this", false),
        peg$c222 = "throw",
        peg$c223 = peg$literalExpectation("throw", false),
        peg$c224 = "true",
        peg$c225 = peg$literalExpectation("true", false),
        peg$c226 = "try",
        peg$c227 = peg$literalExpectation("try", false),
        peg$c228 = "typeof",
        peg$c229 = peg$literalExpectation("typeof", false),
        peg$c230 = "var",
        peg$c231 = peg$literalExpectation("var", false),
        peg$c232 = "void",
        peg$c233 = peg$literalExpectation("void", false),
        peg$c234 = "while",
        peg$c235 = peg$literalExpectation("while", false),
        peg$c236 = "with",
        peg$c237 = peg$literalExpectation("with", false),
        peg$c238 = ";",
        peg$c239 = peg$literalExpectation(";", false),
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{
      line: 1,
      column: 1
    }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
      throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return {
        type: "literal",
        text: text,
        ignoreCase: ignoreCase
      };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return {
        type: "class",
        parts: parts,
        inverted: inverted,
        ignoreCase: ignoreCase
      };
    }

    function peg$anyExpectation() {
      return {
        type: "any"
      };
    }

    function peg$endExpectation() {
      return {
        type: "end"
      };
    }

    function peg$otherExpectation(description) {
      return {
        type: "other",
        description: description
      };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p;

      if (details) {
        return details;
      } else {
        p = pos - 1;

        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos);
      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }

    function peg$parseGrammar() {
      var s0, s1, s2, s3, s4, s5, s6;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseInitializer();

        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();

          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseRule();

          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();

            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parseRule();

              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();

                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          } else {
            s3 = peg$FAILED;
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInitializer() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$parseCodeBlock();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOS();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRule() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;
      s1 = peg$parseIdentifierName();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseStringLiteral();

          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }

          if (s3 === peg$FAILED) {
            s3 = null;
          }

          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c2;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c3);
              }
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();

              if (s5 !== peg$FAILED) {
                s6 = peg$parseChoiceExpression();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parseEOS();

                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c4(s1, s3, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseChoiceExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;
      s1 = peg$parseActionExpression();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();

        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c5;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c6);
            }
          }

          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();

            if (s6 !== peg$FAILED) {
              s7 = peg$parseActionExpression();

              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s5 = peg$c5;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c6);
              }
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();

              if (s6 !== peg$FAILED) {
                s7 = peg$parseActionExpression();

                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseActionExpression() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = peg$parseSequenceExpression();

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();

        if (s3 !== peg$FAILED) {
          s4 = peg$parseCodeBlock();

          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSequenceExpression() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;
      s1 = peg$parseLabeledExpression();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();

        if (s4 !== peg$FAILED) {
          s5 = peg$parseLabeledExpression();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();

          if (s4 !== peg$FAILED) {
            s5 = peg$parseLabeledExpression();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLabeledExpression() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c10;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c11);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();

            if (s4 !== peg$FAILED) {
              s5 = peg$parsePrefixedExpression();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c12(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parsePrefixedExpression();
      }

      return s0;
    }

    function peg$parsePrefixedExpression() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parsePrefixedOperator();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseSuffixedExpression();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parseSuffixedExpression();
      }

      return s0;
    }

    function peg$parsePrefixedOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 36) {
        s0 = peg$c14;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c15);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 38) {
          s0 = peg$c16;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c17);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s0 = peg$c18;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c19);
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSuffixedExpression() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parsePrimaryExpression();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseSuffixedOperator();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parsePrimaryExpression();
      }

      return s0;
    }

    function peg$parseSuffixedOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 63) {
        s0 = peg$c21;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c23;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c24);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s0 = peg$c25;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c26);
            }
          }
        }
      }

      return s0;
    }

    function peg$parsePrimaryExpression() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$parseLiteralMatcher();

      if (s0 === peg$FAILED) {
        s0 = peg$parseCharacterClassMatcher();

        if (s0 === peg$FAILED) {
          s0 = peg$parseAnyMatcher();

          if (s0 === peg$FAILED) {
            s0 = peg$parseRuleReferenceExpression();

            if (s0 === peg$FAILED) {
              s0 = peg$parseSemanticPredicateExpression();

              if (s0 === peg$FAILED) {
                s0 = peg$currPos;

                if (input.charCodeAt(peg$currPos) === 40) {
                  s1 = peg$c27;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c28);
                  }
                }

                if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();

                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseChoiceExpression();

                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse__();

                      if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s5 = peg$c29;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;

                          if (peg$silentFails === 0) {
                            peg$fail(peg$c30);
                          }
                        }

                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c31(s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseRuleReferenceExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;
      s1 = peg$parseIdentifierName();

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        s4 = peg$parse__();

        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parseStringLiteral();

          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();

            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }

          if (s5 === peg$FAILED) {
            s5 = null;
          }

          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s6 = peg$c2;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c3);
              }
            }

            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c32(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSemanticPredicateExpression() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parseSemanticPredicateOperator();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseCodeBlock();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c33(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSemanticPredicateOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 38) {
        s0 = peg$c16;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c17);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s0 = peg$c18;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c19);
          }
        }
      }

      return s0;
    }

    function peg$parseSourceCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c34);
        }
      }

      return s0;
    }

    function peg$parseWhiteSpace() {
      var s0, s1;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c36;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c37);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11) {
          s0 = peg$c38;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c39);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12) {
            s0 = peg$c40;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c41);
            }
          }

          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s0 = peg$c42;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c43);
              }
            }

            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 160) {
                s0 = peg$c44;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c45);
                }
              }

              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 65279) {
                  s0 = peg$c46;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c47);
                  }
                }

                if (s0 === peg$FAILED) {
                  s0 = peg$parseZs();
                }
              }
            }
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c35);
        }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (peg$c48.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c49);
        }
      }

      return s0;
    }

    function peg$parseLineTerminatorSequence() {
      var s0, s1;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c51;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c52);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c53) {
          s0 = peg$c53;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c54);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c55;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c56);
            }
          }

          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c57;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c58);
              }
            }

            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c59;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c60);
                }
              }
            }
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c50);
        }
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$parseMultiLineComment();

      if (s0 === peg$FAILED) {
        s0 = peg$parseSingleLineComment();
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c61);
        }
      }

      return s0;
    }

    function peg$parseMultiLineComment() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c63);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;

        if (input.substr(peg$currPos, 2) === peg$c64) {
          s5 = peg$c64;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c65);
          }
        }

        peg$silentFails--;

        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;

          if (input.substr(peg$currPos, 2) === peg$c64) {
            s5 = peg$c64;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c65);
            }
          }

          peg$silentFails--;

          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s3 = peg$c64;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c65);
            }
          }

          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseMultiLineCommentNoLineTerminator() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c63);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;

        if (input.substr(peg$currPos, 2) === peg$c64) {
          s5 = peg$c64;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c65);
          }
        }

        if (s5 === peg$FAILED) {
          s5 = peg$parseLineTerminator();
        }

        peg$silentFails--;

        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;

          if (input.substr(peg$currPos, 2) === peg$c64) {
            s5 = peg$c64;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c65);
            }
          }

          if (s5 === peg$FAILED) {
            s5 = peg$parseLineTerminator();
          }

          peg$silentFails--;

          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s3 = peg$c64;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c65);
            }
          }

          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSingleLineComment() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c66) {
        s1 = peg$c66;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c67);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;

        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseLineTerminator();
          peg$silentFails--;

          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseReservedWord();
      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifierName();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c68(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIdentifierName() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseIdentifierStart();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseIdentifierPart();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseIdentifierPart();
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c69);
        }
      }

      return s0;
    }

    function peg$parseIdentifierStart() {
      var s0, s1, s2;
      s0 = peg$parseUnicodeLetter();

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s0 = peg$c14;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c15);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s0 = peg$c71;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c72);
            }
          }

          if (s0 === peg$FAILED) {
            s0 = peg$currPos;

            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c73;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c74);
              }
            }

            if (s1 !== peg$FAILED) {
              s2 = peg$parseUnicodeEscapeSequence();

              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c75(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseIdentifierPart() {
      var s0;
      s0 = peg$parseIdentifierStart();

      if (s0 === peg$FAILED) {
        s0 = peg$parseUnicodeCombiningMark();

        if (s0 === peg$FAILED) {
          s0 = peg$parseNd();

          if (s0 === peg$FAILED) {
            s0 = peg$parsePc();

            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8204) {
                s0 = peg$c76;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c77);
                }
              }

              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 8205) {
                  s0 = peg$c78;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c79);
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnicodeLetter() {
      var s0;
      s0 = peg$parseLu();

      if (s0 === peg$FAILED) {
        s0 = peg$parseLl();

        if (s0 === peg$FAILED) {
          s0 = peg$parseLt();

          if (s0 === peg$FAILED) {
            s0 = peg$parseLm();

            if (s0 === peg$FAILED) {
              s0 = peg$parseLo();

              if (s0 === peg$FAILED) {
                s0 = peg$parseNl();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnicodeCombiningMark() {
      var s0;
      s0 = peg$parseMn();

      if (s0 === peg$FAILED) {
        s0 = peg$parseMc();
      }

      return s0;
    }

    function peg$parseReservedWord() {
      var s0;
      s0 = peg$parseKeyword();

      if (s0 === peg$FAILED) {
        s0 = peg$parseFutureReservedWord();

        if (s0 === peg$FAILED) {
          s0 = peg$parseNullToken();

          if (s0 === peg$FAILED) {
            s0 = peg$parseBooleanLiteral();
          }
        }
      }

      return s0;
    }

    function peg$parseKeyword() {
      var s0;
      s0 = peg$parseBreakToken();

      if (s0 === peg$FAILED) {
        s0 = peg$parseCaseToken();

        if (s0 === peg$FAILED) {
          s0 = peg$parseCatchToken();

          if (s0 === peg$FAILED) {
            s0 = peg$parseContinueToken();

            if (s0 === peg$FAILED) {
              s0 = peg$parseDebuggerToken();

              if (s0 === peg$FAILED) {
                s0 = peg$parseDefaultToken();

                if (s0 === peg$FAILED) {
                  s0 = peg$parseDeleteToken();

                  if (s0 === peg$FAILED) {
                    s0 = peg$parseDoToken();

                    if (s0 === peg$FAILED) {
                      s0 = peg$parseElseToken();

                      if (s0 === peg$FAILED) {
                        s0 = peg$parseFinallyToken();

                        if (s0 === peg$FAILED) {
                          s0 = peg$parseForToken();

                          if (s0 === peg$FAILED) {
                            s0 = peg$parseFunctionToken();

                            if (s0 === peg$FAILED) {
                              s0 = peg$parseIfToken();

                              if (s0 === peg$FAILED) {
                                s0 = peg$parseInstanceofToken();

                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseInToken();

                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseNewToken();

                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseReturnToken();

                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseSwitchToken();

                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseThisToken();

                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseThrowToken();

                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseTryToken();

                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseTypeofToken();

                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseVarToken();

                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseVoidToken();

                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseWhileToken();

                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseWithToken();
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseFutureReservedWord() {
      var s0;
      s0 = peg$parseClassToken();

      if (s0 === peg$FAILED) {
        s0 = peg$parseConstToken();

        if (s0 === peg$FAILED) {
          s0 = peg$parseEnumToken();

          if (s0 === peg$FAILED) {
            s0 = peg$parseExportToken();

            if (s0 === peg$FAILED) {
              s0 = peg$parseExtendsToken();

              if (s0 === peg$FAILED) {
                s0 = peg$parseImportToken();

                if (s0 === peg$FAILED) {
                  s0 = peg$parseSuperToken();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseBooleanLiteral() {
      var s0;
      s0 = peg$parseTrueToken();

      if (s0 === peg$FAILED) {
        s0 = peg$parseFalseToken();
      }

      return s0;
    }

    function peg$parseLiteralMatcher() {
      var s0, s1, s2;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseStringLiteral();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 105) {
          s2 = peg$c81;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c82);
          }
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c83(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c80);
        }
      }

      return s0;
    }

    function peg$parseStringLiteral() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c85;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c86);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDoubleStringCharacter();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDoubleStringCharacter();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c85;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c86);
            }
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c87(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c88;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c89);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSingleStringCharacter();

          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSingleStringCharacter();
          }

          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c88;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c89);
              }
            }

            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c87(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c84);
        }
      }

      return s0;
    }

    function peg$parseDoubleStringCharacter() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c85;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c86);
        }
      }

      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c73;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }

      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c75(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$parseLineContinuation();
        }
      }

      return s0;
    }

    function peg$parseSingleStringCharacter() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c88;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c89);
        }
      }

      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c73;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }

      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c75(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$parseLineContinuation();
        }
      }

      return s0;
    }

    function peg$parseCharacterClassMatcher() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c92;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c93);
        }
      }

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 94) {
          s2 = peg$c94;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c95);
          }
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseClassCharacterRange();

          if (s4 === peg$FAILED) {
            s4 = peg$parseClassCharacter();
          }

          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseClassCharacterRange();

            if (s4 === peg$FAILED) {
              s4 = peg$parseClassCharacter();
            }
          }

          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c96;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c97);
              }
            }

            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 105) {
                s5 = peg$c81;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c82);
                }
              }

              if (s5 === peg$FAILED) {
                s5 = null;
              }

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c98(s2, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c91);
        }
      }

      return s0;
    }

    function peg$parseClassCharacterRange() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parseClassCharacter();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c99;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c100);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseClassCharacter();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c101(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassCharacter() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c96;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c97);
        }
      }

      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c73;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }

      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c75(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$parseLineContinuation();
        }
      }

      return s0;
    }

    function peg$parseLineContinuation() {
      var s0, s1, s2;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c73;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c74);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseLineTerminatorSequence();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c102();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEscapeSequence() {
      var s0, s1, s2, s3;
      s0 = peg$parseCharacterEscapeSequence();

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c103;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c104);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseDecimalDigit();
          peg$silentFails--;

          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c105();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$parseHexEscapeSequence();

          if (s0 === peg$FAILED) {
            s0 = peg$parseUnicodeEscapeSequence();
          }
        }
      }

      return s0;
    }

    function peg$parseCharacterEscapeSequence() {
      var s0;
      s0 = peg$parseSingleEscapeCharacter();

      if (s0 === peg$FAILED) {
        s0 = peg$parseNonEscapeCharacter();
      }

      return s0;
    }

    function peg$parseSingleEscapeCharacter() {
      var s0, s1;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c88;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c89);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c85;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c86);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s0 = peg$c73;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c74);
            }
          }

          if (s0 === peg$FAILED) {
            s0 = peg$currPos;

            if (input.charCodeAt(peg$currPos) === 98) {
              s1 = peg$c106;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c107);
              }
            }

            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c108();
            }

            s0 = s1;

            if (s0 === peg$FAILED) {
              s0 = peg$currPos;

              if (input.charCodeAt(peg$currPos) === 102) {
                s1 = peg$c109;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c110);
                }
              }

              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c111();
              }

              s0 = s1;

              if (s0 === peg$FAILED) {
                s0 = peg$currPos;

                if (input.charCodeAt(peg$currPos) === 110) {
                  s1 = peg$c112;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c113);
                  }
                }

                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c114();
                }

                s0 = s1;

                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;

                  if (input.charCodeAt(peg$currPos) === 114) {
                    s1 = peg$c115;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c116);
                    }
                  }

                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c117();
                  }

                  s0 = s1;

                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;

                    if (input.charCodeAt(peg$currPos) === 116) {
                      s1 = peg$c118;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c119);
                      }
                    }

                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c120();
                    }

                    s0 = s1;

                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;

                      if (input.charCodeAt(peg$currPos) === 118) {
                        s1 = peg$c121;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;

                        if (peg$silentFails === 0) {
                          peg$fail(peg$c122);
                        }
                      }

                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c123();
                      }

                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNonEscapeCharacter() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseEscapeCharacter();

      if (s2 === peg$FAILED) {
        s2 = peg$parseLineTerminator();
      }

      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEscapeCharacter() {
      var s0;
      s0 = peg$parseSingleEscapeCharacter();

      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 120) {
            s0 = peg$c124;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c125);
            }
          }

          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 117) {
              s0 = peg$c126;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c127);
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseHexEscapeSequence() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 120) {
        s1 = peg$c124;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c125);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();

        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c128(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUnicodeEscapeSequence() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 117) {
        s1 = peg$c126;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c127);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();

        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();

          if (s5 !== peg$FAILED) {
            s6 = peg$parseHexDigit();

            if (s6 !== peg$FAILED) {
              s7 = peg$parseHexDigit();

              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c128(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDecimalDigit() {
      var s0;

      if (peg$c129.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c130);
        }
      }

      return s0;
    }

    function peg$parseHexDigit() {
      var s0;

      if (peg$c131.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c132);
        }
      }

      return s0;
    }

    function peg$parseAnyMatcher() {
      var s0, s1;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c133;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c134);
        }
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135();
      }

      s0 = s1;
      return s0;
    }

    function peg$parseCodeBlock() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c137;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c138);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseCode();

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c139;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c140);
            }
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c141(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c136);
        }
      }

      return s0;
    }

    function peg$parseCode() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;
      s1 = [];
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;

      if (peg$c142.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c143);
        }
      }

      peg$silentFails--;

      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }

      if (s4 !== peg$FAILED) {
        s5 = peg$parseSourceCharacter();

        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }

      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;

          if (peg$c142.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c143);
            }
          }

          peg$silentFails--;

          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }

      if (s2 === peg$FAILED) {
        s2 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c137;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c138);
          }
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parseCode();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c139;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c140);
              }
            }

            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }

      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;

        if (peg$c142.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c143);
          }
        }

        peg$silentFails--;

        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;

            if (peg$c142.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c143);
              }
            }

            peg$silentFails--;

            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseSourceCharacter();

              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 === peg$FAILED) {
          s2 = peg$currPos;

          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c137;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c138);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = peg$parseCode();

            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c139;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c140);
                }
              }

              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }

      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseLl() {
      var s0;

      if (peg$c144.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c145);
        }
      }

      return s0;
    }

    function peg$parseLm() {
      var s0;

      if (peg$c146.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c147);
        }
      }

      return s0;
    }

    function peg$parseLo() {
      var s0;

      if (peg$c148.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c149);
        }
      }

      return s0;
    }

    function peg$parseLt() {
      var s0;

      if (peg$c150.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c151);
        }
      }

      return s0;
    }

    function peg$parseLu() {
      var s0;

      if (peg$c152.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c153);
        }
      }

      return s0;
    }

    function peg$parseMc() {
      var s0;

      if (peg$c154.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c155);
        }
      }

      return s0;
    }

    function peg$parseMn() {
      var s0;

      if (peg$c156.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c157);
        }
      }

      return s0;
    }

    function peg$parseNd() {
      var s0;

      if (peg$c158.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }

      return s0;
    }

    function peg$parseNl() {
      var s0;

      if (peg$c160.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c161);
        }
      }

      return s0;
    }

    function peg$parsePc() {
      var s0;

      if (peg$c162.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c163);
        }
      }

      return s0;
    }

    function peg$parseZs() {
      var s0;

      if (peg$c164.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c165);
        }
      }

      return s0;
    }

    function peg$parseBreakToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c166) {
        s1 = peg$c166;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c167);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCaseToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c168) {
        s1 = peg$c168;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c169);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCatchToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c170) {
        s1 = peg$c170;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c171);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c172) {
        s1 = peg$c172;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c173);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConstToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c174) {
        s1 = peg$c174;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c175);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseContinueToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 8) === peg$c176) {
        s1 = peg$c176;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c177);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDebuggerToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 8) === peg$c178) {
        s1 = peg$c178;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c179);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDefaultToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 7) === peg$c180) {
        s1 = peg$c180;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c181);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDeleteToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c182) {
        s1 = peg$c182;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c183);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDoToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c184) {
        s1 = peg$c184;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c185);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseElseToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c186) {
        s1 = peg$c186;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c187);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEnumToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c188) {
        s1 = peg$c188;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c189);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExportToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c190) {
        s1 = peg$c190;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c191);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExtendsToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 7) === peg$c192) {
        s1 = peg$c192;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c193);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFalseToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c194) {
        s1 = peg$c194;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c195);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFinallyToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 7) === peg$c196) {
        s1 = peg$c196;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c197);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseForToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c198) {
        s1 = peg$c198;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c199);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFunctionToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 8) === peg$c200) {
        s1 = peg$c200;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c201);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIfToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c202) {
        s1 = peg$c202;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c203);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseImportToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c204) {
        s1 = peg$c204;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c205);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInstanceofToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 10) === peg$c206) {
        s1 = peg$c206;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c207);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c208) {
        s1 = peg$c208;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c209);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNewToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c210) {
        s1 = peg$c210;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c211);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNullToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c212) {
        s1 = peg$c212;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c213);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseReturnToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c214) {
        s1 = peg$c214;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c215);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSuperToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c216) {
        s1 = peg$c216;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c217);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSwitchToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c218) {
        s1 = peg$c218;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c219);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseThisToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c220) {
        s1 = peg$c220;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c221);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseThrowToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c222) {
        s1 = peg$c222;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c223);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTrueToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c224) {
        s1 = peg$c224;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c225);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTryToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c226) {
        s1 = peg$c226;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c227);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTypeofToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c228) {
        s1 = peg$c228;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c229);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseVarToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c230) {
        s1 = peg$c230;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c231);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseVoidToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c232) {
        s1 = peg$c232;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c233);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWhileToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c234) {
        s1 = peg$c234;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c235);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWithToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c236) {
        s1 = peg$c236;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c237);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;
      s0 = [];
      s1 = peg$parseWhiteSpace();

      if (s1 === peg$FAILED) {
        s1 = peg$parseLineTerminatorSequence();

        if (s1 === peg$FAILED) {
          s1 = peg$parseComment();
        }
      }

      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();

        if (s1 === peg$FAILED) {
          s1 = peg$parseLineTerminatorSequence();

          if (s1 === peg$FAILED) {
            s1 = peg$parseComment();
          }
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;
      s0 = [];
      s1 = peg$parseWhiteSpace();

      if (s1 === peg$FAILED) {
        s1 = peg$parseMultiLineCommentNoLineTerminator();
      }

      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();

        if (s1 === peg$FAILED) {
          s1 = peg$parseMultiLineCommentNoLineTerminator();
        }
      }

      return s0;
    }

    function peg$parseEOS() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c238;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c239);
          }
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();

        if (s1 !== peg$FAILED) {
          s2 = peg$parseSingleLineComment();

          if (s2 === peg$FAILED) {
            s2 = null;
          }

          if (s2 !== peg$FAILED) {
            s3 = peg$parseLineTerminatorSequence();

            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse__();

          if (s1 !== peg$FAILED) {
            s2 = peg$parseEOF();

            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;
      s0 = peg$currPos;
      peg$silentFails++;

      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c34);
        }
      }

      peg$silentFails--;

      if (s1 === peg$FAILED) {
        s0 = void 0;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    var OPS_TO_PREFIXED_TYPES = {
      "$": "text",
      "&": "simple_and",
      "!": "simple_not"
    };
    var OPS_TO_SUFFIXED_TYPES = {
      "?": "optional",
      "*": "zero_or_more",
      "+": "one_or_more"
    };
    var OPS_TO_SEMANTIC_PREDICATE_TYPES = {
      "&": "semantic_and",
      "!": "semantic_not"
    };

    function filterEmptyStrings(array) {
      var result = [],
          i;

      for (i = 0; i < array.length; i++) {
        if (array[i] !== "") {
          result.push(array[i]);
        }
      }

      return result;
    }

    function extractOptional(optional, index) {
      return optional ? optional[index] : null;
    }

    function extractList(list, index) {
      var result = new Array(list.length),
          i;

      for (i = 0; i < list.length; i++) {
        result[i] = list[i][index];
      }

      return result;
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index));
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
  }

  module.exports = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
},439,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _require(_dependencyMap[0]),
      objects = _require(_dependencyMap[1]);

  var compiler = {
    visitor: _require(_dependencyMap[2]),
    passes: {
      check: {
        reportUndefinedRules: _require(_dependencyMap[3]),
        reportDuplicateRules: _require(_dependencyMap[4]),
        reportDuplicateLabels: _require(_dependencyMap[5]),
        reportInfiniteRecursion: _require(_dependencyMap[6]),
        reportInfiniteRepetition: _require(_dependencyMap[7])
      },
      transform: {
        removeProxyRules: _require(_dependencyMap[8])
      },
      generate: {
        generateBytecode: _require(_dependencyMap[9]),
        generateJS: _require(_dependencyMap[10])
      }
    },
    compile: function compile(ast, passes, options) {
      options = options !== void 0 ? options : {};
      var stage;
      options = objects.clone(options);
      objects.defaults(options, {
        allowedStartRules: [ast.rules[0].name],
        cache: false,
        dependencies: {},
        exportVar: null,
        format: "bare",
        optimize: "speed",
        output: "parser",
        trace: false
      });

      for (stage in passes) {
        if (passes.hasOwnProperty(stage)) {
          arrays.each(passes[stage], function (p) {
            p(ast, options);
          });
        }
      }

      switch (options.output) {
        case "parser":
          return eval(ast.code);

        case "source":
          return ast.code;
      }
    }
  };
  module.exports = compiler;
},440,[435,436,441,442,444,445,446,447,448,449,452]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var objects = _require(_dependencyMap[0]),
      arrays = _require(_dependencyMap[1]);

  var visitor = {
    build: function build(functions) {
      function visit(node) {
        return functions[node.type].apply(null, arguments);
      }

      function visitNop() {}

      function visitExpression(node) {
        var extraArgs = Array.prototype.slice.call(arguments, 1);
        visit.apply(null, [node.expression].concat(extraArgs));
      }

      function visitChildren(property) {
        return function (node) {
          var extraArgs = Array.prototype.slice.call(arguments, 1);
          arrays.each(node[property], function (child) {
            visit.apply(null, [child].concat(extraArgs));
          });
        };
      }

      var DEFAULT_FUNCTIONS = {
        grammar: function grammar(node) {
          var extraArgs = Array.prototype.slice.call(arguments, 1);

          if (node.initializer) {
            visit.apply(null, [node.initializer].concat(extraArgs));
          }

          arrays.each(node.rules, function (rule) {
            visit.apply(null, [rule].concat(extraArgs));
          });
        },
        initializer: visitNop,
        rule: visitExpression,
        named: visitExpression,
        choice: visitChildren("alternatives"),
        action: visitExpression,
        sequence: visitChildren("elements"),
        labeled: visitExpression,
        text: visitExpression,
        simple_and: visitExpression,
        simple_not: visitExpression,
        optional: visitExpression,
        zero_or_more: visitExpression,
        one_or_more: visitExpression,
        group: visitExpression,
        semantic_and: visitNop,
        semantic_not: visitNop,
        rule_ref: visitNop,
        literal: visitNop,
        "class": visitNop,
        any: visitNop
      };
      objects.defaults(functions, DEFAULT_FUNCTIONS);
      return visit;
    }
  };
  module.exports = visitor;
},441,[436,435]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var GrammarError = _require(_dependencyMap[0]),
      asts = _require(_dependencyMap[1]),
      visitor = _require(_dependencyMap[2]);

  function reportUndefinedRules(ast) {
    var check = visitor.build({
      rule_ref: function rule_ref(node) {
        if (!asts.findRule(ast, node.name)) {
          throw new GrammarError("Rule \"" + node.name + "\" is not defined.", node.location);
        }
      }
    });
    check(ast);
  }

  module.exports = reportUndefinedRules;
},442,[437,443,441]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _require(_dependencyMap[0]),
      visitor = _require(_dependencyMap[1]);

  var asts = {
    findRule: function findRule(ast, name) {
      return arrays.find(ast.rules, function (r) {
        return r.name === name;
      });
    },
    indexOfRule: function indexOfRule(ast, name) {
      return arrays.indexOf(ast.rules, function (r) {
        return r.name === name;
      });
    },
    alwaysConsumesOnSuccess: function alwaysConsumesOnSuccess(ast, node) {
      function consumesTrue() {
        return true;
      }

      function consumesFalse() {
        return false;
      }

      function consumesExpression(node) {
        return consumes(node.expression);
      }

      var consumes = visitor.build({
        rule: consumesExpression,
        named: consumesExpression,
        choice: function choice(node) {
          return arrays.every(node.alternatives, consumes);
        },
        action: consumesExpression,
        sequence: function sequence(node) {
          return arrays.some(node.elements, consumes);
        },
        labeled: consumesExpression,
        text: consumesExpression,
        simple_and: consumesFalse,
        simple_not: consumesFalse,
        optional: consumesFalse,
        zero_or_more: consumesFalse,
        one_or_more: consumesExpression,
        group: consumesExpression,
        semantic_and: consumesFalse,
        semantic_not: consumesFalse,
        rule_ref: function rule_ref(node) {
          return consumes(asts.findRule(ast, node.name));
        },
        literal: function literal(node) {
          return node.value !== "";
        },
        "class": consumesTrue,
        any: consumesTrue
      });
      return consumes(node);
    }
  };
  module.exports = asts;
},443,[435,441]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var GrammarError = _require(_dependencyMap[0]),
      visitor = _require(_dependencyMap[1]);

  function reportDuplicateRules(ast) {
    var rules = {};
    var check = visitor.build({
      rule: function rule(node) {
        if (rules.hasOwnProperty(node.name)) {
          throw new GrammarError("Rule \"" + node.name + "\" is already defined " + "at line " + rules[node.name].start.line + ", " + "column " + rules[node.name].start.column + ".", node.location);
        }

        rules[node.name] = node.location;
      }
    });
    check(ast);
  }

  module.exports = reportDuplicateRules;
},444,[437,441]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var GrammarError = _require(_dependencyMap[0]),
      arrays = _require(_dependencyMap[1]),
      objects = _require(_dependencyMap[2]),
      visitor = _require(_dependencyMap[3]);

  function reportDuplicateLabels(ast) {
    function checkExpressionWithClonedEnv(node, env) {
      check(node.expression, objects.clone(env));
    }

    var check = visitor.build({
      rule: function rule(node) {
        check(node.expression, {});
      },
      choice: function choice(node, env) {
        arrays.each(node.alternatives, function (alternative) {
          check(alternative, objects.clone(env));
        });
      },
      action: checkExpressionWithClonedEnv,
      labeled: function labeled(node, env) {
        if (env.hasOwnProperty(node.label)) {
          throw new GrammarError("Label \"" + node.label + "\" is already defined " + "at line " + env[node.label].start.line + ", " + "column " + env[node.label].start.column + ".", node.location);
        }

        check(node.expression, env);
        env[node.label] = node.location;
      },
      text: checkExpressionWithClonedEnv,
      simple_and: checkExpressionWithClonedEnv,
      simple_not: checkExpressionWithClonedEnv,
      optional: checkExpressionWithClonedEnv,
      zero_or_more: checkExpressionWithClonedEnv,
      one_or_more: checkExpressionWithClonedEnv,
      group: checkExpressionWithClonedEnv
    });
    check(ast);
  }

  module.exports = reportDuplicateLabels;
},445,[437,435,436,441]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _require(_dependencyMap[0]),
      GrammarError = _require(_dependencyMap[1]),
      asts = _require(_dependencyMap[2]),
      visitor = _require(_dependencyMap[3]);

  function reportInfiniteRecursion(ast) {
    var visitedRules = [];
    var check = visitor.build({
      rule: function rule(node) {
        visitedRules.push(node.name);
        check(node.expression);
        visitedRules.pop(node.name);
      },
      sequence: function sequence(node) {
        arrays.every(node.elements, function (element) {
          check(element);
          return !asts.alwaysConsumesOnSuccess(ast, element);
        });
      },
      rule_ref: function rule_ref(node) {
        if (arrays.contains(visitedRules, node.name)) {
          visitedRules.push(node.name);
          throw new GrammarError("Possible infinite loop when parsing (left recursion: " + visitedRules.join(" -> ") + ").", node.location);
        }

        check(asts.findRule(ast, node.name));
      }
    });
    check(ast);
  }

  module.exports = reportInfiniteRecursion;
},446,[435,437,443,441]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var GrammarError = _require(_dependencyMap[0]),
      asts = _require(_dependencyMap[1]),
      visitor = _require(_dependencyMap[2]);

  function reportInfiniteRepetition(ast) {
    var check = visitor.build({
      zero_or_more: function zero_or_more(node) {
        if (!asts.alwaysConsumesOnSuccess(ast, node.expression)) {
          throw new GrammarError("Possible infinite loop when parsing (repetition used with an expression that may not consume any input).", node.location);
        }
      },
      one_or_more: function one_or_more(node) {
        if (!asts.alwaysConsumesOnSuccess(ast, node.expression)) {
          throw new GrammarError("Possible infinite loop when parsing (repetition used with an expression that may not consume any input).", node.location);
        }
      }
    });
    check(ast);
  }

  module.exports = reportInfiniteRepetition;
},447,[437,443,441]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _require(_dependencyMap[0]),
      visitor = _require(_dependencyMap[1]);

  function removeProxyRules(ast, options) {
    function isProxyRule(node) {
      return node.type === "rule" && node.expression.type === "rule_ref";
    }

    function replaceRuleRefs(ast, from, to) {
      var replace = visitor.build({
        rule_ref: function rule_ref(node) {
          if (node.name === from) {
            node.name = to;
          }
        }
      });
      replace(ast);
    }

    var indices = [];
    arrays.each(ast.rules, function (rule, i) {
      if (isProxyRule(rule)) {
        replaceRuleRefs(ast, rule.name, rule.expression.name);

        if (!arrays.contains(options.allowedStartRules, rule.name)) {
          indices.push(i);
        }
      }
    });
    indices.reverse();
    arrays.each(indices, function (i) {
      ast.rules.splice(i, 1);
    });
  }

  module.exports = removeProxyRules;
},448,[435,441]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _require(_dependencyMap[0]),
      objects = _require(_dependencyMap[1]),
      asts = _require(_dependencyMap[2]),
      visitor = _require(_dependencyMap[3]),
      op = _require(_dependencyMap[4]),
      js = _require(_dependencyMap[5]);

  function generateBytecode(ast) {
    var consts = [];

    function addConst(value) {
      var index = arrays.indexOf(consts, value);
      return index === -1 ? consts.push(value) - 1 : index;
    }

    function addFunctionConst(params, code) {
      return addConst("function(" + params.join(", ") + ") {" + code + "}");
    }

    function buildSequence() {
      return Array.prototype.concat.apply([], arguments);
    }

    function buildCondition(condCode, thenCode, elseCode) {
      return condCode.concat([thenCode.length, elseCode.length], thenCode, elseCode);
    }

    function buildLoop(condCode, bodyCode) {
      return condCode.concat([bodyCode.length], bodyCode);
    }

    function buildCall(functionIndex, delta, env, sp) {
      var params = arrays.map(objects.values(env), function (p) {
        return sp - p;
      });
      return [op.CALL, functionIndex, delta, params.length].concat(params);
    }

    function buildSimplePredicate(expression, negative, context) {
      return buildSequence([op.PUSH_CURR_POS], [op.SILENT_FAILS_ON], generate(expression, {
        sp: context.sp + 1,
        env: objects.clone(context.env),
        action: null
      }), [op.SILENT_FAILS_OFF], buildCondition([negative ? op.IF_ERROR : op.IF_NOT_ERROR], buildSequence([op.POP], [negative ? op.POP : op.POP_CURR_POS], [op.PUSH_UNDEFINED]), buildSequence([op.POP], [negative ? op.POP_CURR_POS : op.POP], [op.PUSH_FAILED])));
    }

    function buildSemanticPredicate(code, negative, context) {
      var functionIndex = addFunctionConst(objects.keys(context.env), code);
      return buildSequence([op.UPDATE_SAVED_POS], buildCall(functionIndex, 0, context.env, context.sp), buildCondition([op.IF], buildSequence([op.POP], negative ? [op.PUSH_FAILED] : [op.PUSH_UNDEFINED]), buildSequence([op.POP], negative ? [op.PUSH_UNDEFINED] : [op.PUSH_FAILED])));
    }

    function buildAppendLoop(expressionCode) {
      return buildLoop([op.WHILE_NOT_ERROR], buildSequence([op.APPEND], expressionCode));
    }

    var generate = visitor.build({
      grammar: function grammar(node) {
        arrays.each(node.rules, generate);
        node.consts = consts;
      },
      rule: function rule(node) {
        node.bytecode = generate(node.expression, {
          sp: -1,
          env: {},
          action: null
        });
      },
      named: function named(node, context) {
        var nameIndex = addConst('peg$otherExpectation("' + js.stringEscape(node.name) + '")');
        return buildSequence([op.SILENT_FAILS_ON], generate(node.expression, context), [op.SILENT_FAILS_OFF], buildCondition([op.IF_ERROR], [op.FAIL, nameIndex], []));
      },
      choice: function choice(node, context) {
        function buildAlternativesCode(alternatives, context) {
          return buildSequence(generate(alternatives[0], {
            sp: context.sp,
            env: objects.clone(context.env),
            action: null
          }), alternatives.length > 1 ? buildCondition([op.IF_ERROR], buildSequence([op.POP], buildAlternativesCode(alternatives.slice(1), context)), []) : []);
        }

        return buildAlternativesCode(node.alternatives, context);
      },
      action: function action(node, context) {
        var env = objects.clone(context.env),
            emitCall = node.expression.type !== "sequence" || node.expression.elements.length === 0,
            expressionCode = generate(node.expression, {
          sp: context.sp + (emitCall ? 1 : 0),
          env: env,
          action: node
        }),
            functionIndex = addFunctionConst(objects.keys(env), node.code);
        return emitCall ? buildSequence([op.PUSH_CURR_POS], expressionCode, buildCondition([op.IF_NOT_ERROR], buildSequence([op.LOAD_SAVED_POS, 1], buildCall(functionIndex, 1, env, context.sp + 2)), []), [op.NIP]) : expressionCode;
      },
      sequence: function sequence(node, context) {
        function buildElementsCode(elements, context) {
          var processedCount, functionIndex;

          if (elements.length > 0) {
            processedCount = node.elements.length - elements.slice(1).length;
            return buildSequence(generate(elements[0], {
              sp: context.sp,
              env: context.env,
              action: null
            }), buildCondition([op.IF_NOT_ERROR], buildElementsCode(elements.slice(1), {
              sp: context.sp + 1,
              env: context.env,
              action: context.action
            }), buildSequence(processedCount > 1 ? [op.POP_N, processedCount] : [op.POP], [op.POP_CURR_POS], [op.PUSH_FAILED])));
          } else {
            if (context.action) {
              functionIndex = addFunctionConst(objects.keys(context.env), context.action.code);
              return buildSequence([op.LOAD_SAVED_POS, node.elements.length], buildCall(functionIndex, node.elements.length, context.env, context.sp), [op.NIP]);
            } else {
              return buildSequence([op.WRAP, node.elements.length], [op.NIP]);
            }
          }
        }

        return buildSequence([op.PUSH_CURR_POS], buildElementsCode(node.elements, {
          sp: context.sp + 1,
          env: context.env,
          action: context.action
        }));
      },
      labeled: function labeled(node, context) {
        var env = objects.clone(context.env);
        context.env[node.label] = context.sp + 1;
        return generate(node.expression, {
          sp: context.sp,
          env: env,
          action: null
        });
      },
      text: function text(node, context) {
        return buildSequence([op.PUSH_CURR_POS], generate(node.expression, {
          sp: context.sp + 1,
          env: objects.clone(context.env),
          action: null
        }), buildCondition([op.IF_NOT_ERROR], buildSequence([op.POP], [op.TEXT]), [op.NIP]));
      },
      simple_and: function simple_and(node, context) {
        return buildSimplePredicate(node.expression, false, context);
      },
      simple_not: function simple_not(node, context) {
        return buildSimplePredicate(node.expression, true, context);
      },
      optional: function optional(node, context) {
        return buildSequence(generate(node.expression, {
          sp: context.sp,
          env: objects.clone(context.env),
          action: null
        }), buildCondition([op.IF_ERROR], buildSequence([op.POP], [op.PUSH_NULL]), []));
      },
      zero_or_more: function zero_or_more(node, context) {
        var expressionCode = generate(node.expression, {
          sp: context.sp + 1,
          env: objects.clone(context.env),
          action: null
        });
        return buildSequence([op.PUSH_EMPTY_ARRAY], expressionCode, buildAppendLoop(expressionCode), [op.POP]);
      },
      one_or_more: function one_or_more(node, context) {
        var expressionCode = generate(node.expression, {
          sp: context.sp + 1,
          env: objects.clone(context.env),
          action: null
        });
        return buildSequence([op.PUSH_EMPTY_ARRAY], expressionCode, buildCondition([op.IF_NOT_ERROR], buildSequence(buildAppendLoop(expressionCode), [op.POP]), buildSequence([op.POP], [op.POP], [op.PUSH_FAILED])));
      },
      group: function group(node, context) {
        return generate(node.expression, {
          sp: context.sp,
          env: objects.clone(context.env),
          action: null
        });
      },
      semantic_and: function semantic_and(node, context) {
        return buildSemanticPredicate(node.code, false, context);
      },
      semantic_not: function semantic_not(node, context) {
        return buildSemanticPredicate(node.code, true, context);
      },
      rule_ref: function rule_ref(node) {
        return [op.RULE, asts.indexOfRule(ast, node.name)];
      },
      literal: function literal(node) {
        var stringIndex, expectedIndex;

        if (node.value.length > 0) {
          stringIndex = addConst('"' + js.stringEscape(node.ignoreCase ? node.value.toLowerCase() : node.value) + '"');
          expectedIndex = addConst("peg$literalExpectation(\"" + js.stringEscape(node.value) + '", ' + node.ignoreCase + ')');
          return buildCondition(node.ignoreCase ? [op.MATCH_STRING_IC, stringIndex] : [op.MATCH_STRING, stringIndex], node.ignoreCase ? [op.ACCEPT_N, node.value.length] : [op.ACCEPT_STRING, stringIndex], [op.FAIL, expectedIndex]);
        } else {
          stringIndex = addConst('""');
          return [op.PUSH, stringIndex];
        }
      },
      "class": function _class(node) {
        var regexp, parts, regexpIndex, expectedIndex;

        if (node.parts.length > 0) {
          regexp = '/^[' + (node.inverted ? '^' : '') + arrays.map(node.parts, function (part) {
            return part instanceof Array ? js.regexpClassEscape(part[0]) + '-' + js.regexpClassEscape(part[1]) : js.regexpClassEscape(part);
          }).join('') + ']/' + (node.ignoreCase ? 'i' : '');
        } else {
          regexp = node.inverted ? '/^[\\S\\s]/' : '/^(?!)/';
        }

        parts = '[' + arrays.map(node.parts, function (part) {
          return part instanceof Array ? '["' + js.stringEscape(part[0]) + '", "' + js.stringEscape(part[1]) + '"]' : '"' + js.stringEscape(part) + '"';
        }).join(', ') + ']';
        regexpIndex = addConst(regexp);
        expectedIndex = addConst('peg$classExpectation(' + parts + ', ' + node.inverted + ', ' + node.ignoreCase + ')');
        return buildCondition([op.MATCH_REGEXP, regexpIndex], [op.ACCEPT_N, 1], [op.FAIL, expectedIndex]);
      },
      any: function any() {
        var expectedIndex = addConst('peg$anyExpectation()');
        return buildCondition([op.MATCH_ANY], [op.ACCEPT_N, 1], [op.FAIL, expectedIndex]);
      }
    });
    generate(ast);
  }

  module.exports = generateBytecode;
},449,[435,436,443,441,450,451]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var opcodes = {
    PUSH: 0,
    PUSH_UNDEFINED: 1,
    PUSH_NULL: 2,
    PUSH_FAILED: 3,
    PUSH_EMPTY_ARRAY: 4,
    PUSH_CURR_POS: 5,
    POP: 6,
    POP_CURR_POS: 7,
    POP_N: 8,
    NIP: 9,
    APPEND: 10,
    WRAP: 11,
    TEXT: 12,
    IF: 13,
    IF_ERROR: 14,
    IF_NOT_ERROR: 15,
    WHILE_NOT_ERROR: 16,
    MATCH_ANY: 17,
    MATCH_STRING: 18,
    MATCH_STRING_IC: 19,
    MATCH_REGEXP: 20,
    ACCEPT_N: 21,
    ACCEPT_STRING: 22,
    FAIL: 23,
    LOAD_SAVED_POS: 24,
    UPDATE_SAVED_POS: 25,
    CALL: 26,
    RULE: 27,
    SILENT_FAILS_ON: 28,
    SILENT_FAILS_OFF: 29
  };
  module.exports = opcodes;
},450,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  var js = {
    stringEscape: function stringEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\x08/g, '\\b').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\xFF]/g, function (ch) {
        return '\\x' + hex(ch);
      }).replace(/[\u0100-\u0FFF]/g, function (ch) {
        return "\\u0" + hex(ch);
      }).replace(/[\u1000-\uFFFF]/g, function (ch) {
        return "\\u" + hex(ch);
      });
    },
    regexpClassEscape: function regexpClassEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/\//g, '\\/').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\v/g, '\\x0B').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\xFF]/g, function (ch) {
        return '\\x' + hex(ch);
      }).replace(/[\u0100-\u0FFF]/g, function (ch) {
        return "\\u0" + hex(ch);
      }).replace(/[\u1000-\uFFFF]/g, function (ch) {
        return "\\u" + hex(ch);
      });
    }
  };
  module.exports = js;
},451,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _require(_dependencyMap[0]),
      objects = _require(_dependencyMap[1]),
      asts = _require(_dependencyMap[2]),
      op = _require(_dependencyMap[3]),
      js = _require(_dependencyMap[4]);

  function generateJS(ast, options) {
    function indent2(code) {
      return code.replace(/^(.+)$/gm, '  $1');
    }

    function indent6(code) {
      return code.replace(/^(.+)$/gm, '      $1');
    }

    function indent10(code) {
      return code.replace(/^(.+)$/gm, '          $1');
    }

    function generateTables() {
      if (options.optimize === "size") {
        return ['peg$consts = [', indent2(ast.consts.join(',\n')), '],', '', 'peg$bytecode = [', indent2(arrays.map(ast.rules, function (rule) {
          return 'peg$decode("' + js.stringEscape(arrays.map(rule.bytecode, function (b) {
            return String.fromCharCode(b + 32);
          }).join('')) + '")';
        }).join(',\n')), '],'].join('\n');
      } else {
        return arrays.map(ast.consts, function (c, i) {
          return 'peg$c' + i + ' = ' + c + ',';
        }).join('\n');
      }
    }

    function generateRuleHeader(ruleNameCode, ruleIndexCode) {
      var parts = [];
      parts.push('');

      if (options.trace) {
        parts.push(['peg$tracer.trace({', '  type:     "rule.enter",', '  rule:     ' + ruleNameCode + ',', '  location: peg$computeLocation(startPos, startPos)', '});', ''].join('\n'));
      }

      if (options.cache) {
        parts.push(['var key    = peg$currPos * ' + ast.rules.length + ' + ' + ruleIndexCode + ',', '    cached = peg$resultsCache[key];', '', 'if (cached) {', '  peg$currPos = cached.nextPos;', ''].join('\n'));

        if (options.trace) {
          parts.push(['if (cached.result !== peg$FAILED) {', '  peg$tracer.trace({', '    type:   "rule.match",', '    rule:   ' + ruleNameCode + ',', '    result: cached.result,', '    location: peg$computeLocation(startPos, peg$currPos)', '  });', '} else {', '  peg$tracer.trace({', '    type: "rule.fail",', '    rule: ' + ruleNameCode + ',', '    location: peg$computeLocation(startPos, startPos)', '  });', '}', ''].join('\n'));
        }

        parts.push(['  return cached.result;', '}', ''].join('\n'));
      }

      return parts.join('\n');
    }

    function generateRuleFooter(ruleNameCode, resultCode) {
      var parts = [];

      if (options.cache) {
        parts.push(['', 'peg$resultsCache[key] = { nextPos: peg$currPos, result: ' + resultCode + ' };'].join('\n'));
      }

      if (options.trace) {
        parts.push(['', 'if (' + resultCode + ' !== peg$FAILED) {', '  peg$tracer.trace({', '    type:   "rule.match",', '    rule:   ' + ruleNameCode + ',', '    result: ' + resultCode + ',', '    location: peg$computeLocation(startPos, peg$currPos)', '  });', '} else {', '  peg$tracer.trace({', '    type: "rule.fail",', '    rule: ' + ruleNameCode + ',', '    location: peg$computeLocation(startPos, startPos)', '  });', '}'].join('\n'));
      }

      parts.push(['', 'return ' + resultCode + ';'].join('\n'));
      return parts.join('\n');
    }

    function generateInterpreter() {
      var parts = [];

      function generateCondition(cond, argsLength) {
        var baseLength = argsLength + 3,
            thenLengthCode = 'bc[ip + ' + (baseLength - 2) + ']',
            elseLengthCode = 'bc[ip + ' + (baseLength - 1) + ']';
        return ['ends.push(end);', 'ips.push(ip + ' + baseLength + ' + ' + thenLengthCode + ' + ' + elseLengthCode + ');', '', 'if (' + cond + ') {', '  end = ip + ' + baseLength + ' + ' + thenLengthCode + ';', '  ip += ' + baseLength + ';', '} else {', '  end = ip + ' + baseLength + ' + ' + thenLengthCode + ' + ' + elseLengthCode + ';', '  ip += ' + baseLength + ' + ' + thenLengthCode + ';', '}', '', 'break;'].join('\n');
      }

      function generateLoop(cond) {
        var baseLength = 2,
            bodyLengthCode = 'bc[ip + ' + (baseLength - 1) + ']';
        return ['if (' + cond + ') {', '  ends.push(end);', '  ips.push(ip);', '', '  end = ip + ' + baseLength + ' + ' + bodyLengthCode + ';', '  ip += ' + baseLength + ';', '} else {', '  ip += ' + baseLength + ' + ' + bodyLengthCode + ';', '}', '', 'break;'].join('\n');
      }

      function generateCall() {
        var baseLength = 4,
            paramsLengthCode = 'bc[ip + ' + (baseLength - 1) + ']';
        return ['params = bc.slice(ip + ' + baseLength + ', ip + ' + baseLength + ' + ' + paramsLengthCode + ');', 'for (i = 0; i < ' + paramsLengthCode + '; i++) {', '  params[i] = stack[stack.length - 1 - params[i]];', '}', '', 'stack.splice(', '  stack.length - bc[ip + 2],', '  bc[ip + 2],', '  peg$consts[bc[ip + 1]].apply(null, params)', ');', '', 'ip += ' + baseLength + ' + ' + paramsLengthCode + ';', 'break;'].join('\n');
      }

      parts.push(['function peg$decode(s) {', '  var bc = new Array(s.length), i;', '', '  for (i = 0; i < s.length; i++) {', '    bc[i] = s.charCodeAt(i) - 32;', '  }', '', '  return bc;', '}', '', 'function peg$parseRule(index) {'].join('\n'));

      if (options.trace) {
        parts.push(['  var bc       = peg$bytecode[index],', '      ip       = 0,', '      ips      = [],', '      end      = bc.length,', '      ends     = [],', '      stack    = [],', '      startPos = peg$currPos,', '      params, i;'].join('\n'));
      } else {
        parts.push(['  var bc    = peg$bytecode[index],', '      ip    = 0,', '      ips   = [],', '      end   = bc.length,', '      ends  = [],', '      stack = [],', '      params, i;'].join('\n'));
      }

      parts.push(indent2(generateRuleHeader('peg$ruleNames[index]', 'index')));
      parts.push(['  while (true) {', '    while (ip < end) {', '      switch (bc[ip]) {', '        case ' + op.PUSH + ':', '          stack.push(peg$consts[bc[ip + 1]]);', '          ip += 2;', '          break;', '', '        case ' + op.PUSH_UNDEFINED + ':', '          stack.push(void 0);', '          ip++;', '          break;', '', '        case ' + op.PUSH_NULL + ':', '          stack.push(null);', '          ip++;', '          break;', '', '        case ' + op.PUSH_FAILED + ':', '          stack.push(peg$FAILED);', '          ip++;', '          break;', '', '        case ' + op.PUSH_EMPTY_ARRAY + ':', '          stack.push([]);', '          ip++;', '          break;', '', '        case ' + op.PUSH_CURR_POS + ':', '          stack.push(peg$currPos);', '          ip++;', '          break;', '', '        case ' + op.POP + ':', '          stack.pop();', '          ip++;', '          break;', '', '        case ' + op.POP_CURR_POS + ':', '          peg$currPos = stack.pop();', '          ip++;', '          break;', '', '        case ' + op.POP_N + ':', '          stack.length -= bc[ip + 1];', '          ip += 2;', '          break;', '', '        case ' + op.NIP + ':', '          stack.splice(-2, 1);', '          ip++;', '          break;', '', '        case ' + op.APPEND + ':', '          stack[stack.length - 2].push(stack.pop());', '          ip++;', '          break;', '', '        case ' + op.WRAP + ':', '          stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));', '          ip += 2;', '          break;', '', '        case ' + op.TEXT + ':', '          stack.push(input.substring(stack.pop(), peg$currPos));', '          ip++;', '          break;', '', '        case ' + op.IF + ':', indent10(generateCondition('stack[stack.length - 1]', 0)), '', '        case ' + op.IF_ERROR + ':', indent10(generateCondition('stack[stack.length - 1] === peg$FAILED', 0)), '', '        case ' + op.IF_NOT_ERROR + ':', indent10(generateCondition('stack[stack.length - 1] !== peg$FAILED', 0)), '', '        case ' + op.WHILE_NOT_ERROR + ':', indent10(generateLoop('stack[stack.length - 1] !== peg$FAILED')), '', '        case ' + op.MATCH_ANY + ':', indent10(generateCondition('input.length > peg$currPos', 0)), '', '        case ' + op.MATCH_STRING + ':', indent10(generateCondition('input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]', 1)), '', '        case ' + op.MATCH_STRING_IC + ':', indent10(generateCondition('input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]', 1)), '', '        case ' + op.MATCH_REGEXP + ':', indent10(generateCondition('peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))', 1)), '', '        case ' + op.ACCEPT_N + ':', '          stack.push(input.substr(peg$currPos, bc[ip + 1]));', '          peg$currPos += bc[ip + 1];', '          ip += 2;', '          break;', '', '        case ' + op.ACCEPT_STRING + ':', '          stack.push(peg$consts[bc[ip + 1]]);', '          peg$currPos += peg$consts[bc[ip + 1]].length;', '          ip += 2;', '          break;', '', '        case ' + op.FAIL + ':', '          stack.push(peg$FAILED);', '          if (peg$silentFails === 0) {', '            peg$fail(peg$consts[bc[ip + 1]]);', '          }', '          ip += 2;', '          break;', '', '        case ' + op.LOAD_SAVED_POS + ':', '          peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];', '          ip += 2;', '          break;', '', '        case ' + op.UPDATE_SAVED_POS + ':', '          peg$savedPos = peg$currPos;', '          ip++;', '          break;', '', '        case ' + op.CALL + ':', indent10(generateCall()), '', '        case ' + op.RULE + ':', '          stack.push(peg$parseRule(bc[ip + 1]));', '          ip += 2;', '          break;', '', '        case ' + op.SILENT_FAILS_ON + ':', '          peg$silentFails++;', '          ip++;', '          break;', '', '        case ' + op.SILENT_FAILS_OFF + ':', '          peg$silentFails--;', '          ip++;', '          break;', '', '        default:', '          throw new Error("Invalid opcode: " + bc[ip] + ".");', '      }', '    }', '', '    if (ends.length > 0) {', '      end = ends.pop();', '      ip = ips.pop();', '    } else {', '      break;', '    }', '  }'].join('\n'));
      parts.push(indent2(generateRuleFooter('peg$ruleNames[index]', 'stack[0]')));
      parts.push('}');
      return parts.join('\n');
    }

    function generateRuleFunction(rule) {
      var parts = [],
          code;

      function c(i) {
        return "peg$c" + i;
      }

      function s(i) {
        return "s" + i;
      }

      var stack = {
        sp: -1,
        maxSp: -1,
        push: function push(exprCode) {
          var code = s(++this.sp) + ' = ' + exprCode + ';';

          if (this.sp > this.maxSp) {
            this.maxSp = this.sp;
          }

          return code;
        },
        pop: function pop(n) {
          var values;

          if (n === void 0) {
            return s(this.sp--);
          } else {
            values = arrays.map(arrays.range(this.sp - n + 1, this.sp + 1), s);
            this.sp -= n;
            return values;
          }
        },
        top: function top() {
          return s(this.sp);
        },
        index: function index(i) {
          return s(this.sp - i);
        }
      };

      function compile(bc) {
        var ip = 0,
            end = bc.length,
            parts = [],
            value;

        function compileCondition(cond, argCount) {
          var baseLength = argCount + 3,
              thenLength = bc[ip + baseLength - 2],
              elseLength = bc[ip + baseLength - 1],
              baseSp = stack.sp,
              thenCode,
              elseCode,
              thenSp,
              elseSp;
          ip += baseLength;
          thenCode = compile(bc.slice(ip, ip + thenLength));
          thenSp = stack.sp;
          ip += thenLength;

          if (elseLength > 0) {
            stack.sp = baseSp;
            elseCode = compile(bc.slice(ip, ip + elseLength));
            elseSp = stack.sp;
            ip += elseLength;

            if (thenSp !== elseSp) {
              throw new Error("Branches of a condition must move the stack pointer in the same way.");
            }
          }

          parts.push('if (' + cond + ') {');
          parts.push(indent2(thenCode));

          if (elseLength > 0) {
            parts.push('} else {');
            parts.push(indent2(elseCode));
          }

          parts.push('}');
        }

        function compileLoop(cond) {
          var baseLength = 2,
              bodyLength = bc[ip + baseLength - 1],
              baseSp = stack.sp,
              bodyCode,
              bodySp;
          ip += baseLength;
          bodyCode = compile(bc.slice(ip, ip + bodyLength));
          bodySp = stack.sp;
          ip += bodyLength;

          if (bodySp !== baseSp) {
            throw new Error("Body of a loop can't move the stack pointer.");
          }

          parts.push('while (' + cond + ') {');
          parts.push(indent2(bodyCode));
          parts.push('}');
        }

        function compileCall() {
          var baseLength = 4,
              paramsLength = bc[ip + baseLength - 1];
          var value = c(bc[ip + 1]) + '(' + arrays.map(bc.slice(ip + baseLength, ip + baseLength + paramsLength), function (p) {
            return stack.index(p);
          }).join(', ') + ')';
          stack.pop(bc[ip + 2]);
          parts.push(stack.push(value));
          ip += baseLength + paramsLength;
        }

        while (ip < end) {
          switch (bc[ip]) {
            case op.PUSH:
              parts.push(stack.push(c(bc[ip + 1])));
              ip += 2;
              break;

            case op.PUSH_CURR_POS:
              parts.push(stack.push('peg$currPos'));
              ip++;
              break;

            case op.PUSH_UNDEFINED:
              parts.push(stack.push('void 0'));
              ip++;
              break;

            case op.PUSH_NULL:
              parts.push(stack.push('null'));
              ip++;
              break;

            case op.PUSH_FAILED:
              parts.push(stack.push('peg$FAILED'));
              ip++;
              break;

            case op.PUSH_EMPTY_ARRAY:
              parts.push(stack.push('[]'));
              ip++;
              break;

            case op.POP:
              stack.pop();
              ip++;
              break;

            case op.POP_CURR_POS:
              parts.push('peg$currPos = ' + stack.pop() + ';');
              ip++;
              break;

            case op.POP_N:
              stack.pop(bc[ip + 1]);
              ip += 2;
              break;

            case op.NIP:
              value = stack.pop();
              stack.pop();
              parts.push(stack.push(value));
              ip++;
              break;

            case op.APPEND:
              value = stack.pop();
              parts.push(stack.top() + '.push(' + value + ');');
              ip++;
              break;

            case op.WRAP:
              parts.push(stack.push('[' + stack.pop(bc[ip + 1]).join(', ') + ']'));
              ip += 2;
              break;

            case op.TEXT:
              parts.push(stack.push('input.substring(' + stack.pop() + ', peg$currPos)'));
              ip++;
              break;

            case op.IF:
              compileCondition(stack.top(), 0);
              break;

            case op.IF_ERROR:
              compileCondition(stack.top() + ' === peg$FAILED', 0);
              break;

            case op.IF_NOT_ERROR:
              compileCondition(stack.top() + ' !== peg$FAILED', 0);
              break;

            case op.WHILE_NOT_ERROR:
              compileLoop(stack.top() + ' !== peg$FAILED', 0);
              break;

            case op.MATCH_ANY:
              compileCondition('input.length > peg$currPos', 0);
              break;

            case op.MATCH_STRING:
              compileCondition(eval(ast.consts[bc[ip + 1]]).length > 1 ? 'input.substr(peg$currPos, ' + eval(ast.consts[bc[ip + 1]]).length + ') === ' + c(bc[ip + 1]) : 'input.charCodeAt(peg$currPos) === ' + eval(ast.consts[bc[ip + 1]]).charCodeAt(0), 1);
              break;

            case op.MATCH_STRING_IC:
              compileCondition('input.substr(peg$currPos, ' + eval(ast.consts[bc[ip + 1]]).length + ').toLowerCase() === ' + c(bc[ip + 1]), 1);
              break;

            case op.MATCH_REGEXP:
              compileCondition(c(bc[ip + 1]) + '.test(input.charAt(peg$currPos))', 1);
              break;

            case op.ACCEPT_N:
              parts.push(stack.push(bc[ip + 1] > 1 ? 'input.substr(peg$currPos, ' + bc[ip + 1] + ')' : 'input.charAt(peg$currPos)'));
              parts.push(bc[ip + 1] > 1 ? 'peg$currPos += ' + bc[ip + 1] + ';' : 'peg$currPos++;');
              ip += 2;
              break;

            case op.ACCEPT_STRING:
              parts.push(stack.push(c(bc[ip + 1])));
              parts.push(eval(ast.consts[bc[ip + 1]]).length > 1 ? 'peg$currPos += ' + eval(ast.consts[bc[ip + 1]]).length + ';' : 'peg$currPos++;');
              ip += 2;
              break;

            case op.FAIL:
              parts.push(stack.push('peg$FAILED'));
              parts.push('if (peg$silentFails === 0) { peg$fail(' + c(bc[ip + 1]) + '); }');
              ip += 2;
              break;

            case op.LOAD_SAVED_POS:
              parts.push('peg$savedPos = ' + stack.index(bc[ip + 1]) + ';');
              ip += 2;
              break;

            case op.UPDATE_SAVED_POS:
              parts.push('peg$savedPos = peg$currPos;');
              ip++;
              break;

            case op.CALL:
              compileCall();
              break;

            case op.RULE:
              parts.push(stack.push("peg$parse" + ast.rules[bc[ip + 1]].name + "()"));
              ip += 2;
              break;

            case op.SILENT_FAILS_ON:
              parts.push('peg$silentFails++;');
              ip++;
              break;

            case op.SILENT_FAILS_OFF:
              parts.push('peg$silentFails--;');
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        return parts.join('\n');
      }

      code = compile(rule.bytecode);
      parts.push('function peg$parse' + rule.name + '() {');

      if (options.trace) {
        parts.push(['  var ' + arrays.map(arrays.range(0, stack.maxSp + 1), s).join(', ') + ',', '      startPos = peg$currPos;'].join('\n'));
      } else {
        parts.push('  var ' + arrays.map(arrays.range(0, stack.maxSp + 1), s).join(', ') + ';');
      }

      parts.push(indent2(generateRuleHeader('"' + js.stringEscape(rule.name) + '"', asts.indexOfRule(ast, rule.name))));
      parts.push(indent2(code));
      parts.push(indent2(generateRuleFooter('"' + js.stringEscape(rule.name) + '"', s(0))));
      parts.push('}');
      return parts.join('\n');
    }

    function generateToplevel() {
      var parts = [],
          startRuleIndices,
          startRuleIndex,
          startRuleFunctions,
          startRuleFunction,
          ruleNames;
      parts.push(['function peg$subclass(child, parent) {', '  function ctor() { this.constructor = child; }', '  ctor.prototype = parent.prototype;', '  child.prototype = new ctor();', '}', '', 'function peg$SyntaxError(message, expected, found, location) {', '  this.message  = message;', '  this.expected = expected;', '  this.found    = found;', '  this.location = location;', '  this.name     = "SyntaxError";', '', '  if (typeof Error.captureStackTrace === "function") {', '    Error.captureStackTrace(this, peg$SyntaxError);', '  }', '}', '', 'peg$subclass(peg$SyntaxError, Error);', '', 'peg$SyntaxError.buildMessage = function(expected, found) {', '  var DESCRIBE_EXPECTATION_FNS = {', '        literal: function(expectation) {', '          return "\\\"" + literalEscape(expectation.text) + "\\\"";', '        },', '', '        "class": function(expectation) {', '          var escapedParts = "",', '              i;', '', '          for (i = 0; i < expectation.parts.length; i++) {', '            escapedParts += expectation.parts[i] instanceof Array', '              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])', '              : classEscape(expectation.parts[i]);', '          }', '', '          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";', '        },', '', '        any: function(expectation) {', '          return "any character";', '        },', '', '        end: function(expectation) {', '          return "end of input";', '        },', '', '        other: function(expectation) {', '          return expectation.description;', '        }', '      };', '', '  function hex(ch) {', '    return ch.charCodeAt(0).toString(16).toUpperCase();', '  }', '', '  function literalEscape(s) {', '    return s', '      .replace(/\\\\/g, \'\\\\\\\\\')', '      .replace(/"/g,  \'\\\\"\')', '      .replace(/\\0/g, \'\\\\0\')', '      .replace(/\\t/g, \'\\\\t\')', '      .replace(/\\n/g, \'\\\\n\')', '      .replace(/\\r/g, \'\\\\r\')', '      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \'\\\\x0\' + hex(ch); })', '      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \'\\\\x\'  + hex(ch); });', '  }', '', '  function classEscape(s) {', '    return s', '      .replace(/\\\\/g, \'\\\\\\\\\')', '      .replace(/\\]/g, \'\\\\]\')', '      .replace(/\\^/g, \'\\\\^\')', '      .replace(/-/g,  \'\\\\-\')', '      .replace(/\\0/g, \'\\\\0\')', '      .replace(/\\t/g, \'\\\\t\')', '      .replace(/\\n/g, \'\\\\n\')', '      .replace(/\\r/g, \'\\\\r\')', '      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \'\\\\x0\' + hex(ch); })', '      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \'\\\\x\'  + hex(ch); });', '  }', '', '  function describeExpectation(expectation) {', '    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);', '  }', '', '  function describeExpected(expected) {', '    var descriptions = new Array(expected.length),', '        i, j;', '', '    for (i = 0; i < expected.length; i++) {', '      descriptions[i] = describeExpectation(expected[i]);', '    }', '', '    descriptions.sort();', '', '    if (descriptions.length > 0) {', '      for (i = 1, j = 1; i < descriptions.length; i++) {', '        if (descriptions[i - 1] !== descriptions[i]) {', '          descriptions[j] = descriptions[i];', '          j++;', '        }', '      }', '      descriptions.length = j;', '    }', '', '    switch (descriptions.length) {', '      case 1:', '        return descriptions[0];', '', '      case 2:', '        return descriptions[0] + " or " + descriptions[1];', '', '      default:', '        return descriptions.slice(0, -1).join(", ")', '          + ", or "', '          + descriptions[descriptions.length - 1];', '    }', '  }', '', '  function describeFound(found) {', '    return found ? "\\"" + literalEscape(found) + "\\"" : "end of input";', '  }', '', '  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";', '};', ''].join('\n'));

      if (options.trace) {
        parts.push(['function peg$DefaultTracer() {', '  this.indentLevel = 0;', '}', '', 'peg$DefaultTracer.prototype.trace = function(event) {', '  var that = this;', '', '  function log(event) {', '    function repeat(string, n) {', '       var result = "", i;', '', '       for (i = 0; i < n; i++) {', '         result += string;', '       }', '', '       return result;', '    }', '', '    function pad(string, length) {', '      return string + repeat(" ", length - string.length);', '    }', '', '    if (typeof console === "object") {', '      console.log(', '        event.location.start.line + ":" + event.location.start.column + "-"', '          + event.location.end.line + ":" + event.location.end.column + " "', '          + pad(event.type, 10) + " "', '          + repeat("  ", that.indentLevel) + event.rule', '      );', '    }', '  }', '', '  switch (event.type) {', '    case "rule.enter":', '      log(event);', '      this.indentLevel++;', '      break;', '', '    case "rule.match":', '      this.indentLevel--;', '      log(event);', '      break;', '', '    case "rule.fail":', '      this.indentLevel--;', '      log(event);', '      break;', '', '    default:', '      throw new Error("Invalid event type: " + event.type + ".");', '  }', '};', ''].join('\n'));
      }

      parts.push(['function peg$parse(input, options) {', '  options = options !== void 0 ? options : {};', '', '  var peg$FAILED = {},', ''].join('\n'));

      if (options.optimize === "size") {
        startRuleIndices = '{ ' + arrays.map(options.allowedStartRules, function (r) {
          return r + ': ' + asts.indexOfRule(ast, r);
        }).join(', ') + ' }';
        startRuleIndex = asts.indexOfRule(ast, options.allowedStartRules[0]);
        parts.push(['      peg$startRuleIndices = ' + startRuleIndices + ',', '      peg$startRuleIndex   = ' + startRuleIndex + ','].join('\n'));
      } else {
        startRuleFunctions = '{ ' + arrays.map(options.allowedStartRules, function (r) {
          return r + ': peg$parse' + r;
        }).join(', ') + ' }';
        startRuleFunction = 'peg$parse' + options.allowedStartRules[0];
        parts.push(['      peg$startRuleFunctions = ' + startRuleFunctions + ',', '      peg$startRuleFunction  = ' + startRuleFunction + ','].join('\n'));
      }

      parts.push('');
      parts.push(indent6(generateTables()));
      parts.push(['', '      peg$currPos          = 0,', '      peg$savedPos         = 0,', '      peg$posDetailsCache  = [{ line: 1, column: 1 }],', '      peg$maxFailPos       = 0,', '      peg$maxFailExpected  = [],', '      peg$silentFails      = 0,', ''].join('\n'));

      if (options.cache) {
        parts.push(['      peg$resultsCache = {},', ''].join('\n'));
      }

      if (options.trace) {
        if (options.optimize === "size") {
          ruleNames = '[' + arrays.map(ast.rules, function (r) {
            return '"' + js.stringEscape(r.name) + '"';
          }).join(', ') + ']';
          parts.push(['      peg$ruleNames = ' + ruleNames + ',', ''].join('\n'));
        }

        parts.push(['      peg$tracer = "tracer" in options ? options.tracer : new peg$DefaultTracer(),', ''].join('\n'));
      }

      parts.push(['      peg$result;', ''].join('\n'));

      if (options.optimize === "size") {
        parts.push(['  if ("startRule" in options) {', '    if (!(options.startRule in peg$startRuleIndices)) {', '      throw new Error("Can\'t start parsing from rule \\"" + options.startRule + "\\".");', '    }', '', '    peg$startRuleIndex = peg$startRuleIndices[options.startRule];', '  }'].join('\n'));
      } else {
        parts.push(['  if ("startRule" in options) {', '    if (!(options.startRule in peg$startRuleFunctions)) {', '      throw new Error("Can\'t start parsing from rule \\"" + options.startRule + "\\".");', '    }', '', '    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];', '  }'].join('\n'));
      }

      parts.push(['', '  function text() {', '    return input.substring(peg$savedPos, peg$currPos);', '  }', '', '  function location() {', '    return peg$computeLocation(peg$savedPos, peg$currPos);', '  }', '', '  function expected(description, location) {', '    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)', '', '    throw peg$buildStructuredError(', '      [peg$otherExpectation(description)],', '      input.substring(peg$savedPos, peg$currPos),', '      location', '    );', '  }', '', '  function error(message, location) {', '    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)', '', '    throw peg$buildSimpleError(message, location);', '  }', '', '  function peg$literalExpectation(text, ignoreCase) {', '    return { type: "literal", text: text, ignoreCase: ignoreCase };', '  }', '', '  function peg$classExpectation(parts, inverted, ignoreCase) {', '    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };', '  }', '', '  function peg$anyExpectation() {', '    return { type: "any" };', '  }', '', '  function peg$endExpectation() {', '    return { type: "end" };', '  }', '', '  function peg$otherExpectation(description) {', '    return { type: "other", description: description };', '  }', '', '  function peg$computePosDetails(pos) {', '    var details = peg$posDetailsCache[pos], p;', '', '    if (details) {', '      return details;', '    } else {', '      p = pos - 1;', '      while (!peg$posDetailsCache[p]) {', '        p--;', '      }', '', '      details = peg$posDetailsCache[p];', '      details = {', '        line:   details.line,', '        column: details.column', '      };', '', '      while (p < pos) {', '        if (input.charCodeAt(p) === 10) {', '          details.line++;', '          details.column = 1;', '        } else {', '          details.column++;', '        }', '', '        p++;', '      }', '', '      peg$posDetailsCache[pos] = details;', '      return details;', '    }', '  }', '', '  function peg$computeLocation(startPos, endPos) {', '    var startPosDetails = peg$computePosDetails(startPos),', '        endPosDetails   = peg$computePosDetails(endPos);', '', '    return {', '      start: {', '        offset: startPos,', '        line:   startPosDetails.line,', '        column: startPosDetails.column', '      },', '      end: {', '        offset: endPos,', '        line:   endPosDetails.line,', '        column: endPosDetails.column', '      }', '    };', '  }', '', '  function peg$fail(expected) {', '    if (peg$currPos < peg$maxFailPos) { return; }', '', '    if (peg$currPos > peg$maxFailPos) {', '      peg$maxFailPos = peg$currPos;', '      peg$maxFailExpected = [];', '    }', '', '    peg$maxFailExpected.push(expected);', '  }', '', '  function peg$buildSimpleError(message, location) {', '    return new peg$SyntaxError(message, null, null, location);', '  }', '', '  function peg$buildStructuredError(expected, found, location) {', '    return new peg$SyntaxError(', '      peg$SyntaxError.buildMessage(expected, found),', '      expected,', '      found,', '      location', '    );', '  }', ''].join('\n'));

      if (options.optimize === "size") {
        parts.push(indent2(generateInterpreter()));
        parts.push('');
      } else {
        arrays.each(ast.rules, function (rule) {
          parts.push(indent2(generateRuleFunction(rule)));
          parts.push('');
        });
      }

      if (ast.initializer) {
        parts.push(indent2(ast.initializer.code));
        parts.push('');
      }

      if (options.optimize === "size") {
        parts.push('  peg$result = peg$parseRule(peg$startRuleIndex);');
      } else {
        parts.push('  peg$result = peg$startRuleFunction();');
      }

      parts.push(['', '  if (peg$result !== peg$FAILED && peg$currPos === input.length) {', '    return peg$result;', '  } else {', '    if (peg$result !== peg$FAILED && peg$currPos < input.length) {', '      peg$fail(peg$endExpectation());', '    }', '', '    throw peg$buildStructuredError(', '      peg$maxFailExpected,', '      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,', '      peg$maxFailPos < input.length', '        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)', '        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)', '    );', '  }', '}'].join('\n'));
      return parts.join('\n');
    }

    function generateWrapper(toplevelCode) {
      function generateGeneratedByComment() {
        return ['/*', ' * Generated by PEG.js 0.10.0.', ' *', ' * http://pegjs.org/', ' */'].join('\n');
      }

      function generateParserObject() {
        return options.trace ? ['{', '  SyntaxError:   peg$SyntaxError,', '  DefaultTracer: peg$DefaultTracer,', '  parse:         peg$parse', '}'].join('\n') : ['{', '  SyntaxError: peg$SyntaxError,', '  parse:       peg$parse', '}'].join('\n');
      }

      var generators = {
        bare: function bare() {
          return [generateGeneratedByComment(), '(function() {', '  "use strict";', '', indent2(toplevelCode), '', indent2('return ' + generateParserObject() + ';'), '})()'].join('\n');
        },
        commonjs: function commonjs() {
          var parts = [],
              dependencyVars = objects.keys(options.dependencies),
              requires = arrays.map(dependencyVars, function (variable) {
            return variable + ' = require("' + js.stringEscape(options.dependencies[variable]) + '")';
          });
          parts.push([generateGeneratedByComment(), '', '"use strict";', ''].join('\n'));

          if (requires.length > 0) {
            parts.push('var ' + requires.join(', ') + ';');
            parts.push('');
          }

          parts.push([toplevelCode, '', 'module.exports = ' + generateParserObject() + ';', ''].join('\n'));
          return parts.join('\n');
        },
        amd: function amd() {
          var dependencyIds = objects.values(options.dependencies),
              dependencyVars = objects.keys(options.dependencies),
              dependencies = '[' + arrays.map(dependencyIds, function (id) {
            return '"' + js.stringEscape(id) + '"';
          }).join(', ') + ']',
              params = dependencyVars.join(', ');
          return [generateGeneratedByComment(), 'define(' + dependencies + ', function(' + params + ') {', '  "use strict";', '', indent2(toplevelCode), '', indent2('return ' + generateParserObject() + ';'), '});', ''].join('\n');
        },
        globals: function globals() {
          return [generateGeneratedByComment(), '(function(root) {', '  "use strict";', '', indent2(toplevelCode), '', indent2('root.' + options.exportVar + ' = ' + generateParserObject() + ';'), '})(this);', ''].join('\n');
        },
        umd: function umd() {
          var parts = [],
              dependencyIds = objects.values(options.dependencies),
              dependencyVars = objects.keys(options.dependencies),
              dependencies = '[' + arrays.map(dependencyIds, function (id) {
            return '"' + js.stringEscape(id) + '"';
          }).join(', ') + ']',
              requires = arrays.map(dependencyIds, function (id) {
            return 'require("' + js.stringEscape(id) + '")';
          }).join(', '),
              params = dependencyVars.join(', ');
          parts.push([generateGeneratedByComment(), '(function(root, factory) {', '  if (typeof define === "function" && define.amd) {', '    define(' + dependencies + ', factory);', '  } else if (typeof module === "object" && module.exports) {', '    module.exports = factory(' + requires + ');'].join('\n'));

          if (options.exportVar !== null) {
            parts.push(['  } else {', '    root.' + options.exportVar + ' = factory();'].join('\n'));
          }

          parts.push(['  }', '})(this, function(' + params + ') {', '  "use strict";', '', indent2(toplevelCode), '', indent2('return ' + generateParserObject() + ';'), '});', ''].join('\n'));
          return parts.join('\n');
        }
      };
      return generators[options.format]();
    }

    ast.code = generateWrapper(generateToplevel());
  }

  module.exports = generateJS;
},452,[435,436,443,450,451]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (props) {
        var clipPath = props.clipPath,
            clipRule = props.clipRule;
        var clipPathProps = {};

        if (clipPath) {
            clipPathProps.clipRule = clipRules[clipRule] === 0 ? 0 : 1;
            var matched = clipPath.match(_patternReg2.default);

            if (matched) {
                clipPathProps.clipPath = matched[1];
            } else {
                console.warn('Invalid `clipPath` prop, expected a clipPath like `"#id"`, but got: "' + clipPath + '"');
            }
        }

        return clipPathProps;
    };

    var _patternReg = _require(_dependencyMap[0]);

    var _patternReg2 = babelHelpers.interopRequireDefault(_patternReg);

    var clipRules = {
        evenodd: 0,
        nonzero: 1
    };
},453,[428]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (props, ref) {
        var extractedProps = {};

        _lodash2.default.forEach(_props.responderProps, function (v, key) {
            var value = props[key];

            if (props[key]) {
                if (!extractedProps.responsible && key !== 'pointerEvents') {
                    extractedProps.responsible = true;
                }

                extractedProps[key] = value;
            }
        });

        _lodash2.default.every(_props.touchableProps, function (v, key) {
            if (!props[key]) {
                return true;
            }

            extractedProps.responsible = true;
            babelHelpers.extends(extractedProps, {
                onStartShouldSetResponder: ref.touchableHandleStartShouldSetResponder,
                onResponderTerminationRequest: ref.touchableHandleResponderTerminationRequest,
                onResponderGrant: ref.touchableHandleResponderGrant,
                onResponderMove: ref.touchableHandleResponderMove,
                onResponderRelease: ref.touchableHandleResponderRelease,
                onResponderTerminate: ref.touchableHandleResponderTerminate
            });
            return false;
        });

        return extractedProps;
    };

    var _props = _require(_dependencyMap[0]);

    var _lodash = _require(_dependencyMap[1]);

    var _lodash2 = babelHelpers.interopRequireDefault(_lodash);
},454,[415,348]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _createReactNativeComponentClass = _require(_dependencyMap[1]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _Shape2 = _require(_dependencyMap[2]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var _attributes = _require(_dependencyMap[3]);

    var _props = _require(_dependencyMap[4]);

    var _extractProps = _require(_dependencyMap[5]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var _default = (_temp2 = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var props = this.props;
                return _react2.default.createElement(RNSVGCircle, babelHelpers.extends({
                    ref: function ref(ele) {
                        _this2.root = ele;
                    }
                }, (0, _extractProps2.default)(props, this), {
                    cx: props.cx.toString(),
                    cy: props.cy.toString(),
                    r: props.r.toString()
                }));
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'Circle', _class.propTypes = babelHelpers.extends({}, _props.pathProps, {
        cx: _props.numberProp.isRequired,
        cy: _props.numberProp.isRequired,
        r: _props.numberProp.isRequired
    }), _class.defaultProps = {
        cx: 0,
        cy: 0,
        r: 0
    }, _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root;

            (_root = _this3.root).setNativeProps.apply(_root, arguments);
        };
    }, _temp2);

    exports.default = _default;
    var RNSVGCircle = (0, _createReactNativeComponentClass2.default)('RNSVGCircle', function () {
        return {
            validAttributes: _attributes.CircleAttributes,
            uiViewClassName: 'RNSVGCircle'
        };
    });
},455,[103,411,413,412,415,416]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _createReactNativeComponentClass = _require(_dependencyMap[1]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _Shape2 = _require(_dependencyMap[2]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var _props = _require(_dependencyMap[3]);

    var _attributes = _require(_dependencyMap[4]);

    var _extractProps = _require(_dependencyMap[5]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var _default = (_temp2 = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var props = this.props;
                return _react2.default.createElement(RNSVGEllipse, babelHelpers.extends({
                    ref: function ref(ele) {
                        _this2.root = ele;
                    }
                }, (0, _extractProps2.default)(props, this), {
                    cx: props.cx.toString(),
                    cy: props.cy.toString(),
                    rx: props.rx.toString(),
                    ry: props.ry.toString()
                }));
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'Ellipse', _class.propTypes = babelHelpers.extends({}, _props.pathProps, {
        cx: _props.numberProp.isRequired,
        cy: _props.numberProp.isRequired,
        rx: _props.numberProp.isRequired,
        ry: _props.numberProp.isRequired
    }), _class.defaultProps = {
        cx: 0,
        cy: 0,
        rx: 0,
        ry: 0
    }, _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root;

            (_root = _this3.root).setNativeProps.apply(_root, arguments);
        };
    }, _temp2);

    exports.default = _default;
    var RNSVGEllipse = (0, _createReactNativeComponentClass2.default)('RNSVGEllipse', function () {
        return {
            validAttributes: _attributes.EllipseAttributes,
            uiViewClassName: 'RNSVGEllipse'
        };
    });
},456,[103,411,413,415,412,416]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _Path = _require(_dependencyMap[2]);

    var _Path2 = babelHelpers.interopRequireDefault(_Path);

    var _props = _require(_dependencyMap[3]);

    var _extractPolyPoints = _require(_dependencyMap[4]);

    var _extractPolyPoints2 = babelHelpers.interopRequireDefault(_extractPolyPoints);

    var _default = (_temp2 = _class = function (_Component) {
        babelHelpers.inherits(_default, _Component);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var points = this.props.points;

                if (Array.isArray(points)) {
                    points = points.join(',');
                }

                return _react2.default.createElement(_Path2.default, babelHelpers.extends({
                    ref: function ref(ele) {
                        _this2.root = ele;
                    }
                }, this.props, {
                    d: "M" + (0, _extractPolyPoints2.default)(points) + "z"
                }));
            }
        }]);
        return _default;
    }(_react.Component), _class.displayName = 'Polygon', _class.propTypes = babelHelpers.extends({}, _props.pathProps, {
        points: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.array]).isRequired
    }), _class.defaultProps = {
        points: ''
    }, _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root$getNativeElemen;

            (_root$getNativeElemen = _this3.root.getNativeElement()).setNativeProps.apply(_root$getNativeElemen, arguments);
        };
    }, _temp2);

    exports.default = _default;
},457,[103,121,410,415,458]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (polyPoints) {
        return polyPoints.replace(/[^e]-/, ' -').split(/(?:\s+|\s*,\s*)/g).join(' ');
    };
},458,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _Path = _require(_dependencyMap[2]);

    var _Path2 = babelHelpers.interopRequireDefault(_Path);

    var _props = _require(_dependencyMap[3]);

    var _extractPolyPoints = _require(_dependencyMap[4]);

    var _extractPolyPoints2 = babelHelpers.interopRequireDefault(_extractPolyPoints);

    var _default = (_temp2 = _class = function (_Component) {
        babelHelpers.inherits(_default, _Component);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var points = this.props.points;

                if (Array.isArray(points)) {
                    points = points.join(',');
                }

                return _react2.default.createElement(_Path2.default, babelHelpers.extends({
                    ref: function ref(ele) {
                        _this2.root = ele;
                    }
                }, this.props, {
                    d: "M" + (0, _extractPolyPoints2.default)(points)
                }));
            }
        }]);
        return _default;
    }(_react.Component), _class.displayName = 'Polyline', _class.propTypes = babelHelpers.extends({}, _props.pathProps, {
        points: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.array]).isRequired
    }), _class.defaultProps = {
        points: ''
    }, _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root$getNativeElemen;

            (_root$getNativeElemen = _this3.root.getNativeElement()).setNativeProps.apply(_root$getNativeElemen, arguments);
        };
    }, _temp2);

    exports.default = _default;
},459,[103,121,410,415,458]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _createReactNativeComponentClass = _require(_dependencyMap[1]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _attributes = _require(_dependencyMap[2]);

    var _Shape2 = _require(_dependencyMap[3]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var _props = _require(_dependencyMap[4]);

    var _extractProps = _require(_dependencyMap[5]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var _default = (_temp2 = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var props = this.props;
                return _react2.default.createElement(RNSVGLine, babelHelpers.extends({
                    ref: function ref(ele) {
                        _this2.root = ele;
                    }
                }, (0, _extractProps2.default)(props, this), {
                    x1: props.x1.toString(),
                    y1: props.y1.toString(),
                    x2: props.x2.toString(),
                    y2: props.y2.toString()
                }));
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'Line', _class.propTypes = babelHelpers.extends({}, _props.pathProps, {
        x1: _props.numberProp.isRequired,
        x2: _props.numberProp.isRequired,
        y1: _props.numberProp.isRequired,
        y2: _props.numberProp.isRequired
    }), _class.defaultProps = {
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0
    }, _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root;

            (_root = _this3.root).setNativeProps.apply(_root, arguments);
        };
    }, _temp2);

    exports.default = _default;
    var RNSVGLine = (0, _createReactNativeComponentClass2.default)('RNSVGLine', function () {
        return {
            validAttributes: _attributes.LineAttributes,
            uiViewClassName: 'RNSVGLine'
        };
    });
},460,[103,411,412,413,415,416]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _class, _temp;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[2]);

    var _extractViewBox = _require(_dependencyMap[3]);

    var _extractViewBox2 = babelHelpers.interopRequireDefault(_extractViewBox);

    var _attributes = _require(_dependencyMap[4]);

    var RNSVGSvgViewManager = _reactNative.NativeModules.RNSVGSvgViewManager;
    var id = 0;

    var styles = _reactNative.StyleSheet.create({
        svg: {
            backgroundColor: 'transparent'
        }
    });

    var Svg = (_temp = _class = function (_Component) {
        babelHelpers.inherits(Svg, _Component);

        function Svg() {
            babelHelpers.classCallCheck(this, Svg);

            var _this = babelHelpers.possibleConstructorReturn(this, (Svg.__proto__ || Object.getPrototypeOf(Svg)).apply(this, arguments));

            _this.measureInWindow = function () {
                var _this$root;

                (_this$root = _this.root).measureInWindow.apply(_this$root, arguments);
            };

            _this.measure = function () {
                var _this$root2;

                (_this$root2 = _this.root).measure.apply(_this$root2, arguments);
            };

            _this.measureLayout = function () {
                var _this$root3;

                (_this$root3 = _this.root).measureLayout.apply(_this$root3, arguments);
            };

            _this.setNativeProps = function () {
                var _this$root4;

                (_this$root4 = _this.root).setNativeProps.apply(_this$root4, arguments);
            };

            _this.toDataURL = function (callback) {
                callback && RNSVGSvgViewManager.toDataURL((0, _reactNative.findNodeHandle)(_this.root), callback);
            };

            id++;
            _this.id = id;
            _this.onDataURLCallbacks = [];
            return _this;
        }

        babelHelpers.createClass(Svg, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var _props = this.props,
                    opacity = _props.opacity,
                    width = _props.width,
                    height = _props.height,
                    viewBox = _props.viewBox,
                    preserveAspectRatio = _props.preserveAspectRatio,
                    style = _props.style,
                    props = babelHelpers.objectWithoutProperties(_props, ["opacity", "width", "height", "viewBox", "preserveAspectRatio", "style"]);
                var dimensions = void 0;

                if (width && height) {
                    dimensions = {
                        width: +width,
                        height: +height,
                        flex: 0
                    };
                }

                return _react2.default.createElement(NativeSvgView, babelHelpers.extends({}, props, (0, _extractViewBox2.default)({
                    viewBox: viewBox,
                    preserveAspectRatio: preserveAspectRatio
                }), {
                    ref: function ref(ele) {
                        _this2.root = ele;
                    },
                    style: [styles.svg, style, !isNaN(+opacity) && {
                        opacity: +opacity
                    }, dimensions]
                }));
            }
        }]);
        return Svg;
    }(_react.Component), _class.displayName = 'Svg', _class.propTypes = babelHelpers.extends({}, _reactNative.ViewPropTypes, {
        opacity: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        viewBox: _propTypes2.default.string,
        preserveAspectRatio: _propTypes2.default.string
    }), _class.defaultProps = {
        preserveAspectRatio: 'xMidYMid meet'
    }, _temp);
    var NativeSvgView = (0, _reactNative.requireNativeComponent)('RNSVGSvgView', null, {
        nativeOnly: babelHelpers.extends({}, _attributes.ViewBoxAttributes)
    });
    exports.default = Svg;
},461,[103,121,14,462,412]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (props) {
        var viewBox = props.viewBox,
            preserveAspectRatio = props.preserveAspectRatio;

        if (!viewBox) {
            return null;
        }

        var params = viewBox.trim().split(spacesRegExp);

        if (params.length === 4 && params.every(function (param) {
            return !isNaN(+params);
        })) {
            console.warn('Invalid `viewBox` prop:' + viewBox);
            return null;
        }

        var modes = preserveAspectRatio ? preserveAspectRatio.trim().split(spacesRegExp) : [];
        var meetOrSlice = meetOrSliceTypes[modes[1]] || 0;
        var align = alignEnum[modes[0]] || 'xMidYMid';
        return {
            minX: +params[0],
            minY: +params[1],
            vbWidth: +params[2],
            vbHeight: +params[3],
            align: align,
            meetOrSlice: meetOrSlice
        };
    };

    var meetOrSliceTypes = {
        meet: 0,
        slice: 1,
        none: 2
    };
    var alignEnum = ['xMinYMin', 'xMidYMin', 'xMaxYMin', 'xMinYMid', 'xMidYMid', 'xMaxYMid', 'xMinYMax', 'xMidYMax', 'xMaxYMax', 'none'].reduce(function (prev, name) {
        prev[name] = name;
        return prev;
    }, {});
    var spacesRegExp = /\s+/;
    exports.meetOrSliceTypes = meetOrSliceTypes;
    exports.alignEnum = alignEnum;
},462,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _createReactNativeComponentClass = _require(_dependencyMap[1]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _Shape2 = _require(_dependencyMap[2]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var _props = _require(_dependencyMap[3]);

    var _attributes = _require(_dependencyMap[4]);

    var _extractProps = _require(_dependencyMap[5]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var _extractText = _require(_dependencyMap[6]);

    var _default = (_temp2 = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var props = this.props;
                return _react2.default.createElement(
                    RNSVGGroup,
                    babelHelpers.extends({}, (0, _extractProps2.default)(props, this), {
                        font: (0, _extractText.extractFont)(props),
                        ref: function ref(ele) {
                            _this2.root = ele;
                        }
                    }),
                    props.children
                );
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'G', _class.propTypes = babelHelpers.extends({}, _props.pathProps, _props.fontProps), _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root;

            (_root = _this3.root).setNativeProps.apply(_root, arguments);
        };
    }, _temp2);

    exports.default = _default;
    var RNSVGGroup = (0, _createReactNativeComponentClass2.default)('RNSVGGroup', function () {
        return {
            validAttributes: _attributes.GroupAttributes,
            uiViewClassName: 'RNSVGGroup'
        };
    });
},463,[103,411,413,415,412,416,464]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.extractFont = extractFont;

    exports.default = function (props, container) {
        var x = props.x,
            y = props.y,
            dx = props.dx,
            dy = props.dy,
            alignmentBaseline = props.alignmentBaseline,
            baselineShift = props.baselineShift,
            verticalAlign = props.verticalAlign;
        var rotate = props.rotate,
            children = props.children;
        var positionX = (0, _extractLengthList2.default)(x);
        var positionY = (0, _extractLengthList2.default)(y);
        var deltaX = (0, _extractLengthList2.default)(dx);
        var deltaY = (0, _extractLengthList2.default)(dy);
        rotate = (0, _extractLengthList2.default)(rotate);
        var content = null;

        if (typeof children === 'string' || typeof children === 'number') {
            var childrenString = children.toString();

            if (container) {
                children = _react2.default.createElement(
                    _TSpan2.default,
                    null,
                    childrenString
                );
            } else {
                content = childrenString;
                children = null;
            }
        } else if (_react.Children.count(children) > 1 || Array.isArray(children)) {
            children = _react.Children.map(children, function (child) {
                if (typeof child === 'string' || typeof child === 'number') {
                    return _react2.default.createElement(
                        _TSpan2.default,
                        null,
                        child.toString()
                    );
                } else {
                    return child;
                }
            });
        }

        var font = extractFont(props);
        return {
            font: font,
            children: children,
            content: content,
            positionX: positionX,
            positionY: positionY,
            rotate: rotate,
            deltaX: deltaX,
            deltaY: deltaY,
            alignmentBaseline: alignmentBaseline,
            baselineShift: baselineShift,
            verticalAlign: verticalAlign
        };
    };

    var _lodash = _require(_dependencyMap[0]);

    var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

    var _react = _require(_dependencyMap[1]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _TSpan = _require(_dependencyMap[2]);

    var _TSpan2 = babelHelpers.interopRequireDefault(_TSpan);

    var _extractLengthList = _require(_dependencyMap[3]);

    var _extractLengthList2 = babelHelpers.interopRequireDefault(_extractLengthList);

    var fontRegExp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?[ptexm%])*(?:\s*\/.*?)?\s+)?\s*"?([^"]*)/i;
    var fontFamilyPrefix = /^[\s"']*/;
    var fontFamilySuffix = /[\s"']*$/;
    var commaReg = /\s*,\s*/g;
    var cachedFontObjectsFromString = {};

    function extractSingleFontFamily(fontFamilyString) {
        return fontFamilyString ? fontFamilyString.split(commaReg)[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '') : null;
    }

    function parseFontString(font) {
        if (cachedFontObjectsFromString.hasOwnProperty(font)) {
            return cachedFontObjectsFromString[font];
        }

        var match = fontRegExp.exec(font);

        if (!match) {
            return null;
        }

        var fontFamily = extractSingleFontFamily(match[3]);
        var fontSize = match[2] || '12';
        var isBold = /bold/.exec(match[1]);
        var isItalic = /italic/.exec(match[1]);
        var fontWeight = isBold ? 'bold' : 'normal';
        var fontStyle = isItalic ? 'italic' : 'normal';
        cachedFontObjectsFromString[font] = {
            fontSize: fontSize,
            fontFamily: fontFamily,
            fontWeight: fontWeight,
            fontStyle: fontStyle
        };
        return cachedFontObjectsFromString[font];
    }

    function extractFont(props) {
        var fontData = props.fontData,
            fontStyle = props.fontStyle,
            fontVariant = props.fontVariant,
            fontWeight = props.fontWeight,
            fontStretch = props.fontStretch,
            textAnchor = props.textAnchor,
            textDecoration = props.textDecoration,
            letterSpacing = props.letterSpacing,
            wordSpacing = props.wordSpacing,
            kerning = props.kerning,
            fontVariantLigatures = props.fontVariantLigatures,
            fontFeatureSettings = props.fontFeatureSettings;
        var fontSize = props.fontSize,
            fontFamily = props.fontFamily,
            font = props.font;
        fontFamily = extractSingleFontFamily(fontFamily);
        fontSize = fontSize ? '' + fontSize : null;

        var ownedFont = _lodash2.default.pickBy({
            fontData: fontData,
            fontStyle: fontStyle,
            fontVariant: fontVariant,
            fontWeight: fontWeight,
            fontStretch: fontStretch,
            fontSize: fontSize,
            fontFamily: fontFamily,
            textAnchor: textAnchor,
            textDecoration: textDecoration,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            kerning: kerning,
            fontVariantLigatures: fontVariantLigatures,
            fontFeatureSettings: fontFeatureSettings
        }, function (prop) {
            return !_lodash2.default.isNil(prop);
        });

        if (typeof font === 'string') {
            font = parseFontString(font);
        }

        return _lodash2.default.defaults(ownedFont, font);
    }
},464,[348,103,465,431]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _createReactNativeComponentClass = _require(_dependencyMap[2]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _extractText = _require(_dependencyMap[3]);

    var _extractText2 = babelHelpers.interopRequireDefault(_extractText);

    var _props = _require(_dependencyMap[4]);

    var _attributes = _require(_dependencyMap[5]);

    var _extractProps = _require(_dependencyMap[6]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var _Shape2 = _require(_dependencyMap[7]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var _default = (_temp2 = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "getChildContext",
            value: function getChildContext() {
                return {
                    isInAParentText: true
                };
            }
        }, {
            key: "getContextTypes",
            value: function getContextTypes() {
                return {
                    isInAParentText: _propTypes2.default.bool
                };
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                var props = this.props;
                return _react2.default.createElement(RNSVGTSpan, babelHelpers.extends({
                    ref: function ref(ele) {
                        _this2.root = ele;
                    }
                }, (0, _extractProps2.default)(babelHelpers.extends({}, props, {
                    x: null,
                    y: null
                }), this), (0, _extractText2.default)(props)));
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'TSpan', _class.propTypes = _props.textProps, _class.childContextTypes = {
        isInAParentText: _propTypes2.default.bool
    }, _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root;

            (_root = _this3.root).setNativeProps.apply(_root, arguments);
        };
    }, _temp2);

    exports.default = _default;
    var RNSVGTSpan = (0, _createReactNativeComponentClass2.default)('RNSVGTSpan', function () {
        return {
            validAttributes: _attributes.TSpanAttibutes,
            uiViewClassName: 'RNSVGTSpan'
        };
    });
},465,[103,121,411,464,415,412,416,413]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _createReactNativeComponentClass = _require(_dependencyMap[2]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _extractText = _require(_dependencyMap[3]);

    var _extractText2 = babelHelpers.interopRequireDefault(_extractText);

    var _props = _require(_dependencyMap[4]);

    var _attributes = _require(_dependencyMap[5]);

    var _extractProps = _require(_dependencyMap[6]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var _Shape2 = _require(_dependencyMap[7]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var _default = (_temp2 = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "getChildContext",
            value: function getChildContext() {
                return {
                    isInAParentText: true
                };
            }
        }, {
            key: "getContextTypes",
            value: function getContextTypes() {
                return {
                    isInAParentText: _propTypes2.default.bool
                };
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                var props = this.props;
                return _react2.default.createElement(RNSVGText, babelHelpers.extends({
                    ref: function ref(ele) {
                        _this2.root = ele;
                    }
                }, (0, _extractProps2.default)(babelHelpers.extends({}, props, {
                    x: null,
                    y: null
                }), this), (0, _extractText2.default)(props, true)));
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'Text', _class.propTypes = _props.textProps, _class.childContextTypes = {
        isInAParentText: _propTypes2.default.bool
    }, _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root;

            (_root = _this3.root).setNativeProps.apply(_root, arguments);
        };
    }, _temp2);

    exports.default = _default;
    var RNSVGText = (0, _createReactNativeComponentClass2.default)('RNSVGText', function () {
        return {
            validAttributes: _attributes.TextAttributes,
            uiViewClassName: 'RNSVGText'
        };
    });
},466,[103,121,411,464,415,412,416,413]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _createReactNativeComponentClass = _require(_dependencyMap[1]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _attributes = _require(_dependencyMap[2]);

    var _extractText = _require(_dependencyMap[3]);

    var _extractText2 = babelHelpers.interopRequireDefault(_extractText);

    var _Shape2 = _require(_dependencyMap[4]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var _props2 = _require(_dependencyMap[5]);

    var _extractProps = _require(_dependencyMap[6]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var _TSpan = _require(_dependencyMap[7]);

    var _TSpan2 = babelHelpers.interopRequireDefault(_TSpan);

    var idExpReg = /^#(.+)$/;

    var _default = (_temp = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            babelHelpers.classCallCheck(this, _default);
            return babelHelpers.possibleConstructorReturn(this, (_default.__proto__ || Object.getPrototypeOf(_default)).apply(this, arguments));
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _props = this.props,
                    children = _props.children,
                    href = _props.href,
                    startOffset = _props.startOffset,
                    method = _props.method,
                    spacing = _props.spacing,
                    side = _props.side,
                    alignmentBaseline = _props.alignmentBaseline,
                    midLine = _props.midLine,
                    props = babelHelpers.objectWithoutProperties(_props, ["children", "href", "startOffset", "method", "spacing", "side", "alignmentBaseline", "midLine"]);

                if (href) {
                    var matched = href.match(idExpReg);

                    if (matched) {
                        href = matched[1];
                        startOffset = "" + (startOffset || 0);
                        return _react2.default.createElement(RNSVGTextPath, babelHelpers.extends({
                            href: href,
                            startOffset: startOffset,
                            method: method,
                            spacing: spacing,
                            side: side,
                            alignmentBaseline: alignmentBaseline,
                            midLine: midLine
                        }, (0, _extractProps2.default)(babelHelpers.extends({}, props, {
                            x: null,
                            y: null
                        }), this), (0, _extractText2.default)({
                            children: children
                        }, true)));
                    }
                }

                console.warn('Invalid `href` prop for `TextPath` element, expected a href like `"#id"`, but got: "' + props.href + '"');
                return _react2.default.createElement(
                    _TSpan2.default,
                    null,
                    children
                );
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'Span', _class.propTypes = _props2.textPathProps, _temp);

    exports.default = _default;
    var RNSVGTextPath = (0, _createReactNativeComponentClass2.default)('RNSVGTextPath', function () {
        return {
            validAttributes: _attributes.TextPathAttributes,
            uiViewClassName: 'RNSVGTextPath'
        };
    });
},467,[103,411,412,464,413,415,416,465]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _createReactNativeComponentClass = _require(_dependencyMap[2]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _extractProps = _require(_dependencyMap[3]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var _props = _require(_dependencyMap[4]);

    var _attributes = _require(_dependencyMap[5]);

    var _Shape2 = _require(_dependencyMap[6]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var idExpReg = /^#(.+)$/;

    var _default = (_temp2 = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var props = this.props;
                var matched = props.href.match(idExpReg);
                var href = void 0;

                if (matched) {
                    href = matched[1];
                }

                if (!href) {
                    console.warn('Invalid `href` prop for `Use` element, expected a href like `"#id"`, but got: "' + props.href + '"');
                }

                return _react2.default.createElement(
                    RNSVGUse,
                    babelHelpers.extends({
                        ref: function ref(ele) {
                            _this2.root = ele;
                        }
                    }, (0, _extractProps2.default)(props, this), {
                        href: href,
                        width: props.width,
                        height: props.height
                    }),
                    props.children
                );
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'Use', _class.propTypes = babelHelpers.extends({
        href: _propTypes2.default.string.isRequired,
        width: _props.numberProp,
        height: _props.numberProp
    }, _props.pathProps), _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root;

            (_root = _this3.root).setNativeProps.apply(_root, arguments);
        };
    }, _temp2);

    exports.default = _default;
    var RNSVGUse = (0, _createReactNativeComponentClass2.default)('RNSVGUse', function () {
        return {
            validAttributes: _attributes.UseAttributes,
            uiViewClassName: 'RNSVGUse'
        };
    });
},468,[103,121,411,416,415,412,413]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp2, _initialiseProps;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[2]);

    var _createReactNativeComponentClass = _require(_dependencyMap[3]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _attributes = _require(_dependencyMap[4]);

    var _props = _require(_dependencyMap[5]);

    var _Shape2 = _require(_dependencyMap[6]);

    var _Shape3 = babelHelpers.interopRequireDefault(_Shape2);

    var _resolveAssetSource = _require(_dependencyMap[7]);

    var _resolveAssetSource2 = babelHelpers.interopRequireDefault(_resolveAssetSource);

    var _extractViewBox = _require(_dependencyMap[8]);

    var _extractProps = _require(_dependencyMap[9]);

    var _extractProps2 = babelHelpers.interopRequireDefault(_extractProps);

    var spacesRegExp = /\s+/;

    var _default = (_temp2 = _class = function (_Shape) {
        babelHelpers.inherits(_default, _Shape);

        function _default() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, _default);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var props = this.props;
                var modes = props.preserveAspectRatio.trim().split(spacesRegExp);
                var meetOrSlice = _extractViewBox.meetOrSliceTypes[modes[1]] || 0;
                var align = _extractViewBox.alignEnum[modes[0]] || 'xMidYMid';
                return _react2.default.createElement(RNSVGImage, babelHelpers.extends({
                    ref: function ref(ele) {
                        _this2.root = ele;
                    }
                }, (0, _extractProps2.default)(babelHelpers.extends({}, props, {
                    x: null,
                    y: null
                }), this), {
                    x: props.x.toString(),
                    y: props.y.toString(),
                    width: props.width.toString(),
                    height: props.height.toString(),
                    meetOrSlice: meetOrSlice,
                    align: align,
                    src: (0, _resolveAssetSource2.default)(props.href)
                }));
            }
        }]);
        return _default;
    }(_Shape3.default), _class.displayName = 'Image', _class.propTypes = babelHelpers.extends({}, _props.responderProps, _props.touchableProps, {
        x: _props.numberProp,
        y: _props.numberProp,
        width: _props.numberProp.isRequired,
        height: _props.numberProp.isRequired,
        href: _reactNative.Image.propTypes.source,
        preserveAspectRatio: _propTypes2.default.string
    }), _class.defaultProps = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        preserveAspectRatio: 'xMidYMid meet'
    }, _initialiseProps = function _initialiseProps() {
        var _this3 = this;

        this.setNativeProps = function () {
            var _root;

            (_root = _this3.root).setNativeProps.apply(_root, arguments);
        };
    }, _temp2);

    exports.default = _default;
    var RNSVGImage = (0, _createReactNativeComponentClass2.default)('RNSVGImage', function () {
        return {
            validAttributes: _attributes.ImageAttributes,
            uiViewClassName: 'RNSVGImage'
        };
    });
},469,[103,121,14,411,412,415,413,153,462,416]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _extractViewBox = _require(_dependencyMap[2]);

    var _extractViewBox2 = babelHelpers.interopRequireDefault(_extractViewBox);

    var _createReactNativeComponentClass = _require(_dependencyMap[3]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _attributes = _require(_dependencyMap[4]);

    var _default = (_temp = _class = function (_Component) {
        babelHelpers.inherits(_default, _Component);

        function _default() {
            babelHelpers.classCallCheck(this, _default);
            return babelHelpers.possibleConstructorReturn(this, (_default.__proto__ || Object.getPrototypeOf(_default)).apply(this, arguments));
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var props = this.props;
                return _react2.default.createElement(
                    RNSVGSymbol,
                    babelHelpers.extends({
                        name: props.id
                    }, (0, _extractViewBox2.default)(props)),
                    props.children
                );
            }
        }]);
        return _default;
    }(_react.Component), _class.displayName = 'Symbol', _class.propTypes = {
        id: _propTypes2.default.string.isRequired,
        viewBox: _propTypes2.default.string,
        preserveAspectRatio: _propTypes2.default.string
    }, _temp);

    exports.default = _default;
    var RNSVGSymbol = (0, _createReactNativeComponentClass2.default)('RNSVGSymbol', function () {
        return {
            validAttributes: _attributes.SymbolAttributes,
            uiViewClassName: 'RNSVGSymbol'
        };
    });
},470,[103,121,462,411,412]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _createReactNativeComponentClass = _require(_dependencyMap[1]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _default = (_temp = _class = function (_Component) {
        babelHelpers.inherits(_default, _Component);

        function _default() {
            babelHelpers.classCallCheck(this, _default);
            return babelHelpers.possibleConstructorReturn(this, (_default.__proto__ || Object.getPrototypeOf(_default)).apply(this, arguments));
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                return _react2.default.createElement(
                    RNSVGDefs,
                    null,
                    this.props.children
                );
            }
        }]);
        return _default;
    }(_react.Component), _class.displayName = 'Defs', _temp);

    exports.default = _default;
    var RNSVGDefs = (0, _createReactNativeComponentClass2.default)('RNSVGDefs', function () {
        return {
            validAttributes: {},
            uiViewClassName: 'RNSVGDefs'
        };
    });
},471,[103,411]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _props = _require(_dependencyMap[2]);

    var _extractGradient = _require(_dependencyMap[3]);

    var _extractGradient2 = babelHelpers.interopRequireDefault(_extractGradient);

    var _createReactNativeComponentClass = _require(_dependencyMap[4]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _attributes = _require(_dependencyMap[5]);

    var _default = (_temp = _class = function (_Component) {
        babelHelpers.inherits(_default, _Component);

        function _default() {
            babelHelpers.classCallCheck(this, _default);
            return babelHelpers.possibleConstructorReturn(this, (_default.__proto__ || Object.getPrototypeOf(_default)).apply(this, arguments));
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var props = this.props;
                return _react2.default.createElement(RNSVGLinearGradient, babelHelpers.extends({
                    x1: props.x1.toString(),
                    y1: props.y1.toString(),
                    x2: props.x2.toString(),
                    y2: props.y2.toString()
                }, (0, _extractGradient2.default)(this.props)));
            }
        }]);
        return _default;
    }(_react.Component), _class.displayName = 'LinearGradient', _class.propTypes = {
        x1: _props.numberProp.isRequired,
        x2: _props.numberProp.isRequired,
        y1: _props.numberProp.isRequired,
        y2: _props.numberProp.isRequired,
        gradientUnits: _propTypes2.default.oneOf(['objectBoundingBox', 'userSpaceOnUse']),
        id: _propTypes2.default.string.isRequired
    }, _class.defaultProps = {
        x1: '0%',
        y1: '0%',
        x2: '100%',
        y2: '0%'
    }, _temp);

    exports.default = _default;
    var RNSVGLinearGradient = (0, _createReactNativeComponentClass2.default)('RNSVGLinearGradient', function () {
        return {
            validAttributes: _attributes.LinearGradientAttributes,
            uiViewClassName: 'RNSVGLinearGradient'
        };
    });
},472,[103,121,415,473,411,412]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (props) {
        if (!props.id) {
            return null;
        }

        var stops = {};

        _react.Children.forEach(props.children, function (child) {
            if (child.type === _Stop2.default) {
                if (child.props.stopColor && child.props.offset) {
                    var offset = (0, _percentToFloat2.default)(child.props.offset);
                    stops[offset] = (0, _color2.default)(child.props.stopColor).alpha((0, _extractOpacity2.default)(child.props.stopOpacity));
                }
            } else {
                console.warn('`Gradient` elements only accept `Stop` elements as children');
            }
        });

        var sorted = _lodash2.default.sortBy(_lodash2.default.map(stops, function (stop, offset) {
            return {
                stop: stop,
                offset: offset
            };
        }), 'offset');

        var gradient = [];
        sorted.forEach(function (_ref) {
            var stop = _ref.stop;

            var _stop$rgb$array = stop.rgb().array(),
                _stop$rgb$array2 = babelHelpers.slicedToArray(_stop$rgb$array, 4),
                r = _stop$rgb$array2[0],
                g = _stop$rgb$array2[1],
                b = _stop$rgb$array2[2],
                _stop$rgb$array2$ = _stop$rgb$array2[3],
                a = _stop$rgb$array2$ === undefined ? 1 : _stop$rgb$array2$;

            gradient.push(r / 255);
            gradient.push(g / 255);
            gradient.push(b / 255);
            gradient.push(a);
        });
        gradient.push.apply(gradient, babelHelpers.toConsumableArray(sorted.map(function (_ref2) {
            var offset = _ref2.offset;
            return +offset;
        })));
        var gradientTransform = void 0;

        if (props.gradientTransform) {
            gradientTransform = (0, _extractTransform2.default)(props.gradientTransform);
        } else if (props.transform) {
            gradientTransform = (0, _extractTransform2.default)(props.transform);
        } else {
            gradientTransform = (0, _extractTransform2.default)(props);
        }

        return {
            gradient: gradient,
            name: props.id,
            gradientTransform: gradientTransform,
            gradientUnits: _PATTERN_UNITS2.default[props.gradientUnits] || 0
        };
    };

    var _react = _require(_dependencyMap[0]);

    var _lodash = _require(_dependencyMap[1]);

    var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

    var _color = _require(_dependencyMap[2]);

    var _color2 = babelHelpers.interopRequireDefault(_color);

    var _extractOpacity = _require(_dependencyMap[3]);

    var _extractOpacity2 = babelHelpers.interopRequireDefault(_extractOpacity);

    var _extractTransform = _require(_dependencyMap[4]);

    var _extractTransform2 = babelHelpers.interopRequireDefault(_extractTransform);

    var _PATTERN_UNITS = _require(_dependencyMap[5]);

    var _PATTERN_UNITS2 = babelHelpers.interopRequireDefault(_PATTERN_UNITS);

    var _percentToFloat = _require(_dependencyMap[6]);

    var _percentToFloat2 = babelHelpers.interopRequireDefault(_percentToFloat);

    var _Stop = _require(_dependencyMap[7]);

    var _Stop2 = babelHelpers.interopRequireDefault(_Stop);
},473,[103,348,419,429,432,474,475,476]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = {
        objectBoundingBox: 0,
        userSpaceOnUse: 1
    };
},474,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (percent) {
        var matched = percent.match(percentReg);

        if (!matched) {
            console.warn("`" + percent + "` is not a valid number or percentage string.");
            return 0;
        }

        return matched[2] ? matched[1] / 100 : +matched[1];
    };

    var percentReg = /^([+\-]?\d+(?:\.\d+)?(?:[eE][+\-]?\d+)?)(%?)$/;
},475,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp;

    var _react = _require(_dependencyMap[0]);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _props = _require(_dependencyMap[2]);

    var _default = (_temp = _class = function (_Component) {
        babelHelpers.inherits(_default, _Component);

        function _default() {
            babelHelpers.classCallCheck(this, _default);
            return babelHelpers.possibleConstructorReturn(this, (_default.__proto__ || Object.getPrototypeOf(_default)).apply(this, arguments));
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                return null;
            }
        }]);
        return _default;
    }(_react.Component), _class.displayName = 'Stop', _class.propTypes = {
        stopColor: _propTypes2.default.string,
        stopOpacity: _props.numberProp
    }, _class.defaultProps = {
        stopColor: '#000',
        stopOpacity: 1
    }, _temp);

    exports.default = _default;
},476,[103,121,415]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _props = _require(_dependencyMap[2]);

    var _extractGradient = _require(_dependencyMap[3]);

    var _extractGradient2 = babelHelpers.interopRequireDefault(_extractGradient);

    var _createReactNativeComponentClass = _require(_dependencyMap[4]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _attributes = _require(_dependencyMap[5]);

    var _default = (_temp = _class = function (_Component) {
        babelHelpers.inherits(_default, _Component);

        function _default() {
            babelHelpers.classCallCheck(this, _default);
            return babelHelpers.possibleConstructorReturn(this, (_default.__proto__ || Object.getPrototypeOf(_default)).apply(this, arguments));
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                var props = this.props;
                return _react2.default.createElement(RNSVGRadialGradient, babelHelpers.extends({
                    fx: props.fx.toString(),
                    fy: props.fy.toString(),
                    rx: (props.rx || props.r).toString(),
                    ry: (props.ry || props.r).toString(),
                    cx: props.cx.toString(),
                    cy: props.cy.toString()
                }, (0, _extractGradient2.default)(this.props)));
            }
        }]);
        return _default;
    }(_react.Component), _class.displayName = 'RadialGradient', _class.propTypes = {
        fx: _props.numberProp.isRequired,
        fy: _props.numberProp.isRequired,
        rx: _props.numberProp,
        ry: _props.numberProp,
        cx: _props.numberProp.isRequired,
        cy: _props.numberProp.isRequired,
        r: _props.numberProp,
        gradientUnits: _propTypes2.default.oneOf(['objectBoundingBox', 'userSpaceOnUse']),
        id: _propTypes2.default.string.isRequired
    }, _class.defaultProps = {
        fx: '50%',
        fy: '50%',
        cx: '50%',
        cy: '50%',
        r: '50%'
    }, _temp);

    exports.default = _default;
    var RNSVGRadialGradient = (0, _createReactNativeComponentClass2.default)('RNSVGRadialGradient', function () {
        return {
            validAttributes: _attributes.RadialGradientAttributes,
            uiViewClassName: 'RNSVGRadialGradient'
        };
    });
},477,[103,121,415,473,411,412]);
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class, _temp;

    var _react = _require(_dependencyMap[0]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1]);

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var _createReactNativeComponentClass = _require(_dependencyMap[2]);

    var _createReactNativeComponentClass2 = babelHelpers.interopRequireDefault(_createReactNativeComponentClass);

    var _attributes = _require(_dependencyMap[3]);

    var _default = (_temp = _class = function (_Component) {
        babelHelpers.inherits(_default, _Component);

        function _default() {
            babelHelpers.classCallCheck(this, _default);
            return babelHelpers.possibleConstructorReturn(this, (_default.__proto__ || Object.getPrototypeOf(_default)).apply(this, arguments));
        }

        babelHelpers.createClass(_default, [{
            key: "render",
            value: function render() {
                return _react2.default.createElement(
                    RNSVGClipPath,
                    {
                        name: this.props.id
                    },
                    this.props.children
                );
            }
        }]);
        return _default;
    }(_react.Component), _class.displayName = 'ClipPath', _class.propTypes = {
        id: _propTypes2.default.string.isRequired
    }, _temp);

    exports.default = _default;
    var RNSVGClipPath = (0, _createReactNativeComponentClass2.default)('RNSVGClipPath', function () {
        return {
            validAttributes: _attributes.ClipPathAttributes,
            uiViewClassName: 'RNSVGClipPath'
        };
    });
},478,[103,121,411,412]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.hasHardwareAsync = hasHardwareAsync;
  exports.isEnrolledAsync = isEnrolledAsync;
  exports.authenticateAsync = authenticateAsync;
  exports.cancelAuthenticate = cancelAuthenticate;

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _reactNative = _require(_dependencyMap[1]);

  var ExponentFingerprint = _reactNative.NativeModules.ExponentFingerprint;

  function hasHardwareAsync() {
    return ExponentFingerprint.hasHardwareAsync();
  }

  function isEnrolledAsync() {
    return ExponentFingerprint.isEnrolledAsync();
  }

  function authenticateAsync() {
    var promptMessageIOS = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Authenticate';
    {
      return ExponentFingerprint.authenticateAsync();
    }
  }

  function cancelAuthenticate() {
    ExponentFingerprint.cancelAuthenticate();
  }
},479,[319,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentAmplitude = _reactNative.NativeModules.ExponentAmplitude;
  exports.default = {
    initialize: function initialize(apiKey) {
      return ExponentAmplitude.initialize(apiKey);
    },
    setUserId: function setUserId(userId) {
      return ExponentAmplitude.setUserId(userId);
    },
    setUserProperties: function setUserProperties(userProperties) {
      return ExponentAmplitude.setUserProperties(userProperties);
    },
    clearUserProperties: function clearUserProperties() {
      return ExponentAmplitude.clearUserProperties();
    },
    logEvent: function logEvent(eventName) {
      return ExponentAmplitude.logEvent(eventName);
    },
    logEventWithProperties: function logEventWithProperties(eventName, properties) {
      return ExponentAmplitude.logEventWithProperties(eventName, properties);
    },
    setGroup: function setGroup(groupType, groupNames) {
      return ExponentAmplitude.setGroup(groupType, groupNames);
    }
  };
},480,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = exports.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = exports.INTERRUPTION_MODE_IOS_DUCK_OTHERS = exports.INTERRUPTION_MODE_IOS_DO_NOT_MIX = exports.INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = undefined;

  var _Recording = _require(_dependencyMap[0]);

  Object.keys(_Recording).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Recording[key];
      }
    });
  });

  var _Sound = _require(_dependencyMap[1]);

  Object.keys(_Sound).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Sound[key];
      }
    });
  });
  exports._isAudioEnabled = _isAudioEnabled;
  exports._throwIfAudioIsDisabled = _throwIfAudioIsDisabled;
  exports.setIsEnabledAsync = setIsEnabledAsync;
  exports.setAudioModeAsync = setAudioModeAsync;

  var _reactNative = _require(_dependencyMap[2]);

  var INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = exports.INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;
  var INTERRUPTION_MODE_IOS_DO_NOT_MIX = exports.INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;
  var INTERRUPTION_MODE_IOS_DUCK_OTHERS = exports.INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;
  var INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = exports.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;
  var INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = exports.INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;
  var _enabled = true;

  var _DISABLED_ERROR = new Error('Cannot complete operation because audio is not enabled.');

  var _isValueValid = function _isValueValid(value, validValues) {
    return validValues.filter(function (validValue) {
      return validValue === value;
    }).length > 0;
  };

  var _findMissingKeys = function _findMissingKeys(object, requiredKeys) {
    return requiredKeys.filter(function (requiredKey) {
      return !(requiredKey in object);
    });
  };

  function _isAudioEnabled() {
    return _enabled;
  }

  function _throwIfAudioIsDisabled() {
    if (!_enabled) {
      throw _DISABLED_ERROR;
    }
  }

  function setIsEnabledAsync(value) {
    return regeneratorRuntime.async(function setIsEnabledAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _enabled = value;
            _context.next = 3;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.setAudioIsEnabled(value));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function setAudioModeAsync(mode) {
    var missingKeys;
    return regeneratorRuntime.async(function setAudioModeAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            missingKeys = _findMissingKeys(mode, ['allowsRecordingIOS', 'interruptionModeIOS', 'playsInSilentModeIOS', 'interruptionModeAndroid', 'shouldDuckAndroid']);

            if (!(missingKeys.length > 0)) {
              _context2.next = 3;
              break;
            }

            throw new Error("Audio mode attempted to be set without the required keys: " + JSON.stringify(missingKeys));

          case 3:
            if (_isValueValid(mode.interruptionModeIOS, [INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS, INTERRUPTION_MODE_IOS_DO_NOT_MIX, INTERRUPTION_MODE_IOS_DUCK_OTHERS])) {
              _context2.next = 5;
              break;
            }

            throw new Error("\"interruptionModeIOS\" was set to an invalid value.");

          case 5:
            if (_isValueValid(mode.interruptionModeAndroid, [INTERRUPTION_MODE_ANDROID_DO_NOT_MIX, INTERRUPTION_MODE_ANDROID_DUCK_OTHERS])) {
              _context2.next = 7;
              break;
            }

            throw new Error("\"interruptionModeAndroid\" was set to an invalid value.");

          case 7:
            if (!(typeof mode.allowsRecordingIOS !== 'boolean' || typeof mode.playsInSilentModeIOS !== 'boolean' || typeof mode.shouldDuckAndroid !== 'boolean')) {
              _context2.next = 9;
              break;
            }

            throw new Error('"allowsRecordingIOS", "playsInSilentModeIOS", and "shouldDuckAndroid" must be booleans.');

          case 9:
            _context2.next = 11;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.setAudioMode(mode));

          case 11:
            return _context2.abrupt("return", _context2.sent);

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }
},481,[482,483,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Recording = exports.RECORDING_OPTIONS_PRESET_LOW_QUALITY = exports.RECORDING_OPTIONS_PRESET_HIGH_QUALITY = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  var _AV = _require(_dependencyMap[1]);

  var _Audio = _require(_dependencyMap[2]);

  var _Sound = _require(_dependencyMap[3]);

  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;
  var RECORDING_OPTIONS_PRESET_HIGH_QUALITY = exports.RECORDING_OPTIONS_PRESET_HIGH_QUALITY = {
    android: {
      extension: '.m4a',
      outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,
      audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000
    },
    ios: {
      extension: '.caf',
      audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000,
      linearPCMBitDepth: 16,
      linearPCMIsBigEndian: false,
      linearPCMIsFloat: false
    }
  };
  var RECORDING_OPTIONS_PRESET_LOW_QUALITY = exports.RECORDING_OPTIONS_PRESET_LOW_QUALITY = {
    android: {
      extension: '.3gp',
      outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,
      audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000
    },
    ios: {
      extension: '.caf',
      audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000,
      linearPCMBitDepth: 16,
      linearPCMIsBigEndian: false,
      linearPCMIsFloat: false
    }
  };
  var _recorderExists = false;

  var Recording = exports.Recording = function () {
    function Recording() {
      var _this = this;

      babelHelpers.classCallCheck(this, Recording);

      this._cleanupForUnloadedRecorder = function _callee(finalStatus) {
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this._canRecord = false;
                _this._isDoneRecording = true;
                _this._finalDurationMillis = finalStatus.durationMillis;
                _recorderExists = false;

                if (_reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording) {
                  _reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording(null);
                }

                _this._disablePolling();

                _context.next = 8;
                return regeneratorRuntime.awrap(_this.getStatusAsync());

              case 8:
                return _context.abrupt("return", _context.sent);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this);
      };

      this._pollingLoop = function _callee2() {
        return regeneratorRuntime.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!((0, _Audio._isAudioEnabled)() && _this._canRecord && _this._onRecordingStatusUpdate != null)) {
                  _context2.next = 10;
                  break;
                }

                _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);
                _context2.prev = 2;
                _context2.next = 5;
                return regeneratorRuntime.awrap(_this.getStatusAsync());

              case 5:
                _context2.next = 10;
                break;

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](2);

                _this._disablePolling();

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, null, _this, [[2, 7]]);
      };

      this.getStatusAsync = function _callee3() {
        var status;
        return regeneratorRuntime.async(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!_this._canRecord) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return", _this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.getAudioRecordingStatus();
                }));

              case 2:
                status = _this._isDoneRecording ? {
                  canRecord: false,
                  isDoneRecording: true,
                  durationMillis: _this._finalDurationMillis
                } : {
                  canRecord: false,
                  isDoneRecording: false
                };

                _this._callOnRecordingStatusUpdateForNewStatus(status);

                return _context3.abrupt("return", status);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, null, _this);
      };

      this._canRecord = false;
      this._isDoneRecording = false;
      this._finalDurationMillis = 0;
      this._uri = null;
      this._progressUpdateTimeoutVariable = null;
      this._progressUpdateIntervalMillis = _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;
      this._options = null;
    }

    babelHelpers.createClass(Recording, [{
      key: "_disablePolling",
      value: function _disablePolling() {
        if (this._progressUpdateTimeoutVariable != null) {
          clearTimeout(this._progressUpdateTimeoutVariable);
          this._progressUpdateTimeoutVariable = null;
        }
      }
    }, {
      key: "_enablePollingIfNecessaryAndPossible",
      value: function _enablePollingIfNecessaryAndPossible() {
        if ((0, _Audio._isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {
          this._disablePolling();

          this._pollingLoop();
        }
      }
    }, {
      key: "_callOnRecordingStatusUpdateForNewStatus",
      value: function _callOnRecordingStatusUpdateForNewStatus(status) {
        if (this._onRecordingStatusUpdate != null) {
          this._onRecordingStatusUpdate(status);
        }
      }
    }, {
      key: "_performOperationAndHandleStatusAsync",
      value: function _performOperationAndHandleStatusAsync(operation) {
        var _status;

        return regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _Audio._throwIfAudioIsDisabled)();

                if (!this._canRecord) {
                  _context4.next = 9;
                  break;
                }

                _context4.next = 4;
                return regeneratorRuntime.awrap(operation());

              case 4:
                _status = _context4.sent;

                this._callOnRecordingStatusUpdateForNewStatus(_status);

                return _context4.abrupt("return", _status);

              case 9:
                throw new Error('Cannot complete operation because this recorder is not ready to record.');

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "setOnRecordingStatusUpdate",
      value: function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {
        this._onRecordingStatusUpdate = onRecordingStatusUpdate;

        if (onRecordingStatusUpdate == null) {
          this._disablePolling();
        } else {
          this._enablePollingIfNecessaryAndPossible();
        }

        this.getStatusAsync();
      }
    }, {
      key: "setProgressUpdateInterval",
      value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {
        this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;
        this.getStatusAsync();
      }
    }, {
      key: "prepareToRecordAsync",
      value: function prepareToRecordAsync() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;

        var extensionRegex, _ref, uri, _status2;

        return regeneratorRuntime.async(function prepareToRecordAsync$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _Audio._throwIfAudioIsDisabled)();

                if (!_recorderExists) {
                  _context5.next = 3;
                  break;
                }

                throw new Error('Only one Recording object can be prepared at a given time.');

              case 3:
                if (!this._isDoneRecording) {
                  _context5.next = 5;
                  break;
                }

                throw new Error('This Recording object is done recording; you must make a new one.');

              case 5:
                if (!(!options || !options.android || !options.ios)) {
                  _context5.next = 7;
                  break;
                }

                throw new Error('You must provide recording options for android and ios in order to prepare to record.');

              case 7:
                extensionRegex = /^\.\w+$/;

                if (!(!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension))) {
                  _context5.next = 10;
                  break;
                }

                throw new Error("Your file extensions must match " + extensionRegex.toString() + ".");

              case 10:
                if (this._canRecord) {
                  _context5.next = 26;
                  break;
                }

                if (_reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording) {
                  _reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording(this._cleanupForUnloadedRecorder);
                }

                _context5.next = 14;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.prepareAudioRecorder(options));

              case 14:
                _ref = _context5.sent;
                uri = _ref.uri;
                _status2 = _ref.status;
                _recorderExists = true;
                this._uri = uri;
                this._options = options;
                this._canRecord = true;

                this._callOnRecordingStatusUpdateForNewStatus(_status2);

                this._enablePollingIfNecessaryAndPossible();

                return _context5.abrupt("return", _status2);

              case 26:
                throw new Error('This Recording object is already prepared to record.');

              case 27:
              case "end":
                return _context5.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "startAsync",
      value: function startAsync() {
        return regeneratorRuntime.async(function startAsync$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.startAudioRecording();
                }));

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "pauseAsync",
      value: function pauseAsync() {
        return regeneratorRuntime.async(function pauseAsync$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.pauseAudioRecording();
                }));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "stopAndUnloadAsync",
      value: function stopAndUnloadAsync() {
        var finalStatus;
        return regeneratorRuntime.async(function stopAndUnloadAsync$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (this._canRecord) {
                  _context8.next = 6;
                  break;
                }

                if (!this._isDoneRecording) {
                  _context8.next = 5;
                  break;
                }

                throw new Error('Cannot unload a Recording that has already been unloaded.');

              case 5:
                throw new Error('Cannot unload a Recording that has not been prepared.');

              case 6:
                _context8.next = 8;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.stopAudioRecording());

              case 8:
                finalStatus = _context8.sent;
                _context8.next = 11;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.unloadAudioRecorder());

              case 11:
                return _context8.abrupt("return", this._cleanupForUnloadedRecorder(finalStatus));

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "getURI",
      value: function getURI() {
        return this._uri;
      }
    }, {
      key: "createNewLoadedSound",
      value: function createNewLoadedSound() {
        var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return regeneratorRuntime.async(function createNewLoadedSound$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(this._uri == null || !this._isDoneRecording)) {
                  _context9.next = 2;
                  break;
                }

                throw new Error('Cannot create sound when the Recording has not finished!');

              case 2:
                return _context9.abrupt("return", _Sound.Sound.create({
                  uri: this._uri
                }, initialStatus, onPlaybackStatusUpdate, false));

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, null, this);
      }
    }]);
    return Recording;
  }();
},482,[14,406,481,483]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Sound = undefined;

  var _class,
      _temp,
      _this5 = this;

  var _reactNative = _require(_dependencyMap[0]);

  var _AV = _require(_dependencyMap[1]);

  var _Audio = _require(_dependencyMap[2]);

  var Sound = exports.Sound = (_temp = _class = function () {
    function Sound() {
      var _this = this;

      babelHelpers.classCallCheck(this, Sound);

      this._internalStatusUpdateCallback = function (_ref) {
        var key = _ref.key,
            status = _ref.status;

        if (_this._key === key) {
          _this._callOnPlaybackStatusUpdateForNewStatus(status);
        }
      };

      this._errorCallback = function (error) {
        _this._clearSubscriptions();

        _this._loaded = false;
        _this._key = -1;

        _this._callOnPlaybackStatusUpdateForNewStatus((0, _AV._getUnloadedStatus)(error));
      };

      this.getStatusAsync = function _callee() {
        var status;
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this._loaded) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", _this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.getStatusForSound(_this._key);
                }));

              case 2:
                status = (0, _AV._getUnloadedStatus)();

                _this._callOnPlaybackStatusUpdateForNewStatus(status);

                return _context.abrupt("return", status);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this);
      };

      this._loaded = false;
      this._loading = false;
      this._key = -1;
      this._subscriptions = [];
      this._lastStatusUpdate = null;
      this._lastStatusUpdateTime = null;
      this._onPlaybackStatusUpdate = null;
      this._coalesceStatusUpdatesInMillis = 100;
      this._eventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.ExponentAV);
    }

    babelHelpers.createClass(Sound, [{
      key: "_callOnPlaybackStatusUpdateForNewStatus",
      value: function _callOnPlaybackStatusUpdateForNewStatus(status) {
        var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && new Date() - this._lastStatusUpdateTime < this._coalesceStatusUpdatesInMillis;

        if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {
          this._onPlaybackStatusUpdate(status);

          this._lastStatusUpdateTime = new Date();
          this._lastStatusUpdate = JSON.stringify(status);
        }
      }
    }, {
      key: "_performOperationAndHandleStatusAsync",
      value: function _performOperationAndHandleStatusAsync(operation) {
        var _status;

        return regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _Audio._throwIfAudioIsDisabled)();

                if (!this._loaded) {
                  _context2.next = 9;
                  break;
                }

                _context2.next = 4;
                return regeneratorRuntime.awrap(operation());

              case 4:
                _status = _context2.sent;

                this._callOnPlaybackStatusUpdateForNewStatus(_status);

                return _context2.abrupt("return", _status);

              case 9:
                throw new Error('Cannot complete operation because sound is not loaded.');

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "_subscribeToNativeStatusUpdateEvents",
      value: function _subscribeToNativeStatusUpdateEvents() {
        if (this._loaded) {
          this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback));
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "setOnPlaybackStatusUpdate",
      value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {
        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;
        this.getStatusAsync();
      }
    }, {
      key: "loadAsync",
      value: function loadAsync(source) {
        var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        var _ref2, nativeSource, fullInitialStatus;

        return regeneratorRuntime.async(function loadAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _Audio._throwIfAudioIsDisabled)();

                if (!this._loading) {
                  _context3.next = 3;
                  break;
                }

                throw new Error('The Sound is already loading.');

              case 3:
                if (this._loaded) {
                  _context3.next = 13;
                  break;
                }

                this._loading = true;
                _context3.next = 7;
                return regeneratorRuntime.awrap((0, _AV._getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst));

              case 7:
                _ref2 = _context3.sent;
                nativeSource = _ref2.nativeSource;
                fullInitialStatus = _ref2.fullInitialStatus;
                return _context3.abrupt("return", new Promise(function (resolve, reject) {
                  var _this2 = this;

                  var loadSuccess = function loadSuccess(key, status) {
                    _this2._key = key;
                    _this2._loaded = true;
                    _this2._loading = false;

                    _reactNative.NativeModules.ExponentAV.setErrorCallbackForSound(_this2._key, _this2._errorCallback);

                    _this2._subscribeToNativeStatusUpdateEvents();

                    _this2._callOnPlaybackStatusUpdateForNewStatus(status);

                    resolve(status);
                  };

                  var loadError = function loadError(error) {
                    _this2._loading = false;
                    reject(new Error(error));
                  };

                  _reactNative.NativeModules.ExponentAV.loadForSound(nativeSource, fullInitialStatus, loadSuccess, loadError);
                }.bind(this)));

              case 13:
                throw new Error('The Sound is already loaded.');

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "unloadAsync",
      value: function unloadAsync() {
        var key, _status2;

        return regeneratorRuntime.async(function unloadAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!this._loaded) {
                  _context4.next = 12;
                  break;
                }

                this._loaded = false;
                key = this._key;
                this._key = -1;
                _context4.next = 6;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.unloadForSound(key));

              case 6:
                _status2 = _context4.sent;

                this._callOnPlaybackStatusUpdateForNewStatus(_status2);

                this._clearSubscriptions();

                return _context4.abrupt("return", _status2);

              case 12:
                return _context4.abrupt("return", this.getStatusAsync());

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "setStatusAsync",
      value: function setStatusAsync(status) {
        var _this3 = this;

        return regeneratorRuntime.async(function setStatusAsync$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _AV._throwErrorIfValuesOutOfBoundsInStatus)(status);
                return _context5.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.setStatusForSound(_this3._key, status);
                }));

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "replayAsync",
      value: function replayAsync() {
        var _this4 = this;

        var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return regeneratorRuntime.async(function replayAsync$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!(status.positionMillis && status.positionMillis !== 0)) {
                  _context6.next = 2;
                  break;
                }

                throw new Error('Requested position after replay has to be 0.');

              case 2:
                return _context6.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.replaySound(_this4._key, babelHelpers.extends({}, status, {
                    positionMillis: 0,
                    shouldPlay: true
                  }));
                }));

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, null, this);
      }
    }]);
    return Sound;
  }(), _class.create = function _callee2(source) {
    var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var sound, status;
    return regeneratorRuntime.async(function _callee2$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            sound = new Sound();
            sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);
            _context7.next = 4;
            return regeneratorRuntime.awrap(sound.loadAsync(source, initialStatus, downloadFirst));

          case 4:
            status = _context7.sent;
            return _context7.abrupt("return", {
              sound: sound,
              status: status
            });

          case 6:
          case "end":
            return _context7.stop();
        }
      }
    }, null, _this5);
  }, _temp);
  babelHelpers.extends(Sound.prototype, _AV._COMMON_AV_PLAYBACK_METHODS);
},483,[14,406,481]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getBrightnessAsync = getBrightnessAsync;
  exports.setBrightnessAsync = setBrightnessAsync;
  exports.getSystemBrightnessAsync = getSystemBrightnessAsync;
  exports.setSystemBrightnessAsync = setSystemBrightnessAsync;

  var _reactNative = _require(_dependencyMap[0]);

  function getBrightnessAsync() {
    return regeneratorRuntime.async(function getBrightnessAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentBrightness.getBrightnessAsync());

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function setBrightnessAsync(brightnessValue) {
    return regeneratorRuntime.async(function setBrightnessAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            brightnessValue = Math.max(0, Math.min(brightnessValue, 1));
            _context2.next = 3;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentBrightness.setBrightnessAsync(brightnessValue));

          case 3:
            return _context2.abrupt("return", _context2.sent);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function getSystemBrightnessAsync() {
    return regeneratorRuntime.async(function getSystemBrightnessAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentBrightness.getSystemBrightnessAsync());

          case 2:
            return _context3.abrupt("return", _context3.sent);

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function setSystemBrightnessAsync(brightnessValue) {
    return regeneratorRuntime.async(function setSystemBrightnessAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            brightnessValue = Math.max(0, Math.min(brightnessValue, 1));
            _context4.next = 3;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentBrightness.setSystemBrightnessAsync(brightnessValue));

          case 3:
            return _context4.abrupt("return", _context4.sent);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }
},484,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DEFAULT = exports.ReminderStatus = exports.CalendarAccessLevel = exports.EventAccessLevel = exports.AlarmMethod = exports.AttendeeType = exports.AttendeeStatus = exports.AttendeeRole = exports.SourceType = exports.EventStatus = exports.CalendarType = exports.Availability = exports.Frequency = exports.EntityTypes = undefined;
  exports.getCalendarsAsync = getCalendarsAsync;
  exports.createCalendarAsync = createCalendarAsync;
  exports.updateCalendarAsync = updateCalendarAsync;
  exports.deleteCalendarAsync = deleteCalendarAsync;
  exports.getEventsAsync = getEventsAsync;
  exports.getEventAsync = getEventAsync;
  exports.createEventAsync = createEventAsync;
  exports.updateEventAsync = updateEventAsync;
  exports.deleteEventAsync = deleteEventAsync;
  exports.getAttendeesForEventAsync = getAttendeesForEventAsync;
  exports.createAttendeeAsync = createAttendeeAsync;
  exports.updateAttendeeAsync = updateAttendeeAsync;
  exports.deleteAttendeeAsync = deleteAttendeeAsync;
  exports.getRemindersAsync = getRemindersAsync;
  exports.getReminderAsync = getReminderAsync;
  exports.createReminderAsync = createReminderAsync;
  exports.updateReminderAsync = updateReminderAsync;
  exports.deleteReminderAsync = deleteReminderAsync;
  exports.getSourcesAsync = getSourcesAsync;
  exports.getSourceAsync = getSourceAsync;
  exports.openEventInCalendar = openEventInCalendar;

  var _reactNative = _require(_dependencyMap[0]);

  function getCalendarsAsync(entityType) {
    return regeneratorRuntime.async(function getCalendarsAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (entityType) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getCalendarsAsync(null));

          case 2:
            return _context.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getCalendarsAsync(entityType));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function createCalendarAsync() {
    var details = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var color, newDetails;
    return regeneratorRuntime.async(function createCalendarAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            color = details.color;

            if (color) {
              color = (0, _reactNative.processColor)(color);
            }

            newDetails = babelHelpers.extends({}, details, {
              id: undefined,
              color: color
            });
            return _context2.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveCalendarAsync(newDetails));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function updateCalendarAsync(id) {
    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var color, newDetails;
    return regeneratorRuntime.async(function updateCalendarAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (id) {
              _context3.next = 2;
              break;
            }

            throw new Error('updateCalendarAsync must be called with an id (string) of the target calendar');

          case 2:
            color = details.color;

            if (color) {
              color = (0, _reactNative.processColor)(color);
            }

            if (details.hasOwnProperty('source') || details.hasOwnProperty('color') || details.hasOwnProperty('allowsModifications') || details.hasOwnProperty('allowedAvailabilities') || details.hasOwnProperty('isPrimary') || details.hasOwnProperty('ownerAccount') || details.hasOwnProperty('timeZone') || details.hasOwnProperty('allowedReminders') || details.hasOwnProperty('allowedAttendeeTypes') || details.hasOwnProperty('accessLevel')) {
              console.warn('updateCalendarAsync was called with one or more read-only properties, which will not be updated');
            }

            newDetails = babelHelpers.extends({}, details, {
              id: id,
              color: color
            });
            return _context3.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveCalendarAsync(newDetails));

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function deleteCalendarAsync(id) {
    return regeneratorRuntime.async(function deleteCalendarAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (id) {
              _context4.next = 2;
              break;
            }

            throw new Error('deleteCalendarAsync must be called with an id (string) of the target calendar');

          case 2:
            return _context4.abrupt("return", _reactNative.NativeModules.ExponentCalendar.deleteCalendarAsync(id));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function getEventsAsync(calendarIds, startDate, endDate) {
    return regeneratorRuntime.async(function getEventsAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (startDate) {
              _context5.next = 2;
              break;
            }

            throw new Error('getEventsAsync must be called with a startDate (date) to search for events');

          case 2:
            if (endDate) {
              _context5.next = 4;
              break;
            }

            throw new Error('getEventsAsync must be called with an endDate (date) to search for events');

          case 4:
            if (!(!calendarIds || !calendarIds.length)) {
              _context5.next = 6;
              break;
            }

            throw new Error('getEventsAsync must be called with a non-empty array of calendarIds to search');

          case 6:
            return _context5.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getEventsAsync(startDate, endDate, calendarIds));

          case 7:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }

  function getEventAsync(id) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$futureEvents = _ref.futureEvents,
        futureEvents = _ref$futureEvents === undefined ? false : _ref$futureEvents,
        instanceStartDate = _ref.instanceStartDate;

    return regeneratorRuntime.async(function getEventAsync$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (id) {
              _context6.next = 2;
              break;
            }

            throw new Error('getEventAsync must be called with an id (string) of the target event');

          case 2:
            return _context6.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getEventByIdAsync(id));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, null, this);
  }

  function createEventAsync(calendarId) {
    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var newDetails;
    return regeneratorRuntime.async(function createEventAsync$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (calendarId) {
              _context7.next = 2;
              break;
            }

            throw new Error('createEventAsync must be called with an id (string) of the target calendar');

          case 2:
            if (details.startDate) {
              _context7.next = 4;
              break;
            }

            throw new Error('createEventAsync requires a startDate (Date)');

          case 4:
            if (details.endDate) {
              _context7.next = 6;
              break;
            }

            throw new Error('createEventAsync requires an endDate (Date)');

          case 6:
            if (details.timeZone) {
              _context7.next = 8;
              break;
            }

            throw new Error('createEventAsync requires a timeZone (string)');

          case 8:
            newDetails = babelHelpers.extends({}, details, {
              id: undefined,
              calendarId: calendarId === DEFAULT ? undefined : calendarId
            });
            return _context7.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveEventAsync(newDetails, {}));

          case 10:
          case "end":
            return _context7.stop();
        }
      }
    }, null, this);
  }

  function updateEventAsync(id) {
    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref2$futureEvents = _ref2.futureEvents,
        futureEvents = _ref2$futureEvents === undefined ? false : _ref2$futureEvents,
        instanceStartDate = _ref2.instanceStartDate;

    var newDetails;
    return regeneratorRuntime.async(function updateEventAsync$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (id) {
              _context8.next = 2;
              break;
            }

            throw new Error('updateEventAsync must be called with an id (string) of the target event');

          case 2:
            newDetails = babelHelpers.extends({}, details, {
              id: id,
              instanceStartDate: instanceStartDate
            });
            return _context8.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveEventAsync(newDetails, {
              futureEvents: futureEvents
            }));

          case 4:
          case "end":
            return _context8.stop();
        }
      }
    }, null, this);
  }

  function deleteEventAsync(id) {
    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref3$futureEvents = _ref3.futureEvents,
        futureEvents = _ref3$futureEvents === undefined ? false : _ref3$futureEvents,
        instanceStartDate = _ref3.instanceStartDate;

    return regeneratorRuntime.async(function deleteEventAsync$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (id) {
              _context9.next = 2;
              break;
            }

            throw new Error('deleteEventAsync must be called with an id (string) of the target event');

          case 2:
            return _context9.abrupt("return", _reactNative.NativeModules.ExponentCalendar.deleteEventAsync({
              id: id,
              instanceStartDate: instanceStartDate
            }, {
              futureEvents: futureEvents
            }));

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, null, this);
  }

  function getAttendeesForEventAsync(id) {
    var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref4$futureEvents = _ref4.futureEvents,
        futureEvents = _ref4$futureEvents === undefined ? false : _ref4$futureEvents,
        instanceStartDate = _ref4.instanceStartDate;

    var params;
    return regeneratorRuntime.async(function getAttendeesForEventAsync$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (id) {
              _context10.next = 2;
              break;
            }

            throw new Error('getAttendeesForEventAsync must be called with an id (string) of the target event');

          case 2:
            params = id;
            return _context10.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getAttendeesForEventAsync(params));

          case 4:
          case "end":
            return _context10.stop();
        }
      }
    }, null, this);
  }

  function createAttendeeAsync(eventId) {
    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var newDetails;
    return regeneratorRuntime.async(function createAttendeeAsync$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (eventId) {
              _context11.next = 2;
              break;
            }

            throw new Error('createAttendeeAsync must be called with an id (string) of the target event');

          case 2:
            if (details.email) {
              _context11.next = 4;
              break;
            }

            throw new Error('createAttendeeAsync requires an email (string)');

          case 4:
            if (details.role) {
              _context11.next = 6;
              break;
            }

            throw new Error('createAttendeeAsync requires a role (string)');

          case 6:
            if (details.type) {
              _context11.next = 8;
              break;
            }

            throw new Error('createAttendeeAsync requires a type (string)');

          case 8:
            if (details.status) {
              _context11.next = 10;
              break;
            }

            throw new Error('createAttendeeAsync requires a status (string)');

          case 10:
            newDetails = babelHelpers.extends({}, details, {
              id: undefined
            });
            return _context11.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveAttendeeForEventAsync(newDetails, eventId));

          case 12:
          case "end":
            return _context11.stop();
        }
      }
    }, null, this);
  }

  function updateAttendeeAsync(id) {
    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var newDetails;
    return regeneratorRuntime.async(function updateAttendeeAsync$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (id) {
              _context12.next = 2;
              break;
            }

            throw new Error('updateAttendeeAsync must be called with an id (string) of the target event');

          case 2:
            newDetails = babelHelpers.extends({}, details, {
              id: id
            });
            return _context12.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveAttendeeForEventAsync(newDetails, null));

          case 4:
          case "end":
            return _context12.stop();
        }
      }
    }, null, this);
  }

  function deleteAttendeeAsync(id) {
    return regeneratorRuntime.async(function deleteAttendeeAsync$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (id) {
              _context13.next = 2;
              break;
            }

            throw new Error('deleteAttendeeAsync must be called with an id (string) of the target event');

          case 2:
            return _context13.abrupt("return", _reactNative.NativeModules.ExponentCalendar.deleteAttendeeAsync(id));

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, null, this);
  }

  function getRemindersAsync(calendarIds, status, startDate, endDate) {
    return regeneratorRuntime.async(function getRemindersAsync$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            throw new Error('getRemindersAsync is not available on Android');

          case 3:
            if (!(status && !endDate)) {
              _context14.next = 5;
              break;
            }

            throw new Error('getRemindersAsync must be called with an endDate (date) to search for reminders');

          case 5:
            if (!(!calendarIds || !calendarIds.length)) {
              _context14.next = 7;
              break;
            }

            throw new Error('getRemindersAsync must be called with a non-empty array of calendarIds to search');

          case 7:
            return _context14.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getRemindersAsync(startDate || null, endDate || null, calendarIds, status || null));

          case 8:
          case "end":
            return _context14.stop();
        }
      }
    }, null, this);
  }

  function getReminderAsync(id) {
    return regeneratorRuntime.async(function getReminderAsync$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            throw new Error('getReminderAsync is not available on Android');

          case 3:
            return _context15.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getReminderByIdAsync(id));

          case 4:
          case "end":
            return _context15.stop();
        }
      }
    }, null, this);
  }

  function createReminderAsync(calendarId) {
    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var newDetails;
    return regeneratorRuntime.async(function createReminderAsync$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            throw new Error('createReminderAsync is not available on Android');

          case 3:
            newDetails = babelHelpers.extends({}, details, {
              id: undefined,
              calendarId: calendarId === DEFAULT ? undefined : calendarId
            });
            return _context16.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveReminderAsync(newDetails));

          case 5:
          case "end":
            return _context16.stop();
        }
      }
    }, null, this);
  }

  function updateReminderAsync(id) {
    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var newDetails;
    return regeneratorRuntime.async(function updateReminderAsync$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            throw new Error('updateReminderAsync is not available on Android');

          case 3:
            if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate')) {
              console.warn('updateReminderAsync was called with one or more read-only properties, which will not be updated');
            }

            newDetails = babelHelpers.extends({}, details, {
              id: id
            });
            return _context17.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveReminderAsync(newDetails));

          case 6:
          case "end":
            return _context17.stop();
        }
      }
    }, null, this);
  }

  function deleteReminderAsync(id) {
    return regeneratorRuntime.async(function deleteReminderAsync$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            throw new Error('deleteReminderAsync is not available on Android');

          case 3:
            return _context18.abrupt("return", _reactNative.NativeModules.ExponentCalendar.deleteReminderAsync(id));

          case 4:
          case "end":
            return _context18.stop();
        }
      }
    }, null, this);
  }

  function getSourcesAsync() {
    return regeneratorRuntime.async(function getSourcesAsync$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            throw new Error('getSourcesAsync is not available on Android');

          case 2:
          case "end":
            return _context19.stop();
        }
      }
    }, null, this);
  }

  function getSourceAsync(id) {
    return regeneratorRuntime.async(function getSourceAsync$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            throw new Error('getSourceAsync is not available on Android');

          case 3:
            return _context20.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getSourceByIdAsync(id));

          case 4:
          case "end":
            return _context20.stop();
        }
      }
    }, null, this);
  }

  function openEventInCalendar(id) {
    if (!id) {
      throw new Error('openEventInCalendar must be called with an id (string) of the target event');
    }

    return _reactNative.NativeModules.ExponentCalendar.openEventInCalendar(parseInt(id, 10));
  }

  var EntityTypes = exports.EntityTypes = {
    EVENT: 'event',
    REMINDER: 'reminder'
  };
  var Frequency = exports.Frequency = {
    DAILY: 'daily',
    WEEKLY: 'weekly',
    MONTHLY: 'monthly',
    YEARLY: 'yearly'
  };
  var Availability = exports.Availability = {
    NOT_SUPPORTED: 'notSupported',
    BUSY: 'busy',
    FREE: 'free',
    TENTATIVE: 'tentative',
    UNAVAILABLE: 'unavailable'
  };
  var CalendarType = exports.CalendarType = {
    LOCAL: 'local',
    CALDAV: 'caldav',
    EXCHANGE: 'exchange',
    SUBSCRIBED: 'subscribed',
    BIRTHDAYS: 'birthdays'
  };
  var EventStatus = exports.EventStatus = {
    NONE: 'none',
    CONFIRMED: 'confirmed',
    TENTATIVE: 'tentative',
    CANCELED: 'canceled'
  };
  var SourceType = exports.SourceType = {
    LOCAL: 'local',
    EXCHANGE: 'exchange',
    CALDAV: 'caldav',
    MOBILEME: 'mobileme',
    SUBSCRIBED: 'subscribed',
    BIRTHDAYS: 'birthdays'
  };
  var AttendeeRole = exports.AttendeeRole = {
    UNKNOWN: 'unknown',
    REQUIRED: 'required',
    OPTIONAL: 'optional',
    CHAIR: 'chair',
    NON_PARTICIPANT: 'nonParticipant',
    ATTENDEE: 'attendee',
    ORGANIZER: 'organizer',
    PERFORMER: 'performer',
    SPEAKER: 'speaker',
    NONE: 'none'
  };
  var AttendeeStatus = exports.AttendeeStatus = {
    UNKNOWN: 'unknown',
    PENDING: 'pending',
    ACCEPTED: 'accepted',
    DECLINED: 'declined',
    TENTATIVE: 'tentative',
    DELEGATED: 'delegated',
    COMPLETED: 'completed',
    IN_PROCESS: 'inProcess',
    INVITED: 'invited',
    NONE: 'none'
  };
  var AttendeeType = exports.AttendeeType = {
    UNKNOWN: 'unknown',
    PERSON: 'person',
    ROOM: 'room',
    GROUP: 'group',
    RESOURCE: 'resource',
    OPTIONAL: 'optional',
    REQUIRED: 'required',
    NONE: 'none'
  };
  var AlarmMethod = exports.AlarmMethod = {
    ALARM: 'alarm',
    ALERT: 'alert',
    EMAIL: 'email',
    SMS: 'sms',
    DEFAULT: 'default'
  };
  var EventAccessLevel = exports.EventAccessLevel = {
    CONFIDENTIAL: 'confidential',
    PRIVATE: 'private',
    PUBLIC: 'public',
    DEFAULT: 'default'
  };
  var CalendarAccessLevel = exports.CalendarAccessLevel = {
    CONTRIBUTOR: 'contributor',
    EDITOR: 'editor',
    FREEBUSY: 'freebusy',
    OVERRIDE: 'override',
    OWNER: 'owner',
    READ: 'read',
    RESPOND: 'respond',
    ROOT: 'root',
    NONE: 'none'
  };
  var ReminderStatus = exports.ReminderStatus = {
    COMPLETED: 'completed',
    INCOMPLETE: 'incomplete'
  };
  var DEFAULT = exports.DEFAULT = 'default';
},485,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RELATIONSHIPS = exports.DATES = exports.URLS = exports.IM_ADDRESSES = exports.SOCIAL_PROFILES = exports.PHONETIC_LAST_NAME = exports.PHONETIC_MIDDLE_NAME = exports.PHONETIC_FIRST_NAME = exports.NAME_SUFFIX = exports.NAME_PREFIX = exports.NON_GREGORIAN_BIRTHDAY = exports.BIRTHDAY = exports.NOTE = exports.THUMBNAIL = exports.IMAGE = exports.ADDRESSES = exports.EMAILS = exports.PHONE_NUMBERS = undefined;
  exports.getContactsAsync = getContactsAsync;
  exports.getContactByIdAsync = getContactByIdAsync;

  var _reactNative = _require(_dependencyMap[0]);

  var DEFAULT_PAGE_SIZE = 100;

  function getContactsAsync() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$pageSize = _ref.pageSize,
        pageSize = _ref$pageSize === undefined ? DEFAULT_PAGE_SIZE : _ref$pageSize,
        _ref$pageOffset = _ref.pageOffset,
        pageOffset = _ref$pageOffset === undefined ? 0 : _ref$pageOffset,
        _ref$fields = _ref.fields,
        fields = _ref$fields === undefined ? [] : _ref$fields;

    return regeneratorRuntime.async(function getContactsAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentContacts.getContactsAsync({
              pageSize: pageSize,
              pageOffset: pageOffset,
              fields: fields
            }));

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function getContactByIdAsync() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$fields = _ref2.fields,
        fields = _ref2$fields === undefined ? [] : _ref2$fields,
        id = _ref2.id;

    return regeneratorRuntime.async(function getContactByIdAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(id == null)) {
              _context2.next = 4;
              break;
            }

            throw new Error('Please pass an ID as a parameter');

          case 4:
            _context2.next = 6;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentContacts.getContactsAsync({
              pageSize: 1,
              pageOffset: 0,
              fields: fields,
              id: id
            }));

          case 6:
            return _context2.abrupt("return", _context2.sent);

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  var PHONE_NUMBERS = exports.PHONE_NUMBERS = 'phoneNumbers';
  var EMAILS = exports.EMAILS = 'emails';
  var ADDRESSES = exports.ADDRESSES = 'addresses';
  var IMAGE = exports.IMAGE = 'image';
  var THUMBNAIL = exports.THUMBNAIL = 'thumbnail';
  var NOTE = exports.NOTE = 'note';
  var BIRTHDAY = exports.BIRTHDAY = 'birthday';
  var NON_GREGORIAN_BIRTHDAY = exports.NON_GREGORIAN_BIRTHDAY = 'nonGregorianBirthday';
  var NAME_PREFIX = exports.NAME_PREFIX = 'namePrefix';
  var NAME_SUFFIX = exports.NAME_SUFFIX = 'nameSuffix';
  var PHONETIC_FIRST_NAME = exports.PHONETIC_FIRST_NAME = 'phoneticFirstName';
  var PHONETIC_MIDDLE_NAME = exports.PHONETIC_MIDDLE_NAME = 'phoneticMiddleName';
  var PHONETIC_LAST_NAME = exports.PHONETIC_LAST_NAME = 'phoneticLastName';
  var SOCIAL_PROFILES = exports.SOCIAL_PROFILES = 'socialProfiles';
  var IM_ADDRESSES = exports.IM_ADDRESSES = 'instantMessageAddresses';
  var URLS = exports.URLS = 'urlAddresses';
  var DATES = exports.DATES = 'dates';
  var RELATIONSHIPS = exports.RELATIONSHIPS = 'relationships';
},486,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    get Lottie() {
      return _require(_dependencyMap[0]);
    },

    get Branch() {
      return _require(_dependencyMap[1]).default;
    },

    get GestureHandler() {
      console.warn('GestureHandler is no longer in DangerZone, you can now import it directly from the expo package.');
      return _require(_dependencyMap[2]);
    },

    get Localization() {
      return _require(_dependencyMap[3]).default;
    },

    get Payments() {
      return _require(_dependencyMap[4]);
    },

    get Print() {
      return _require(_dependencyMap[5]);
    },

    get DeviceMotion() {
      return _require(_dependencyMap[6]).default;
    }

  };
},487,[488,496,378,499,500,501,502]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]);
},488,[489]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _jsxFileName = 'src/js/LottieView.js';

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _react = _require(_dependencyMap[0]);

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeSafeModule = _require(_dependencyMap[2]);

  var _reactNativeSafeModule2 = _interopRequireDefault(_reactNativeSafeModule);

  var _propTypes = _require(_dependencyMap[3]);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var NativeLottieView = _reactNativeSafeModule2.default.component({
    viewName: 'LottieAnimationView',
    mockComponent: _reactNative.View
  });

  var LottieViewManager = _reactNativeSafeModule2.default.module({
    moduleName: 'LottieAnimationView',
    mock: {
      play: function play() {},
      reset: function reset() {}
    }
  });

  var ViewStyleExceptBorderPropType = function ViewStyleExceptBorderPropType(props, propName, componentName) {
    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var flattened = _reactNative.StyleSheet.flatten(props[propName]);

    var usesBorder = Object.keys(flattened).some(function (key) {
      return key.startsWith('border');
    });

    if (usesBorder) {
      return Error(componentName + ' does not allow any border related style properties to be specified. ' + "Border styles for this component will behave differently across platforms. If you'd " + 'like to render a border around this component, wrap it with a View.');
    }

    return _reactNative.ViewPropTypes.style.apply(_reactNative.ViewPropTypes, [props, propName, componentName].concat(rest));
  };

  var NotAllowedPropType = function NotAllowedPropType(props, propName, componentName) {
    var value = props[propName];

    if (value != null) {
      return Error(componentName + ' cannot specify \'' + propName + '\'.');
    }

    return null;
  };

  var propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: ViewStyleExceptBorderPropType,
    children: NotAllowedPropType,
    resizeMode: _propTypes2.default.oneOf(['cover', 'contain', 'center']),
    progress: _propTypes2.default.number,
    speed: _propTypes2.default.number,
    loop: _propTypes2.default.bool,
    enableMergePathsAndroidForKitKatAndAbove: _propTypes2.default.bool,
    source: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]).isRequired
  });

  var defaultProps = {
    progress: 0,
    speed: 1,
    loop: true,
    enableMergePathsAndroidForKitKatAndAbove: false,
    resizeMode: 'contain',
    style: _reactNative.StyleSheet.absoluteFill
  };
  var viewConfig = {
    uiViewClassName: 'LottieAnimationView',
    validAttributes: {
      progress: true
    }
  };

  var LottieView = function (_React$Component) {
    _inherits(LottieView, _React$Component);

    function LottieView(props) {
      _classCallCheck(this, LottieView);

      var _this = _possibleConstructorReturn(this, (LottieView.__proto__ || Object.getPrototypeOf(LottieView)).call(this, props));

      _this.viewConfig = viewConfig;
      _this.refRoot = _this.refRoot.bind(_this);
      return _this;
    }

    _createClass(LottieView, [{
      key: 'setNativeProps',
      value: function setNativeProps(props) {
        _reactNative.UIManager.updateView(this.getHandle(), this.viewConfig.uiViewClassName, {
          progress: props.progress
        });
      }
    }, {
      key: 'play',
      value: function play(startFrame, endFrame) {
        this.runCommand('play', [startFrame, endFrame]);
      }
    }, {
      key: 'reset',
      value: function reset() {
        this.runCommand('reset');
      }
    }, {
      key: 'runCommand',
      value: function runCommand(name) {
        var _this2 = this;

        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        return _reactNative.Platform.select({
          android: function android() {
            return _reactNative.UIManager.dispatchViewManagerCommand(_this2.getHandle(), _reactNative.UIManager.LottieAnimationView.Commands[name], args);
          },
          ios: function ios() {
            return LottieViewManager[name].apply(LottieViewManager, [_this2.getHandle()].concat(_toConsumableArray(args)));
          }
        })();
      }
    }, {
      key: 'getHandle',
      value: function getHandle() {
        return (0, _reactNative.findNodeHandle)(this.root);
      }
    }, {
      key: 'refRoot',
      value: function refRoot(root) {
        this.root = root;
      }
    }, {
      key: 'render',
      value: function render() {
        var source = this.props.source;
        var sourceName = typeof source === 'string' ? source : undefined;
        var sourceJson = typeof source === 'string' ? undefined : JSON.stringify(source);
        return _react2.default.createElement(NativeLottieView, _extends({
          ref: this.refRoot
        }, this.props, {
          source: undefined,
          sourceName: sourceName,
          sourceJson: sourceJson,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 123
          }
        }));
      }
    }]);

    return LottieView;
  }(_react2.default.Component);

  LottieView.propTypes = propTypes;
  LottieView.defaultProps = defaultProps;

  var AnimatedLottieView = _reactNative.Animated.createAnimatedComponent(LottieView);

  AnimatedLottieView.prototype.play = function play() {
    var startFrame = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
    var endFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

    if (this.getNode()) {
      return this.getNode().play(startFrame, endFrame);
    }

    console.warn('Trying to animate a view on an unmounted component');
    return null;
  };

  AnimatedLottieView.prototype.reset = function pause() {
    if (this.getNode()) {
      return this.getNode().reset();
    }

    console.warn('Trying to animate a view on an unmounted component');
    return null;
  };

  module.exports = AnimatedLottieView;
},489,[103,14,490,121]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    create: _require(_dependencyMap[0]),
    module: _require(_dependencyMap[0]),
    component: _require(_dependencyMap[1])
  };
},490,[1110,1111]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]);
},1110,[492]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _templateObject = _taggedTemplateLiteral(['\n      SafeModule.module(...) was invoked without any options parameter.\n    '], ['\n      SafeModule.module(...) was invoked without any options parameter.\n    ']),
      _templateObject2 = _taggedTemplateLiteral(['\n      SafeModule.module(...) requires a moduleName property to be specified.\n    '], ['\n      SafeModule.module(...) requires a moduleName property to be specified.\n    ']),
      _templateObject3 = _taggedTemplateLiteral(['\n      Missing a "mock" parameter.\n    '], ['\n      Missing a "mock" parameter.\n    ']),
      _templateObject4 = _taggedTemplateLiteral(['\n          ReactNative.NativeModules.', '.', ' did not have a corresponding prop defined\n          in the mock provided to SafeModule.\n        '], ['\n          ReactNative.NativeModules.', '.', ' did not have a corresponding prop defined\n          in the mock provided to SafeModule.\n        ']);

  var _reactNative = _require(_dependencyMap[0]);

  var _dedent = _require(_dependencyMap[1]);

  var _dedent2 = _interopRequireDefault(_dedent);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var UNMOCKED_PROPERTY_WHITELIST = {
    VERSION: true,
    addListener: true,
    removeListeners: true
  };
  var eventEmitterMock = {
    addListener: function addListener() {},
    removeListeners: function removeListeners() {}
  };

  var first = function first(array, fn) {
    var result = void 0;
    var i = 0;

    for (; i < array.length; i++) {
      result = fn(array[i]);
      if (result) return result;
    }

    return null;
  };

  var moduleWithName = function moduleWithName(nameOrArray) {
    if (!nameOrArray) return null;
    if (Array.isArray(nameOrArray)) return first(nameOrArray, moduleWithName);
    return _reactNative.NativeModules[nameOrArray];
  };

  var getPrimaryName = function getPrimaryName(nameOrArray) {
    return Array.isArray(nameOrArray) ? getPrimaryName(nameOrArray[0]) : nameOrArray;
  };

  var getModule = function getModule(moduleNameOrNames, mock, isEventEmitter) {
    var module = moduleWithName(moduleNameOrNames);
    if (module) return module;
    if (isEventEmitter) return _extends({}, mock, eventEmitterMock);
    return mock;
  };

  var defaultGetVersion = function defaultGetVersion(module) {
    return module.VERSION;
  };

  var create = function SafeModuleCreate(options) {
    if (!options) {
      throw new Error((0, _dedent2.default)(_templateObject));
    }

    var moduleName = options.moduleName;
    var mock = options.mock;
    var isEventEmitter = options.isEventEmitter;
    var versionOverrides = options.versionOverrides;
    var getVersion = options.getVersion;

    if (!getVersion) {
      getVersion = defaultGetVersion;
    }

    if (!moduleName) {
      throw new Error((0, _dedent2.default)(_templateObject2));
    }

    var MODULE_NAME = getPrimaryName(moduleName);

    if (!mock) {
      throw new Error((0, _dedent2.default)(_templateObject3));
    }

    var result = {};
    var module = getModule(moduleName, mock, isEventEmitter);
    var version = getVersion(module);

    if (isEventEmitter) {
      result.emitter = new _reactNative.NativeEventEmitter(module);
    }

    var overrides = void 0;
    var boundOverrides = void 0;

    if (versionOverrides) {
      overrides = versionOverrides[version];
      boundOverrides = {};

      if (overrides) {
        Object.keys(overrides).forEach(function (key) {
          if (typeof overrides[key] === 'function') {
            boundOverrides[key] = overrides[key](module[key], module);
          } else {
            boundOverrides[key] = overrides[key];
          }
        });
      }
    }

    _extends(result, mock, module, boundOverrides);

    return result;
  };

  module.exports = create;
},492,[14,493]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function dedent(strings) {
    var raw = undefined;

    if (typeof strings === "string") {
      raw = [strings];
    } else {
      raw = strings.raw;
    }

    var result = "";

    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      values[_key - 1] = arguments[_key];
    }

    for (var i = 0; i < raw.length; i++) {
      result += raw[i].replace(/\\\n[ \t]*/g, "").replace(/\\`/g, "`");

      if (i < values.length) {
        result += values[i];
      }
    }

    result = result.trim();
    var lines = result.split("\n");
    var mindent = null;
    lines.forEach(function (l) {
      var m = l.match(/^ +/);

      if (m) {
        var indent = m[0].length;

        if (!mindent) {
          mindent = indent;
        } else {
          mindent = Math.min(mindent, indent);
        }
      }
    });

    if (mindent !== null) {
      result = lines.map(function (l) {
        return l[0] === " " ? l.slice(mindent) : l;
      }).join("\n");
    }

    return result.replace(/\\n/g, "\n");
  }

  if (typeof module !== "undefined") {
    module.exports = dedent;
  }
},493,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]);
},1111,[495]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _templateObject = _taggedTemplateLiteral(['\n      SafeModule.create(...) was invoked without any options parameter.\n    '], ['\n      SafeModule.create(...) was invoked without any options parameter.\n    ']),
      _templateObject2 = _taggedTemplateLiteral(['\n             When attempting to resolve the native component ', ',\n             componentOverrides.', ' is expected to be a function, but found\n             ', ' instead.\n          '], ['\n             When attempting to resolve the native component ', ',\n             componentOverrides.', ' is expected to be a function, but found\n             ', ' instead.\n          ']),
      _templateObject3 = _taggedTemplateLiteral(['\n            When attempting to resolve the native component ', ',\n            componentOverrides.', ' is expected to be a function that returns a React\n            component. Instead, ', ' was found.\n          '], ['\n            When attempting to resolve the native component ', ',\n            componentOverrides.', ' is expected to be a function that returns a React\n            component. Instead, ', ' was found.\n          ']);

  var _reactNative = _require(_dependencyMap[0]);

  var _dedent = _require(_dependencyMap[1]);

  var _dedent2 = _interopRequireDefault(_dedent);

  var _SafeModule = _require(_dependencyMap[2]);

  var _SafeModule2 = _interopRequireDefault(_SafeModule);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  var first = function first(array, fn) {
    var result = void 0;
    var i = 0;

    for (; i < array.length; i++) {
      result = fn(array[i]);
      if (result) return result;
    }

    return null;
  };

  var moduleWithName = function moduleWithName(nameOrArray) {
    if (!nameOrArray) return null;
    if (Array.isArray(nameOrArray)) return first(nameOrArray, moduleWithName);
    return _reactNative.UIManager[nameOrArray];
  };

  var findFirstResolver = function findFirstResolver(namespace) {
    return function findFirstOnNamespace(nameOrArray) {
      if (!nameOrArray) return null;
      if (Array.isArray(nameOrArray)) return first(nameOrArray, findFirstOnNamespace);
      return nameOrArray in namespace ? nameOrArray : null;
    };
  };

  var findFirstViewName = findFirstResolver(_reactNative.UIManager);

  var getPrimaryName = function getPrimaryName(nameOrArray) {
    return Array.isArray(nameOrArray) ? getPrimaryName(nameOrArray[0]) : nameOrArray;
  };

  var defaultGetVersion = function defaultGetVersion(module) {
    return module.VERSION;
  };

  function SafeComponentCreate(options) {
    if (!options) {
      throw new Error((0, _dedent2.default)(_templateObject));
    }

    var viewName = options.viewName;
    var propOverrides = options.propOverrides;
    var componentOverrides = options.componentOverrides;
    var mockComponent = options.mockComponent;
    var mock = options.mock;
    var getVersion = options.getVersion;

    if (!getVersion) {
      getVersion = defaultGetVersion;
    }

    if (!viewName) {
      throw new Error('\n      SafeModule.component(...) requires a viewName property to be specified.\n    ');
    }

    if (!mockComponent) {
      throw new Error('\n      SafeModule.component(...) requires a mockComponent property to be specified.\n    ');
    }

    var PRIMARY_VIEW_NAME = getPrimaryName(viewName);
    var realViewName = findFirstViewName(viewName);
    var realViewConfig = _reactNative.UIManager[realViewName];

    if (!realViewName || !realViewConfig) {
      return mockComponent;
    }

    var moduleOptions = _extends({}, options, {
      mock: mock || {},
      moduleName: realViewName + 'Manager'
    });

    var nativeModule = (0, _SafeModule2.default)(moduleOptions);
    var version = getVersion(realViewConfig.Constants || {});

    if (propOverrides) {
      var overrides = propOverrides[version];
      var boundOverrides = {};

      if (overrides) {
        if (typeof overrides === 'function') {
          boundOverrides = overrides(realViewConfig.NativeProps, realViewConfig, nativeModule);
        } else {
          boundOverrides = _extends({}, overrides);
        }
      }

      _extends(realViewConfig.NativeProps, boundOverrides);
    }

    var nativeComponent = (0, _reactNative.requireNativeComponent)(realViewName);
    var result = nativeComponent;

    result.runCommand = function (instance, name) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      return _reactNative.Platform.select({
        android: function android() {
          return _reactNative.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(instance), _reactNative.UIManager[realViewName].Commands[name], args);
        },
        ios: function ios() {
          return nativeModule[name].apply(nativeModule, [(0, _reactNative.findNodeHandle)(instance)].concat(args));
        },
        default: function _default() {}
      })();
    };

    result.updateView = function (instance, props) {
      var native = function native() {
        return _reactNative.UIManager.updateView((0, _reactNative.findNodeHandle)(instance), realViewName, props);
      };

      _reactNative.Platform.select({
        ios: native,
        android: native,
        default: function _default() {}
      })();
    };

    if (componentOverrides) {
      var _overrides = componentOverrides[version];

      if (_overrides) {
        result = _overrides(nativeComponent, nativeModule);
      }
    }

    return result;
  }

  module.exports = SafeComponentCreate;
},495,[14,493,1110]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNativeBranch = _require(_dependencyMap[0]);

  var _reactNativeBranch2 = babelHelpers.interopRequireDefault(_reactNativeBranch);

  exports.default = _reactNativeBranch2.default;
},496,[497]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Branch = exports.ShareInitiatedEvent = exports.ShareCompletedEvent = exports.RegisterViewEvent = exports.PurchaseInitiatedEvent = exports.PurchasedEvent = exports.AddToWishlistEvent = exports.AddToCartEvent = exports.DEFAULT_INIT_SESSION_TTL = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  var _branchUniversalObject = _require(_dependencyMap[1]);

  var _branchUniversalObject2 = babelHelpers.interopRequireDefault(_branchUniversalObject);

  var RNBranch = _reactNative.NativeModules.RNBranch,
      RNBranchEventEmitter = _reactNative.NativeModules.RNBranchEventEmitter;
  var DEFAULT_INIT_SESSION_TTL = exports.DEFAULT_INIT_SESSION_TTL = 5000;
  var AddToCartEvent = exports.AddToCartEvent = RNBranch.ADD_TO_CART_EVENT;
  var AddToWishlistEvent = exports.AddToWishlistEvent = RNBranch.ADD_TO_WISHLIST_EVENT;
  var PurchasedEvent = exports.PurchasedEvent = RNBranch.PURCHASED_EVENT;
  var PurchaseInitiatedEvent = exports.PurchaseInitiatedEvent = RNBranch.PURCHASE_INITIATED_EVENT;
  var RegisterViewEvent = exports.RegisterViewEvent = RNBranch.REGISTER_VIEW_EVENT;
  var ShareCompletedEvent = exports.ShareCompletedEvent = RNBranch.SHARE_COMPLETED_EVENT;
  var ShareInitiatedEvent = exports.ShareInitiatedEvent = RNBranch.SHARE_INITIATED_EVENT;

  var Branch = function () {
    function Branch() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      babelHelpers.classCallCheck(this, Branch);
      this.nativeEventEmitter = _reactNative.DeviceEventEmitter;
      this.initSessionTtl = DEFAULT_INIT_SESSION_TTL;
      this._launchTime = new Date().getTime();
      this._debug = false;
      this.setDebug = RNBranch.setDebug;
      this.getLatestReferringParams = RNBranch.getLatestReferringParams;
      this.getFirstReferringParams = RNBranch.getFirstReferringParams;

      this.setIdentity = function (identity) {
        return RNBranch.setIdentity(identity);
      };

      this.logout = RNBranch.logout;

      this.userCompletedAction = function (event) {
        var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return RNBranch.userCompletedAction(event, state);
      };

      this.getShortUrl = RNBranch.getShortUrl;

      this.redeemRewards = function (amount, bucket) {
        return RNBranch.redeemRewards(amount, bucket);
      };

      this.loadRewards = RNBranch.loadRewards;
      this.getCreditHistory = RNBranch.getCreditHistory;
      this.createBranchUniversalObject = _branchUniversalObject2.default;
      if (options.debug) this._debug = true;
    }

    babelHelpers.createClass(Branch, [{
      key: "subscribe",
      value: function subscribe(listener) {
        var _this = this;

        if (this._timeSinceLaunch() < this.initSessionTtl) {
          RNBranch.redeemInitSessionResult().then(function (result) {
            if (result) {
              listener(result);
            }

            _this._addListener(listener);
          });
        } else {
          this._addListener(listener);
        }

        var unsubscribe = function unsubscribe() {
          _this._removeListener(listener);
        };

        return unsubscribe;
      }
    }, {
      key: "_timeSinceLaunch",
      value: function _timeSinceLaunch() {
        return new Date().getTime() - this._launchTime;
      }
    }, {
      key: "_addListener",
      value: function _addListener(listener) {
        this.nativeEventEmitter.addListener(RNBranch.INIT_SESSION_SUCCESS, listener);
        this.nativeEventEmitter.addListener(RNBranch.INIT_SESSION_ERROR, listener);
      }
    }, {
      key: "_removeListener",
      value: function _removeListener(listener) {
        this.nativeEventEmitter.removeListener(RNBranch.INIT_SESSION_SUCCESS, listener);
        this.nativeEventEmitter.removeListener(RNBranch.INIT_SESSION_ERROR, listener);
      }
    }]);
    return Branch;
  }();

  exports.Branch = Branch;
  exports.default = new Branch();
},497,[14,498]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var RNBranch = _reactNative.NativeModules.RNBranch;

  exports.default = function createBranchUniversalObject(identifier) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var branchUniversalObject, _ref, ident;

    return regeneratorRuntime.async(function createBranchUniversalObject$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(typeof identifier !== 'string')) {
              _context.next = 2;
              break;
            }

            throw new Error('react-native-branch: identifier must be a string');

          case 2:
            branchUniversalObject = babelHelpers.extends({
              contentIndexingMode: 'private',
              canonicalIdentifier: identifier
            }, options);
            _context.next = 5;
            return regeneratorRuntime.awrap(RNBranch.createUniversalObject(branchUniversalObject));

          case 5:
            _ref = _context.sent;
            ident = _ref.ident;
            return _context.abrupt("return", {
              ident: ident,
              showShareSheet: function showShareSheet() {
                var shareOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var linkProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var controlParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                shareOptions = babelHelpers.extends({
                  title: options.title || '',
                  text: options.contentDescription || ''
                }, shareOptions);
                linkProperties = babelHelpers.extends({
                  feature: 'share',
                  channel: 'RNApp'
                }, linkProperties);
                return this._tryFunction(RNBranch.showShareSheet, shareOptions, linkProperties, controlParams);
              },
              registerView: function registerView() {
                return this._tryFunction(RNBranch.registerView);
              },
              generateShortUrl: function generateShortUrl() {
                var linkProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var controlParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                return this._tryFunction(RNBranch.generateShortUrl, linkProperties, controlParams);
              },
              listOnSpotlight: function listOnSpotlight() {
                return Promise.resolve();
                return this._tryFunction(RNBranch.listOnSpotlight);
              },
              userCompletedAction: function userCompletedAction(event) {
                var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                return this._tryFunction(RNBranch.userCompletedActionOnUniversalObject, event, state);
              },
              release: function release() {
                RNBranch.releaseUniversalObject(this.ident);
              },
              _tryFunction: function _tryFunction(func) {
                var _this = this;

                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }

                return func.apply(undefined, [this.ident].concat(babelHelpers.toConsumableArray(args))).catch(function (error) {
                  if (error.code != 'RNBranch::Error::BUONotFound') {
                    throw error;
                  }

                  return RNBranch.createUniversalObject(branchUniversalObject).then(function (response) {
                    _this.ident = response.ident;
                    return func.apply(undefined, [response.ident].concat(babelHelpers.toConsumableArray(args)));
                  });
                });
              }
            });

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  };
},498,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _this = this;

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentLocalization = _reactNative.NativeModules.ExponentLocalization;

  var isObject = function isObject(obj) {
    return obj && obj.constructor && obj.constructor === Object;
  };

  var LocaleStore = function LocaleStore(locales) {
    babelHelpers.classCallCheck(this, LocaleStore);

    if (isObject(locales) === false || Object.keys(locales).length <= 1) {
      throw new Error('Locales input must be an object and non-empty');
    }

    var copy = babelHelpers.extends({}, locales);
    var allGivenLocales = new Set(Object.keys(copy));
    var currentLocaleName = [].concat(babelHelpers.toConsumableArray(allGivenLocales))[0];
    var defaultLocale = copy[currentLocaleName];
    var defaultLocaleName = currentLocaleName;
    var defaultLocalePhrases = new Set(Object.keys(defaultLocale));
    var currentLocale = defaultLocale;

    var setLocaleHelper = function setLocaleHelper(newLocaleName, cb) {
      if (allGivenLocales.has(newLocaleName) === false) {}

      if (newLocaleName === currentLocaleName) {
        return;
      }

      currentLocale = copy[newLocaleName];
      currentLocaleName = newLocaleName;
      cb && cb();
    };

    var localizationValueHelper = function localizationValueHelper(name) {
      if (defaultLocalePhrases.has(name)) {
        var result = currentLocale[name];

        if (result !== undefined) {
          return result !== undefined ? result : defaultLocale[name];
        } else {
          var fallback = defaultLocale[name];

          if (fallback === undefined) {
            return '';
          }

          return fallback;
        }
      }
    };

    {
      var _ret = function () {
        var localizedValues = [];

        for (var _iterator = Object.values(copy), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var values = _ref;
          Object.keys(values).forEach(function (s) {
            return localizedValues.push(s);
          });
        }

        localizedValues = new Set(localizedValues);
        var proxy = {};
        Object.defineProperty(proxy, 'setLocale', {
          get: function get() {
            return setLocaleHelper;
          }
        });
        var methods = new Set(['setLocale']);

        var _loop = function _loop(name) {
          if (methods.has(name)) {
            throw new Error("Cannot use " + name + " as a locale name");
          }

          Object.defineProperty(proxy, name, {
            get: function get() {
              return localizationValueHelper(name);
            }
          });
        };

        for (var _iterator2 = localizedValues.keys(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var name = _ref2;

          _loop(name);
        }

        return {
          v: proxy
        };
      }();

      if (typeof _ret === "object") return _ret.v;
    }
  };

  var getCurrentLocaleAsync = function getCurrentLocaleAsync() {
    return regeneratorRuntime.async(function getCurrentLocaleAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(ExponentLocalization.getCurrentLocaleAsync());

          case 2:
            return _context.abrupt("return", _context.sent.replace('-', '_'));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, _this);
  };

  exports.default = babelHelpers.extends({}, ExponentLocalization, {
    getCurrentLocaleAsync: getCurrentLocaleAsync,
    LocaleStore: LocaleStore
  });
},499,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _reactNative = _require(_dependencyMap[0]);

  exports.initialize = function () {
    if (!_reactNative.NativeModules.TPSStripeManager && false) {
      console.warn("We temporarily moved the Expo Payments API to ExpoKit. Please see the SDK 20 release notes for more information: https://blog.expo.io/expo-sdk-v20-0-0-is-now-available-79f84232a9d1");
    }
  };

  if (_reactNative.NativeModules.TPSStripeManager && false) {
    module.exports = _reactNative.NativeModules.TPSStripeManager;
  } else {
    module.exports = _reactNative.NativeModules.StripeModule;
  }
},500,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.printAsync = printAsync;
  exports.selectPrinterAsync = selectPrinterAsync;

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentPrint = _reactNative.NativeModules.ExponentPrint;

  function printAsync(options) {
    return regeneratorRuntime.async(function printAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!options.uri && !options.html)) {
              _context.next = 2;
              break;
            }

            throw new Error('Must provide either `html` or `uri` to print');

          case 2:
            if (!(options.uri && options.html)) {
              _context.next = 4;
              break;
            }

            throw new Error('Must provide exactly one of `html` and `uri` but both were specified');

          case 4:
            return _context.abrupt("return", ExponentPrint.print(options));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function selectPrinterAsync() {
    return regeneratorRuntime.async(function selectPrinterAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            throw new Error('Selecting the printer in advance is not available on Android.');

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }
},501,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Gravity = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  var _DeviceSensor2 = _require(_dependencyMap[1]);

  var _DeviceSensor3 = babelHelpers.interopRequireDefault(_DeviceSensor2);

  var ExponentDeviceMotion = _reactNative.NativeModules.ExponentDeviceMotion;

  var DeviceMotionSensor = function (_DeviceSensor) {
    babelHelpers.inherits(DeviceMotionSensor, _DeviceSensor);

    function DeviceMotionSensor() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, DeviceMotionSensor);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DeviceMotionSensor.__proto__ || Object.getPrototypeOf(DeviceMotionSensor)).call.apply(_ref, [this].concat(args))), _this), _this.Gravity = ExponentDeviceMotion.Gravity, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    return DeviceMotionSensor;
  }(_DeviceSensor3.default);

  var Gravity = exports.Gravity = ExponentDeviceMotion.Gravity;
  exports.default = new DeviceMotionSensor(ExponentDeviceMotion, 'deviceMotionDidUpdate');
},502,[14,336]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getDocumentAsync = getDocumentAsync;

  var _reactNative = _require(_dependencyMap[0]);

  function getDocumentAsync() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$type = _ref.type,
        type = _ref$type === undefined ? '*/*' : _ref$type;

    return regeneratorRuntime.async(function getDocumentAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentDocumentPicker.getDocumentAsync({
              type: type
            }));

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},503,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DownloadResumable = exports.cacheDirectory = exports.documentDirectory = undefined;
  exports.getInfoAsync = getInfoAsync;
  exports.readAsStringAsync = readAsStringAsync;
  exports.writeAsStringAsync = writeAsStringAsync;
  exports.deleteAsync = deleteAsync;
  exports.moveAsync = moveAsync;
  exports.copyAsync = copyAsync;
  exports.makeDirectoryAsync = makeDirectoryAsync;
  exports.readDirectoryAsync = readDirectoryAsync;
  exports.downloadAsync = downloadAsync;
  exports.createDownloadResumable = createDownloadResumable;

  var _reactNative = _require(_dependencyMap[0]);

  var _uuidJs = _require(_dependencyMap[1]);

  var _uuidJs2 = babelHelpers.interopRequireDefault(_uuidJs);

  var FS = _reactNative.NativeModules.ExponentFileSystem;

  var normalizeEndingSlash = function normalizeEndingSlash(p) {
    return p.replace(/\/*$/, '') + '/';
  };

  FS.documentDirectory = normalizeEndingSlash(FS.documentDirectory);
  FS.cacheDirectory = normalizeEndingSlash(FS.cacheDirectory);
  var documentDirectory = exports.documentDirectory = FS.documentDirectory;
  var cacheDirectory = exports.cacheDirectory = FS.cacheDirectory;

  function getInfoAsync(fileUri) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return FS.getInfoAsync(fileUri, options);
  }

  function readAsStringAsync(fileUri) {
    return FS.readAsStringAsync(fileUri, {});
  }

  function writeAsStringAsync(fileUri, contents) {
    return FS.writeAsStringAsync(fileUri, contents, {});
  }

  function deleteAsync(fileUri) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return FS.deleteAsync(fileUri, options);
  }

  function moveAsync(options) {
    return FS.moveAsync(options);
  }

  function copyAsync(options) {
    return FS.copyAsync(options);
  }

  function makeDirectoryAsync(fileUri) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return FS.makeDirectoryAsync(fileUri, options);
  }

  function readDirectoryAsync(fileUri) {
    return FS.readDirectoryAsync(fileUri, {});
  }

  function downloadAsync(uri, fileUri) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return FS.downloadAsync(uri, fileUri, options);
  }

  function createDownloadResumable(uri, fileUri, options, callback, resumeData) {
    return new DownloadResumable(uri, fileUri, options, callback, resumeData);
  }

  var DownloadResumable = exports.DownloadResumable = function () {
    function DownloadResumable(url, fileUri) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var callback = arguments[3];
      var resumeData = arguments[4];
      babelHelpers.classCallCheck(this, DownloadResumable);
      this._uuid = _uuidJs2.default.create(4).toString();
      this._url = url;
      this._fileUri = fileUri;
      this._options = options;
      this._resumeData = resumeData;
      this._callback = callback;
      this._subscription = null;
      this._emitter = new _reactNative.NativeEventEmitter(FS);
    }

    babelHelpers.createClass(DownloadResumable, [{
      key: "downloadAsync",
      value: function downloadAsync() {
        return regeneratorRuntime.async(function downloadAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this._addSubscription();

                _context.next = 3;
                return regeneratorRuntime.awrap(FS.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData));

              case 3:
                return _context.abrupt("return", _context.sent);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "pauseAsync",
      value: function pauseAsync() {
        var pauseResult;
        return regeneratorRuntime.async(function pauseAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return regeneratorRuntime.awrap(FS.downloadResumablePauseAsync(this._uuid));

              case 2:
                pauseResult = _context2.sent;

                if (!pauseResult) {
                  _context2.next = 8;
                  break;
                }

                this._resumeData = pauseResult.resumeData;
                return _context2.abrupt("return", this.savable());

              case 8:
                throw new Error('Unable to generate a savable pause state');

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "resumeAsync",
      value: function resumeAsync() {
        return regeneratorRuntime.async(function resumeAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this._addSubscription();

                _context3.next = 3;
                return regeneratorRuntime.awrap(FS.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData));

              case 3:
                return _context3.abrupt("return", _context3.sent);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "savable",
      value: function savable() {
        return {
          url: this._url,
          fileUri: this._fileUri,
          options: this._options,
          resumeData: this._resumeData
        };
      }
    }, {
      key: "_addSubscription",
      value: function _addSubscription() {
        var _this = this;

        if (this._subscription) {
          return;
        }

        this._subscription = this._emitter.addListener('Exponent.downloadProgress', function (_ref) {
          var uuid = _ref.uuid,
              data = _ref.data;

          if (uuid === _this._uuid) {
            var callback = _this._callback;

            if (callback) {
              callback(data);
            }
          }
        });
      }
    }]);
    return DownloadResumable;
  }();
},504,[14,320]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.logInAsync = logInAsync;

  var _reactNative = _require(_dependencyMap[0]);

  var _Constants = _require(_dependencyMap[1]);

  var _Constants2 = babelHelpers.interopRequireDefault(_Constants);

  var Google = _reactNative.NativeModules.ExponentGoogle;

  function logInAsync(config) {
    var behavior, scopes, androidClientId, iosClientId, logInResult, userInfoResponse;
    return regeneratorRuntime.async(function logInAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            behavior = config.behavior;

            if (!behavior) {
              behavior = 'system';
            }

            if (behavior === 'system' && _Constants2.default.appOwnership !== 'standalone') {
              behavior = 'web';
            }

            scopes = config.scopes;

            if (!scopes) {
              scopes = ['profile', 'email'];
            }

            androidClientId = _Constants2.default.appOwnership === 'standalone' ? config.androidStandaloneAppClientId : config.androidClientId;
            iosClientId = _Constants2.default.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;
            _context.next = 9;
            return regeneratorRuntime.awrap(Google.logInAsync({
              androidClientId: androidClientId,
              iosClientId: iosClientId,
              webClientId: config.webClientId,
              behavior: behavior,
              scopes: scopes
            }));

          case 9:
            logInResult = _context.sent;

            if (!(behavior === 'web')) {
              _context.next = 20;
              break;
            }

            _context.next = 13;
            return regeneratorRuntime.awrap(fetch('https://www.googleapis.com/userinfo/v2/me', {
              headers: {
                Authorization: "Bearer " + logInResult.accessToken
              }
            }));

          case 13:
            userInfoResponse = _context.sent;
            _context.next = 16;
            return regeneratorRuntime.awrap(userInfoResponse.json());

          case 16:
            userInfoResponse = _context.sent;
            return _context.abrupt("return", babelHelpers.extends({}, logInResult, {
              user: {
                id: userInfoResponse.id,
                name: userInfoResponse.name,
                givenName: userInfoResponse.given_name,
                familyName: userInfoResponse.family_name,
                photoUrl: userInfoResponse.picture,
                email: userInfoResponse.email
              }
            }));

          case 20:
            return _context.abrupt("return", logInResult);

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},505,[14,310]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ImpactStyles = exports.NotificationTypes = undefined;
  exports.notification = notification;
  exports.impact = impact;
  exports.selection = selection;

  var _reactNative = _require(_dependencyMap[0]);

  var NotificationTypes = exports.NotificationTypes = {
    Success: 'success',
    Warning: 'warning',
    Error: 'error'
  };
  var ImpactStyles = exports.ImpactStyles = {
    Light: 'light',
    Medium: 'medium',
    Heavy: 'heavy'
  };

  function notification(type) {
    {
      console.warn('`Expo.Haptic` is only available on iOS');

      _reactNative.Vibration.vibrate();
    }
  }

  function impact(style) {
    {
      console.warn('`Expo.Haptic` is only available on iOS');

      _reactNative.Vibration.vibrate();
    }
  }

  function selection() {
    {
      console.warn('`Expo.Haptic` is only available on iOS');

      _reactNative.Vibration.vibrate();
    }
  }
},506,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _vectorIcons = _require(_dependencyMap[0]);

  var _vectorIcons2 = babelHelpers.interopRequireDefault(_vectorIcons);

  exports.default = _vectorIcons2.default;
},507,[508]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    get Entypo() {
      return _require(_dependencyMap[0]).default;
    },

    get EvilIcons() {
      return _require(_dependencyMap[1]).default;
    },

    get Feather() {
      return _require(_dependencyMap[2]).default;
    },

    get FontAwesome() {
      return _require(_dependencyMap[3]).default;
    },

    get Foundation() {
      return _require(_dependencyMap[4]).default;
    },

    get Ionicons() {
      return _require(_dependencyMap[5]).default;
    },

    get MaterialCommunityIcons() {
      return _require(_dependencyMap[6]).default;
    },

    get MaterialIcons() {
      return _require(_dependencyMap[7]).default;
    },

    get Octicons() {
      return _require(_dependencyMap[8]).default;
    },

    get SimpleLineIcons() {
      return _require(_dependencyMap[9]).default;
    },

    get Zocial() {
      return _require(_dependencyMap[10]).default;
    },

    get createIconSet() {
      return _require(_dependencyMap[11]).default;
    },

    get createIconSetFromFontello() {
      return _require(_dependencyMap[12]).default;
    },

    get createIconSetFromIcoMoon() {
      return _require(_dependencyMap[13]).default;
    }

  };
},508,[509,675,678,681,684,687,690,693,696,699,702,511,705,707]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Entypo = _require(_dependencyMap[0]);

  var _Entypo2 = babelHelpers.interopRequireDefault(_Entypo);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_Entypo2.default, 'entypo', _require(_dependencyMap[2]));
},509,[510,511,674]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "500px": 61696,
    "500px-with-circle": 61697,
    "add-to-list": 61698,
    "add-user": 61699,
    "address": 61700,
    "adjust": 61701,
    "air": 61702,
    "aircraft": 61703,
    "aircraft-landing": 61704,
    "aircraft-take-off": 61705,
    "align-bottom": 61706,
    "align-horizontal-middle": 61707,
    "align-left": 61708,
    "align-right": 61709,
    "align-top": 61710,
    "align-vertical-middle": 61711,
    "app-store": 61712,
    "archive": 61713,
    "area-graph": 61714,
    "arrow-bold-down": 61715,
    "arrow-bold-left": 61716,
    "arrow-bold-right": 61717,
    "arrow-bold-up": 61718,
    "arrow-down": 61719,
    "arrow-left": 61720,
    "arrow-long-down": 61721,
    "arrow-long-left": 61722,
    "arrow-long-right": 61723,
    "arrow-long-up": 61724,
    "arrow-right": 61725,
    "arrow-up": 61726,
    "arrow-with-circle-down": 61727,
    "arrow-with-circle-left": 61728,
    "arrow-with-circle-right": 61729,
    "arrow-with-circle-up": 61730,
    "attachment": 61731,
    "awareness-ribbon": 61732,
    "back": 61733,
    "back-in-time": 61734,
    "baidu": 61735,
    "bar-graph": 61736,
    "basecamp": 61737,
    "battery": 61738,
    "beamed-note": 61739,
    "behance": 61740,
    "bell": 61741,
    "blackboard": 61742,
    "block": 61743,
    "book": 61744,
    "bookmark": 61745,
    "bookmarks": 61746,
    "bowl": 61747,
    "box": 61748,
    "briefcase": 61749,
    "browser": 61750,
    "brush": 61751,
    "bucket": 61752,
    "bug": 61753,
    "cake": 61754,
    "calculator": 61755,
    "calendar": 61756,
    "camera": 61757,
    "ccw": 61758,
    "chat": 61759,
    "check": 61760,
    "chevron-down": 61761,
    "chevron-left": 61762,
    "chevron-right": 61763,
    "chevron-small-down": 61764,
    "chevron-small-left": 61765,
    "chevron-small-right": 61766,
    "chevron-small-up": 61767,
    "chevron-thin-down": 61768,
    "chevron-thin-left": 61769,
    "chevron-thin-right": 61770,
    "chevron-thin-up": 61771,
    "chevron-up": 61772,
    "chevron-with-circle-down": 61773,
    "chevron-with-circle-left": 61774,
    "chevron-with-circle-right": 61775,
    "chevron-with-circle-up": 61776,
    "circle": 61777,
    "circle-with-cross": 61778,
    "circle-with-minus": 61779,
    "circle-with-plus": 61780,
    "circular-graph": 61781,
    "clapperboard": 61782,
    "classic-computer": 61783,
    "clipboard": 61784,
    "clock": 61785,
    "cloud": 61786,
    "code": 61787,
    "cog": 61788,
    "colours": 61789,
    "compass": 61790,
    "controller-fast-backward": 61791,
    "controller-fast-forward": 61792,
    "controller-jump-to-start": 61793,
    "controller-next": 61794,
    "controller-paus": 61795,
    "controller-play": 61796,
    "controller-record": 61797,
    "controller-stop": 61798,
    "controller-volume": 61799,
    "copy": 61800,
    "creative-cloud": 61801,
    "creative-commons": 61802,
    "creative-commons-attribution": 61803,
    "creative-commons-noderivs": 61804,
    "creative-commons-noncommercial-eu": 61805,
    "creative-commons-noncommercial-us": 61806,
    "creative-commons-public-domain": 61807,
    "creative-commons-remix": 61808,
    "creative-commons-share": 61809,
    "creative-commons-sharealike": 61810,
    "credit": 61811,
    "credit-card": 61812,
    "crop": 61813,
    "cross": 61814,
    "cup": 61815,
    "cw": 61816,
    "cycle": 61817,
    "database": 61818,
    "dial-pad": 61819,
    "direction": 61820,
    "document": 61821,
    "document-landscape": 61822,
    "documents": 61823,
    "dot-single": 61824,
    "dots-three-horizontal": 61825,
    "dots-three-vertical": 61826,
    "dots-two-horizontal": 61827,
    "dots-two-vertical": 61828,
    "download": 61829,
    "dribbble": 61830,
    "dribbble-with-circle": 61831,
    "drink": 61832,
    "drive": 61833,
    "drop": 61834,
    "dropbox": 61835,
    "edit": 61836,
    "email": 61837,
    "emoji-flirt": 61838,
    "emoji-happy": 61839,
    "emoji-neutral": 61840,
    "emoji-sad": 61841,
    "erase": 61842,
    "eraser": 61843,
    "evernote": 61844,
    "export": 61845,
    "eye": 61846,
    "eye-with-line": 61847,
    "facebook": 61848,
    "facebook-with-circle": 61849,
    "feather": 61850,
    "fingerprint": 61851,
    "flag": 61852,
    "flash": 61853,
    "flashlight": 61854,
    "flat-brush": 61855,
    "flattr": 61856,
    "flickr": 61857,
    "flickr-with-circle": 61858,
    "flow-branch": 61859,
    "flow-cascade": 61860,
    "flow-line": 61861,
    "flow-parallel": 61862,
    "flow-tree": 61863,
    "flower": 61864,
    "folder": 61865,
    "folder-images": 61866,
    "folder-music": 61867,
    "folder-video": 61868,
    "forward": 61869,
    "foursquare": 61870,
    "funnel": 61871,
    "game-controller": 61872,
    "gauge": 61873,
    "github": 61874,
    "github-with-circle": 61875,
    "globe": 61876,
    "google-": 61877,
    "google--with-circle": 61878,
    "google-drive": 61879,
    "google-hangouts": 61880,
    "google-play": 61881,
    "graduation-cap": 61882,
    "grid": 61883,
    "grooveshark": 61884,
    "hair-cross": 61885,
    "hand": 61886,
    "heart": 61887,
    "heart-outlined": 61888,
    "help": 61889,
    "help-with-circle": 61890,
    "home": 61891,
    "hour-glass": 61892,
    "houzz": 61893,
    "icloud": 61894,
    "image": 61895,
    "image-inverted": 61896,
    "images": 61897,
    "inbox": 61898,
    "infinity": 61899,
    "info": 61900,
    "info-with-circle": 61901,
    "instagram": 61902,
    "instagram-with-circle": 61903,
    "install": 61904,
    "key": 61905,
    "keyboard": 61906,
    "lab-flask": 61907,
    "landline": 61908,
    "language": 61909,
    "laptop": 61910,
    "lastfm": 61911,
    "lastfm-with-circle": 61912,
    "layers": 61913,
    "leaf": 61914,
    "level-down": 61915,
    "level-up": 61916,
    "lifebuoy": 61917,
    "light-bulb": 61918,
    "light-down": 61919,
    "light-up": 61920,
    "line-graph": 61921,
    "link": 61922,
    "linkedin": 61923,
    "linkedin-with-circle": 61924,
    "list": 61925,
    "location": 61926,
    "location-pin": 61927,
    "lock": 61928,
    "lock-open": 61929,
    "log-out": 61930,
    "login": 61931,
    "loop": 61932,
    "magnet": 61933,
    "magnifying-glass": 61934,
    "mail": 61935,
    "mail-with-circle": 61936,
    "man": 61937,
    "map": 61938,
    "mask": 61939,
    "medal": 61940,
    "medium": 61941,
    "medium-with-circle": 61942,
    "megaphone": 61943,
    "menu": 61944,
    "merge": 61945,
    "message": 61946,
    "mic": 61947,
    "minus": 61948,
    "mixi": 61949,
    "mobile": 61950,
    "modern-mic": 61951,
    "moon": 61952,
    "mouse": 61953,
    "mouse-pointer": 61954,
    "music": 61955,
    "network": 61956,
    "new": 61957,
    "new-message": 61958,
    "news": 61959,
    "newsletter": 61960,
    "note": 61961,
    "notification": 61962,
    "notifications-off": 61963,
    "old-mobile": 61964,
    "old-phone": 61965,
    "onedrive": 61966,
    "open-book": 61967,
    "palette": 61968,
    "paper-plane": 61969,
    "paypal": 61970,
    "pencil": 61971,
    "phone": 61972,
    "picasa": 61973,
    "pie-chart": 61974,
    "pin": 61975,
    "pinterest": 61976,
    "pinterest-with-circle": 61977,
    "plus": 61978,
    "popup": 61979,
    "power-plug": 61980,
    "price-ribbon": 61981,
    "price-tag": 61982,
    "print": 61983,
    "progress-empty": 61984,
    "progress-full": 61985,
    "progress-one": 61986,
    "progress-two": 61987,
    "publish": 61988,
    "qq": 61989,
    "qq-with-circle": 61990,
    "quote": 61991,
    "radio": 61992,
    "raft": 61993,
    "raft-with-circle": 61994,
    "rainbow": 61995,
    "rdio": 61996,
    "rdio-with-circle": 61997,
    "remove-user": 61998,
    "renren": 61999,
    "reply": 62000,
    "reply-all": 62001,
    "resize-100-": 62002,
    "resize-full-screen": 62003,
    "retweet": 62004,
    "rocket": 62005,
    "round-brush": 62006,
    "rss": 62007,
    "ruler": 62008,
    "save": 62009,
    "scissors": 62010,
    "scribd": 62011,
    "select-arrows": 62012,
    "share": 62013,
    "share-alternative": 62014,
    "shareable": 62015,
    "shield": 62016,
    "shop": 62017,
    "shopping-bag": 62018,
    "shopping-basket": 62019,
    "shopping-cart": 62020,
    "shuffle": 62021,
    "signal": 62022,
    "sina-weibo": 62023,
    "skype": 62024,
    "skype-with-circle": 62025,
    "slideshare": 62026,
    "smashing": 62027,
    "sound": 62028,
    "sound-mix": 62029,
    "sound-mute": 62030,
    "soundcloud": 62031,
    "sports-club": 62032,
    "spotify": 62033,
    "spotify-with-circle": 62034,
    "spreadsheet": 62035,
    "squared-cross": 62036,
    "squared-minus": 62037,
    "squared-plus": 62038,
    "star": 62039,
    "star-outlined": 62040,
    "stopwatch": 62041,
    "stumbleupon": 62042,
    "stumbleupon-with-circle": 62043,
    "suitcase": 62044,
    "swap": 62045,
    "swarm": 62046,
    "sweden": 62047,
    "switch": 62048,
    "tablet": 62049,
    "tablet-mobile-combo": 62050,
    "tag": 62051,
    "text": 62052,
    "text-document": 62053,
    "text-document-inverted": 62054,
    "thermometer": 62055,
    "thumbs-down": 62056,
    "thumbs-up": 62057,
    "thunder-cloud": 62058,
    "ticket": 62059,
    "time-slot": 62060,
    "tools": 62061,
    "traffic-cone": 62062,
    "trash": 62063,
    "tree": 62064,
    "triangle-down": 62065,
    "triangle-left": 62066,
    "triangle-right": 62067,
    "triangle-up": 62068,
    "tripadvisor": 62069,
    "trophy": 62070,
    "tumblr": 62071,
    "tumblr-with-circle": 62072,
    "tv": 62073,
    "twitter": 62074,
    "twitter-with-circle": 62075,
    "typing": 62076,
    "uninstall": 62077,
    "unread": 62078,
    "untag": 62079,
    "upload": 62080,
    "upload-to-cloud": 62081,
    "user": 62082,
    "users": 62083,
    "v-card": 62084,
    "video": 62085,
    "video-camera": 62086,
    "vimeo": 62087,
    "vimeo-with-circle": 62088,
    "vine": 62089,
    "vine-with-circle": 62090,
    "vinyl": 62091,
    "vk": 62092,
    "vk-alternitive": 62093,
    "vk-with-circle": 62094,
    "voicemail": 62095,
    "wallet": 62096,
    "warning": 62097,
    "water": 62098,
    "windows-store": 62099,
    "xing": 62100,
    "xing-with-circle": 62101,
    "yelp": 62102,
    "youko": 62103,
    "youko-with-circle": 62104,
    "youtube": 62105,
    "youtube-with-circle": 62106
  };
},510,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (glyphMap, fontName, expoAssetId) {
    var _class, _temp2;

    var font = babelHelpers.defineProperty({}, fontName, expoAssetId);
    var RNVIconComponent = (0, _createIconSet2.default)(glyphMap, fontName);
    var Icon = (_temp2 = _class = function (_React$Component) {
      babelHelpers.inherits(Icon, _React$Component);

      function Icon() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, Icon);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Icon.__proto__ || Object.getPrototypeOf(Icon)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
          fontIsLoaded: _expo.Font.isLoaded(fontName)
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(Icon, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          return regeneratorRuntime.async(function componentWillMount$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this._mounted = true;

                  if (this.state.fontIsLoaded) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 4;
                  return regeneratorRuntime.awrap(_expo.Font.loadAsync(font));

                case 4:
                  this._mounted && this.setState({
                    fontIsLoaded: true
                  });

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._mounted = false;
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          if (this._icon) {
            this._icon.setNativeProps(props);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;

          if (!this.state.fontIsLoaded) {
            return _react2.default.createElement(_reactNative.Text, null);
          }

          return _react2.default.createElement(RNVIconComponent, babelHelpers.extends({
            ref: function ref(view) {
              _this2._icon = view;
            }
          }, this.props));
        }
      }]);
      return Icon;
    }(_react2.default.Component), _class.propTypes = RNVIconComponent.propTypes, _class.defaultProps = RNVIconComponent.defaultProps, _temp2);
    Icon.Button = (0, _iconButton2.default)(Icon);
    Icon.glyphMap = glyphMap;
    Icon.font = font;
    return Icon;
  };

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _expo = _require(_dependencyMap[2]);

  var _createIconSet = _require(_dependencyMap[3]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _iconButton = _require(_dependencyMap[4]);

  var _iconButton2 = babelHelpers.interopRequireDefault(_iconButton);
},511,[103,14,12,512,514]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconSet;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _iconButton = _require(_dependencyMap[3]);

  var _iconButton2 = babelHelpers.interopRequireDefault(_iconButton);

  var _tabBarItemIos = _require(_dependencyMap[4]);

  var _tabBarItemIos2 = babelHelpers.interopRequireDefault(_tabBarItemIos);

  var _toolbarAndroid = _require(_dependencyMap[5]);

  var _toolbarAndroid2 = babelHelpers.interopRequireDefault(_toolbarAndroid);

  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
  var DEFAULT_ICON_SIZE = 12;
  var DEFAULT_ICON_COLOR = 'black';

  function createIconSet(glyphMap, fontFamily, fontFile) {
    var _class, _temp2;

    var fontReference = fontFamily;

    if (fontFile) {
      fontReference = fontFile.replace(/\.(otf|ttf)$/, '');
    }

    var IconNamePropType = _propTypes2.default.oneOf(Object.keys(glyphMap));

    var Icon = (_temp2 = _class = function (_PureComponent) {
      babelHelpers.inherits(Icon, _PureComponent);

      function Icon() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, Icon);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Icon.__proto__ || Object.getPrototypeOf(Icon)).call.apply(_ref, [this].concat(args))), _this), _this.root = null, _this.handleRef = function (ref) {
          _this.root = ref;
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(Icon, [{
        key: "setNativeProps",
        value: function setNativeProps(nativeProps) {
          if (this.root) {
            this.root.setNativeProps(nativeProps);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _props = this.props,
              name = _props.name,
              size = _props.size,
              color = _props.color,
              style = _props.style,
              props = babelHelpers.objectWithoutProperties(_props, ["name", "size", "color", "style"]);
          var glyph = name ? glyphMap[name] || '?' : '';

          if (typeof glyph === 'number') {
            glyph = String.fromCharCode(glyph);
          }

          var styleDefaults = {
            fontSize: size,
            color: color
          };
          var styleOverrides = {
            fontFamily: fontReference,
            fontWeight: 'normal',
            fontStyle: 'normal'
          };
          props.style = [styleDefaults, style, styleOverrides];
          props.ref = this.handleRef;
          return _react2.default.createElement(
            _reactNative.Text,
            props,
            glyph,
            this.props.children
          );
        }
      }]);
      return Icon;
    }(_react.PureComponent), _class.propTypes = {
      name: IconNamePropType,
      size: _propTypes2.default.number,
      color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      children: _propTypes2.default.node,
      style: _propTypes2.default.any
    }, _class.defaultProps = {
      size: DEFAULT_ICON_SIZE,
      allowFontScaling: false
    }, _temp2);
    var imageSourceCache = {};

    function ensureNativeModuleAvailable() {
      if (!NativeIconAPI) {
        {
          throw new Error('RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.');
        }
        throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.');
      }
    }

    function getImageSource(name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      ensureNativeModuleAvailable();
      var glyph = glyphMap[name] || '?';

      if (typeof glyph === 'number') {
        glyph = String.fromCharCode(glyph);
      }

      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = glyph + ":" + size + ":" + processedColor;

      var scale = _reactNative.PixelRatio.get();

      return new Promise(function (resolve, reject) {
        var cached = imageSourceCache[cacheKey];

        if (typeof cached !== 'undefined') {
          if (!cached || cached instanceof Error) {
            reject(cached);
          } else {
            resolve({
              uri: cached,
              scale: scale
            });
          }
        } else {
          NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {
            var error = typeof err === 'string' ? new Error(err) : err;
            imageSourceCache[cacheKey] = image || error || false;

            if (!error && image) {
              resolve({
                uri: image,
                scale: scale
              });
            } else {
              reject(error);
            }
          });
        }
      });
    }

    function loadFont() {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;
      return Promise.resolve();
    }

    Icon.Button = (0, _iconButton2.default)(Icon);
    Icon.TabBarItem = (0, _tabBarItemIos2.default)(IconNamePropType, getImageSource);
    Icon.TabBarItemIOS = Icon.TabBarItem;
    Icon.ToolbarAndroid = (0, _toolbarAndroid2.default)(IconNamePropType, getImageSource);
    Icon.getImageSource = getImageSource;
    Icon.loadFont = loadFont;
    return Icon;
  }
},512,[103,121,513,514,659,673]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  Object.keys(_reactNative).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _reactNative[key];
      }
    });
  });
},513,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconButtonComponent;

  var _isString = _require(_dependencyMap[0]);

  var _isString2 = babelHelpers.interopRequireDefault(_isString);

  var _omit = _require(_dependencyMap[1]);

  var _omit2 = babelHelpers.interopRequireDefault(_omit);

  var _pick = _require(_dependencyMap[2]);

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = _require(_dependencyMap[3]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[4]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[5]);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center',
      padding: 8
    },
    touchable: {
      overflow: 'hidden'
    },
    icon: {
      marginRight: 10
    },
    text: {
      fontWeight: '600',
      backgroundColor: 'transparent'
    }
  });

  var IOS7_BLUE = '#007AFF';

  function createIconButtonComponent(Icon) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(IconButton, _PureComponent);

      function IconButton() {
        babelHelpers.classCallCheck(this, IconButton);
        return babelHelpers.possibleConstructorReturn(this, (IconButton.__proto__ || Object.getPrototypeOf(IconButton)).apply(this, arguments));
      }

      babelHelpers.createClass(IconButton, [{
        key: "render",
        value: function render() {
          var _props = this.props,
              style = _props.style,
              iconStyle = _props.iconStyle,
              children = _props.children,
              restProps = babelHelpers.objectWithoutProperties(_props, ["style", "iconStyle", "children"]);
          var iconProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.Text.propTypes), 'style', 'name', 'size', 'color');
          var touchableProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.TouchableHighlight.propTypes));
          var props = (0, _omit2.default)(restProps, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
          iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;
          var colorStyle = (0, _pick2.default)(this.props, 'color');
          var blockStyle = (0, _pick2.default)(this.props, 'backgroundColor', 'borderRadius');
          return _react2.default.createElement(
            _reactNative.TouchableHighlight,
            babelHelpers.extends({
              style: [styles.touchable, blockStyle]
            }, touchableProps),
            _react2.default.createElement(
              _reactNative.View,
              babelHelpers.extends({
                style: [styles.container, blockStyle, style]
              }, props),
              _react2.default.createElement(Icon, iconProps),
              (0, _isString2.default)(children) ? _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.text, colorStyle]
                },
                children
              ) : children
            )
          );
        }
      }]);
      return IconButton;
    }(_react.PureComponent), _class.propTypes = {
      backgroundColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      borderRadius: _propTypes2.default.number,
      color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      size: _propTypes2.default.number,
      iconStyle: _propTypes2.default.any,
      style: _propTypes2.default.any,
      children: _propTypes2.default.node
    }, _class.defaultProps = {
      backgroundColor: IOS7_BLUE,
      borderRadius: 5,
      color: 'white',
      size: 20
    }, _temp;
  }
},514,[515,524,652,103,121,513]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseGetTag = _require(_dependencyMap[0]),
        isArray = _require(_dependencyMap[1]),
        isObjectLike = _require(_dependencyMap[2]);

    var stringTag = '[object String]';

    function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }

    module.exports = isString;
},515,[516,522,523]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var Symbol = _require(_dependencyMap[0]),
        getRawTag = _require(_dependencyMap[1]),
        objectToString = _require(_dependencyMap[2]);

    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';
    var symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

    function baseGetTag(value) {
        if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }

    module.exports = baseGetTag;
},516,[517,520,521]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var root = _require(_dependencyMap[0]);

  var Symbol = root.Symbol;
  module.exports = Symbol;
},517,[518]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var freeGlobal = _require(_dependencyMap[0]);

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  module.exports = root;
},518,[519]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  module.exports = freeGlobal;
},519,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var Symbol = _require(_dependencyMap[0]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }

    return result;
  }

  module.exports = getRawTag;
},520,[517]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;

  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  module.exports = objectToString;
},521,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isArray = Array.isArray;
  module.exports = isArray;
},522,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  module.exports = isObjectLike;
},523,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayMap = _require(_dependencyMap[0]),
      baseClone = _require(_dependencyMap[1]),
      baseUnset = _require(_dependencyMap[2]),
      castPath = _require(_dependencyMap[3]),
      copyObject = _require(_dependencyMap[4]),
      customOmitClone = _require(_dependencyMap[5]),
      flatRest = _require(_dependencyMap[6]),
      getAllKeysIn = _require(_dependencyMap[7]);

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  var omit = flatRest(function (object, paths) {
    var result = {};

    if (object == null) {
      return result;
    }

    var isDeep = false;
    paths = arrayMap(paths, function (path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);

    if (isDeep) {
      result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    }

    var length = paths.length;

    while (length--) {
      baseUnset(result, paths[length]);
    }

    return result;
  });
  module.exports = omit;
},524,[525,526,625,626,570,639,641,605]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  module.exports = arrayMap;
},525,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var Stack = _require(_dependencyMap[0]),
      arrayEach = _require(_dependencyMap[1]),
      assignValue = _require(_dependencyMap[2]),
      baseAssign = _require(_dependencyMap[3]),
      baseAssignIn = _require(_dependencyMap[4]),
      cloneBuffer = _require(_dependencyMap[5]),
      copyArray = _require(_dependencyMap[6]),
      copySymbols = _require(_dependencyMap[7]),
      copySymbolsIn = _require(_dependencyMap[8]),
      getAllKeys = _require(_dependencyMap[9]),
      getAllKeysIn = _require(_dependencyMap[10]),
      getTag = _require(_dependencyMap[11]),
      initCloneArray = _require(_dependencyMap[12]),
      initCloneByTag = _require(_dependencyMap[13]),
      initCloneObject = _require(_dependencyMap[14]),
      isArray = _require(_dependencyMap[15]),
      isBuffer = _require(_dependencyMap[16]),
      isMap = _require(_dependencyMap[17]),
      isObject = _require(_dependencyMap[18]),
      isSet = _require(_dependencyMap[19]),
      keys = _require(_dependencyMap[20]);

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject(value)) {
      return value;
    }

    var isArr = isArray(value);

    if (isArr) {
      result = initCloneArray(value);

      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }

      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);

        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = initCloneByTag(value, tag, isDeep);
      }
    }

    stack || (stack = new Stack());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
      return result;
    }

    if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }

      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  module.exports = baseClone;
},526,[527,565,566,569,589,593,594,595,599,603,605,606,611,612,619,522,576,621,545,623,571]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var ListCache = _require(_dependencyMap[0]),
      stackClear = _require(_dependencyMap[1]),
      stackDelete = _require(_dependencyMap[2]),
      stackGet = _require(_dependencyMap[3]),
      stackHas = _require(_dependencyMap[4]),
      stackSet = _require(_dependencyMap[5]);

  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  module.exports = Stack;
},527,[528,536,537,538,539,540]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var listCacheClear = _require(_dependencyMap[0]),
        listCacheDelete = _require(_dependencyMap[1]),
        listCacheGet = _require(_dependencyMap[2]),
        listCacheHas = _require(_dependencyMap[3]),
        listCacheSet = _require(_dependencyMap[4]);

    function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
},528,[529,530,533,534,535]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  module.exports = listCacheClear;
},529,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var assocIndexOf = _require(_dependencyMap[0]);

  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  module.exports = listCacheDelete;
},530,[531]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var eq = _require(_dependencyMap[0]);

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  module.exports = assocIndexOf;
},531,[532]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = eq;
},532,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var assocIndexOf = _require(_dependencyMap[0]);

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  module.exports = listCacheGet;
},533,[531]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var assocIndexOf = _require(_dependencyMap[0]);

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  module.exports = listCacheHas;
},534,[531]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var assocIndexOf = _require(_dependencyMap[0]);

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  module.exports = listCacheSet;
},535,[531]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var ListCache = _require(_dependencyMap[0]);

  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }

  module.exports = stackClear;
},536,[528]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  module.exports = stackDelete;
},537,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function stackGet(key) {
    return this.__data__.get(key);
  }

  module.exports = stackGet;
},538,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function stackHas(key) {
    return this.__data__.has(key);
  }

  module.exports = stackHas;
},539,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var ListCache = _require(_dependencyMap[0]),
      Map = _require(_dependencyMap[1]),
      MapCache = _require(_dependencyMap[2]);

  var LARGE_ARRAY_SIZE = 200;

  function stackSet(key, value) {
    var data = this.__data__;

    if (data instanceof ListCache) {
      var pairs = data.__data__;

      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new MapCache(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  module.exports = stackSet;
},540,[528,541,550]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var getNative = _require(_dependencyMap[0]),
        root = _require(_dependencyMap[1]);

    var Map = getNative(root, 'Map');
    module.exports = Map;
},541,[542,518]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsNative = _require(_dependencyMap[0]),
      getValue = _require(_dependencyMap[1]);

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  module.exports = getNative;
},542,[543,549]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isFunction = _require(_dependencyMap[0]),
      isMasked = _require(_dependencyMap[1]),
      isObject = _require(_dependencyMap[2]),
      toSource = _require(_dependencyMap[3]);

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  module.exports = baseIsNative;
},543,[544,546,545,548]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseGetTag = _require(_dependencyMap[0]),
        isObject = _require(_dependencyMap[1]);

    var asyncTag = '[object AsyncFunction]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    function isFunction(value) {
        if (!isObject(value)) {
            return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    module.exports = isFunction;
},544,[516,545]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  module.exports = isObject;
},545,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var coreJsData = _require(_dependencyMap[0]);

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  module.exports = isMasked;
},546,[547]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var root = _require(_dependencyMap[0]);

  var coreJsData = root['__core-js_shared__'];
  module.exports = coreJsData;
},547,[518]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  module.exports = toSource;
},548,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  module.exports = getValue;
},549,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var mapCacheClear = _require(_dependencyMap[0]),
        mapCacheDelete = _require(_dependencyMap[1]),
        mapCacheGet = _require(_dependencyMap[2]),
        mapCacheHas = _require(_dependencyMap[3]),
        mapCacheSet = _require(_dependencyMap[4]);

    function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
},550,[551,559,562,563,564]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var Hash = _require(_dependencyMap[0]),
      ListCache = _require(_dependencyMap[1]),
      Map = _require(_dependencyMap[2]);

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  module.exports = mapCacheClear;
},551,[552,528,541]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var hashClear = _require(_dependencyMap[0]),
        hashDelete = _require(_dependencyMap[1]),
        hashGet = _require(_dependencyMap[2]),
        hashHas = _require(_dependencyMap[3]),
        hashSet = _require(_dependencyMap[4]);

    function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
},552,[553,555,556,557,558]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var nativeCreate = _require(_dependencyMap[0]);

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  module.exports = hashClear;
},553,[554]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getNative = _require(_dependencyMap[0]);

  var nativeCreate = getNative(Object, 'create');
  module.exports = nativeCreate;
},554,[542]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = hashDelete;
},555,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var nativeCreate = _require(_dependencyMap[0]);

  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  module.exports = hashGet;
},556,[554]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var nativeCreate = _require(_dependencyMap[0]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  module.exports = hashHas;
},557,[554]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var nativeCreate = _require(_dependencyMap[0]);

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  module.exports = hashSet;
},558,[554]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getMapData = _require(_dependencyMap[0]);

  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = mapCacheDelete;
},559,[560]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isKeyable = _require(_dependencyMap[0]);

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  module.exports = getMapData;
},560,[561]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  module.exports = isKeyable;
},561,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getMapData = _require(_dependencyMap[0]);

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  module.exports = mapCacheGet;
},562,[560]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getMapData = _require(_dependencyMap[0]);

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  module.exports = mapCacheHas;
},563,[560]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getMapData = _require(_dependencyMap[0]);

  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  module.exports = mapCacheSet;
},564,[560]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  module.exports = arrayEach;
},565,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseAssignValue = _require(_dependencyMap[0]),
      eq = _require(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  module.exports = assignValue;
},566,[567,532]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var defineProperty = _require(_dependencyMap[0]);

  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  module.exports = baseAssignValue;
},567,[568]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getNative = _require(_dependencyMap[0]);

  var defineProperty = function () {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  module.exports = defineProperty;
},568,[542]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var copyObject = _require(_dependencyMap[0]),
      keys = _require(_dependencyMap[1]);

  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  module.exports = baseAssign;
},569,[570,571]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var assignValue = _require(_dependencyMap[0]),
      baseAssignValue = _require(_dependencyMap[1]);

  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }

    return object;
  }

  module.exports = copyObject;
},570,[566,567]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayLikeKeys = _require(_dependencyMap[0]),
      baseKeys = _require(_dependencyMap[1]),
      isArrayLike = _require(_dependencyMap[2]);

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  module.exports = keys;
},571,[572,584,588]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseTimes = _require(_dependencyMap[0]),
      isArguments = _require(_dependencyMap[1]),
      isArray = _require(_dependencyMap[2]),
      isBuffer = _require(_dependencyMap[3]),
      isIndex = _require(_dependencyMap[4]),
      isTypedArray = _require(_dependencyMap[5]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = arrayLikeKeys;
},572,[573,574,522,576,578,579]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  module.exports = baseTimes;
},573,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseIsArguments = _require(_dependencyMap[0]),
        isObjectLike = _require(_dependencyMap[1]);

    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function () {
        return arguments;
    }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };
    module.exports = isArguments;
},574,[575,523]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseGetTag = _require(_dependencyMap[0]),
      isObjectLike = _require(_dependencyMap[1]);

  var argsTag = '[object Arguments]';

  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  module.exports = baseIsArguments;
},575,[516,523]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var root = _require(_dependencyMap[0]),
      stubFalse = _require(_dependencyMap[1]);

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined;
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  var isBuffer = nativeIsBuffer || stubFalse;
  module.exports = isBuffer;
},576,[518,577]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function stubFalse() {
    return false;
  }

  module.exports = stubFalse;
},577,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;
},578,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsTypedArray = _require(_dependencyMap[0]),
      baseUnary = _require(_dependencyMap[1]),
      nodeUtil = _require(_dependencyMap[2]);

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  module.exports = isTypedArray;
},579,[580,582,583]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseGetTag = _require(_dependencyMap[0]),
        isLength = _require(_dependencyMap[1]),
        isObjectLike = _require(_dependencyMap[2]);

    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

    function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    module.exports = baseIsTypedArray;
},580,[516,581,523]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;
},581,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  module.exports = baseUnary;
},582,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var freeGlobal = _require(_dependencyMap[0]);

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  module.exports = nodeUtil;
},583,[519]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isPrototype = _require(_dependencyMap[0]),
      nativeKeys = _require(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeys;
},584,[585,586]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  module.exports = isPrototype;
},585,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var overArg = _require(_dependencyMap[0]);

  var nativeKeys = overArg(Object.keys, Object);
  module.exports = nativeKeys;
},586,[587]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  module.exports = overArg;
},587,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isFunction = _require(_dependencyMap[0]),
      isLength = _require(_dependencyMap[1]);

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  module.exports = isArrayLike;
},588,[544,581]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var copyObject = _require(_dependencyMap[0]),
      keysIn = _require(_dependencyMap[1]);

  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
  }

  module.exports = baseAssignIn;
},589,[570,590]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayLikeKeys = _require(_dependencyMap[0]),
      baseKeysIn = _require(_dependencyMap[1]),
      isArrayLike = _require(_dependencyMap[2]);

  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  module.exports = keysIn;
},590,[572,591,588]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isObject = _require(_dependencyMap[0]),
      isPrototype = _require(_dependencyMap[1]),
      nativeKeysIn = _require(_dependencyMap[2]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeysIn;
},591,[545,585,592]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = nativeKeysIn;
},592,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var root = _require(_dependencyMap[0]);

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }

    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
},593,[518]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function copyArray(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  module.exports = copyArray;
},594,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var copyObject = _require(_dependencyMap[0]),
      getSymbols = _require(_dependencyMap[1]);

  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  module.exports = copySymbols;
},595,[570,596]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayFilter = _require(_dependencyMap[0]),
      stubArray = _require(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  module.exports = getSymbols;
},596,[597,598]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  module.exports = arrayFilter;
},597,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function stubArray() {
    return [];
  }

  module.exports = stubArray;
},598,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var copyObject = _require(_dependencyMap[0]),
      getSymbolsIn = _require(_dependencyMap[1]);

  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
  }

  module.exports = copySymbolsIn;
},599,[570,600]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayPush = _require(_dependencyMap[0]),
      getPrototype = _require(_dependencyMap[1]),
      getSymbols = _require(_dependencyMap[2]),
      stubArray = _require(_dependencyMap[3]);

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }

    return result;
  };
  module.exports = getSymbolsIn;
},600,[601,602,596,598]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  module.exports = arrayPush;
},601,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var overArg = _require(_dependencyMap[0]);

  var getPrototype = overArg(Object.getPrototypeOf, Object);
  module.exports = getPrototype;
},602,[587]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseGetAllKeys = _require(_dependencyMap[0]),
      getSymbols = _require(_dependencyMap[1]),
      keys = _require(_dependencyMap[2]);

  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  module.exports = getAllKeys;
},603,[604,596,571]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayPush = _require(_dependencyMap[0]),
      isArray = _require(_dependencyMap[1]);

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  module.exports = baseGetAllKeys;
},604,[601,522]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseGetAllKeys = _require(_dependencyMap[0]),
      getSymbolsIn = _require(_dependencyMap[1]),
      keysIn = _require(_dependencyMap[2]);

  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  module.exports = getAllKeysIn;
},605,[604,600,590]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var DataView = _require(_dependencyMap[0]),
        Map = _require(_dependencyMap[1]),
        Promise = _require(_dependencyMap[2]),
        Set = _require(_dependencyMap[3]),
        WeakMap = _require(_dependencyMap[4]),
        baseGetTag = _require(_dependencyMap[5]),
        toSource = _require(_dependencyMap[6]);

    var mapTag = '[object Map]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        setTag = '[object Set]',
        weakMapTag = '[object WeakMap]';
    var dataViewTag = '[object DataView]';
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;

    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : '';

            if (ctorString) {
                switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag;

                    case mapCtorString:
                        return mapTag;

                    case promiseCtorString:
                        return promiseTag;

                    case setCtorString:
                        return setTag;

                    case weakMapCtorString:
                        return weakMapTag;
                }
            }

            return result;
        };
    }

    module.exports = getTag;
},606,[607,541,608,609,610,516,548]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var getNative = _require(_dependencyMap[0]),
        root = _require(_dependencyMap[1]);

    var DataView = getNative(root, 'DataView');
    module.exports = DataView;
},607,[542,518]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var getNative = _require(_dependencyMap[0]),
        root = _require(_dependencyMap[1]);

    var Promise = getNative(root, 'Promise');
    module.exports = Promise;
},608,[542,518]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var getNative = _require(_dependencyMap[0]),
        root = _require(_dependencyMap[1]);

    var Set = getNative(root, 'Set');
    module.exports = Set;
},609,[542,518]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var getNative = _require(_dependencyMap[0]),
        root = _require(_dependencyMap[1]);

    var WeakMap = getNative(root, 'WeakMap');
    module.exports = WeakMap;
},610,[542,518]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  module.exports = initCloneArray;
},611,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var cloneArrayBuffer = _require(_dependencyMap[0]),
      cloneDataView = _require(_dependencyMap[1]),
      cloneRegExp = _require(_dependencyMap[2]),
      cloneSymbol = _require(_dependencyMap[3]),
      cloneTypedArray = _require(_dependencyMap[4]);

  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);

      case boolTag:
      case dateTag:
        return new Ctor(+object);

      case dataViewTag:
        return cloneDataView(object, isDeep);

      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);

      case mapTag:
        return new Ctor();

      case numberTag:
      case stringTag:
        return new Ctor(object);

      case regexpTag:
        return cloneRegExp(object);

      case setTag:
        return new Ctor();

      case symbolTag:
        return cloneSymbol(object);
    }
  }

  module.exports = initCloneByTag;
},612,[613,615,616,617,618]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var Uint8Array = _require(_dependencyMap[0]);

  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  module.exports = cloneArrayBuffer;
},613,[614]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var root = _require(_dependencyMap[0]);

  var Uint8Array = root.Uint8Array;
  module.exports = Uint8Array;
},614,[518]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var cloneArrayBuffer = _require(_dependencyMap[0]);

  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  module.exports = cloneDataView;
},615,[613]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var reFlags = /\w*$/;

  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  module.exports = cloneRegExp;
},616,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var Symbol = _require(_dependencyMap[0]);

  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  module.exports = cloneSymbol;
},617,[517]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var cloneArrayBuffer = _require(_dependencyMap[0]);

  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  module.exports = cloneTypedArray;
},618,[613]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseCreate = _require(_dependencyMap[0]),
        getPrototype = _require(_dependencyMap[1]),
        isPrototype = _require(_dependencyMap[2]);

    function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }

    module.exports = initCloneObject;
},619,[620,602,585]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isObject = _require(_dependencyMap[0]);

  var objectCreate = Object.create;

  var baseCreate = function () {
    function object() {}

    return function (proto) {
      if (!isObject(proto)) {
        return {};
      }

      if (objectCreate) {
        return objectCreate(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  module.exports = baseCreate;
},620,[545]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsMap = _require(_dependencyMap[0]),
      baseUnary = _require(_dependencyMap[1]),
      nodeUtil = _require(_dependencyMap[2]);

  var nodeIsMap = nodeUtil && nodeUtil.isMap;
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  module.exports = isMap;
},621,[622,582,583]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getTag = _require(_dependencyMap[0]),
      isObjectLike = _require(_dependencyMap[1]);

  var mapTag = '[object Map]';

  function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
  }

  module.exports = baseIsMap;
},622,[606,523]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsSet = _require(_dependencyMap[0]),
      baseUnary = _require(_dependencyMap[1]),
      nodeUtil = _require(_dependencyMap[2]);

  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  module.exports = isSet;
},623,[624,582,583]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getTag = _require(_dependencyMap[0]),
      isObjectLike = _require(_dependencyMap[1]);

  var setTag = '[object Set]';

  function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
  }

  module.exports = baseIsSet;
},624,[606,523]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var castPath = _require(_dependencyMap[0]),
      last = _require(_dependencyMap[1]),
      parent = _require(_dependencyMap[2]),
      toKey = _require(_dependencyMap[3]);

  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }

  module.exports = baseUnset;
},625,[626,634,635,637]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isArray = _require(_dependencyMap[0]),
      isKey = _require(_dependencyMap[1]),
      stringToPath = _require(_dependencyMap[2]),
      toString = _require(_dependencyMap[3]);

  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }

    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }

  module.exports = castPath;
},626,[522,627,629,632]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isArray = _require(_dependencyMap[0]),
      isSymbol = _require(_dependencyMap[1]);

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value;

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  module.exports = isKey;
},627,[522,628]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseGetTag = _require(_dependencyMap[0]),
        isObjectLike = _require(_dependencyMap[1]);

    var symbolTag = '[object Symbol]';

    function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }

    module.exports = isSymbol;
},628,[516,523]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var memoizeCapped = _require(_dependencyMap[0]);

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46) {
        result.push('');
      }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  module.exports = stringToPath;
},629,[630]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var memoize = _require(_dependencyMap[0]);

  var MAX_MEMOIZE_SIZE = 500;

  function memoizeCapped(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  module.exports = memoizeCapped;
},630,[631]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var MapCache = _require(_dependencyMap[0]);

  var FUNC_ERROR_TEXT = 'Expected a function';

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;
  module.exports = memoize;
},631,[550]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseToString = _require(_dependencyMap[0]);

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  module.exports = toString;
},632,[633]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var Symbol = _require(_dependencyMap[0]),
      arrayMap = _require(_dependencyMap[1]),
      isArray = _require(_dependencyMap[2]),
      isSymbol = _require(_dependencyMap[3]);

  var INFINITY = Infinity;
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isArray(value)) {
      return arrayMap(value, baseToString) + '';
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = baseToString;
},633,[517,525,522,628]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  module.exports = last;
},634,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseGet = _require(_dependencyMap[0]),
      baseSlice = _require(_dependencyMap[1]);

  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }

  module.exports = parent;
},635,[636,638]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var castPath = _require(_dependencyMap[0]),
      toKey = _require(_dependencyMap[1]);

  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  module.exports = baseGet;
},636,[626,637]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isSymbol = _require(_dependencyMap[0]);

  var INFINITY = Infinity;

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = toKey;
},637,[628]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }

  module.exports = baseSlice;
},638,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isPlainObject = _require(_dependencyMap[0]);

  function customOmitClone(value) {
    return isPlainObject(value) ? undefined : value;
  }

  module.exports = customOmitClone;
},639,[640]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseGetTag = _require(_dependencyMap[0]),
      getPrototype = _require(_dependencyMap[1]),
      isObjectLike = _require(_dependencyMap[2]);

  var objectTag = '[object Object]';
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);

  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }

    var proto = getPrototype(value);

    if (proto === null) {
      return true;
    }

    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  module.exports = isPlainObject;
},640,[516,602,523]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var flatten = _require(_dependencyMap[0]),
      overRest = _require(_dependencyMap[1]),
      setToString = _require(_dependencyMap[2]);

  function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  module.exports = flatRest;
},641,[642,645,647]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseFlatten = _require(_dependencyMap[0]);

  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  module.exports = flatten;
},642,[643]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayPush = _require(_dependencyMap[0]),
      isFlattenable = _require(_dependencyMap[1]);

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  module.exports = baseFlatten;
},643,[601,644]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var Symbol = _require(_dependencyMap[0]),
        isArguments = _require(_dependencyMap[1]),
        isArray = _require(_dependencyMap[2]);

    var spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;

    function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    module.exports = isFlattenable;
},644,[517,574,522]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var apply = _require(_dependencyMap[0]);

  var nativeMax = Math.max;

  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  module.exports = overRest;
},645,[646]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  module.exports = apply;
},646,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseSetToString = _require(_dependencyMap[0]),
      shortOut = _require(_dependencyMap[1]);

  var setToString = shortOut(baseSetToString);
  module.exports = setToString;
},647,[648,651]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var constant = _require(_dependencyMap[0]),
      defineProperty = _require(_dependencyMap[1]),
      identity = _require(_dependencyMap[2]);

  var baseSetToString = !defineProperty ? identity : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  module.exports = baseSetToString;
},648,[649,568,650]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function constant(value) {
    return function () {
      return value;
    };
  }

  module.exports = constant;
},649,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function identity(value) {
    return value;
  }

  module.exports = identity;
},650,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  var nativeNow = Date.now;

  function shortOut(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  module.exports = shortOut;
},651,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var basePick = _require(_dependencyMap[0]),
      flatRest = _require(_dependencyMap[1]);

  var pick = flatRest(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  module.exports = pick;
},652,[653,641]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var basePickBy = _require(_dependencyMap[0]),
      hasIn = _require(_dependencyMap[1]);

  function basePick(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn(object, path);
    });
  }

  module.exports = basePick;
},653,[654,656]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var baseGet = _require(_dependencyMap[0]),
        baseSet = _require(_dependencyMap[1]),
        castPath = _require(_dependencyMap[2]);

    function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
            var path = paths[index],
                value = baseGet(object, path);

            if (predicate(value, path)) {
                baseSet(result, castPath(path, object), value);
            }
        }

        return result;
    }

    module.exports = basePickBy;
},654,[636,655,626]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var assignValue = _require(_dependencyMap[0]),
      castPath = _require(_dependencyMap[1]),
      isIndex = _require(_dependencyMap[2]),
      isObject = _require(_dependencyMap[3]),
      toKey = _require(_dependencyMap[4]);

  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }

    path = castPath(path, object);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey(path[index]),
          newValue = value;

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }

      assignValue(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  module.exports = baseSet;
},655,[566,626,578,545,637]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseHasIn = _require(_dependencyMap[0]),
      hasPath = _require(_dependencyMap[1]);

  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  module.exports = hasIn;
},656,[657,658]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  module.exports = baseHasIn;
},657,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var castPath = _require(_dependencyMap[0]),
      isArguments = _require(_dependencyMap[1]),
      isArray = _require(_dependencyMap[2]),
      isIndex = _require(_dependencyMap[3]),
      isLength = _require(_dependencyMap[4]),
      toKey = _require(_dependencyMap[5]);

  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  module.exports = hasPath;
},658,[626,574,522,578,581,637]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createTabBarItemIOSComponent;

  var _isEqual = _require(_dependencyMap[0]);

  var _isEqual2 = babelHelpers.interopRequireDefault(_isEqual);

  var _pick = _require(_dependencyMap[1]);

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = _require(_dependencyMap[2]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[3]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[4]);

  function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(TabBarItemIOS, _PureComponent);

      function TabBarItemIOS() {
        babelHelpers.classCallCheck(this, TabBarItemIOS);
        return babelHelpers.possibleConstructorReturn(this, (TabBarItemIOS.__proto__ || Object.getPrototypeOf(TabBarItemIOS)).apply(this, arguments));
      }

      babelHelpers.createClass(TabBarItemIOS, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this.updateIconSources(this.props);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var keys = Object.keys(TabBarItemIOS.propTypes);

          if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
            this.updateIconSources(nextProps);
          }
        }
      }, {
        key: "updateIconSources",
        value: function updateIconSources(props) {
          var _this2 = this;

          if (props.iconName) {
            getImageSource(props.iconName, props.iconSize, props.iconColor).then(function (icon) {
              return _this2.setState({
                icon: icon
              });
            });
          }

          if (props.selectedIconName || props.selectedIconColor) {
            var selectedIconName = props.selectedIconName || props.iconName;
            var selectedIconColor = props.selectedIconColor || props.iconColor;
            getImageSource(selectedIconName, props.iconSize, selectedIconColor).then(function (selectedIcon) {
              return _this2.setState({
                selectedIcon: selectedIcon
              });
            });
          }
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(_reactNative.TabBarIOS.Item, babelHelpers.extends({}, this.props, this.state));
        }
      }]);
      return TabBarItemIOS;
    }(_react.PureComponent), _class.propTypes = {
      iconName: IconNamePropType.isRequired,
      selectedIconName: IconNamePropType,
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      selectedIconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }, _class.defaultProps = {
      iconSize: 30
    }, _temp;
  }
},659,[660,652,103,121,513]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsEqual = _require(_dependencyMap[0]);

  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  module.exports = isEqual;
},660,[661]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var baseIsEqualDeep = _require(_dependencyMap[0]),
      isObjectLike = _require(_dependencyMap[1]);

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  module.exports = baseIsEqual;
},661,[662,523]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var Stack = _require(_dependencyMap[0]),
      equalArrays = _require(_dependencyMap[1]),
      equalByTag = _require(_dependencyMap[2]),
      equalObjects = _require(_dependencyMap[3]),
      getTag = _require(_dependencyMap[4]),
      isArray = _require(_dependencyMap[5]),
      isBuffer = _require(_dependencyMap[6]),
      isTypedArray = _require(_dependencyMap[7]);

  var COMPARE_PARTIAL_FLAG = 1;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  module.exports = baseIsEqualDeep;
},662,[527,663,669,672,606,522,576,579]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var SetCache = _require(_dependencyMap[0]),
      arraySome = _require(_dependencyMap[1]),
      cacheHas = _require(_dependencyMap[2]);

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  module.exports = equalArrays;
},663,[664,667,668]);
__d(function (global, _require, module, exports, _dependencyMap) {
    var MapCache = _require(_dependencyMap[0]),
        setCacheAdd = _require(_dependencyMap[1]),
        setCacheHas = _require(_dependencyMap[2]);

    function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
            this.add(values[index]);
        }
    }

    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
},664,[550,665,666]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  module.exports = setCacheAdd;
},665,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  module.exports = setCacheHas;
},666,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  module.exports = arraySome;
},667,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  module.exports = cacheHas;
},668,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var Symbol = _require(_dependencyMap[0]),
      Uint8Array = _require(_dependencyMap[1]),
      eq = _require(_dependencyMap[2]),
      equalArrays = _require(_dependencyMap[3]),
      mapToArray = _require(_dependencyMap[4]),
      setToArray = _require(_dependencyMap[5]);

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  module.exports = equalByTag;
},669,[517,614,532,663,670,671]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  module.exports = mapToArray;
},670,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  module.exports = setToArray;
},671,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getAllKeys = _require(_dependencyMap[0]);

  var COMPARE_PARTIAL_FLAG = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  module.exports = equalObjects;
},672,[603]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createToolbarAndroidComponent;

  var _isEqual = _require(_dependencyMap[0]);

  var _isEqual2 = babelHelpers.interopRequireDefault(_isEqual);

  var _pick = _require(_dependencyMap[1]);

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = _require(_dependencyMap[2]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[3]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[4]);

  function createToolbarAndroidComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(IconToolbarAndroid, _PureComponent);

      function IconToolbarAndroid() {
        babelHelpers.classCallCheck(this, IconToolbarAndroid);
        return babelHelpers.possibleConstructorReturn(this, (IconToolbarAndroid.__proto__ || Object.getPrototypeOf(IconToolbarAndroid)).apply(this, arguments));
      }

      babelHelpers.createClass(IconToolbarAndroid, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this.updateIconSources(this.props);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var _this2 = this;

          var keys = Object.keys(IconToolbarAndroid.propTypes);

          if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
            var stateToEvict = {};

            if (!nextProps.logoName) {
              stateToEvict.logo = undefined;
            }

            if (!nextProps.navIconName) {
              stateToEvict.navIcon = undefined;
            }

            if (!nextProps.overflowIconName) {
              stateToEvict.overflowIcon = undefined;
            }

            if (this.state && Object.keys(stateToEvict).length) {
              this.setState(stateToEvict, function () {
                return _this2.updateIconSources(nextProps);
              });
            } else {
              this.updateIconSources(nextProps);
            }
          }
        }
      }, {
        key: "updateIconSources",
        value: function updateIconSources(props) {
          var _this3 = this;

          var size = props.iconSize;
          var color = props.iconColor || props.titleColor;

          if (props.logoName) {
            getImageSource(props.logoName, size, color).then(function (logo) {
              return _this3.setState({
                logo: logo
              });
            });
          }

          if (props.navIconName) {
            getImageSource(props.navIconName, size, color).then(function (navIcon) {
              return _this3.setState({
                navIcon: navIcon
              });
            });
          }

          if (props.overflowIconName) {
            getImageSource(props.overflowIconName, size, color).then(function (overflowIcon) {
              return _this3.setState({
                overflowIcon: overflowIcon
              });
            });
          }

          Promise.all((props.actions || []).map(function (action) {
            if (action.iconName) {
              return getImageSource(action.iconName, action.iconSize || size, action.iconColor || color).then(function (icon) {
                return babelHelpers.extends({}, action, {
                  icon: icon
                });
              });
            }

            return Promise.resolve(action);
          })).then(function (actions) {
            return _this3.setState({
              actions: actions
            });
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(_reactNative.ToolbarAndroid, babelHelpers.extends({}, this.props, this.state));
        }
      }]);
      return IconToolbarAndroid;
    }(_react.PureComponent), _class.propTypes = {
      logoName: IconNamePropType,
      navIconName: IconNamePropType,
      overflowIconName: IconNamePropType,
      actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        title: _propTypes2.default.string.isRequired,
        iconName: IconNamePropType,
        iconSize: _propTypes2.default.number,
        iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        show: _propTypes2.default.oneOf(['always', 'ifRoom', 'never']),
        showWithText: _propTypes2.default.bool
      })),
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }, _class.defaultProps = {
      iconSize: 24
    }, _temp;
  }
},673,[660,652,103,121,513]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0]).registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
		"scales": [1],
		"hash": "744ce60078c17d86006dd0edabcd59a7",
		"name": "Entypo",
		"type": "ttf",
		"fileHashes": ["744ce60078c17d86006dd0edabcd59a7"]
	});
},674,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _EvilIcons = _require(_dependencyMap[0]);

  var _EvilIcons2 = babelHelpers.interopRequireDefault(_EvilIcons);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_EvilIcons2.default, 'evilicons', _require(_dependencyMap[2]));
},675,[676,511,677]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "archive": 61696,
    "arrow-down": 61697,
    "arrow-left": 61698,
    "arrow-right": 61699,
    "arrow-up": 61700,
    "bell": 61701,
    "calendar": 61702,
    "camera": 61703,
    "cart": 61704,
    "chart": 61705,
    "check": 61706,
    "chevron-down": 61707,
    "chevron-left": 61708,
    "chevron-right": 61709,
    "chevron-up": 61710,
    "clock": 61711,
    "close": 61712,
    "close-o": 61713,
    "comment": 61714,
    "credit-card": 61715,
    "envelope": 61716,
    "exclamation": 61717,
    "external-link": 61718,
    "eye": 61719,
    "gear": 61720,
    "heart": 61721,
    "image": 61722,
    "like": 61723,
    "link": 61724,
    "location": 61725,
    "lock": 61726,
    "minus": 61727,
    "navicon": 61728,
    "paperclip": 61729,
    "pencil": 61730,
    "play": 61731,
    "plus": 61732,
    "pointer": 61733,
    "question": 61734,
    "redo": 61735,
    "refresh": 61736,
    "retweet": 61737,
    "sc-facebook": 61738,
    "sc-github": 61739,
    "sc-google-plus": 61740,
    "sc-instagram": 61741,
    "sc-linkedin": 61742,
    "sc-odnoklassniki": 61743,
    "sc-pinterest": 61744,
    "sc-skype": 61745,
    "sc-soundcloud": 61746,
    "sc-telegram": 61747,
    "sc-tumblr": 61748,
    "sc-twitter": 61749,
    "sc-vimeo": 61750,
    "sc-vk": 61751,
    "sc-youtube": 61752,
    "search": 61753,
    "share-apple": 61754,
    "share-google": 61755,
    "spinner": 61756,
    "spinner-2": 61757,
    "spinner-3": 61758,
    "star": 61759,
    "tag": 61760,
    "trash": 61761,
    "trophy": 61762,
    "undo": 61763,
    "unlock": 61764,
    "user": 61765
  };
},676,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0]).registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
		"scales": [1],
		"hash": "5221f35630f5b71e53c3196d3ff681a1",
		"name": "EvilIcons",
		"type": "ttf",
		"fileHashes": ["5221f35630f5b71e53c3196d3ff681a1"]
	});
},677,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Feather = _require(_dependencyMap[0]);

  var _Feather2 = babelHelpers.interopRequireDefault(_Feather);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_Feather2.default, 'feather', _require(_dependencyMap[2]));
},678,[679,511,680]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "activity": 59648,
    "airplay": 59649,
    "alert-circle": 59650,
    "alert-octagon": 59651,
    "alert-triangle": 59652,
    "align-center": 59653,
    "align-justify": 59654,
    "align-left": 59655,
    "align-right": 59656,
    "anchor": 59657,
    "aperture": 59658,
    "arrow-down": 59659,
    "arrow-down-left": 59660,
    "arrow-down-right": 59661,
    "arrow-left": 59662,
    "arrow-right": 59663,
    "arrow-up": 59664,
    "arrow-up-left": 59665,
    "arrow-up-right": 59666,
    "at-sign": 59667,
    "award": 59668,
    "bar-chart": 59669,
    "bar-chart-2": 59670,
    "battery": 59671,
    "battery-charging": 59672,
    "bell": 59673,
    "bell-off": 59674,
    "bluetooth": 59675,
    "bold": 59676,
    "book": 59677,
    "bookmark": 59678,
    "box": 59679,
    "briefcase": 59680,
    "calendar": 59681,
    "camera": 59682,
    "camera-off": 59683,
    "cast": 59684,
    "check": 59685,
    "check-circle": 59686,
    "check-square": 59687,
    "chevron-down": 59688,
    "chevron-left": 59689,
    "chevron-right": 59690,
    "chevron-up": 59691,
    "chevrons-down": 59692,
    "chevrons-left": 59693,
    "chevrons-right": 59694,
    "chevrons-up": 59695,
    "chrome": 59696,
    "circle": 59697,
    "clipboard": 59698,
    "clock": 59699,
    "cloud": 59700,
    "cloud-drizzle": 59701,
    "cloud-lightning": 59702,
    "cloud-off": 59703,
    "cloud-rain": 59704,
    "cloud-snow": 59705,
    "codepen": 59706,
    "command": 59707,
    "compass": 59708,
    "copy": 59709,
    "corner-down-left": 59710,
    "corner-down-right": 59711,
    "corner-left-down": 59712,
    "corner-left-up": 59713,
    "corner-right-down": 59714,
    "corner-right-up": 59715,
    "corner-up-left": 59716,
    "corner-up-right": 59717,
    "cpu": 59718,
    "credit-card": 59719,
    "crop": 59720,
    "crosshair": 59721,
    "delete": 59722,
    "disc": 59723,
    "download": 59724,
    "download-cloud": 59725,
    "droplet": 59726,
    "edit": 59727,
    "edit-2": 59728,
    "edit-3": 59729,
    "external-link": 59730,
    "eye": 59731,
    "eye-off": 59732,
    "facebook": 59733,
    "fast-forward": 59734,
    "feather": 59735,
    "file": 59736,
    "file-minus": 59737,
    "file-plus": 59738,
    "file-text": 59739,
    "film": 59740,
    "filter": 59741,
    "flag": 59742,
    "folder": 59743,
    "github": 59744,
    "gitlab": 59745,
    "globe": 59746,
    "grid": 59747,
    "hash": 59748,
    "headphones": 59749,
    "heart": 59750,
    "help-circle": 59751,
    "home": 59752,
    "image": 59753,
    "inbox": 59754,
    "info": 59755,
    "instagram": 59756,
    "italic": 59757,
    "layers": 59758,
    "layout": 59759,
    "life-buoy": 59760,
    "link": 59761,
    "link-2": 59762,
    "list": 59763,
    "loader": 59764,
    "lock": 59765,
    "log-in": 59766,
    "log-out": 59767,
    "mail": 59768,
    "map": 59769,
    "map-pin": 59770,
    "maximize": 59771,
    "maximize-2": 59772,
    "menu": 59773,
    "message-circle": 59774,
    "message-square": 59775,
    "mic": 59776,
    "mic-off": 59777,
    "minimize": 59778,
    "minimize-2": 59779,
    "minus": 59780,
    "minus-circle": 59781,
    "minus-square": 59782,
    "monitor": 59783,
    "moon": 59784,
    "more-horizontal": 59785,
    "more-vertical": 59786,
    "move": 59787,
    "music": 59788,
    "navigation": 59789,
    "navigation-2": 59790,
    "octagon": 59791,
    "package": 59792,
    "paperclip": 59793,
    "pause": 59794,
    "pause-circle": 59795,
    "percent": 59796,
    "phone": 59797,
    "phone-call": 59798,
    "phone-forwarded": 59799,
    "phone-incoming": 59800,
    "phone-missed": 59801,
    "phone-off": 59802,
    "phone-outgoing": 59803,
    "pie-chart": 59804,
    "play": 59805,
    "play-circle": 59806,
    "plus": 59807,
    "plus-circle": 59808,
    "plus-square": 59809,
    "pocket": 59810,
    "power": 59811,
    "printer": 59812,
    "radio": 59813,
    "refresh-ccw": 59814,
    "refresh-cw": 59815,
    "repeat": 59816,
    "rewind": 59817,
    "rotate-ccw": 59818,
    "rotate-cw": 59819,
    "save": 59820,
    "scissors": 59821,
    "search": 59822,
    "server": 59823,
    "settings": 59824,
    "share": 59825,
    "share-2": 59826,
    "shield": 59827,
    "shopping-cart": 59828,
    "shuffle": 59829,
    "sidebar": 59830,
    "skip-back": 59831,
    "skip-forward": 59832,
    "slack": 59833,
    "slash": 59834,
    "sliders": 59835,
    "smartphone": 59836,
    "speaker": 59837,
    "square": 59838,
    "star": 59839,
    "stop-circle": 59840,
    "sun": 59841,
    "sunrise": 59842,
    "sunset": 59843,
    "tablet": 59844,
    "tag": 59845,
    "target": 59846,
    "thermometer": 59847,
    "thumbs-down": 59848,
    "thumbs-up": 59849,
    "toggle-left": 59850,
    "toggle-right": 59851,
    "trash": 59852,
    "trash-2": 59853,
    "trending-down": 59854,
    "trending-up": 59855,
    "triangle": 59856,
    "tv": 59857,
    "twitter": 59858,
    "type": 59859,
    "umbrella": 59860,
    "underline": 59861,
    "unlock": 59862,
    "upload": 59863,
    "upload-cloud": 59864,
    "user": 59865,
    "user-check": 59866,
    "user-minus": 59867,
    "user-plus": 59868,
    "user-x": 59869,
    "users": 59870,
    "video": 59871,
    "video-off": 59872,
    "voicemail": 59873,
    "volume": 59874,
    "volume-1": 59875,
    "volume-2": 59876,
    "volume-x": 59877,
    "watch": 59878,
    "wifi": 59879,
    "wifi-off": 59880,
    "wind": 59881,
    "x": 59882,
    "x-circle": 59883,
    "x-square": 59884,
    "zap": 59885,
    "zoom-in": 59886,
    "zoom-out": 59887
  };
},679,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0]).registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
		"scales": [1],
		"hash": "517bb9a13989451be6623299153f503f",
		"name": "Feather",
		"type": "ttf",
		"fileHashes": ["517bb9a13989451be6623299153f503f"]
	});
},680,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _FontAwesome = _require(_dependencyMap[0]);

  var _FontAwesome2 = babelHelpers.interopRequireDefault(_FontAwesome);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_FontAwesome2.default, 'awesome', _require(_dependencyMap[2]));
},681,[682,511,683]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "glass": 61440,
    "music": 61441,
    "search": 61442,
    "envelope-o": 61443,
    "heart": 61444,
    "star": 61445,
    "star-o": 61446,
    "user": 61447,
    "film": 61448,
    "th-large": 61449,
    "th": 61450,
    "th-list": 61451,
    "check": 61452,
    "remove": 61453,
    "close": 61453,
    "times": 61453,
    "search-plus": 61454,
    "search-minus": 61456,
    "power-off": 61457,
    "signal": 61458,
    "gear": 61459,
    "cog": 61459,
    "trash-o": 61460,
    "home": 61461,
    "file-o": 61462,
    "clock-o": 61463,
    "road": 61464,
    "download": 61465,
    "arrow-circle-o-down": 61466,
    "arrow-circle-o-up": 61467,
    "inbox": 61468,
    "play-circle-o": 61469,
    "rotate-right": 61470,
    "repeat": 61470,
    "refresh": 61473,
    "list-alt": 61474,
    "lock": 61475,
    "flag": 61476,
    "headphones": 61477,
    "volume-off": 61478,
    "volume-down": 61479,
    "volume-up": 61480,
    "qrcode": 61481,
    "barcode": 61482,
    "tag": 61483,
    "tags": 61484,
    "book": 61485,
    "bookmark": 61486,
    "print": 61487,
    "camera": 61488,
    "font": 61489,
    "bold": 61490,
    "italic": 61491,
    "text-height": 61492,
    "text-width": 61493,
    "align-left": 61494,
    "align-center": 61495,
    "align-right": 61496,
    "align-justify": 61497,
    "list": 61498,
    "dedent": 61499,
    "outdent": 61499,
    "indent": 61500,
    "video-camera": 61501,
    "photo": 61502,
    "image": 61502,
    "picture-o": 61502,
    "pencil": 61504,
    "map-marker": 61505,
    "adjust": 61506,
    "tint": 61507,
    "edit": 61508,
    "pencil-square-o": 61508,
    "share-square-o": 61509,
    "check-square-o": 61510,
    "arrows": 61511,
    "step-backward": 61512,
    "fast-backward": 61513,
    "backward": 61514,
    "play": 61515,
    "pause": 61516,
    "stop": 61517,
    "forward": 61518,
    "fast-forward": 61520,
    "step-forward": 61521,
    "eject": 61522,
    "chevron-left": 61523,
    "chevron-right": 61524,
    "plus-circle": 61525,
    "minus-circle": 61526,
    "times-circle": 61527,
    "check-circle": 61528,
    "question-circle": 61529,
    "info-circle": 61530,
    "crosshairs": 61531,
    "times-circle-o": 61532,
    "check-circle-o": 61533,
    "ban": 61534,
    "arrow-left": 61536,
    "arrow-right": 61537,
    "arrow-up": 61538,
    "arrow-down": 61539,
    "mail-forward": 61540,
    "share": 61540,
    "expand": 61541,
    "compress": 61542,
    "plus": 61543,
    "minus": 61544,
    "asterisk": 61545,
    "exclamation-circle": 61546,
    "gift": 61547,
    "leaf": 61548,
    "fire": 61549,
    "eye": 61550,
    "eye-slash": 61552,
    "warning": 61553,
    "exclamation-triangle": 61553,
    "plane": 61554,
    "calendar": 61555,
    "random": 61556,
    "comment": 61557,
    "magnet": 61558,
    "chevron-up": 61559,
    "chevron-down": 61560,
    "retweet": 61561,
    "shopping-cart": 61562,
    "folder": 61563,
    "folder-open": 61564,
    "arrows-v": 61565,
    "arrows-h": 61566,
    "bar-chart-o": 61568,
    "bar-chart": 61568,
    "twitter-square": 61569,
    "facebook-square": 61570,
    "camera-retro": 61571,
    "key": 61572,
    "gears": 61573,
    "cogs": 61573,
    "comments": 61574,
    "thumbs-o-up": 61575,
    "thumbs-o-down": 61576,
    "star-half": 61577,
    "heart-o": 61578,
    "sign-out": 61579,
    "linkedin-square": 61580,
    "thumb-tack": 61581,
    "external-link": 61582,
    "sign-in": 61584,
    "trophy": 61585,
    "github-square": 61586,
    "upload": 61587,
    "lemon-o": 61588,
    "phone": 61589,
    "square-o": 61590,
    "bookmark-o": 61591,
    "phone-square": 61592,
    "twitter": 61593,
    "facebook-f": 61594,
    "facebook": 61594,
    "github": 61595,
    "unlock": 61596,
    "credit-card": 61597,
    "feed": 61598,
    "rss": 61598,
    "hdd-o": 61600,
    "bullhorn": 61601,
    "bell": 61683,
    "certificate": 61603,
    "hand-o-right": 61604,
    "hand-o-left": 61605,
    "hand-o-up": 61606,
    "hand-o-down": 61607,
    "arrow-circle-left": 61608,
    "arrow-circle-right": 61609,
    "arrow-circle-up": 61610,
    "arrow-circle-down": 61611,
    "globe": 61612,
    "wrench": 61613,
    "tasks": 61614,
    "filter": 61616,
    "briefcase": 61617,
    "arrows-alt": 61618,
    "group": 61632,
    "users": 61632,
    "chain": 61633,
    "link": 61633,
    "cloud": 61634,
    "flask": 61635,
    "cut": 61636,
    "scissors": 61636,
    "copy": 61637,
    "files-o": 61637,
    "paperclip": 61638,
    "save": 61639,
    "floppy-o": 61639,
    "square": 61640,
    "navicon": 61641,
    "reorder": 61641,
    "bars": 61641,
    "list-ul": 61642,
    "list-ol": 61643,
    "strikethrough": 61644,
    "underline": 61645,
    "table": 61646,
    "magic": 61648,
    "truck": 61649,
    "pinterest": 61650,
    "pinterest-square": 61651,
    "google-plus-square": 61652,
    "google-plus": 61653,
    "money": 61654,
    "caret-down": 61655,
    "caret-up": 61656,
    "caret-left": 61657,
    "caret-right": 61658,
    "columns": 61659,
    "unsorted": 61660,
    "sort": 61660,
    "sort-down": 61661,
    "sort-desc": 61661,
    "sort-up": 61662,
    "sort-asc": 61662,
    "envelope": 61664,
    "linkedin": 61665,
    "rotate-left": 61666,
    "undo": 61666,
    "legal": 61667,
    "gavel": 61667,
    "dashboard": 61668,
    "tachometer": 61668,
    "comment-o": 61669,
    "comments-o": 61670,
    "flash": 61671,
    "bolt": 61671,
    "sitemap": 61672,
    "umbrella": 61673,
    "paste": 61674,
    "clipboard": 61674,
    "lightbulb-o": 61675,
    "exchange": 61676,
    "cloud-download": 61677,
    "cloud-upload": 61678,
    "user-md": 61680,
    "stethoscope": 61681,
    "suitcase": 61682,
    "bell-o": 61602,
    "coffee": 61684,
    "cutlery": 61685,
    "file-text-o": 61686,
    "building-o": 61687,
    "hospital-o": 61688,
    "ambulance": 61689,
    "medkit": 61690,
    "fighter-jet": 61691,
    "beer": 61692,
    "h-square": 61693,
    "plus-square": 61694,
    "angle-double-left": 61696,
    "angle-double-right": 61697,
    "angle-double-up": 61698,
    "angle-double-down": 61699,
    "angle-left": 61700,
    "angle-right": 61701,
    "angle-up": 61702,
    "angle-down": 61703,
    "desktop": 61704,
    "laptop": 61705,
    "tablet": 61706,
    "mobile-phone": 61707,
    "mobile": 61707,
    "circle-o": 61708,
    "quote-left": 61709,
    "quote-right": 61710,
    "spinner": 61712,
    "circle": 61713,
    "mail-reply": 61714,
    "reply": 61714,
    "github-alt": 61715,
    "folder-o": 61716,
    "folder-open-o": 61717,
    "smile-o": 61720,
    "frown-o": 61721,
    "meh-o": 61722,
    "gamepad": 61723,
    "keyboard-o": 61724,
    "flag-o": 61725,
    "flag-checkered": 61726,
    "terminal": 61728,
    "code": 61729,
    "mail-reply-all": 61730,
    "reply-all": 61730,
    "star-half-empty": 61731,
    "star-half-full": 61731,
    "star-half-o": 61731,
    "location-arrow": 61732,
    "crop": 61733,
    "code-fork": 61734,
    "unlink": 61735,
    "chain-broken": 61735,
    "question": 61736,
    "info": 61737,
    "exclamation": 61738,
    "superscript": 61739,
    "subscript": 61740,
    "eraser": 61741,
    "puzzle-piece": 61742,
    "microphone": 61744,
    "microphone-slash": 61745,
    "shield": 61746,
    "calendar-o": 61747,
    "fire-extinguisher": 61748,
    "rocket": 61749,
    "maxcdn": 61750,
    "chevron-circle-left": 61751,
    "chevron-circle-right": 61752,
    "chevron-circle-up": 61753,
    "chevron-circle-down": 61754,
    "html5": 61755,
    "css3": 61756,
    "anchor": 61757,
    "unlock-alt": 61758,
    "bullseye": 61760,
    "ellipsis-h": 61761,
    "ellipsis-v": 61762,
    "rss-square": 61763,
    "play-circle": 61764,
    "ticket": 61765,
    "minus-square": 61766,
    "minus-square-o": 61767,
    "level-up": 61768,
    "level-down": 61769,
    "check-square": 61770,
    "pencil-square": 61771,
    "external-link-square": 61772,
    "share-square": 61773,
    "compass": 61774,
    "toggle-down": 61776,
    "caret-square-o-down": 61776,
    "toggle-up": 61777,
    "caret-square-o-up": 61777,
    "toggle-right": 61778,
    "caret-square-o-right": 61778,
    "euro": 61779,
    "eur": 61779,
    "gbp": 61780,
    "dollar": 61781,
    "usd": 61781,
    "rupee": 61782,
    "inr": 61782,
    "cny": 61783,
    "rmb": 61783,
    "yen": 61783,
    "jpy": 61783,
    "ruble": 61784,
    "rouble": 61784,
    "rub": 61784,
    "won": 61785,
    "krw": 61785,
    "bitcoin": 61786,
    "btc": 61786,
    "file": 61787,
    "file-text": 61788,
    "sort-alpha-asc": 61789,
    "sort-alpha-desc": 61790,
    "sort-amount-asc": 61792,
    "sort-amount-desc": 61793,
    "sort-numeric-asc": 61794,
    "sort-numeric-desc": 61795,
    "thumbs-up": 61796,
    "thumbs-down": 61797,
    "youtube-square": 61798,
    "youtube": 61799,
    "xing": 61800,
    "xing-square": 61801,
    "youtube-play": 61802,
    "dropbox": 61803,
    "stack-overflow": 61804,
    "instagram": 61805,
    "flickr": 61806,
    "adn": 61808,
    "bitbucket": 61809,
    "bitbucket-square": 61810,
    "tumblr": 61811,
    "tumblr-square": 61812,
    "long-arrow-down": 61813,
    "long-arrow-up": 61814,
    "long-arrow-left": 61815,
    "long-arrow-right": 61816,
    "apple": 61817,
    "windows": 61818,
    "android": 61819,
    "linux": 61820,
    "dribbble": 61821,
    "skype": 61822,
    "foursquare": 61824,
    "trello": 61825,
    "female": 61826,
    "male": 61827,
    "gittip": 61828,
    "gratipay": 61828,
    "sun-o": 61829,
    "moon-o": 61830,
    "archive": 61831,
    "bug": 61832,
    "vk": 61833,
    "weibo": 61834,
    "renren": 61835,
    "pagelines": 61836,
    "stack-exchange": 61837,
    "arrow-circle-o-right": 61838,
    "arrow-circle-o-left": 61840,
    "toggle-left": 61841,
    "caret-square-o-left": 61841,
    "dot-circle-o": 61842,
    "wheelchair": 61843,
    "vimeo-square": 61844,
    "turkish-lira": 61845,
    "try": 61845,
    "plus-square-o": 61846,
    "space-shuttle": 61847,
    "slack": 61848,
    "envelope-square": 61849,
    "wordpress": 61850,
    "openid": 61851,
    "institution": 61852,
    "bank": 61852,
    "university": 61852,
    "mortar-board": 61853,
    "graduation-cap": 61853,
    "yahoo": 61854,
    "google": 61856,
    "reddit": 61857,
    "reddit-square": 61858,
    "stumbleupon-circle": 61859,
    "stumbleupon": 61860,
    "delicious": 61861,
    "digg": 61862,
    "pied-piper-pp": 61863,
    "pied-piper-alt": 61864,
    "drupal": 61865,
    "joomla": 61866,
    "language": 61867,
    "fax": 61868,
    "building": 61869,
    "child": 61870,
    "paw": 61872,
    "spoon": 61873,
    "cube": 61874,
    "cubes": 61875,
    "behance": 61876,
    "behance-square": 61877,
    "steam": 61878,
    "steam-square": 61879,
    "recycle": 61880,
    "automobile": 61881,
    "car": 61881,
    "cab": 61882,
    "taxi": 61882,
    "tree": 61883,
    "spotify": 61884,
    "deviantart": 61885,
    "soundcloud": 61886,
    "database": 61888,
    "file-pdf-o": 61889,
    "file-word-o": 61890,
    "file-excel-o": 61891,
    "file-powerpoint-o": 61892,
    "file-photo-o": 61893,
    "file-picture-o": 61893,
    "file-image-o": 61893,
    "file-zip-o": 61894,
    "file-archive-o": 61894,
    "file-sound-o": 61895,
    "file-audio-o": 61895,
    "file-movie-o": 61896,
    "file-video-o": 61896,
    "file-code-o": 61897,
    "vine": 61898,
    "codepen": 61899,
    "jsfiddle": 61900,
    "life-bouy": 61901,
    "life-buoy": 61901,
    "life-saver": 61901,
    "support": 61901,
    "life-ring": 61901,
    "circle-o-notch": 61902,
    "ra": 61904,
    "resistance": 61904,
    "rebel": 61904,
    "ge": 61905,
    "empire": 61905,
    "git-square": 61906,
    "git": 61907,
    "y-combinator-square": 61908,
    "yc-square": 61908,
    "hacker-news": 61908,
    "tencent-weibo": 61909,
    "qq": 61910,
    "wechat": 61911,
    "weixin": 61911,
    "send": 61912,
    "paper-plane": 61912,
    "send-o": 61913,
    "paper-plane-o": 61913,
    "history": 61914,
    "circle-thin": 61915,
    "header": 61916,
    "paragraph": 61917,
    "sliders": 61918,
    "share-alt": 61920,
    "share-alt-square": 61921,
    "bomb": 61922,
    "soccer-ball-o": 61923,
    "futbol-o": 61923,
    "tty": 61924,
    "binoculars": 61925,
    "plug": 61926,
    "slideshare": 61927,
    "twitch": 61928,
    "yelp": 61929,
    "newspaper-o": 61930,
    "wifi": 61931,
    "calculator": 61932,
    "paypal": 61933,
    "google-wallet": 61934,
    "cc-visa": 61936,
    "cc-mastercard": 61937,
    "cc-discover": 61938,
    "cc-amex": 61939,
    "cc-paypal": 61940,
    "cc-stripe": 61941,
    "bell-slash": 61942,
    "bell-slash-o": 61943,
    "trash": 61944,
    "copyright": 61945,
    "at": 61946,
    "eyedropper": 61947,
    "paint-brush": 61948,
    "birthday-cake": 61949,
    "area-chart": 61950,
    "pie-chart": 61952,
    "line-chart": 61953,
    "lastfm": 61954,
    "lastfm-square": 61955,
    "toggle-off": 61956,
    "toggle-on": 61957,
    "bicycle": 61958,
    "bus": 61959,
    "ioxhost": 61960,
    "angellist": 61961,
    "cc": 61962,
    "shekel": 61963,
    "sheqel": 61963,
    "ils": 61963,
    "meanpath": 61964,
    "buysellads": 61965,
    "connectdevelop": 61966,
    "dashcube": 61968,
    "forumbee": 61969,
    "leanpub": 61970,
    "sellsy": 61971,
    "shirtsinbulk": 61972,
    "simplybuilt": 61973,
    "skyatlas": 61974,
    "cart-plus": 61975,
    "cart-arrow-down": 61976,
    "diamond": 61977,
    "ship": 61978,
    "user-secret": 61979,
    "motorcycle": 61980,
    "street-view": 61981,
    "heartbeat": 61982,
    "venus": 61985,
    "mars": 61986,
    "mercury": 61987,
    "intersex": 61988,
    "transgender": 61988,
    "transgender-alt": 61989,
    "venus-double": 61990,
    "mars-double": 61991,
    "venus-mars": 61992,
    "mars-stroke": 61993,
    "mars-stroke-v": 61994,
    "mars-stroke-h": 61995,
    "neuter": 61996,
    "genderless": 61997,
    "facebook-official": 62000,
    "pinterest-p": 62001,
    "whatsapp": 62002,
    "server": 62003,
    "user-plus": 62004,
    "user-times": 62005,
    "hotel": 62006,
    "bed": 62006,
    "viacoin": 62007,
    "train": 62008,
    "subway": 62009,
    "medium": 62010,
    "yc": 62011,
    "y-combinator": 62011,
    "optin-monster": 62012,
    "opencart": 62013,
    "expeditedssl": 62014,
    "battery-4": 62016,
    "battery": 62016,
    "battery-full": 62016,
    "battery-3": 62017,
    "battery-three-quarters": 62017,
    "battery-2": 62018,
    "battery-half": 62018,
    "battery-1": 62019,
    "battery-quarter": 62019,
    "battery-0": 62020,
    "battery-empty": 62020,
    "mouse-pointer": 62021,
    "i-cursor": 62022,
    "object-group": 62023,
    "object-ungroup": 62024,
    "sticky-note": 62025,
    "sticky-note-o": 62026,
    "cc-jcb": 62027,
    "cc-diners-club": 62028,
    "clone": 62029,
    "balance-scale": 62030,
    "hourglass-o": 62032,
    "hourglass-1": 62033,
    "hourglass-start": 62033,
    "hourglass-2": 62034,
    "hourglass-half": 62034,
    "hourglass-3": 62035,
    "hourglass-end": 62035,
    "hourglass": 62036,
    "hand-grab-o": 62037,
    "hand-rock-o": 62037,
    "hand-stop-o": 62038,
    "hand-paper-o": 62038,
    "hand-scissors-o": 62039,
    "hand-lizard-o": 62040,
    "hand-spock-o": 62041,
    "hand-pointer-o": 62042,
    "hand-peace-o": 62043,
    "trademark": 62044,
    "registered": 62045,
    "creative-commons": 62046,
    "gg": 62048,
    "gg-circle": 62049,
    "tripadvisor": 62050,
    "odnoklassniki": 62051,
    "odnoklassniki-square": 62052,
    "get-pocket": 62053,
    "wikipedia-w": 62054,
    "safari": 62055,
    "chrome": 62056,
    "firefox": 62057,
    "opera": 62058,
    "internet-explorer": 62059,
    "tv": 62060,
    "television": 62060,
    "contao": 62061,
    "500px": 62062,
    "amazon": 62064,
    "calendar-plus-o": 62065,
    "calendar-minus-o": 62066,
    "calendar-times-o": 62067,
    "calendar-check-o": 62068,
    "industry": 62069,
    "map-pin": 62070,
    "map-signs": 62071,
    "map-o": 62072,
    "map": 62073,
    "commenting": 62074,
    "commenting-o": 62075,
    "houzz": 62076,
    "vimeo": 62077,
    "black-tie": 62078,
    "fonticons": 62080,
    "reddit-alien": 62081,
    "edge": 62082,
    "credit-card-alt": 62083,
    "codiepie": 62084,
    "modx": 62085,
    "fort-awesome": 62086,
    "usb": 62087,
    "product-hunt": 62088,
    "mixcloud": 62089,
    "scribd": 62090,
    "pause-circle": 62091,
    "pause-circle-o": 62092,
    "stop-circle": 62093,
    "stop-circle-o": 62094,
    "shopping-bag": 62096,
    "shopping-basket": 62097,
    "hashtag": 62098,
    "bluetooth": 62099,
    "bluetooth-b": 62100,
    "percent": 62101,
    "gitlab": 62102,
    "wpbeginner": 62103,
    "wpforms": 62104,
    "envira": 62105,
    "universal-access": 62106,
    "wheelchair-alt": 62107,
    "question-circle-o": 62108,
    "blind": 62109,
    "audio-description": 62110,
    "volume-control-phone": 62112,
    "braille": 62113,
    "assistive-listening-systems": 62114,
    "asl-interpreting": 62115,
    "american-sign-language-interpreting": 62115,
    "deafness": 62116,
    "hard-of-hearing": 62116,
    "deaf": 62116,
    "glide": 62117,
    "glide-g": 62118,
    "signing": 62119,
    "sign-language": 62119,
    "low-vision": 62120,
    "viadeo": 62121,
    "viadeo-square": 62122,
    "snapchat": 62123,
    "snapchat-ghost": 62124,
    "snapchat-square": 62125,
    "pied-piper": 62126,
    "first-order": 62128,
    "yoast": 62129,
    "themeisle": 62130,
    "google-plus-circle": 62131,
    "google-plus-official": 62131,
    "fa": 62132,
    "font-awesome": 62132,
    "handshake-o": 62133,
    "envelope-open": 62134,
    "envelope-open-o": 62135,
    "linode": 62136,
    "address-book": 62137,
    "address-book-o": 62138,
    "vcard": 62139,
    "address-card": 62139,
    "vcard-o": 62140,
    "address-card-o": 62140,
    "user-circle": 62141,
    "user-circle-o": 62142,
    "user-o": 62144,
    "id-badge": 62145,
    "drivers-license": 62146,
    "id-card": 62146,
    "drivers-license-o": 62147,
    "id-card-o": 62147,
    "quora": 62148,
    "free-code-camp": 62149,
    "telegram": 62150,
    "thermometer-4": 62151,
    "thermometer": 62151,
    "thermometer-full": 62151,
    "thermometer-3": 62152,
    "thermometer-three-quarters": 62152,
    "thermometer-2": 62153,
    "thermometer-half": 62153,
    "thermometer-1": 62154,
    "thermometer-quarter": 62154,
    "thermometer-0": 62155,
    "thermometer-empty": 62155,
    "shower": 62156,
    "bathtub": 62157,
    "s15": 62157,
    "bath": 62157,
    "podcast": 62158,
    "window-maximize": 62160,
    "window-minimize": 62161,
    "window-restore": 62162,
    "times-rectangle": 62163,
    "window-close": 62163,
    "times-rectangle-o": 62164,
    "window-close-o": 62164,
    "bandcamp": 62165,
    "grav": 62166,
    "etsy": 62167,
    "imdb": 62168,
    "ravelry": 62169,
    "eercast": 62170,
    "microchip": 62171,
    "snowflake-o": 62172,
    "superpowers": 62173,
    "wpexplorer": 62174,
    "meetup": 62176
  };
},682,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0]).registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
		"scales": [1],
		"hash": "b06871f281fee6b241d60582ae9369b9",
		"name": "FontAwesome",
		"type": "ttf",
		"fileHashes": ["b06871f281fee6b241d60582ae9369b9"]
	});
},683,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Foundation = _require(_dependencyMap[0]);

  var _Foundation2 = babelHelpers.interopRequireDefault(_Foundation);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_Foundation2.default, 'foundation', _require(_dependencyMap[2]));
},684,[685,511,686]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "address-book": 61696,
    "alert": 61697,
    "align-center": 61698,
    "align-justify": 61699,
    "align-left": 61700,
    "align-right": 61701,
    "anchor": 61702,
    "annotate": 61703,
    "archive": 61704,
    "arrow-down": 61705,
    "arrow-left": 61706,
    "arrow-right": 61707,
    "arrow-up": 61708,
    "arrows-compress": 61709,
    "arrows-expand": 61710,
    "arrows-in": 61711,
    "arrows-out": 61712,
    "asl": 61713,
    "asterisk": 61714,
    "at-sign": 61715,
    "background-color": 61716,
    "battery-empty": 61717,
    "battery-full": 61718,
    "battery-half": 61719,
    "bitcoin-circle": 61720,
    "bitcoin": 61721,
    "blind": 61722,
    "bluetooth": 61723,
    "bold": 61724,
    "book-bookmark": 61725,
    "book": 61726,
    "bookmark": 61727,
    "braille": 61728,
    "burst-new": 61729,
    "burst-sale": 61730,
    "burst": 61731,
    "calendar": 61732,
    "camera": 61733,
    "check": 61734,
    "checkbox": 61735,
    "clipboard-notes": 61736,
    "clipboard-pencil": 61737,
    "clipboard": 61738,
    "clock": 61739,
    "closed-caption": 61740,
    "cloud": 61741,
    "comment-minus": 61742,
    "comment-quotes": 61743,
    "comment-video": 61744,
    "comment": 61745,
    "comments": 61746,
    "compass": 61747,
    "contrast": 61748,
    "credit-card": 61749,
    "crop": 61750,
    "crown": 61751,
    "css3": 61752,
    "database": 61753,
    "die-five": 61754,
    "die-four": 61755,
    "die-one": 61756,
    "die-six": 61757,
    "die-three": 61758,
    "die-two": 61759,
    "dislike": 61760,
    "dollar-bill": 61761,
    "dollar": 61762,
    "download": 61763,
    "eject": 61764,
    "elevator": 61765,
    "euro": 61766,
    "eye": 61767,
    "fast-forward": 61768,
    "female-symbol": 61769,
    "female": 61770,
    "filter": 61771,
    "first-aid": 61772,
    "flag": 61773,
    "folder-add": 61774,
    "folder-lock": 61775,
    "folder": 61776,
    "foot": 61777,
    "foundation": 61778,
    "graph-bar": 61779,
    "graph-horizontal": 61780,
    "graph-pie": 61781,
    "graph-trend": 61782,
    "guide-dog": 61783,
    "hearing-aid": 61784,
    "heart": 61785,
    "home": 61786,
    "html5": 61787,
    "indent-less": 61788,
    "indent-more": 61789,
    "info": 61790,
    "italic": 61791,
    "key": 61792,
    "laptop": 61793,
    "layout": 61794,
    "lightbulb": 61795,
    "like": 61796,
    "link": 61797,
    "list-bullet": 61798,
    "list-number": 61799,
    "list-thumbnails": 61800,
    "list": 61801,
    "lock": 61802,
    "loop": 61803,
    "magnifying-glass": 61804,
    "mail": 61805,
    "male-female": 61806,
    "male-symbol": 61807,
    "male": 61808,
    "map": 61809,
    "marker": 61810,
    "megaphone": 61811,
    "microphone": 61812,
    "minus-circle": 61813,
    "minus": 61814,
    "mobile-signal": 61815,
    "mobile": 61816,
    "monitor": 61817,
    "mountains": 61818,
    "music": 61819,
    "next": 61820,
    "no-dogs": 61821,
    "no-smoking": 61822,
    "page-add": 61823,
    "page-copy": 61824,
    "page-csv": 61825,
    "page-delete": 61826,
    "page-doc": 61827,
    "page-edit": 61828,
    "page-export-csv": 61829,
    "page-export-doc": 61830,
    "page-export-pdf": 61831,
    "page-export": 61832,
    "page-filled": 61833,
    "page-multiple": 61834,
    "page-pdf": 61835,
    "page-remove": 61836,
    "page-search": 61837,
    "page": 61838,
    "paint-bucket": 61839,
    "paperclip": 61840,
    "pause": 61841,
    "paw": 61842,
    "paypal": 61843,
    "pencil": 61844,
    "photo": 61845,
    "play-circle": 61846,
    "play-video": 61847,
    "play": 61848,
    "plus": 61849,
    "pound": 61850,
    "power": 61851,
    "previous": 61852,
    "price-tag": 61853,
    "pricetag-multiple": 61854,
    "print": 61855,
    "prohibited": 61856,
    "projection-screen": 61857,
    "puzzle": 61858,
    "quote": 61859,
    "record": 61860,
    "refresh": 61861,
    "results-demographics": 61862,
    "results": 61863,
    "rewind-ten": 61864,
    "rewind": 61865,
    "rss": 61866,
    "safety-cone": 61867,
    "save": 61868,
    "share": 61869,
    "sheriff-badge": 61870,
    "shield": 61871,
    "shopping-bag": 61872,
    "shopping-cart": 61873,
    "shuffle": 61874,
    "skull": 61875,
    "social-500px": 61876,
    "social-adobe": 61877,
    "social-amazon": 61878,
    "social-android": 61879,
    "social-apple": 61880,
    "social-behance": 61881,
    "social-bing": 61882,
    "social-blogger": 61883,
    "social-delicious": 61884,
    "social-designer-news": 61885,
    "social-deviant-art": 61886,
    "social-digg": 61887,
    "social-dribbble": 61888,
    "social-drive": 61889,
    "social-dropbox": 61890,
    "social-evernote": 61891,
    "social-facebook": 61892,
    "social-flickr": 61893,
    "social-forrst": 61894,
    "social-foursquare": 61895,
    "social-game-center": 61896,
    "social-github": 61897,
    "social-google-plus": 61898,
    "social-hacker-news": 61899,
    "social-hi5": 61900,
    "social-instagram": 61901,
    "social-joomla": 61902,
    "social-lastfm": 61903,
    "social-linkedin": 61904,
    "social-medium": 61905,
    "social-myspace": 61906,
    "social-orkut": 61907,
    "social-path": 61908,
    "social-picasa": 61909,
    "social-pinterest": 61910,
    "social-rdio": 61911,
    "social-reddit": 61912,
    "social-skillshare": 61913,
    "social-skype": 61914,
    "social-smashing-mag": 61915,
    "social-snapchat": 61916,
    "social-spotify": 61917,
    "social-squidoo": 61918,
    "social-stack-overflow": 61919,
    "social-steam": 61920,
    "social-stumbleupon": 61921,
    "social-treehouse": 61922,
    "social-tumblr": 61923,
    "social-twitter": 61924,
    "social-vimeo": 61925,
    "social-windows": 61926,
    "social-xbox": 61927,
    "social-yahoo": 61928,
    "social-yelp": 61929,
    "social-youtube": 61930,
    "social-zerply": 61931,
    "social-zurb": 61932,
    "sound": 61933,
    "star": 61934,
    "stop": 61935,
    "strikethrough": 61936,
    "subscript": 61937,
    "superscript": 61938,
    "tablet-landscape": 61939,
    "tablet-portrait": 61940,
    "target-two": 61941,
    "target": 61942,
    "telephone-accessible": 61943,
    "telephone": 61944,
    "text-color": 61945,
    "thumbnails": 61946,
    "ticket": 61947,
    "torso-business": 61948,
    "torso-female": 61949,
    "torso": 61950,
    "torsos-all-female": 61951,
    "torsos-all": 61952,
    "torsos-female-male": 61953,
    "torsos-male-female": 61954,
    "torsos": 61955,
    "trash": 61956,
    "trees": 61957,
    "trophy": 61958,
    "underline": 61959,
    "universal-access": 61960,
    "unlink": 61961,
    "unlock": 61962,
    "upload-cloud": 61963,
    "upload": 61964,
    "usb": 61965,
    "video": 61966,
    "volume-none": 61967,
    "volume-strike": 61968,
    "volume": 61969,
    "web": 61970,
    "wheelchair": 61971,
    "widget": 61972,
    "wrench": 61973,
    "x-circle": 61974,
    "x": 61975,
    "yen": 61976,
    "zoom-in": 61977,
    "zoom-out": 61978
  };
},685,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0]).registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
		"scales": [1],
		"hash": "e20945d7c929279ef7a6f1db184a4470",
		"name": "Foundation",
		"type": "ttf",
		"fileHashes": ["e20945d7c929279ef7a6f1db184a4470"]
	});
},686,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Ionicons = _require(_dependencyMap[0]);

  var _Ionicons2 = babelHelpers.interopRequireDefault(_Ionicons);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_Ionicons2.default, 'ionicons', _require(_dependencyMap[2]));
},687,[688,511,689]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "ios-add": 61698,
    "ios-add-circle": 61697,
    "ios-add-circle-outline": 61696,
    "ios-add-outline": 61698,
    "ios-alarm": 62408,
    "ios-alarm-outline": 62407,
    "ios-albums": 62410,
    "ios-albums-outline": 62409,
    "ios-alert": 61700,
    "ios-alert-outline": 61699,
    "ios-american-football": 61702,
    "ios-american-football-outline": 61701,
    "ios-analytics": 62414,
    "ios-analytics-outline": 62413,
    "ios-aperture": 61704,
    "ios-aperture-outline": 61703,
    "ios-apps": 61706,
    "ios-apps-outline": 61705,
    "ios-appstore": 61708,
    "ios-appstore-outline": 61707,
    "ios-archive": 61710,
    "ios-archive-outline": 61709,
    "ios-arrow-back": 62415,
    "ios-arrow-back-outline": 62415,
    "ios-arrow-down": 62416,
    "ios-arrow-down-outline": 62416,
    "ios-arrow-dropdown": 61712,
    "ios-arrow-dropdown-circle": 61711,
    "ios-arrow-dropdown-circle-outline": 61711,
    "ios-arrow-dropdown-outline": 61712,
    "ios-arrow-dropleft": 61714,
    "ios-arrow-dropleft-circle": 61713,
    "ios-arrow-dropleft-circle-outline": 61713,
    "ios-arrow-dropleft-outline": 61714,
    "ios-arrow-dropright": 61716,
    "ios-arrow-dropright-circle": 61715,
    "ios-arrow-dropright-circle-outline": 61715,
    "ios-arrow-dropright-outline": 61716,
    "ios-arrow-dropup": 61718,
    "ios-arrow-dropup-circle": 61717,
    "ios-arrow-dropup-circle-outline": 61717,
    "ios-arrow-dropup-outline": 61718,
    "ios-arrow-forward": 62417,
    "ios-arrow-forward-outline": 62417,
    "ios-arrow-round-back": 61719,
    "ios-arrow-round-back-outline": 61719,
    "ios-arrow-round-down": 61720,
    "ios-arrow-round-down-outline": 61720,
    "ios-arrow-round-forward": 61721,
    "ios-arrow-round-forward-outline": 61721,
    "ios-arrow-round-up": 61722,
    "ios-arrow-round-up-outline": 61722,
    "ios-arrow-up": 62424,
    "ios-arrow-up-outline": 62424,
    "ios-at": 62426,
    "ios-at-outline": 62425,
    "ios-attach": 61723,
    "ios-attach-outline": 61723,
    "ios-backspace": 61725,
    "ios-backspace-outline": 61724,
    "ios-barcode": 62428,
    "ios-barcode-outline": 62427,
    "ios-baseball": 62430,
    "ios-baseball-outline": 62429,
    "ios-basket": 61727,
    "ios-basket-outline": 61726,
    "ios-basketball": 62432,
    "ios-basketball-outline": 62431,
    "ios-battery-charging": 61728,
    "ios-battery-charging-outline": 61728,
    "ios-battery-dead": 61729,
    "ios-battery-dead-outline": 61729,
    "ios-battery-full": 61730,
    "ios-battery-full-outline": 61730,
    "ios-beaker": 61732,
    "ios-beaker-outline": 61731,
    "ios-beer": 61734,
    "ios-beer-outline": 61733,
    "ios-bicycle": 61735,
    "ios-bicycle-outline": 61735,
    "ios-bluetooth": 61736,
    "ios-bluetooth-outline": 61736,
    "ios-boat": 61738,
    "ios-boat-outline": 61737,
    "ios-body": 62436,
    "ios-body-outline": 62435,
    "ios-bonfire": 61740,
    "ios-bonfire-outline": 61739,
    "ios-book": 62440,
    "ios-book-outline": 62439,
    "ios-bookmark": 61742,
    "ios-bookmark-outline": 61741,
    "ios-bookmarks": 62442,
    "ios-bookmarks-outline": 62441,
    "ios-bowtie": 61744,
    "ios-bowtie-outline": 61743,
    "ios-briefcase": 62446,
    "ios-briefcase-outline": 62445,
    "ios-browsers": 62448,
    "ios-browsers-outline": 62447,
    "ios-brush": 61746,
    "ios-brush-outline": 61745,
    "ios-bug": 61748,
    "ios-bug-outline": 61747,
    "ios-build": 61750,
    "ios-build-outline": 61749,
    "ios-bulb": 61752,
    "ios-bulb-outline": 61751,
    "ios-bus": 61754,
    "ios-bus-outline": 61753,
    "ios-cafe": 61756,
    "ios-cafe-outline": 61755,
    "ios-calculator": 62450,
    "ios-calculator-outline": 62449,
    "ios-calendar": 62452,
    "ios-calendar-outline": 62451,
    "ios-call": 61758,
    "ios-call-outline": 61757,
    "ios-camera": 62454,
    "ios-camera-outline": 62453,
    "ios-car": 61760,
    "ios-car-outline": 61759,
    "ios-card": 61762,
    "ios-card-outline": 61761,
    "ios-cart": 62456,
    "ios-cart-outline": 62455,
    "ios-cash": 61764,
    "ios-cash-outline": 61763,
    "ios-chatboxes": 62458,
    "ios-chatboxes-outline": 62457,
    "ios-chatbubbles": 61766,
    "ios-chatbubbles-outline": 61765,
    "ios-checkbox": 61768,
    "ios-checkbox-outline": 61767,
    "ios-checkmark": 62463,
    "ios-checkmark-circle": 61770,
    "ios-checkmark-circle-outline": 61769,
    "ios-checkmark-outline": 62463,
    "ios-clipboard": 61772,
    "ios-clipboard-outline": 61771,
    "ios-clock": 62467,
    "ios-clock-outline": 62466,
    "ios-close": 62470,
    "ios-close-circle": 61774,
    "ios-close-circle-outline": 61773,
    "ios-close-outline": 62470,
    "ios-closed-captioning": 61776,
    "ios-closed-captioning-outline": 61775,
    "ios-cloud": 62476,
    "ios-cloud-circle": 61778,
    "ios-cloud-circle-outline": 61777,
    "ios-cloud-done": 61780,
    "ios-cloud-done-outline": 61779,
    "ios-cloud-download": 62472,
    "ios-cloud-download-outline": 62471,
    "ios-cloud-outline": 62473,
    "ios-cloud-upload": 62475,
    "ios-cloud-upload-outline": 62474,
    "ios-cloudy": 62480,
    "ios-cloudy-night": 62478,
    "ios-cloudy-night-outline": 62477,
    "ios-cloudy-outline": 62479,
    "ios-code": 61783,
    "ios-code-download": 61781,
    "ios-code-download-outline": 61781,
    "ios-code-outline": 61783,
    "ios-code-working": 61782,
    "ios-code-working-outline": 61782,
    "ios-cog": 62482,
    "ios-cog-outline": 62481,
    "ios-color-fill": 61785,
    "ios-color-fill-outline": 61784,
    "ios-color-filter": 62484,
    "ios-color-filter-outline": 62483,
    "ios-color-palette": 61787,
    "ios-color-palette-outline": 61786,
    "ios-color-wand": 62486,
    "ios-color-wand-outline": 62485,
    "ios-compass": 61789,
    "ios-compass-outline": 61788,
    "ios-construct": 61791,
    "ios-construct-outline": 61790,
    "ios-contact": 62490,
    "ios-contact-outline": 62489,
    "ios-contacts": 61793,
    "ios-contacts-outline": 61792,
    "ios-contract": 61794,
    "ios-contract-outline": 61794,
    "ios-contrast": 61795,
    "ios-contrast-outline": 61795,
    "ios-copy": 62492,
    "ios-copy-outline": 62491,
    "ios-create": 61797,
    "ios-create-outline": 61796,
    "ios-crop": 62494,
    "ios-crop-outline": 61798,
    "ios-cube": 61800,
    "ios-cube-outline": 61799,
    "ios-cut": 61802,
    "ios-cut-outline": 61801,
    "ios-desktop": 61804,
    "ios-desktop-outline": 61803,
    "ios-disc": 61806,
    "ios-disc-outline": 61805,
    "ios-document": 61808,
    "ios-document-outline": 61807,
    "ios-done-all": 61809,
    "ios-done-all-outline": 61809,
    "ios-download": 62496,
    "ios-download-outline": 62495,
    "ios-easel": 61811,
    "ios-easel-outline": 61810,
    "ios-egg": 61813,
    "ios-egg-outline": 61812,
    "ios-exit": 61815,
    "ios-exit-outline": 61814,
    "ios-expand": 61816,
    "ios-expand-outline": 61816,
    "ios-eye": 62501,
    "ios-eye-off": 61818,
    "ios-eye-off-outline": 61817,
    "ios-eye-outline": 62500,
    "ios-fastforward": 62503,
    "ios-fastforward-outline": 62502,
    "ios-female": 61819,
    "ios-female-outline": 61819,
    "ios-filing": 62505,
    "ios-filing-outline": 62504,
    "ios-film": 62507,
    "ios-film-outline": 62506,
    "ios-finger-print": 61820,
    "ios-finger-print-outline": 61820,
    "ios-flag": 62509,
    "ios-flag-outline": 62508,
    "ios-flame": 62511,
    "ios-flame-outline": 62510,
    "ios-flash": 61822,
    "ios-flash-outline": 61821,
    "ios-flask": 62513,
    "ios-flask-outline": 62512,
    "ios-flower": 62515,
    "ios-flower-outline": 62514,
    "ios-folder": 62517,
    "ios-folder-open": 61824,
    "ios-folder-open-outline": 61823,
    "ios-folder-outline": 62516,
    "ios-football": 62519,
    "ios-football-outline": 62518,
    "ios-funnel": 61826,
    "ios-funnel-outline": 61825,
    "ios-game-controller-a": 62521,
    "ios-game-controller-a-outline": 62520,
    "ios-game-controller-b": 62523,
    "ios-game-controller-b-outline": 62522,
    "ios-git-branch": 61827,
    "ios-git-branch-outline": 61827,
    "ios-git-commit": 61828,
    "ios-git-commit-outline": 61828,
    "ios-git-compare": 61829,
    "ios-git-compare-outline": 61829,
    "ios-git-merge": 61830,
    "ios-git-merge-outline": 61830,
    "ios-git-network": 61831,
    "ios-git-network-outline": 61831,
    "ios-git-pull-request": 61832,
    "ios-git-pull-request-outline": 61832,
    "ios-glasses": 62527,
    "ios-glasses-outline": 62526,
    "ios-globe": 61834,
    "ios-globe-outline": 61833,
    "ios-grid": 61836,
    "ios-grid-outline": 61835,
    "ios-hammer": 61838,
    "ios-hammer-outline": 61837,
    "ios-hand": 61840,
    "ios-hand-outline": 61839,
    "ios-happy": 61842,
    "ios-happy-outline": 61841,
    "ios-headset": 61844,
    "ios-headset-outline": 61843,
    "ios-heart": 62531,
    "ios-heart-outline": 62530,
    "ios-help": 62534,
    "ios-help-buoy": 61846,
    "ios-help-buoy-outline": 61845,
    "ios-help-circle": 61848,
    "ios-help-circle-outline": 61847,
    "ios-help-outline": 62534,
    "ios-home": 62536,
    "ios-home-outline": 62535,
    "ios-ice-cream": 61850,
    "ios-ice-cream-outline": 61849,
    "ios-image": 61852,
    "ios-image-outline": 61851,
    "ios-images": 61854,
    "ios-images-outline": 61853,
    "ios-infinite": 62538,
    "ios-infinite-outline": 62537,
    "ios-information": 62541,
    "ios-information-circle": 61856,
    "ios-information-circle-outline": 61855,
    "ios-information-outline": 62541,
    "ios-ionic": 61857,
    "ios-ionic-outline": 62542,
    "ios-ionitron": 61859,
    "ios-ionitron-outline": 61858,
    "ios-jet": 61861,
    "ios-jet-outline": 61860,
    "ios-key": 61863,
    "ios-key-outline": 61862,
    "ios-keypad": 62544,
    "ios-keypad-outline": 62543,
    "ios-laptop": 61864,
    "ios-laptop-outline": 61864,
    "ios-leaf": 61866,
    "ios-leaf-outline": 61865,
    "ios-link": 61994,
    "ios-link-outline": 61898,
    "ios-list": 62548,
    "ios-list-box": 61868,
    "ios-list-box-outline": 61867,
    "ios-list-outline": 62548,
    "ios-locate": 61870,
    "ios-locate-outline": 61869,
    "ios-lock": 61872,
    "ios-lock-outline": 61871,
    "ios-log-in": 61873,
    "ios-log-in-outline": 61873,
    "ios-log-out": 61874,
    "ios-log-out-outline": 61874,
    "ios-magnet": 61876,
    "ios-magnet-outline": 61875,
    "ios-mail": 61880,
    "ios-mail-open": 61878,
    "ios-mail-open-outline": 61877,
    "ios-mail-outline": 61879,
    "ios-male": 61881,
    "ios-male-outline": 61881,
    "ios-man": 61883,
    "ios-man-outline": 61882,
    "ios-map": 61885,
    "ios-map-outline": 61884,
    "ios-medal": 61887,
    "ios-medal-outline": 61886,
    "ios-medical": 62556,
    "ios-medical-outline": 62555,
    "ios-medkit": 62558,
    "ios-medkit-outline": 62557,
    "ios-megaphone": 61889,
    "ios-megaphone-outline": 61888,
    "ios-menu": 61891,
    "ios-menu-outline": 61890,
    "ios-mic": 62561,
    "ios-mic-off": 62559,
    "ios-mic-off-outline": 61892,
    "ios-mic-outline": 62560,
    "ios-microphone": 61894,
    "ios-microphone-outline": 61893,
    "ios-moon": 62568,
    "ios-moon-outline": 62567,
    "ios-more": 61896,
    "ios-more-outline": 61895,
    "ios-move": 61899,
    "ios-move-outline": 61899,
    "ios-musical-note": 62571,
    "ios-musical-note-outline": 61900,
    "ios-musical-notes": 62572,
    "ios-musical-notes-outline": 61901,
    "ios-navigate": 62574,
    "ios-navigate-outline": 62573,
    "ios-no-smoking": 61903,
    "ios-no-smoking-outline": 61902,
    "ios-notifications": 61907,
    "ios-notifications-off": 61905,
    "ios-notifications-off-outline": 61904,
    "ios-notifications-outline": 61906,
    "ios-nuclear": 61909,
    "ios-nuclear-outline": 61908,
    "ios-nutrition": 62576,
    "ios-nutrition-outline": 62575,
    "ios-open": 61911,
    "ios-open-outline": 61910,
    "ios-options": 61913,
    "ios-options-outline": 61912,
    "ios-outlet": 61915,
    "ios-outlet-outline": 61914,
    "ios-paper": 62578,
    "ios-paper-outline": 62577,
    "ios-paper-plane": 61917,
    "ios-paper-plane-outline": 61916,
    "ios-partly-sunny": 61919,
    "ios-partly-sunny-outline": 61918,
    "ios-pause": 62584,
    "ios-pause-outline": 62583,
    "ios-paw": 62586,
    "ios-paw-outline": 62585,
    "ios-people": 62588,
    "ios-people-outline": 62587,
    "ios-person": 62590,
    "ios-person-add": 61921,
    "ios-person-add-outline": 61920,
    "ios-person-outline": 62589,
    "ios-phone-landscape": 61922,
    "ios-phone-landscape-outline": 61922,
    "ios-phone-portrait": 61923,
    "ios-phone-portrait-outline": 61923,
    "ios-photos": 62594,
    "ios-photos-outline": 62593,
    "ios-pie": 62596,
    "ios-pie-outline": 62595,
    "ios-pin": 61925,
    "ios-pin-outline": 61924,
    "ios-pint": 62598,
    "ios-pint-outline": 62597,
    "ios-pizza": 61927,
    "ios-pizza-outline": 61926,
    "ios-plane": 61929,
    "ios-plane-outline": 61928,
    "ios-planet": 61931,
    "ios-planet-outline": 61930,
    "ios-play": 62600,
    "ios-play-outline": 62599,
    "ios-podium": 61933,
    "ios-podium-outline": 61932,
    "ios-power": 61935,
    "ios-power-outline": 61934,
    "ios-pricetag": 62605,
    "ios-pricetag-outline": 62604,
    "ios-pricetags": 62607,
    "ios-pricetags-outline": 62606,
    "ios-print": 61937,
    "ios-print-outline": 61936,
    "ios-pulse": 62611,
    "ios-pulse-outline": 61938,
    "ios-qr-scanner": 61939,
    "ios-qr-scanner-outline": 61939,
    "ios-quote": 61941,
    "ios-quote-outline": 61940,
    "ios-radio": 61945,
    "ios-radio-button-off": 61942,
    "ios-radio-button-off-outline": 61942,
    "ios-radio-button-on": 61943,
    "ios-radio-button-on-outline": 61943,
    "ios-radio-outline": 61944,
    "ios-rainy": 62613,
    "ios-rainy-outline": 62612,
    "ios-recording": 62615,
    "ios-recording-outline": 62614,
    "ios-redo": 62617,
    "ios-redo-outline": 62616,
    "ios-refresh": 62620,
    "ios-refresh-circle": 61990,
    "ios-refresh-circle-outline": 61988,
    "ios-refresh-outline": 62620,
    "ios-remove": 61948,
    "ios-remove-circle": 61947,
    "ios-remove-circle-outline": 61946,
    "ios-remove-outline": 61948,
    "ios-reorder": 61949,
    "ios-reorder-outline": 61949,
    "ios-repeat": 61950,
    "ios-repeat-outline": 61950,
    "ios-resize": 61951,
    "ios-resize-outline": 61951,
    "ios-restaurant": 61953,
    "ios-restaurant-outline": 61952,
    "ios-return-left": 61954,
    "ios-return-left-outline": 61954,
    "ios-return-right": 61955,
    "ios-return-right-outline": 61955,
    "ios-reverse-camera": 62623,
    "ios-reverse-camera-outline": 62622,
    "ios-rewind": 62625,
    "ios-rewind-outline": 62624,
    "ios-ribbon": 61957,
    "ios-ribbon-outline": 61956,
    "ios-rose": 62627,
    "ios-rose-outline": 62626,
    "ios-sad": 61959,
    "ios-sad-outline": 61958,
    "ios-school": 61961,
    "ios-school-outline": 61960,
    "ios-search": 62629,
    "ios-search-outline": 61962,
    "ios-send": 61964,
    "ios-send-outline": 61963,
    "ios-settings": 62631,
    "ios-settings-outline": 61965,
    "ios-share": 61969,
    "ios-share-alt": 61967,
    "ios-share-alt-outline": 61966,
    "ios-share-outline": 61968,
    "ios-shirt": 61971,
    "ios-shirt-outline": 61970,
    "ios-shuffle": 62633,
    "ios-shuffle-outline": 62633,
    "ios-skip-backward": 61973,
    "ios-skip-backward-outline": 61972,
    "ios-skip-forward": 61975,
    "ios-skip-forward-outline": 61974,
    "ios-snow": 61976,
    "ios-snow-outline": 61996,
    "ios-speedometer": 62640,
    "ios-speedometer-outline": 62639,
    "ios-square": 61978,
    "ios-square-outline": 61977,
    "ios-star": 62643,
    "ios-star-half": 62641,
    "ios-star-half-outline": 62641,
    "ios-star-outline": 62642,
    "ios-stats": 61980,
    "ios-stats-outline": 61979,
    "ios-stopwatch": 62645,
    "ios-stopwatch-outline": 62644,
    "ios-subway": 61982,
    "ios-subway-outline": 61981,
    "ios-sunny": 62647,
    "ios-sunny-outline": 62646,
    "ios-swap": 61983,
    "ios-swap-outline": 61983,
    "ios-switch": 61985,
    "ios-switch-outline": 61984,
    "ios-sync": 61986,
    "ios-sync-outline": 61986,
    "ios-tablet-landscape": 61987,
    "ios-tablet-landscape-outline": 61987,
    "ios-tablet-portrait": 62030,
    "ios-tablet-portrait-outline": 62030,
    "ios-tennisball": 62651,
    "ios-tennisball-outline": 62650,
    "ios-text": 62032,
    "ios-text-outline": 62031,
    "ios-thermometer": 62034,
    "ios-thermometer-outline": 62033,
    "ios-thumbs-down": 62036,
    "ios-thumbs-down-outline": 62035,
    "ios-thumbs-up": 62038,
    "ios-thumbs-up-outline": 62037,
    "ios-thunderstorm": 62653,
    "ios-thunderstorm-outline": 62652,
    "ios-time": 62655,
    "ios-time-outline": 62654,
    "ios-timer": 62657,
    "ios-timer-outline": 62656,
    "ios-train": 62040,
    "ios-train-outline": 62039,
    "ios-transgender": 62041,
    "ios-transgender-outline": 62041,
    "ios-trash": 62661,
    "ios-trash-outline": 62660,
    "ios-trending-down": 62042,
    "ios-trending-down-outline": 62042,
    "ios-trending-up": 62043,
    "ios-trending-up-outline": 62043,
    "ios-trophy": 62045,
    "ios-trophy-outline": 62044,
    "ios-umbrella": 62047,
    "ios-umbrella-outline": 62046,
    "ios-undo": 62663,
    "ios-undo-outline": 62662,
    "ios-unlock": 62049,
    "ios-unlock-outline": 62048,
    "ios-videocam": 62669,
    "ios-videocam-outline": 62668,
    "ios-volume-down": 62050,
    "ios-volume-down-outline": 62050,
    "ios-volume-mute": 62051,
    "ios-volume-mute-outline": 62051,
    "ios-volume-off": 62052,
    "ios-volume-off-outline": 62052,
    "ios-volume-up": 62053,
    "ios-volume-up-outline": 62053,
    "ios-walk": 62054,
    "ios-walk-outline": 62054,
    "ios-warning": 62056,
    "ios-warning-outline": 62055,
    "ios-watch": 62057,
    "ios-watch-outline": 62057,
    "ios-water": 62059,
    "ios-water-outline": 62058,
    "ios-wifi": 62061,
    "ios-wifi-outline": 62060,
    "ios-wine": 62063,
    "ios-wine-outline": 62062,
    "ios-woman": 62065,
    "ios-woman-outline": 62064,
    "logo-android": 61989,
    "logo-angular": 61991,
    "logo-apple": 61993,
    "logo-bitcoin": 61995,
    "logo-buffer": 61997,
    "logo-chrome": 61999,
    "logo-codepen": 62000,
    "logo-css3": 62001,
    "logo-designernews": 62002,
    "logo-dribbble": 62003,
    "logo-dropbox": 62004,
    "logo-euro": 62005,
    "logo-facebook": 62006,
    "logo-foursquare": 62007,
    "logo-freebsd-devil": 62008,
    "logo-github": 62009,
    "logo-google": 62010,
    "logo-googleplus": 62011,
    "logo-hackernews": 62012,
    "logo-html5": 62013,
    "logo-instagram": 62014,
    "logo-javascript": 62015,
    "logo-linkedin": 62016,
    "logo-markdown": 62017,
    "logo-nodejs": 62018,
    "logo-octocat": 62019,
    "logo-pinterest": 62020,
    "logo-playstation": 62021,
    "logo-python": 62022,
    "logo-reddit": 62023,
    "logo-rss": 62024,
    "logo-sass": 62025,
    "logo-skype": 62026,
    "logo-snapchat": 62027,
    "logo-steam": 62028,
    "logo-tumblr": 62029,
    "logo-tux": 62126,
    "logo-twitch": 62127,
    "logo-twitter": 62128,
    "logo-usd": 62129,
    "logo-vimeo": 62148,
    "logo-whatsapp": 62149,
    "logo-windows": 62255,
    "logo-wordpress": 62256,
    "logo-xbox": 62284,
    "logo-yahoo": 62285,
    "logo-yen": 62286,
    "logo-youtube": 62287,
    "md-add": 62067,
    "md-add-circle": 62066,
    "md-alarm": 62068,
    "md-albums": 62069,
    "md-alert": 62070,
    "md-american-football": 62071,
    "md-analytics": 62072,
    "md-aperture": 62073,
    "md-apps": 62074,
    "md-appstore": 62075,
    "md-archive": 62076,
    "md-arrow-back": 62077,
    "md-arrow-down": 62078,
    "md-arrow-dropdown": 62080,
    "md-arrow-dropdown-circle": 62079,
    "md-arrow-dropleft": 62082,
    "md-arrow-dropleft-circle": 62081,
    "md-arrow-dropright": 62084,
    "md-arrow-dropright-circle": 62083,
    "md-arrow-dropup": 62086,
    "md-arrow-dropup-circle": 62085,
    "md-arrow-forward": 62087,
    "md-arrow-round-back": 62088,
    "md-arrow-round-down": 62089,
    "md-arrow-round-forward": 62090,
    "md-arrow-round-up": 62091,
    "md-arrow-up": 62092,
    "md-at": 62093,
    "md-attach": 62094,
    "md-backspace": 62095,
    "md-barcode": 62096,
    "md-baseball": 62097,
    "md-basket": 62098,
    "md-basketball": 62099,
    "md-battery-charging": 62100,
    "md-battery-dead": 62101,
    "md-battery-full": 62102,
    "md-beaker": 62103,
    "md-beer": 62104,
    "md-bicycle": 62105,
    "md-bluetooth": 62106,
    "md-boat": 62107,
    "md-body": 62108,
    "md-bonfire": 62109,
    "md-book": 62110,
    "md-bookmark": 62111,
    "md-bookmarks": 62112,
    "md-bowtie": 62113,
    "md-briefcase": 62114,
    "md-browsers": 62115,
    "md-brush": 62116,
    "md-bug": 62117,
    "md-build": 62118,
    "md-bulb": 62119,
    "md-bus": 62120,
    "md-cafe": 62121,
    "md-calculator": 62122,
    "md-calendar": 62123,
    "md-call": 62124,
    "md-camera": 62125,
    "md-car": 62130,
    "md-card": 62131,
    "md-cart": 62132,
    "md-cash": 62133,
    "md-chatboxes": 62134,
    "md-chatbubbles": 62135,
    "md-checkbox": 62137,
    "md-checkbox-outline": 62136,
    "md-checkmark": 62140,
    "md-checkmark-circle": 62139,
    "md-checkmark-circle-outline": 62138,
    "md-clipboard": 62141,
    "md-clock": 62142,
    "md-close": 62144,
    "md-close-circle": 62143,
    "md-closed-captioning": 62145,
    "md-cloud": 62153,
    "md-cloud-circle": 62146,
    "md-cloud-done": 62147,
    "md-cloud-download": 62150,
    "md-cloud-outline": 62151,
    "md-cloud-upload": 62152,
    "md-cloudy": 62155,
    "md-cloudy-night": 62154,
    "md-code": 62158,
    "md-code-download": 62156,
    "md-code-working": 62157,
    "md-cog": 62159,
    "md-color-fill": 62160,
    "md-color-filter": 62161,
    "md-color-palette": 62162,
    "md-color-wand": 62163,
    "md-compass": 62164,
    "md-construct": 62165,
    "md-contact": 62166,
    "md-contacts": 62167,
    "md-contract": 62168,
    "md-contrast": 62169,
    "md-copy": 62170,
    "md-create": 62171,
    "md-crop": 62172,
    "md-cube": 62173,
    "md-cut": 62174,
    "md-desktop": 62175,
    "md-disc": 62176,
    "md-document": 62177,
    "md-done-all": 62178,
    "md-download": 62179,
    "md-easel": 62180,
    "md-egg": 62181,
    "md-exit": 62182,
    "md-expand": 62183,
    "md-eye": 62185,
    "md-eye-off": 62184,
    "md-fastforward": 62186,
    "md-female": 62187,
    "md-filing": 62188,
    "md-film": 62189,
    "md-finger-print": 62190,
    "md-flag": 62191,
    "md-flame": 62192,
    "md-flash": 62193,
    "md-flask": 62194,
    "md-flower": 62195,
    "md-folder": 62197,
    "md-folder-open": 62196,
    "md-football": 62198,
    "md-funnel": 62199,
    "md-game-controller-a": 62200,
    "md-game-controller-b": 62201,
    "md-git-branch": 62202,
    "md-git-commit": 62203,
    "md-git-compare": 62204,
    "md-git-merge": 62205,
    "md-git-network": 62206,
    "md-git-pull-request": 62207,
    "md-glasses": 62208,
    "md-globe": 62209,
    "md-grid": 62210,
    "md-hammer": 62211,
    "md-hand": 62212,
    "md-happy": 62213,
    "md-headset": 62214,
    "md-heart": 62216,
    "md-heart-outline": 62215,
    "md-help": 62219,
    "md-help-buoy": 62217,
    "md-help-circle": 62218,
    "md-home": 62220,
    "md-ice-cream": 62221,
    "md-image": 62222,
    "md-images": 62223,
    "md-infinite": 62224,
    "md-information": 62226,
    "md-information-circle": 62225,
    "md-ionic": 62227,
    "md-ionitron": 62228,
    "md-jet": 62229,
    "md-key": 62230,
    "md-keypad": 62231,
    "md-laptop": 62232,
    "md-leaf": 62233,
    "md-link": 61998,
    "md-list": 62235,
    "md-list-box": 62234,
    "md-locate": 62236,
    "md-lock": 62237,
    "md-log-in": 62238,
    "md-log-out": 62239,
    "md-magnet": 62240,
    "md-mail": 62242,
    "md-mail-open": 62241,
    "md-male": 62243,
    "md-man": 62244,
    "md-map": 62245,
    "md-medal": 62246,
    "md-medical": 62247,
    "md-medkit": 62248,
    "md-megaphone": 62249,
    "md-menu": 62250,
    "md-mic": 62252,
    "md-mic-off": 62251,
    "md-microphone": 62253,
    "md-moon": 62254,
    "md-more": 61897,
    "md-move": 62257,
    "md-musical-note": 62258,
    "md-musical-notes": 62259,
    "md-navigate": 62260,
    "md-no-smoking": 62261,
    "md-notifications": 62264,
    "md-notifications-off": 62262,
    "md-notifications-outline": 62263,
    "md-nuclear": 62265,
    "md-nutrition": 62266,
    "md-open": 62267,
    "md-options": 62268,
    "md-outlet": 62269,
    "md-paper": 62271,
    "md-paper-plane": 62270,
    "md-partly-sunny": 62272,
    "md-pause": 62273,
    "md-paw": 62274,
    "md-people": 62275,
    "md-person": 62277,
    "md-person-add": 62276,
    "md-phone-landscape": 62278,
    "md-phone-portrait": 62279,
    "md-photos": 62280,
    "md-pie": 62281,
    "md-pin": 62282,
    "md-pint": 62283,
    "md-pizza": 62292,
    "md-plane": 62293,
    "md-planet": 62294,
    "md-play": 62295,
    "md-podium": 62296,
    "md-power": 62297,
    "md-pricetag": 62298,
    "md-pricetags": 62299,
    "md-print": 62300,
    "md-pulse": 62301,
    "md-qr-scanner": 62302,
    "md-quote": 62303,
    "md-radio": 62306,
    "md-radio-button-off": 62304,
    "md-radio-button-on": 62305,
    "md-rainy": 62307,
    "md-recording": 62308,
    "md-redo": 62309,
    "md-refresh": 62310,
    "md-refresh-circle": 61992,
    "md-remove": 62312,
    "md-remove-circle": 62311,
    "md-reorder": 62313,
    "md-repeat": 62314,
    "md-resize": 62315,
    "md-restaurant": 62316,
    "md-return-left": 62317,
    "md-return-right": 62318,
    "md-reverse-camera": 62319,
    "md-rewind": 62320,
    "md-ribbon": 62321,
    "md-rose": 62322,
    "md-sad": 62323,
    "md-school": 62324,
    "md-search": 62325,
    "md-send": 62326,
    "md-settings": 62327,
    "md-share": 62329,
    "md-share-alt": 62328,
    "md-shirt": 62330,
    "md-shuffle": 62331,
    "md-skip-backward": 62332,
    "md-skip-forward": 62333,
    "md-snow": 62334,
    "md-speedometer": 62335,
    "md-square": 62337,
    "md-square-outline": 62336,
    "md-star": 62340,
    "md-star-half": 62338,
    "md-star-outline": 62339,
    "md-stats": 62341,
    "md-stopwatch": 62342,
    "md-subway": 62343,
    "md-sunny": 62344,
    "md-swap": 62345,
    "md-switch": 62346,
    "md-sync": 62347,
    "md-tablet-landscape": 62348,
    "md-tablet-portrait": 62349,
    "md-tennisball": 62350,
    "md-text": 62351,
    "md-thermometer": 62352,
    "md-thumbs-down": 62353,
    "md-thumbs-up": 62354,
    "md-thunderstorm": 62355,
    "md-time": 62356,
    "md-timer": 62357,
    "md-train": 62358,
    "md-transgender": 62359,
    "md-trash": 62360,
    "md-trending-down": 62361,
    "md-trending-up": 62362,
    "md-trophy": 62363,
    "md-umbrella": 62364,
    "md-undo": 62365,
    "md-unlock": 62366,
    "md-videocam": 62367,
    "md-volume-down": 62368,
    "md-volume-mute": 62369,
    "md-volume-off": 62370,
    "md-volume-up": 62371,
    "md-walk": 62372,
    "md-warning": 62373,
    "md-watch": 62374,
    "md-water": 62375,
    "md-wifi": 62376,
    "md-wine": 62377,
    "md-woman": 62378
  };
},688,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0]).registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
		"scales": [1],
		"hash": "74c652671225d6ded874a648502e5f0a",
		"name": "Ionicons",
		"type": "ttf",
		"fileHashes": ["74c652671225d6ded874a648502e5f0a"]
	});
},689,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _MaterialCommunityIcons = _require(_dependencyMap[0]);

  var _MaterialCommunityIcons2 = babelHelpers.interopRequireDefault(_MaterialCommunityIcons);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_MaterialCommunityIcons2.default, 'material-community', _require(_dependencyMap[2]));
},690,[691,511,692]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "access-point": 61442,
    "access-point-network": 61443,
    "account": 61444,
    "account-alert": 61445,
    "account-box": 61446,
    "account-box-outline": 61447,
    "account-card-details": 62930,
    "account-check": 61448,
    "account-circle": 61449,
    "account-convert": 61450,
    "account-edit": 63163,
    "account-key": 61451,
    "account-location": 61452,
    "account-minus": 61453,
    "account-multiple": 61454,
    "account-multiple-minus": 62931,
    "account-multiple-outline": 61455,
    "account-multiple-plus": 61456,
    "account-multiple-plus-outline": 63487,
    "account-network": 61457,
    "account-off": 61458,
    "account-outline": 61459,
    "account-plus": 61460,
    "account-plus-outline": 63488,
    "account-remove": 61461,
    "account-search": 61462,
    "account-settings": 63024,
    "account-settings-variant": 63025,
    "account-star": 61463,
    "account-switch": 61465,
    "adjust": 61466,
    "air-conditioner": 61467,
    "airballoon": 61468,
    "airplane": 61469,
    "airplane-landing": 62932,
    "airplane-off": 61470,
    "airplane-takeoff": 62933,
    "airplay": 61471,
    "alarm": 61472,
    "alarm-bell": 63373,
    "alarm-check": 61473,
    "alarm-light": 63374,
    "alarm-multiple": 61474,
    "alarm-off": 61475,
    "alarm-plus": 61476,
    "alarm-snooze": 63117,
    "album": 61477,
    "alert": 61478,
    "alert-box": 61479,
    "alert-circle": 61480,
    "alert-circle-outline": 62934,
    "alert-decagram": 63164,
    "alert-octagon": 61481,
    "alert-octagram": 63334,
    "alert-outline": 61482,
    "all-inclusive": 63165,
    "allo": 63489,
    "alpha": 61483,
    "alphabetical": 61484,
    "altimeter": 62935,
    "amazon": 61485,
    "amazon-clouddrive": 61486,
    "ambulance": 61487,
    "amplifier": 61488,
    "anchor": 61489,
    "android": 61490,
    "android-debug-bridge": 61491,
    "android-head": 63375,
    "android-studio": 61492,
    "angular": 63153,
    "angularjs": 63166,
    "animation": 62936,
    "apple": 61493,
    "apple-finder": 61494,
    "apple-ios": 61495,
    "apple-keyboard-caps": 63026,
    "apple-keyboard-command": 63027,
    "apple-keyboard-control": 63028,
    "apple-keyboard-option": 63029,
    "apple-keyboard-shift": 63030,
    "apple-mobileme": 61496,
    "apple-safari": 61497,
    "application": 62996,
    "approval": 63376,
    "apps": 61499,
    "archive": 61500,
    "arrange-bring-forward": 61501,
    "arrange-bring-to-front": 61502,
    "arrange-send-backward": 61503,
    "arrange-send-to-back": 61504,
    "arrow-all": 61505,
    "arrow-bottom-left": 61506,
    "arrow-bottom-right": 61507,
    "arrow-collapse": 62997,
    "arrow-collapse-all": 61508,
    "arrow-collapse-down": 63377,
    "arrow-collapse-left": 63378,
    "arrow-collapse-right": 63379,
    "arrow-collapse-up": 63380,
    "arrow-down": 61509,
    "arrow-down-bold": 63277,
    "arrow-down-bold-box": 63278,
    "arrow-down-bold-box-outline": 63279,
    "arrow-down-bold-circle": 61511,
    "arrow-down-bold-circle-outline": 61512,
    "arrow-down-bold-hexagon-outline": 61513,
    "arrow-down-box": 63167,
    "arrow-down-drop-circle": 61514,
    "arrow-down-drop-circle-outline": 61515,
    "arrow-down-thick": 61510,
    "arrow-expand": 62998,
    "arrow-expand-all": 61516,
    "arrow-expand-down": 63381,
    "arrow-expand-left": 63382,
    "arrow-expand-right": 63383,
    "arrow-expand-up": 63384,
    "arrow-left": 61517,
    "arrow-left-bold": 63280,
    "arrow-left-bold-box": 63281,
    "arrow-left-bold-box-outline": 63282,
    "arrow-left-bold-circle": 61519,
    "arrow-left-bold-circle-outline": 61520,
    "arrow-left-bold-hexagon-outline": 61521,
    "arrow-left-box": 63168,
    "arrow-left-drop-circle": 61522,
    "arrow-left-drop-circle-outline": 61523,
    "arrow-left-thick": 61518,
    "arrow-right": 61524,
    "arrow-right-bold": 63283,
    "arrow-right-bold-box": 63284,
    "arrow-right-bold-box-outline": 63285,
    "arrow-right-bold-circle": 61526,
    "arrow-right-bold-circle-outline": 61527,
    "arrow-right-bold-hexagon-outline": 61528,
    "arrow-right-box": 63169,
    "arrow-right-drop-circle": 61529,
    "arrow-right-drop-circle-outline": 61530,
    "arrow-right-thick": 61525,
    "arrow-top-left": 61531,
    "arrow-top-right": 61532,
    "arrow-up": 61533,
    "arrow-up-bold": 63286,
    "arrow-up-bold-box": 63287,
    "arrow-up-bold-box-outline": 63288,
    "arrow-up-bold-circle": 61535,
    "arrow-up-bold-circle-outline": 61536,
    "arrow-up-bold-hexagon-outline": 61537,
    "arrow-up-box": 63170,
    "arrow-up-drop-circle": 61538,
    "arrow-up-drop-circle-outline": 61539,
    "arrow-up-thick": 61534,
    "artist": 63490,
    "assistant": 61540,
    "asterisk": 63171,
    "at": 61541,
    "atlassian": 63491,
    "atom": 63335,
    "attachment": 61542,
    "audiobook": 61543,
    "auto-fix": 61544,
    "auto-upload": 61545,
    "autorenew": 61546,
    "av-timer": 61547,
    "azure": 63492,
    "baby": 61548,
    "baby-buggy": 63118,
    "backburger": 61549,
    "backspace": 61550,
    "backup-restore": 61551,
    "bandcamp": 63092,
    "bank": 61552,
    "barcode": 61553,
    "barcode-scan": 61554,
    "barley": 61555,
    "barrel": 61556,
    "basecamp": 61557,
    "basket": 61558,
    "basket-fill": 61559,
    "basket-unfill": 61560,
    "basketball": 63493,
    "battery": 61561,
    "battery-10": 61562,
    "battery-20": 61563,
    "battery-30": 61564,
    "battery-40": 61565,
    "battery-50": 61566,
    "battery-60": 61567,
    "battery-70": 61568,
    "battery-80": 61569,
    "battery-90": 61570,
    "battery-alert": 61571,
    "battery-charging": 61572,
    "battery-charging-100": 61573,
    "battery-charging-20": 61574,
    "battery-charging-30": 61575,
    "battery-charging-40": 61576,
    "battery-charging-60": 61577,
    "battery-charging-80": 61578,
    "battery-charging-90": 61579,
    "battery-charging-wireless": 63494,
    "battery-charging-wireless-10": 63495,
    "battery-charging-wireless-20": 63496,
    "battery-charging-wireless-30": 63497,
    "battery-charging-wireless-40": 63498,
    "battery-charging-wireless-50": 63499,
    "battery-charging-wireless-60": 63500,
    "battery-charging-wireless-70": 63501,
    "battery-charging-wireless-80": 63502,
    "battery-charging-wireless-90": 63503,
    "battery-charging-wireless-alert": 63504,
    "battery-charging-wireless-outline": 63505,
    "battery-minus": 61580,
    "battery-negative": 61581,
    "battery-outline": 61582,
    "battery-plus": 61583,
    "battery-positive": 61584,
    "battery-unknown": 61585,
    "beach": 61586,
    "beaker": 63119,
    "beats": 61591,
    "beer": 61592,
    "behance": 61593,
    "bell": 61594,
    "bell-off": 61595,
    "bell-outline": 61596,
    "bell-plus": 61597,
    "bell-ring": 61598,
    "bell-ring-outline": 61599,
    "bell-sleep": 61600,
    "beta": 61601,
    "bible": 61602,
    "bike": 61603,
    "bing": 61604,
    "binoculars": 61605,
    "bio": 61606,
    "biohazard": 61607,
    "bitbucket": 61608,
    "bitcoin": 63506,
    "black-mesa": 61609,
    "blackberry": 61610,
    "blender": 61611,
    "blinds": 61612,
    "block-helper": 61613,
    "blogger": 61614,
    "bluetooth": 61615,
    "bluetooth-audio": 61616,
    "bluetooth-connect": 61617,
    "bluetooth-off": 61618,
    "bluetooth-settings": 61619,
    "bluetooth-transfer": 61620,
    "blur": 61621,
    "blur-linear": 61622,
    "blur-off": 61623,
    "blur-radial": 61624,
    "bomb": 63120,
    "bomb-off": 63172,
    "bone": 61625,
    "book": 61626,
    "book-minus": 62937,
    "book-multiple": 61627,
    "book-multiple-variant": 61628,
    "book-open": 61629,
    "book-open-page-variant": 62938,
    "book-open-variant": 61630,
    "book-plus": 62939,
    "book-secure": 63385,
    "book-unsecure": 63386,
    "book-variant": 61631,
    "bookmark": 61632,
    "bookmark-check": 61633,
    "bookmark-music": 61634,
    "bookmark-outline": 61635,
    "bookmark-plus": 61637,
    "bookmark-plus-outline": 61636,
    "bookmark-remove": 61638,
    "boombox": 62940,
    "bootstrap": 63173,
    "border-all": 61639,
    "border-bottom": 61640,
    "border-color": 61641,
    "border-horizontal": 61642,
    "border-inside": 61643,
    "border-left": 61644,
    "border-none": 61645,
    "border-outside": 61646,
    "border-right": 61647,
    "border-style": 61648,
    "border-top": 61649,
    "border-vertical": 61650,
    "bow-tie": 63095,
    "bowl": 62999,
    "bowling": 61651,
    "box": 61652,
    "box-cutter": 61653,
    "box-shadow": 63031,
    "bridge": 63000,
    "briefcase": 61654,
    "briefcase-check": 61655,
    "briefcase-download": 61656,
    "briefcase-outline": 63507,
    "briefcase-upload": 61657,
    "brightness-1": 61658,
    "brightness-2": 61659,
    "brightness-3": 61660,
    "brightness-4": 61661,
    "brightness-5": 61662,
    "brightness-6": 61663,
    "brightness-7": 61664,
    "brightness-auto": 61665,
    "broom": 61666,
    "brush": 61667,
    "buffer": 63001,
    "bug": 61668,
    "bulletin-board": 61669,
    "bullhorn": 61670,
    "bullseye": 62941,
    "bus": 61671,
    "bus-articulated-end": 63387,
    "bus-articulated-front": 63388,
    "bus-double-decker": 63389,
    "bus-school": 63390,
    "bus-side": 63391,
    "cached": 61672,
    "cake": 61673,
    "cake-layered": 61674,
    "cake-variant": 61675,
    "calculator": 61676,
    "calendar": 61677,
    "calendar-blank": 61678,
    "calendar-check": 61679,
    "calendar-clock": 61680,
    "calendar-multiple": 61681,
    "calendar-multiple-check": 61682,
    "calendar-plus": 61683,
    "calendar-question": 63121,
    "calendar-range": 63096,
    "calendar-remove": 61684,
    "calendar-text": 61685,
    "calendar-today": 61686,
    "call-made": 61687,
    "call-merge": 61688,
    "call-missed": 61689,
    "call-received": 61690,
    "call-split": 61691,
    "camcorder": 61692,
    "camcorder-box": 61693,
    "camcorder-box-off": 61694,
    "camcorder-off": 61695,
    "camera": 61696,
    "camera-burst": 63122,
    "camera-enhance": 61697,
    "camera-front": 61698,
    "camera-front-variant": 61699,
    "camera-gopro": 63392,
    "camera-iris": 61700,
    "camera-metering-center": 63393,
    "camera-metering-matrix": 63394,
    "camera-metering-partial": 63395,
    "camera-metering-spot": 63396,
    "camera-off": 62943,
    "camera-party-mode": 61701,
    "camera-rear": 61702,
    "camera-rear-variant": 61703,
    "camera-switch": 61704,
    "camera-timer": 61705,
    "cancel": 63289,
    "candle": 62946,
    "candycane": 61706,
    "cannabis": 63397,
    "car": 61707,
    "car-battery": 61708,
    "car-connected": 61709,
    "car-convertible": 63398,
    "car-estate": 63399,
    "car-hatchback": 63400,
    "car-pickup": 63401,
    "car-side": 63402,
    "car-sports": 63403,
    "car-wash": 61710,
    "caravan": 63404,
    "cards": 63032,
    "cards-outline": 63033,
    "cards-playing-outline": 63034,
    "cards-variant": 63174,
    "carrot": 61711,
    "cart": 61712,
    "cart-off": 63083,
    "cart-outline": 61713,
    "cart-plus": 61714,
    "case-sensitive-alt": 61715,
    "cash": 61716,
    "cash-100": 61717,
    "cash-multiple": 61718,
    "cash-usd": 61719,
    "cast": 61720,
    "cast-connected": 61721,
    "cast-off": 63369,
    "castle": 61722,
    "cat": 61723,
    "cctv": 63405,
    "ceiling-light": 63336,
    "cellphone": 61724,
    "cellphone-android": 61725,
    "cellphone-basic": 61726,
    "cellphone-dock": 61727,
    "cellphone-iphone": 61728,
    "cellphone-link": 61729,
    "cellphone-link-off": 61730,
    "cellphone-settings": 61731,
    "cellphone-wireless": 63508,
    "certificate": 61732,
    "chair-school": 61733,
    "chart-arc": 61734,
    "chart-areaspline": 61735,
    "chart-bar": 61736,
    "chart-bar-stacked": 63337,
    "chart-bubble": 62947,
    "chart-donut": 63406,
    "chart-donut-variant": 63407,
    "chart-gantt": 63084,
    "chart-histogram": 61737,
    "chart-line": 61738,
    "chart-line-stacked": 63338,
    "chart-line-variant": 63408,
    "chart-pie": 61739,
    "chart-scatterplot-hexbin": 63085,
    "chart-timeline": 63086,
    "check": 61740,
    "check-all": 61741,
    "check-circle": 62944,
    "check-circle-outline": 62945,
    "checkbox-blank": 61742,
    "checkbox-blank-circle": 61743,
    "checkbox-blank-circle-outline": 61744,
    "checkbox-blank-outline": 61745,
    "checkbox-marked": 61746,
    "checkbox-marked-circle": 61747,
    "checkbox-marked-circle-outline": 61748,
    "checkbox-marked-outline": 61749,
    "checkbox-multiple-blank": 61750,
    "checkbox-multiple-blank-circle": 63035,
    "checkbox-multiple-blank-circle-outline": 63036,
    "checkbox-multiple-blank-outline": 61751,
    "checkbox-multiple-marked": 61752,
    "checkbox-multiple-marked-circle": 63037,
    "checkbox-multiple-marked-circle-outline": 63038,
    "checkbox-multiple-marked-outline": 61753,
    "checkerboard": 61754,
    "chemical-weapon": 61755,
    "chevron-double-down": 61756,
    "chevron-double-left": 61757,
    "chevron-double-right": 61758,
    "chevron-double-up": 61759,
    "chevron-down": 61760,
    "chevron-left": 61761,
    "chevron-right": 61762,
    "chevron-up": 61763,
    "chili-hot": 63409,
    "chili-medium": 63410,
    "chili-mild": 63411,
    "chip": 63002,
    "church": 61764,
    "circle": 63332,
    "circle-outline": 63333,
    "cisco-webex": 61765,
    "city": 61766,
    "clipboard": 61767,
    "clipboard-account": 61768,
    "clipboard-alert": 61769,
    "clipboard-arrow-down": 61770,
    "clipboard-arrow-left": 61771,
    "clipboard-check": 61772,
    "clipboard-flow": 63175,
    "clipboard-outline": 61773,
    "clipboard-plus": 63312,
    "clipboard-text": 61774,
    "clippy": 61775,
    "clock": 61776,
    "clock-alert": 62926,
    "clock-end": 61777,
    "clock-fast": 61778,
    "clock-in": 61779,
    "clock-out": 61780,
    "clock-start": 61781,
    "close": 61782,
    "close-box": 61783,
    "close-box-outline": 61784,
    "close-circle": 61785,
    "close-circle-outline": 61786,
    "close-network": 61787,
    "close-octagon": 61788,
    "close-octagon-outline": 61789,
    "close-outline": 63176,
    "closed-caption": 61790,
    "cloud": 61791,
    "cloud-braces": 63412,
    "cloud-check": 61792,
    "cloud-circle": 61793,
    "cloud-download": 61794,
    "cloud-off-outline": 61796,
    "cloud-outline": 61795,
    "cloud-print": 61797,
    "cloud-print-outline": 61798,
    "cloud-sync": 63039,
    "cloud-tags": 63413,
    "cloud-upload": 61799,
    "clover": 63509,
    "code-array": 61800,
    "code-braces": 61801,
    "code-brackets": 61802,
    "code-equal": 61803,
    "code-greater-than": 61804,
    "code-greater-than-or-equal": 61805,
    "code-less-than": 61806,
    "code-less-than-or-equal": 61807,
    "code-not-equal": 61808,
    "code-not-equal-variant": 61809,
    "code-parentheses": 61810,
    "code-string": 61811,
    "code-tags": 61812,
    "code-tags-check": 63123,
    "codepen": 61813,
    "coffee": 61814,
    "coffee-outline": 63177,
    "coffee-to-go": 61815,
    "coin": 61816,
    "coins": 63124,
    "collage": 63040,
    "color-helper": 61817,
    "comment": 61818,
    "comment-account": 61819,
    "comment-account-outline": 61820,
    "comment-alert": 61821,
    "comment-alert-outline": 61822,
    "comment-check": 61823,
    "comment-check-outline": 61824,
    "comment-multiple-outline": 61825,
    "comment-outline": 61826,
    "comment-plus-outline": 61827,
    "comment-processing": 61828,
    "comment-processing-outline": 61829,
    "comment-question": 63510,
    "comment-question-outline": 61830,
    "comment-remove": 62942,
    "comment-remove-outline": 61831,
    "comment-text": 61832,
    "comment-text-outline": 61833,
    "compare": 61834,
    "compass": 61835,
    "compass-outline": 61836,
    "console": 61837,
    "console-line": 63414,
    "contact-mail": 61838,
    "contacts": 63178,
    "content-copy": 61839,
    "content-cut": 61840,
    "content-duplicate": 61841,
    "content-paste": 61842,
    "content-save": 61843,
    "content-save-all": 61844,
    "content-save-outline": 63511,
    "content-save-settings": 63003,
    "contrast": 61845,
    "contrast-box": 61846,
    "contrast-circle": 61847,
    "cookie": 61848,
    "copyright": 62950,
    "corn": 63415,
    "counter": 61849,
    "cow": 61850,
    "creation": 61897,
    "credit-card": 61851,
    "credit-card-multiple": 61852,
    "credit-card-off": 62948,
    "credit-card-plus": 63093,
    "credit-card-scan": 61853,
    "crop": 61854,
    "crop-free": 61855,
    "crop-landscape": 61856,
    "crop-portrait": 61857,
    "crop-rotate": 63125,
    "crop-square": 61858,
    "crosshairs": 61859,
    "crosshairs-gps": 61860,
    "crown": 61861,
    "cube": 61862,
    "cube-outline": 61863,
    "cube-send": 61864,
    "cube-unfolded": 61865,
    "cup": 61866,
    "cup-off": 62949,
    "cup-water": 61867,
    "currency-btc": 61868,
    "currency-chf": 63416,
    "currency-cny": 63417,
    "currency-eth": 63418,
    "currency-eur": 61869,
    "currency-gbp": 61870,
    "currency-inr": 61871,
    "currency-jpy": 63419,
    "currency-krw": 63420,
    "currency-ngn": 61872,
    "currency-rub": 61873,
    "currency-sign": 63421,
    "currency-try": 61874,
    "currency-twd": 63422,
    "currency-usd": 61875,
    "currency-usd-off": 63097,
    "cursor-default": 61876,
    "cursor-default-outline": 61877,
    "cursor-move": 61878,
    "cursor-pointer": 61879,
    "cursor-text": 62951,
    "database": 61880,
    "database-minus": 61881,
    "database-plus": 61882,
    "debug-step-into": 61883,
    "debug-step-out": 61884,
    "debug-step-over": 61885,
    "decagram": 63339,
    "decagram-outline": 63340,
    "decimal-decrease": 61886,
    "decimal-increase": 61887,
    "delete": 61888,
    "delete-circle": 63106,
    "delete-empty": 63179,
    "delete-forever": 62952,
    "delete-restore": 63512,
    "delete-sweep": 62953,
    "delete-variant": 61889,
    "delta": 61890,
    "deskphone": 61891,
    "desktop-classic": 63423,
    "desktop-mac": 61892,
    "desktop-tower": 61893,
    "details": 61894,
    "developer-board": 63126,
    "deviantart": 61895,
    "dialpad": 63004,
    "diamond": 61896,
    "dice-1": 61898,
    "dice-2": 61899,
    "dice-3": 61900,
    "dice-4": 61901,
    "dice-5": 61902,
    "dice-6": 61903,
    "dice-d10": 63342,
    "dice-d20": 62954,
    "dice-d4": 62955,
    "dice-d6": 62956,
    "dice-d8": 62957,
    "dice-multiple": 63341,
    "dictionary": 63005,
    "dip-switch": 63424,
    "directions": 61904,
    "directions-fork": 63041,
    "discord": 63087,
    "disk": 62958,
    "disk-alert": 61905,
    "disqus": 61906,
    "disqus-outline": 61907,
    "division": 61908,
    "division-box": 61909,
    "dna": 63107,
    "dns": 61910,
    "do-not-disturb": 63127,
    "do-not-disturb-off": 63128,
    "dolby": 63154,
    "domain": 61911,
    "donkey": 63425,
    "door": 63513,
    "door-closed": 63514,
    "door-open": 63515,
    "dots-horizontal": 61912,
    "dots-horizontal-circle": 63426,
    "dots-vertical": 61913,
    "dots-vertical-circle": 63427,
    "douban": 63129,
    "download": 61914,
    "download-network": 63219,
    "drag": 61915,
    "drag-horizontal": 61916,
    "drag-vertical": 61917,
    "drawing": 61918,
    "drawing-box": 61919,
    "dribbble": 61920,
    "dribbble-box": 61921,
    "drone": 61922,
    "dropbox": 61923,
    "drupal": 61924,
    "duck": 61925,
    "dumbbell": 61926,
    "ear-hearing": 63428,
    "earth": 61927,
    "earth-box": 63180,
    "earth-box-off": 63181,
    "earth-off": 61928,
    "edge": 61929,
    "eject": 61930,
    "elephant": 63429,
    "elevation-decline": 61931,
    "elevation-rise": 61932,
    "elevator": 61933,
    "email": 61934,
    "email-alert": 63182,
    "email-open": 61935,
    "email-open-outline": 62959,
    "email-outline": 61936,
    "email-secure": 61937,
    "email-variant": 62960,
    "emby": 63155,
    "emoticon": 61938,
    "emoticon-cool": 61939,
    "emoticon-dead": 63130,
    "emoticon-devil": 61940,
    "emoticon-excited": 63131,
    "emoticon-happy": 61941,
    "emoticon-neutral": 61942,
    "emoticon-poop": 61943,
    "emoticon-sad": 61944,
    "emoticon-tongue": 61945,
    "engine": 61946,
    "engine-outline": 61947,
    "equal": 61948,
    "equal-box": 61949,
    "eraser": 61950,
    "eraser-variant": 63042,
    "escalator": 61951,
    "ethernet": 61952,
    "ethernet-cable": 61953,
    "ethernet-cable-off": 61954,
    "etsy": 61955,
    "ev-station": 62961,
    "eventbrite": 63430,
    "evernote": 61956,
    "exclamation": 61957,
    "exit-to-app": 61958,
    "export": 61959,
    "eye": 61960,
    "eye-off": 61961,
    "eye-off-outline": 63184,
    "eye-outline": 63183,
    "eyedropper": 61962,
    "eyedropper-variant": 61963,
    "face": 63043,
    "face-profile": 63044,
    "facebook": 61964,
    "facebook-box": 61965,
    "facebook-messenger": 61966,
    "factory": 61967,
    "fan": 61968,
    "fan-off": 63516,
    "fast-forward": 61969,
    "fast-forward-outline": 63185,
    "fax": 61970,
    "feather": 63186,
    "ferry": 61971,
    "file": 61972,
    "file-account": 63290,
    "file-chart": 61973,
    "file-check": 61974,
    "file-cloud": 61975,
    "file-delimited": 61976,
    "file-document": 61977,
    "file-document-box": 61978,
    "file-excel": 61979,
    "file-excel-box": 61980,
    "file-export": 61981,
    "file-find": 61982,
    "file-hidden": 62995,
    "file-image": 61983,
    "file-import": 61984,
    "file-lock": 61985,
    "file-multiple": 61986,
    "file-music": 61987,
    "file-outline": 61988,
    "file-pdf": 61989,
    "file-pdf-box": 61990,
    "file-percent": 63517,
    "file-plus": 63313,
    "file-powerpoint": 61991,
    "file-powerpoint-box": 61992,
    "file-presentation-box": 61993,
    "file-restore": 63088,
    "file-send": 61994,
    "file-tree": 63045,
    "file-video": 61995,
    "file-word": 61996,
    "file-word-box": 61997,
    "file-xml": 61998,
    "film": 61999,
    "filmstrip": 62000,
    "filmstrip-off": 62001,
    "filter": 62002,
    "filter-outline": 62003,
    "filter-remove": 62004,
    "filter-remove-outline": 62005,
    "filter-variant": 62006,
    "finance": 63518,
    "find-replace": 63187,
    "fingerprint": 62007,
    "fire": 62008,
    "firefox": 62009,
    "fish": 62010,
    "flag": 62011,
    "flag-checkered": 62012,
    "flag-outline": 62013,
    "flag-triangle": 62015,
    "flag-variant": 62016,
    "flag-variant-outline": 62014,
    "flash": 62017,
    "flash-auto": 62018,
    "flash-circle": 63519,
    "flash-off": 62019,
    "flash-outline": 63188,
    "flash-red-eye": 63098,
    "flashlight": 62020,
    "flashlight-off": 62021,
    "flask": 61587,
    "flask-empty": 61588,
    "flask-empty-outline": 61589,
    "flask-outline": 61590,
    "flattr": 62022,
    "flip-to-back": 62023,
    "flip-to-front": 62024,
    "floor-plan": 63520,
    "floppy": 62025,
    "flower": 62026,
    "folder": 62027,
    "folder-account": 62028,
    "folder-download": 62029,
    "folder-google-drive": 62030,
    "folder-image": 62031,
    "folder-lock": 62032,
    "folder-lock-open": 62033,
    "folder-move": 62034,
    "folder-multiple": 62035,
    "folder-multiple-image": 62036,
    "folder-multiple-outline": 62037,
    "folder-open": 63343,
    "folder-outline": 62038,
    "folder-plus": 62039,
    "folder-remove": 62040,
    "folder-star": 63132,
    "folder-upload": 62041,
    "font-awesome": 61498,
    "food": 62042,
    "food-apple": 62043,
    "food-croissant": 63431,
    "food-fork-drink": 62962,
    "food-off": 62963,
    "food-variant": 62044,
    "football": 62045,
    "football-australian": 62046,
    "football-helmet": 62047,
    "forklift": 63432,
    "format-align-bottom": 63314,
    "format-align-center": 62048,
    "format-align-justify": 62049,
    "format-align-left": 62050,
    "format-align-middle": 63315,
    "format-align-right": 62051,
    "format-align-top": 63316,
    "format-annotation-plus": 63046,
    "format-bold": 62052,
    "format-clear": 62053,
    "format-color-fill": 62054,
    "format-color-text": 63133,
    "format-float-center": 62055,
    "format-float-left": 62056,
    "format-float-none": 62057,
    "format-float-right": 62058,
    "format-font": 63189,
    "format-header-1": 62059,
    "format-header-2": 62060,
    "format-header-3": 62061,
    "format-header-4": 62062,
    "format-header-5": 62063,
    "format-header-6": 62064,
    "format-header-decrease": 62065,
    "format-header-equal": 62066,
    "format-header-increase": 62067,
    "format-header-pound": 62068,
    "format-horizontal-align-center": 63006,
    "format-horizontal-align-left": 63007,
    "format-horizontal-align-right": 63008,
    "format-indent-decrease": 62069,
    "format-indent-increase": 62070,
    "format-italic": 62071,
    "format-line-spacing": 62072,
    "format-line-style": 62920,
    "format-line-weight": 62921,
    "format-list-bulleted": 62073,
    "format-list-bulleted-type": 62074,
    "format-list-checks": 63317,
    "format-list-numbers": 62075,
    "format-page-break": 63190,
    "format-paint": 62076,
    "format-paragraph": 62077,
    "format-pilcrow": 63191,
    "format-quote-close": 62078,
    "format-quote-open": 63318,
    "format-rotate-90": 63145,
    "format-section": 63134,
    "format-size": 62079,
    "format-strikethrough": 62080,
    "format-strikethrough-variant": 62081,
    "format-subscript": 62082,
    "format-superscript": 62083,
    "format-text": 62084,
    "format-textdirection-l-to-r": 62085,
    "format-textdirection-r-to-l": 62086,
    "format-title": 62964,
    "format-underline": 62087,
    "format-vertical-align-bottom": 63009,
    "format-vertical-align-center": 63010,
    "format-vertical-align-top": 63011,
    "format-wrap-inline": 62088,
    "format-wrap-square": 62089,
    "format-wrap-tight": 62090,
    "format-wrap-top-bottom": 62091,
    "forum": 62092,
    "forum-outline": 63521,
    "forward": 62093,
    "foursquare": 62094,
    "fridge": 62095,
    "fridge-filled": 62096,
    "fridge-filled-bottom": 62097,
    "fridge-filled-top": 62098,
    "fuel": 63433,
    "fullscreen": 62099,
    "fullscreen-exit": 62100,
    "function": 62101,
    "gamepad": 62102,
    "gamepad-variant": 62103,
    "garage": 63192,
    "garage-open": 63193,
    "gas-cylinder": 63047,
    "gas-station": 62104,
    "gate": 62105,
    "gauge": 62106,
    "gavel": 62107,
    "gender-female": 62108,
    "gender-male": 62109,
    "gender-male-female": 62110,
    "gender-transgender": 62111,
    "gesture": 63434,
    "gesture-double-tap": 63291,
    "gesture-swipe-down": 63292,
    "gesture-swipe-left": 63293,
    "gesture-swipe-right": 63294,
    "gesture-swipe-up": 63295,
    "gesture-tap": 63296,
    "gesture-two-double-tap": 63297,
    "gesture-two-tap": 63298,
    "ghost": 62112,
    "gift": 62113,
    "git": 62114,
    "github-box": 62115,
    "github-circle": 62116,
    "github-face": 63194,
    "glass-flute": 62117,
    "glass-mug": 62118,
    "glass-stange": 62119,
    "glass-tulip": 62120,
    "glassdoor": 62121,
    "glasses": 62122,
    "gmail": 62123,
    "gnome": 62124,
    "golf": 63522,
    "gondola": 63109,
    "google": 62125,
    "google-analytics": 63435,
    "google-assistant": 63436,
    "google-cardboard": 62126,
    "google-chrome": 62127,
    "google-circles": 62128,
    "google-circles-communities": 62129,
    "google-circles-extended": 62130,
    "google-circles-group": 62131,
    "google-controller": 62132,
    "google-controller-off": 62133,
    "google-drive": 62134,
    "google-earth": 62135,
    "google-glass": 62136,
    "google-home": 63523,
    "google-keep": 63195,
    "google-maps": 62965,
    "google-nearby": 62137,
    "google-pages": 62138,
    "google-photos": 63196,
    "google-physical-web": 62139,
    "google-play": 62140,
    "google-plus": 62141,
    "google-plus-box": 62142,
    "google-translate": 62143,
    "google-wallet": 62144,
    "gradient": 63135,
    "grease-pencil": 63048,
    "grid": 62145,
    "grid-large": 63319,
    "grid-off": 62146,
    "group": 62147,
    "guitar-acoustic": 63344,
    "guitar-electric": 62148,
    "guitar-pick": 62149,
    "guitar-pick-outline": 62150,
    "guy-fawkes-mask": 63524,
    "hackernews": 63012,
    "hamburger": 63108,
    "hand-pointing-right": 62151,
    "hanger": 62152,
    "hangouts": 62153,
    "harddisk": 62154,
    "headphones": 62155,
    "headphones-box": 62156,
    "headphones-off": 63437,
    "headphones-settings": 62157,
    "headset": 62158,
    "headset-dock": 62159,
    "headset-off": 62160,
    "heart": 62161,
    "heart-box": 62162,
    "heart-box-outline": 62163,
    "heart-broken": 62164,
    "heart-half": 63198,
    "heart-half-full": 63197,
    "heart-half-outline": 63199,
    "heart-off": 63320,
    "heart-outline": 62165,
    "heart-pulse": 62966,
    "help": 62166,
    "help-box": 63370,
    "help-circle": 62167,
    "help-circle-outline": 63013,
    "help-network": 63220,
    "hexagon": 62168,
    "hexagon-multiple": 63200,
    "hexagon-outline": 62169,
    "high-definition": 63438,
    "highway": 62967,
    "history": 62170,
    "hololens": 62171,
    "home": 62172,
    "home-account": 63525,
    "home-assistant": 63439,
    "home-automation": 63440,
    "home-circle": 63441,
    "home-heart": 63526,
    "home-map-marker": 62968,
    "home-modern": 62173,
    "home-outline": 63136,
    "home-variant": 62174,
    "hook": 63201,
    "hook-off": 63202,
    "hops": 62175,
    "hospital": 62176,
    "hospital-building": 62177,
    "hospital-marker": 62178,
    "hot-tub": 63527,
    "hotel": 62179,
    "houzz": 62180,
    "houzz-box": 62181,
    "hulu": 63528,
    "human": 62182,
    "human-child": 62183,
    "human-female": 63049,
    "human-greeting": 63050,
    "human-handsdown": 63051,
    "human-handsup": 63052,
    "human-male": 63053,
    "human-male-female": 62184,
    "human-pregnant": 62927,
    "humble-bundle": 63299,
    "ice-cream": 63529,
    "image": 62185,
    "image-album": 62186,
    "image-area": 62187,
    "image-area-close": 62188,
    "image-broken": 62189,
    "image-broken-variant": 62190,
    "image-filter": 62191,
    "image-filter-black-white": 62192,
    "image-filter-center-focus": 62193,
    "image-filter-center-focus-weak": 62194,
    "image-filter-drama": 62195,
    "image-filter-frames": 62196,
    "image-filter-hdr": 62197,
    "image-filter-none": 62198,
    "image-filter-tilt-shift": 62199,
    "image-filter-vintage": 62200,
    "image-multiple": 62201,
    "image-off": 63530,
    "import": 62202,
    "inbox": 63110,
    "inbox-arrow-down": 62203,
    "inbox-arrow-up": 62417,
    "incognito": 62969,
    "infinity": 63203,
    "information": 62204,
    "information-outline": 62205,
    "information-variant": 63054,
    "instagram": 62206,
    "instapaper": 62207,
    "internet-explorer": 62208,
    "invert-colors": 62209,
    "itunes": 63094,
    "jeepney": 62210,
    "jira": 62211,
    "jsfiddle": 62212,
    "json": 63014,
    "karate": 63531,
    "keg": 62213,
    "kettle": 62970,
    "key": 62214,
    "key-change": 62215,
    "key-minus": 62216,
    "key-plus": 62217,
    "key-remove": 62218,
    "key-variant": 62219,
    "keyboard": 62220,
    "keyboard-backspace": 62221,
    "keyboard-caps": 62222,
    "keyboard-close": 62223,
    "keyboard-off": 62224,
    "keyboard-return": 62225,
    "keyboard-tab": 62226,
    "keyboard-variant": 62227,
    "kickstarter": 63300,
    "kodi": 62228,
    "label": 62229,
    "label-outline": 62230,
    "ladybug": 63532,
    "lambda": 63015,
    "lamp": 63156,
    "lan": 62231,
    "lan-connect": 62232,
    "lan-disconnect": 62233,
    "lan-pending": 62234,
    "language-c": 63089,
    "language-cpp": 63090,
    "language-csharp": 62235,
    "language-css3": 62236,
    "language-go": 63442,
    "language-html5": 62237,
    "language-javascript": 62238,
    "language-php": 62239,
    "language-python": 62240,
    "language-python-text": 62241,
    "language-r": 63443,
    "language-swift": 63204,
    "language-typescript": 63205,
    "laptop": 62242,
    "laptop-chromebook": 62243,
    "laptop-mac": 62244,
    "laptop-off": 63206,
    "laptop-windows": 62245,
    "lastfm": 62246,
    "lastpass": 62534,
    "launch": 62247,
    "lava-lamp": 63444,
    "layers": 62248,
    "layers-off": 62249,
    "lead-pencil": 63055,
    "leaf": 62250,
    "led-off": 62251,
    "led-on": 62252,
    "led-outline": 62253,
    "led-strip": 63445,
    "led-variant-off": 62254,
    "led-variant-on": 62255,
    "led-variant-outline": 62256,
    "library": 62257,
    "library-books": 62258,
    "library-music": 62259,
    "library-plus": 62260,
    "lightbulb": 62261,
    "lightbulb-on": 63207,
    "lightbulb-on-outline": 63208,
    "lightbulb-outline": 62262,
    "link": 62263,
    "link-off": 62264,
    "link-variant": 62265,
    "link-variant-off": 62266,
    "linkedin": 62267,
    "linkedin-box": 62268,
    "linux": 62269,
    "loading": 63345,
    "lock": 62270,
    "lock-open": 62271,
    "lock-open-outline": 62272,
    "lock-outline": 62273,
    "lock-pattern": 63209,
    "lock-plus": 62971,
    "lock-reset": 63346,
    "locker": 63446,
    "locker-multiple": 63447,
    "login": 62274,
    "login-variant": 62972,
    "logout": 62275,
    "logout-variant": 62973,
    "looks": 62276,
    "loop": 63210,
    "loupe": 62277,
    "lumx": 62278,
    "magnet": 62279,
    "magnet-on": 62280,
    "magnify": 62281,
    "magnify-minus": 62282,
    "magnify-minus-outline": 63211,
    "magnify-plus": 62283,
    "magnify-plus-outline": 63212,
    "mail-ru": 62284,
    "mailbox": 63213,
    "map": 62285,
    "map-marker": 62286,
    "map-marker-circle": 62287,
    "map-marker-minus": 63056,
    "map-marker-multiple": 62288,
    "map-marker-off": 62289,
    "map-marker-outline": 63448,
    "map-marker-plus": 63057,
    "map-marker-radius": 62290,
    "margin": 62291,
    "markdown": 62292,
    "marker": 63058,
    "marker-check": 62293,
    "martini": 62294,
    "material-ui": 62295,
    "math-compass": 62296,
    "matrix": 63016,
    "maxcdn": 62297,
    "medical-bag": 63214,
    "medium": 62298,
    "memory": 62299,
    "menu": 62300,
    "menu-down": 62301,
    "menu-down-outline": 63157,
    "menu-left": 62302,
    "menu-right": 62303,
    "menu-up": 62304,
    "menu-up-outline": 63158,
    "message": 62305,
    "message-alert": 62306,
    "message-bulleted": 63137,
    "message-bulleted-off": 63138,
    "message-draw": 62307,
    "message-image": 62308,
    "message-outline": 62309,
    "message-plus": 63059,
    "message-processing": 62310,
    "message-reply": 62311,
    "message-reply-text": 62312,
    "message-settings": 63215,
    "message-settings-variant": 63216,
    "message-text": 62313,
    "message-text-outline": 62314,
    "message-video": 62315,
    "meteor": 63017,
    "metronome": 63449,
    "metronome-tick": 63450,
    "micro-sd": 63451,
    "microphone": 62316,
    "microphone-off": 62317,
    "microphone-outline": 62318,
    "microphone-settings": 62319,
    "microphone-variant": 62320,
    "microphone-variant-off": 62321,
    "microscope": 63060,
    "microsoft": 62322,
    "minecraft": 62323,
    "minus": 62324,
    "minus-box": 62325,
    "minus-box-outline": 63217,
    "minus-circle": 62326,
    "minus-circle-outline": 62327,
    "minus-network": 62328,
    "mixcloud": 63018,
    "mixer": 63452,
    "monitor": 62329,
    "monitor-multiple": 62330,
    "more": 62331,
    "motorbike": 62332,
    "mouse": 62333,
    "mouse-off": 62334,
    "mouse-variant": 62335,
    "mouse-variant-off": 62336,
    "move-resize": 63061,
    "move-resize-variant": 63062,
    "movie": 62337,
    "movie-roll": 63453,
    "multiplication": 62338,
    "multiplication-box": 62339,
    "mushroom": 63454,
    "mushroom-outline": 63455,
    "music": 63321,
    "music-box": 62340,
    "music-box-outline": 62341,
    "music-circle": 62342,
    "music-note": 62343,
    "music-note-bluetooth": 62974,
    "music-note-bluetooth-off": 62975,
    "music-note-eighth": 62344,
    "music-note-half": 62345,
    "music-note-off": 62346,
    "music-note-quarter": 62347,
    "music-note-sixteenth": 62348,
    "music-note-whole": 62349,
    "music-off": 63322,
    "nature": 62350,
    "nature-people": 62351,
    "navigation": 62352,
    "near-me": 62925,
    "needle": 62353,
    "nest-protect": 62354,
    "nest-thermostat": 62355,
    "netflix": 63301,
    "network": 63218,
    "new-box": 62356,
    "newspaper": 62357,
    "nfc": 62358,
    "nfc-tap": 62359,
    "nfc-variant": 62360,
    "ninja": 63347,
    "nintendo-switch": 63456,
    "nodejs": 62361,
    "note": 62362,
    "note-multiple": 63159,
    "note-multiple-outline": 63160,
    "note-outline": 62363,
    "note-plus": 62364,
    "note-plus-outline": 62365,
    "note-text": 62366,
    "notebook": 63533,
    "notification-clear-all": 62367,
    "npm": 63222,
    "nuke": 63139,
    "null": 63457,
    "numeric": 62368,
    "numeric-0-box": 62369,
    "numeric-0-box-multiple-outline": 62370,
    "numeric-0-box-outline": 62371,
    "numeric-1-box": 62372,
    "numeric-1-box-multiple-outline": 62373,
    "numeric-1-box-outline": 62374,
    "numeric-2-box": 62375,
    "numeric-2-box-multiple-outline": 62376,
    "numeric-2-box-outline": 62377,
    "numeric-3-box": 62378,
    "numeric-3-box-multiple-outline": 62379,
    "numeric-3-box-outline": 62380,
    "numeric-4-box": 62381,
    "numeric-4-box-multiple-outline": 62382,
    "numeric-4-box-outline": 62383,
    "numeric-5-box": 62384,
    "numeric-5-box-multiple-outline": 62385,
    "numeric-5-box-outline": 62386,
    "numeric-6-box": 62387,
    "numeric-6-box-multiple-outline": 62388,
    "numeric-6-box-outline": 62389,
    "numeric-7-box": 62390,
    "numeric-7-box-multiple-outline": 62391,
    "numeric-7-box-outline": 62392,
    "numeric-8-box": 62393,
    "numeric-8-box-multiple-outline": 62394,
    "numeric-8-box-outline": 62395,
    "numeric-9-box": 62396,
    "numeric-9-box-multiple-outline": 62397,
    "numeric-9-box-outline": 62398,
    "numeric-9-plus-box": 62399,
    "numeric-9-plus-box-multiple-outline": 62400,
    "numeric-9-plus-box-outline": 62401,
    "nut": 63223,
    "nutrition": 62402,
    "oar": 63099,
    "octagon": 62403,
    "octagon-outline": 62404,
    "octagram": 63224,
    "octagram-outline": 63348,
    "odnoklassniki": 62405,
    "office": 62406,
    "oil": 62407,
    "oil-temperature": 62408,
    "omega": 62409,
    "onedrive": 62410,
    "onenote": 63302,
    "opacity": 62924,
    "open-in-app": 62411,
    "open-in-new": 62412,
    "openid": 62413,
    "opera": 62414,
    "orbit": 61464,
    "ornament": 62415,
    "ornament-variant": 62416,
    "owl": 62418,
    "package": 62419,
    "package-down": 62420,
    "package-up": 62421,
    "package-variant": 62422,
    "package-variant-closed": 62423,
    "page-first": 62976,
    "page-last": 62977,
    "page-layout-body": 63225,
    "page-layout-footer": 63226,
    "page-layout-header": 63227,
    "page-layout-sidebar-left": 63228,
    "page-layout-sidebar-right": 63229,
    "palette": 62424,
    "palette-advanced": 62425,
    "panda": 62426,
    "pandora": 62427,
    "panorama": 62428,
    "panorama-fisheye": 62429,
    "panorama-horizontal": 62430,
    "panorama-vertical": 62431,
    "panorama-wide-angle": 62432,
    "paper-cut-vertical": 62433,
    "paperclip": 62434,
    "parking": 62435,
    "passport": 63458,
    "pause": 62436,
    "pause-circle": 62437,
    "pause-circle-outline": 62438,
    "pause-octagon": 62439,
    "pause-octagon-outline": 62440,
    "paw": 62441,
    "paw-off": 63063,
    "pen": 62442,
    "pencil": 62443,
    "pencil-box": 62444,
    "pencil-box-outline": 62445,
    "pencil-circle": 63230,
    "pencil-circle-outline": 63349,
    "pencil-lock": 62446,
    "pencil-off": 62447,
    "pentagon": 63231,
    "pentagon-outline": 63232,
    "percent": 62448,
    "periodic-table-co2": 63459,
    "periscope": 63303,
    "pharmacy": 62449,
    "phone": 62450,
    "phone-bluetooth": 62451,
    "phone-classic": 62978,
    "phone-forward": 62452,
    "phone-hangup": 62453,
    "phone-in-talk": 62454,
    "phone-incoming": 62455,
    "phone-locked": 62456,
    "phone-log": 62457,
    "phone-minus": 63064,
    "phone-missed": 62458,
    "phone-outgoing": 62459,
    "phone-paused": 62460,
    "phone-plus": 63065,
    "phone-return": 63534,
    "phone-settings": 62461,
    "phone-voip": 62462,
    "pi": 62463,
    "pi-box": 62464,
    "piano": 63100,
    "pig": 62465,
    "pill": 62466,
    "pillar": 63233,
    "pin": 62467,
    "pin-off": 62468,
    "pine-tree": 62469,
    "pine-tree-box": 62470,
    "pinterest": 62471,
    "pinterest-box": 62472,
    "pipe": 63460,
    "pipe-disconnected": 63461,
    "pistol": 63234,
    "pizza": 62473,
    "plane-shield": 63162,
    "play": 62474,
    "play-box-outline": 62475,
    "play-circle": 62476,
    "play-circle-outline": 62477,
    "play-pause": 62478,
    "play-protected-content": 62479,
    "playlist-check": 62919,
    "playlist-minus": 62480,
    "playlist-play": 62481,
    "playlist-plus": 62482,
    "playlist-remove": 62483,
    "playstation": 62484,
    "plex": 63161,
    "plus": 62485,
    "plus-box": 62486,
    "plus-box-outline": 63235,
    "plus-circle": 62487,
    "plus-circle-multiple-outline": 62488,
    "plus-circle-outline": 62489,
    "plus-network": 62490,
    "plus-one": 62491,
    "plus-outline": 63236,
    "pocket": 62492,
    "pokeball": 62493,
    "poker-chip": 63535,
    "polaroid": 62494,
    "poll": 62495,
    "poll-box": 62496,
    "polymer": 62497,
    "pool": 62982,
    "popcorn": 62498,
    "pot": 63066,
    "pot-mix": 63067,
    "pound": 62499,
    "pound-box": 62500,
    "power": 62501,
    "power-plug": 63140,
    "power-plug-off": 63141,
    "power-settings": 62502,
    "power-socket": 62503,
    "power-socket-eu": 63462,
    "power-socket-uk": 63463,
    "power-socket-us": 63464,
    "prescription": 63237,
    "presentation": 62504,
    "presentation-play": 62505,
    "printer": 62506,
    "printer-3d": 62507,
    "printer-alert": 62508,
    "printer-settings": 63238,
    "priority-high": 62979,
    "priority-low": 62980,
    "professional-hexagon": 62509,
    "projector": 62510,
    "projector-screen": 62511,
    "publish": 63142,
    "pulse": 62512,
    "puzzle": 62513,
    "qqchat": 62981,
    "qrcode": 62514,
    "qrcode-scan": 62515,
    "quadcopter": 62516,
    "quality-high": 62517,
    "quicktime": 62518,
    "radar": 62519,
    "radiator": 62520,
    "radio": 62521,
    "radio-handheld": 62522,
    "radio-tower": 62523,
    "radioactive": 62524,
    "radiobox-blank": 62525,
    "radiobox-marked": 62526,
    "raspberrypi": 62527,
    "ray-end": 62528,
    "ray-end-arrow": 62529,
    "ray-start": 62530,
    "ray-start-arrow": 62531,
    "ray-start-end": 62532,
    "ray-vertex": 62533,
    "react": 63239,
    "read": 62535,
    "receipt": 62537,
    "record": 62538,
    "record-rec": 62539,
    "recycle": 62540,
    "reddit": 62541,
    "redo": 62542,
    "redo-variant": 62543,
    "refresh": 62544,
    "regex": 62545,
    "relative-scale": 62546,
    "reload": 62547,
    "remote": 62548,
    "rename-box": 62549,
    "reorder-horizontal": 63111,
    "reorder-vertical": 63112,
    "repeat": 62550,
    "repeat-off": 62551,
    "repeat-once": 62552,
    "replay": 62553,
    "reply": 62554,
    "reply-all": 62555,
    "reproduction": 62556,
    "resize-bottom-right": 62557,
    "responsive": 62558,
    "restart": 63240,
    "restore": 63143,
    "rewind": 62559,
    "rewind-outline": 63241,
    "rhombus": 63242,
    "rhombus-outline": 63243,
    "ribbon": 62560,
    "rice": 63465,
    "ring": 63466,
    "road": 62561,
    "road-variant": 62562,
    "robot": 63144,
    "rocket": 62563,
    "roomba": 63244,
    "rotate-3d": 62564,
    "rotate-left": 62565,
    "rotate-left-variant": 62566,
    "rotate-right": 62567,
    "rotate-right-variant": 62568,
    "rounded-corner": 62983,
    "router-wireless": 62569,
    "routes": 62570,
    "rowing": 62984,
    "rss": 62571,
    "rss-box": 62572,
    "ruler": 62573,
    "run": 63245,
    "run-fast": 62574,
    "sale": 62575,
    "sass": 63467,
    "satellite": 62576,
    "satellite-variant": 62577,
    "saxophone": 62985,
    "scale": 62578,
    "scale-balance": 62929,
    "scale-bathroom": 62579,
    "scanner": 63146,
    "school": 62580,
    "screen-rotation": 62581,
    "screen-rotation-lock": 62582,
    "screwdriver": 62583,
    "script": 62584,
    "sd": 62585,
    "seal": 62586,
    "search-web": 63246,
    "seat-flat": 62587,
    "seat-flat-angled": 62588,
    "seat-individual-suite": 62589,
    "seat-legroom-extra": 62590,
    "seat-legroom-normal": 62591,
    "seat-legroom-reduced": 62592,
    "seat-recline-extra": 62593,
    "seat-recline-normal": 62594,
    "security": 62595,
    "security-home": 63113,
    "security-network": 62596,
    "select": 62597,
    "select-all": 62598,
    "select-inverse": 62599,
    "select-off": 62600,
    "selection": 62601,
    "selection-off": 63350,
    "send": 62602,
    "send-secure": 63468,
    "serial-port": 63068,
    "server": 62603,
    "server-minus": 62604,
    "server-network": 62605,
    "server-network-off": 62606,
    "server-off": 62607,
    "server-plus": 62608,
    "server-remove": 62609,
    "server-security": 62610,
    "set-all": 63351,
    "set-center": 63352,
    "set-center-right": 63353,
    "set-left": 63354,
    "set-left-center": 63355,
    "set-left-right": 63356,
    "set-none": 63357,
    "set-right": 63358,
    "settings": 62611,
    "settings-box": 62612,
    "shape": 63536,
    "shape-circle-plus": 63069,
    "shape-outline": 63537,
    "shape-plus": 62613,
    "shape-polygon-plus": 63070,
    "shape-rectangle-plus": 63071,
    "shape-square-plus": 63072,
    "share": 62614,
    "share-variant": 62615,
    "shield": 62616,
    "shield-half-full": 63359,
    "shield-outline": 62617,
    "ship-wheel": 63538,
    "shopping": 62618,
    "shopping-music": 62619,
    "shovel": 63247,
    "shovel-off": 63248,
    "shredder": 62620,
    "shuffle": 62621,
    "shuffle-disabled": 62622,
    "shuffle-variant": 62623,
    "sigma": 62624,
    "sigma-lower": 63019,
    "sign-caution": 62625,
    "sign-direction": 63360,
    "sign-text": 63361,
    "signal": 62626,
    "signal-2g": 63249,
    "signal-3g": 63250,
    "signal-4g": 63251,
    "signal-hspa": 63252,
    "signal-hspa-plus": 63253,
    "signal-off": 63362,
    "signal-variant": 62986,
    "silverware": 62627,
    "silverware-fork": 62628,
    "silverware-spoon": 62629,
    "silverware-variant": 62630,
    "sim": 62631,
    "sim-alert": 62632,
    "sim-off": 62633,
    "sitemap": 62634,
    "skip-backward": 62635,
    "skip-forward": 62636,
    "skip-next": 62637,
    "skip-next-circle": 63073,
    "skip-next-circle-outline": 63074,
    "skip-previous": 62638,
    "skip-previous-circle": 63075,
    "skip-previous-circle-outline": 63076,
    "skull": 63115,
    "skype": 62639,
    "skype-business": 62640,
    "slack": 62641,
    "sleep": 62642,
    "sleep-off": 62643,
    "smoking": 62644,
    "smoking-off": 62645,
    "snapchat": 62646,
    "snowflake": 63254,
    "snowman": 62647,
    "soccer": 62648,
    "soccer-field": 63539,
    "sofa": 62649,
    "solid": 63116,
    "sort": 62650,
    "sort-alphabetical": 62651,
    "sort-ascending": 62652,
    "sort-descending": 62653,
    "sort-numeric": 62654,
    "sort-variant": 62655,
    "soundcloud": 62656,
    "source-branch": 63020,
    "source-commit": 63255,
    "source-commit-end": 63256,
    "source-commit-end-local": 63257,
    "source-commit-local": 63258,
    "source-commit-next-local": 63259,
    "source-commit-start": 63260,
    "source-commit-start-next-local": 63261,
    "source-fork": 62657,
    "source-merge": 63021,
    "source-pull": 62658,
    "soy-sauce": 63469,
    "speaker": 62659,
    "speaker-off": 62660,
    "speaker-wireless": 63262,
    "speedometer": 62661,
    "spellcheck": 62662,
    "spotify": 62663,
    "spotlight": 62664,
    "spotlight-beam": 62665,
    "spray": 63077,
    "square": 63331,
    "square-inc": 62666,
    "square-inc-cash": 62667,
    "square-outline": 63330,
    "square-root": 63363,
    "stack-overflow": 62668,
    "stackexchange": 62987,
    "stadium": 63263,
    "stairs": 62669,
    "standard-definition": 63470,
    "star": 62670,
    "star-circle": 62671,
    "star-half": 62672,
    "star-off": 62673,
    "star-outline": 62674,
    "steam": 62675,
    "steering": 62676,
    "step-backward": 62677,
    "step-backward-2": 62678,
    "step-forward": 62679,
    "step-forward-2": 62680,
    "stethoscope": 62681,
    "sticker": 62928,
    "sticker-emoji": 63364,
    "stocking": 62682,
    "stop": 62683,
    "stop-circle": 63078,
    "stop-circle-outline": 63079,
    "store": 62684,
    "store-24-hour": 62685,
    "stove": 62686,
    "subdirectory-arrow-left": 62988,
    "subdirectory-arrow-right": 62989,
    "subway": 63147,
    "subway-variant": 62687,
    "summit": 63365,
    "sunglasses": 62688,
    "surround-sound": 62917,
    "surround-sound-2-0": 63471,
    "surround-sound-3-1": 63472,
    "surround-sound-5-1": 63473,
    "surround-sound-7-1": 63474,
    "svg": 63264,
    "swap-horizontal": 62689,
    "swap-vertical": 62690,
    "swim": 62691,
    "switch": 62692,
    "sword": 62693,
    "sword-cross": 63366,
    "sync": 62694,
    "sync-alert": 62695,
    "sync-off": 62696,
    "tab": 62697,
    "tab-plus": 63323,
    "tab-unselected": 62698,
    "table": 62699,
    "table-column": 63540,
    "table-column-plus-after": 62700,
    "table-column-plus-before": 62701,
    "table-column-remove": 62702,
    "table-column-width": 62703,
    "table-edit": 62704,
    "table-large": 62705,
    "table-of-contents": 63541,
    "table-row": 63542,
    "table-row-height": 62706,
    "table-row-plus-after": 62707,
    "table-row-plus-before": 62708,
    "table-row-remove": 62709,
    "table-settings": 63543,
    "tablet": 62710,
    "tablet-android": 62711,
    "tablet-ipad": 62712,
    "taco": 63329,
    "tag": 62713,
    "tag-faces": 62714,
    "tag-heart": 63114,
    "tag-multiple": 62715,
    "tag-outline": 62716,
    "tag-plus": 63265,
    "tag-remove": 63266,
    "tag-text-outline": 62717,
    "target": 62718,
    "taxi": 62719,
    "teamviewer": 62720,
    "telegram": 62721,
    "television": 62722,
    "television-box": 63544,
    "television-classic": 63475,
    "television-classic-off": 63545,
    "television-guide": 62723,
    "television-off": 63546,
    "temperature-celsius": 62724,
    "temperature-fahrenheit": 62725,
    "temperature-kelvin": 62726,
    "tennis": 62727,
    "tent": 62728,
    "terrain": 62729,
    "test-tube": 63080,
    "text-shadow": 63081,
    "text-to-speech": 62730,
    "text-to-speech-off": 62731,
    "textbox": 62990,
    "textbox-password": 63476,
    "texture": 62732,
    "theater": 62733,
    "theme-light-dark": 62734,
    "thermometer": 62735,
    "thermometer-lines": 62736,
    "thought-bubble": 63477,
    "thought-bubble-outline": 63478,
    "thumb-down": 62737,
    "thumb-down-outline": 62738,
    "thumb-up": 62739,
    "thumb-up-outline": 62740,
    "thumbs-up-down": 62741,
    "ticket": 62742,
    "ticket-account": 62743,
    "ticket-confirmation": 62744,
    "ticket-percent": 63267,
    "tie": 62745,
    "tilde": 63268,
    "timelapse": 62746,
    "timer": 62747,
    "timer-10": 62748,
    "timer-3": 62749,
    "timer-off": 62750,
    "timer-sand": 62751,
    "timer-sand-empty": 63148,
    "timer-sand-full": 63371,
    "timetable": 62752,
    "toggle-switch": 62753,
    "toggle-switch-off": 62754,
    "tooltip": 62755,
    "tooltip-edit": 62756,
    "tooltip-image": 62757,
    "tooltip-outline": 62758,
    "tooltip-outline-plus": 62759,
    "tooltip-text": 62760,
    "tooth": 62761,
    "tor": 62762,
    "tower-beach": 63104,
    "tower-fire": 63105,
    "towing": 63547,
    "trackpad": 63479,
    "traffic-light": 62763,
    "train": 62764,
    "tram": 62765,
    "transcribe": 62766,
    "transcribe-close": 62767,
    "transfer": 62768,
    "transit-transfer": 63149,
    "translate": 62922,
    "treasure-chest": 63269,
    "tree": 62769,
    "trello": 62770,
    "trending-down": 62771,
    "trending-neutral": 62772,
    "trending-up": 62773,
    "triangle": 62774,
    "triangle-outline": 62775,
    "trophy": 62776,
    "trophy-award": 62777,
    "trophy-outline": 62778,
    "trophy-variant": 62779,
    "trophy-variant-outline": 62780,
    "truck": 62781,
    "truck-delivery": 62782,
    "truck-fast": 63367,
    "truck-trailer": 63270,
    "tshirt-crew": 62783,
    "tshirt-v": 62784,
    "tumblr": 62785,
    "tumblr-reblog": 62786,
    "tune": 63022,
    "tune-vertical": 63082,
    "twitch": 62787,
    "twitter": 62788,
    "twitter-box": 62789,
    "twitter-circle": 62790,
    "twitter-retweet": 62791,
    "uber": 63304,
    "ubuntu": 62792,
    "ultra-high-definition": 63480,
    "umbraco": 62793,
    "umbrella": 62794,
    "umbrella-outline": 62795,
    "undo": 62796,
    "undo-variant": 62797,
    "unfold-less-horizontal": 62798,
    "unfold-less-vertical": 63327,
    "unfold-more-horizontal": 62799,
    "unfold-more-vertical": 63328,
    "ungroup": 62800,
    "unity": 63150,
    "untappd": 62801,
    "update": 63151,
    "upload": 62802,
    "upload-multiple": 63548,
    "upload-network": 63221,
    "usb": 62803,
    "van-passenger": 63481,
    "van-utility": 63482,
    "vanish": 63483,
    "vector-arrange-above": 62804,
    "vector-arrange-below": 62805,
    "vector-circle": 62806,
    "vector-circle-variant": 62807,
    "vector-combine": 62808,
    "vector-curve": 62809,
    "vector-difference": 62810,
    "vector-difference-ab": 62811,
    "vector-difference-ba": 62812,
    "vector-intersection": 62813,
    "vector-line": 62814,
    "vector-point": 62815,
    "vector-polygon": 62816,
    "vector-polyline": 62817,
    "vector-radius": 63305,
    "vector-rectangle": 62918,
    "vector-selection": 62818,
    "vector-square": 61441,
    "vector-triangle": 62819,
    "vector-union": 62820,
    "venmo": 62840,
    "verified": 62821,
    "vibrate": 62822,
    "video": 62823,
    "video-3d": 63484,
    "video-4k-box": 63549,
    "video-input-antenna": 63550,
    "video-input-component": 63551,
    "video-input-hdmi": 63552,
    "video-input-svideo": 63553,
    "video-off": 62824,
    "video-switch": 62825,
    "view-agenda": 62826,
    "view-array": 62827,
    "view-carousel": 62828,
    "view-column": 62829,
    "view-dashboard": 62830,
    "view-dashboard-variant": 63554,
    "view-day": 62831,
    "view-grid": 62832,
    "view-headline": 62833,
    "view-list": 62834,
    "view-module": 62835,
    "view-parallel": 63271,
    "view-quilt": 62836,
    "view-sequential": 63272,
    "view-stream": 62837,
    "view-week": 62838,
    "vimeo": 62839,
    "violin": 62991,
    "visualstudio": 62992,
    "vk": 62841,
    "vk-box": 62842,
    "vk-circle": 62843,
    "vlc": 62844,
    "voice": 62923,
    "voicemail": 62845,
    "volume-high": 62846,
    "volume-low": 62847,
    "volume-medium": 62848,
    "volume-minus": 63325,
    "volume-mute": 63326,
    "volume-off": 62849,
    "volume-plus": 63324,
    "vpn": 62850,
    "vuejs": 63555,
    "walk": 62851,
    "wall": 63485,
    "wallet": 62852,
    "wallet-giftcard": 62853,
    "wallet-membership": 62854,
    "wallet-travel": 62855,
    "wan": 62856,
    "washing-machine": 63273,
    "watch": 62857,
    "watch-export": 62858,
    "watch-import": 62859,
    "watch-vibrate": 63152,
    "water": 62860,
    "water-off": 62861,
    "water-percent": 62862,
    "water-pump": 62863,
    "watermark": 62994,
    "waves": 63372,
    "weather-cloudy": 62864,
    "weather-fog": 62865,
    "weather-hail": 62866,
    "weather-lightning": 62867,
    "weather-lightning-rainy": 63101,
    "weather-night": 62868,
    "weather-partlycloudy": 62869,
    "weather-pouring": 62870,
    "weather-rainy": 62871,
    "weather-snowy": 62872,
    "weather-snowy-rainy": 63102,
    "weather-sunny": 62873,
    "weather-sunset": 62874,
    "weather-sunset-down": 62875,
    "weather-sunset-up": 62876,
    "weather-windy": 62877,
    "weather-windy-variant": 62878,
    "web": 62879,
    "webcam": 62880,
    "webhook": 63023,
    "webpack": 63274,
    "wechat": 62993,
    "weight": 62881,
    "weight-kilogram": 62882,
    "whatsapp": 62883,
    "wheelchair-accessibility": 62884,
    "white-balance-auto": 62885,
    "white-balance-incandescent": 62886,
    "white-balance-iridescent": 62887,
    "white-balance-sunny": 62888,
    "widgets": 63275,
    "wifi": 62889,
    "wifi-off": 62890,
    "wii": 62891,
    "wiiu": 63276,
    "wikipedia": 62892,
    "window-close": 62893,
    "window-closed": 62894,
    "window-maximize": 62895,
    "window-minimize": 62896,
    "window-open": 62897,
    "window-restore": 62898,
    "windows": 62899,
    "wordpress": 62900,
    "worker": 62901,
    "wrap": 62902,
    "wrench": 62903,
    "wunderlist": 62904,
    "xamarin": 63556,
    "xamarin-outline": 63557,
    "xaml": 63091,
    "xbox": 62905,
    "xbox-controller": 62906,
    "xbox-controller-battery-alert": 63306,
    "xbox-controller-battery-empty": 63307,
    "xbox-controller-battery-full": 63308,
    "xbox-controller-battery-low": 63309,
    "xbox-controller-battery-medium": 63310,
    "xbox-controller-battery-unknown": 63311,
    "xbox-controller-off": 62907,
    "xda": 62908,
    "xing": 62909,
    "xing-box": 62910,
    "xing-circle": 62911,
    "xml": 62912,
    "xmpp": 63486,
    "yammer": 63368,
    "yeast": 62913,
    "yelp": 62914,
    "yin-yang": 63103,
    "youtube-creator-studio": 63558,
    "youtube-gaming": 63559,
    "youtube-play": 62915,
    "youtube-tv": 62536,
    "zip-box": 62916,
    "blank": 63116
  };
},691,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0]).registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
		"scales": [1],
		"hash": "1eccbc4c41d49fd81840aef3eaabe862",
		"name": "MaterialCommunityIcons",
		"type": "ttf",
		"fileHashes": ["1eccbc4c41d49fd81840aef3eaabe862"]
	});
},692,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _MaterialIcons = _require(_dependencyMap[0]);

  var _MaterialIcons2 = babelHelpers.interopRequireDefault(_MaterialIcons);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_MaterialIcons2.default, 'material', _require(_dependencyMap[2]));
},693,[694,511,695]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "3d-rotation": 59469,
    "ac-unit": 60219,
    "access-alarm": 57744,
    "access-alarms": 57745,
    "access-time": 57746,
    "accessibility": 59470,
    "accessible": 59668,
    "account-balance": 59471,
    "account-balance-wallet": 59472,
    "account-box": 59473,
    "account-circle": 59475,
    "adb": 58894,
    "add": 57669,
    "add-a-photo": 58425,
    "add-alarm": 57747,
    "add-alert": 57347,
    "add-box": 57670,
    "add-circle": 57671,
    "add-circle-outline": 57672,
    "add-location": 58727,
    "add-shopping-cart": 59476,
    "add-to-photos": 58269,
    "add-to-queue": 57436,
    "adjust": 58270,
    "airline-seat-flat": 58928,
    "airline-seat-flat-angled": 58929,
    "airline-seat-individual-suite": 58930,
    "airline-seat-legroom-extra": 58931,
    "airline-seat-legroom-normal": 58932,
    "airline-seat-legroom-reduced": 58933,
    "airline-seat-recline-extra": 58934,
    "airline-seat-recline-normal": 58935,
    "airplanemode-active": 57749,
    "airplanemode-inactive": 57748,
    "airplay": 57429,
    "airport-shuttle": 60220,
    "alarm": 59477,
    "alarm-add": 59478,
    "alarm-off": 59479,
    "alarm-on": 59480,
    "album": 57369,
    "all-inclusive": 60221,
    "all-out": 59659,
    "android": 59481,
    "announcement": 59482,
    "apps": 58819,
    "archive": 57673,
    "arrow-back": 58820,
    "arrow-downward": 58843,
    "arrow-drop-down": 58821,
    "arrow-drop-down-circle": 58822,
    "arrow-drop-up": 58823,
    "arrow-forward": 58824,
    "arrow-upward": 58840,
    "art-track": 57440,
    "aspect-ratio": 59483,
    "assessment": 59484,
    "assignment": 59485,
    "assignment-ind": 59486,
    "assignment-late": 59487,
    "assignment-return": 59488,
    "assignment-returned": 59489,
    "assignment-turned-in": 59490,
    "assistant": 58271,
    "assistant-photo": 58272,
    "attach-file": 57894,
    "attach-money": 57895,
    "attachment": 58044,
    "audiotrack": 58273,
    "autorenew": 59491,
    "av-timer": 57371,
    "backspace": 57674,
    "backup": 59492,
    "battery-alert": 57756,
    "battery-charging-full": 57763,
    "battery-full": 57764,
    "battery-std": 57765,
    "battery-unknown": 57766,
    "beach-access": 60222,
    "beenhere": 58669,
    "block": 57675,
    "bluetooth": 57767,
    "bluetooth-audio": 58895,
    "bluetooth-connected": 57768,
    "bluetooth-disabled": 57769,
    "bluetooth-searching": 57770,
    "blur-circular": 58274,
    "blur-linear": 58275,
    "blur-off": 58276,
    "blur-on": 58277,
    "book": 59493,
    "bookmark": 59494,
    "bookmark-border": 59495,
    "border-all": 57896,
    "border-bottom": 57897,
    "border-clear": 57898,
    "border-color": 57899,
    "border-horizontal": 57900,
    "border-inner": 57901,
    "border-left": 57902,
    "border-outer": 57903,
    "border-right": 57904,
    "border-style": 57905,
    "border-top": 57906,
    "border-vertical": 57907,
    "branding-watermark": 57451,
    "brightness-1": 58278,
    "brightness-2": 58279,
    "brightness-3": 58280,
    "brightness-4": 58281,
    "brightness-5": 58282,
    "brightness-6": 58283,
    "brightness-7": 58284,
    "brightness-auto": 57771,
    "brightness-high": 57772,
    "brightness-low": 57773,
    "brightness-medium": 57774,
    "broken-image": 58285,
    "brush": 58286,
    "bubble-chart": 59101,
    "bug-report": 59496,
    "build": 59497,
    "burst-mode": 58428,
    "business": 57519,
    "business-center": 60223,
    "cached": 59498,
    "cake": 59369,
    "call": 57520,
    "call-end": 57521,
    "call-made": 57522,
    "call-merge": 57523,
    "call-missed": 57524,
    "call-missed-outgoing": 57572,
    "call-received": 57525,
    "call-split": 57526,
    "call-to-action": 57452,
    "camera": 58287,
    "camera-alt": 58288,
    "camera-enhance": 59644,
    "camera-front": 58289,
    "camera-rear": 58290,
    "camera-roll": 58291,
    "cancel": 58825,
    "card-giftcard": 59638,
    "card-membership": 59639,
    "card-travel": 59640,
    "casino": 60224,
    "cast": 58119,
    "cast-connected": 58120,
    "center-focus-strong": 58292,
    "center-focus-weak": 58293,
    "change-history": 59499,
    "chat": 57527,
    "chat-bubble": 57546,
    "chat-bubble-outline": 57547,
    "check": 58826,
    "check-box": 59444,
    "check-box-outline-blank": 59445,
    "check-circle": 59500,
    "chevron-left": 58827,
    "chevron-right": 58828,
    "child-care": 60225,
    "child-friendly": 60226,
    "chrome-reader-mode": 59501,
    "class": 59502,
    "clear": 57676,
    "clear-all": 57528,
    "close": 58829,
    "closed-caption": 57372,
    "cloud": 58045,
    "cloud-circle": 58046,
    "cloud-done": 58047,
    "cloud-download": 58048,
    "cloud-off": 58049,
    "cloud-queue": 58050,
    "cloud-upload": 58051,
    "code": 59503,
    "collections": 58294,
    "collections-bookmark": 58417,
    "color-lens": 58295,
    "colorize": 58296,
    "comment": 57529,
    "compare": 58297,
    "compare-arrows": 59669,
    "computer": 58122,
    "confirmation-number": 58936,
    "contact-mail": 57552,
    "contact-phone": 57551,
    "contacts": 57530,
    "content-copy": 57677,
    "content-cut": 57678,
    "content-paste": 57679,
    "control-point": 58298,
    "control-point-duplicate": 58299,
    "copyright": 59660,
    "create": 57680,
    "create-new-folder": 58060,
    "credit-card": 59504,
    "crop": 58302,
    "crop-16-9": 58300,
    "crop-3-2": 58301,
    "crop-5-4": 58303,
    "crop-7-5": 58304,
    "crop-din": 58305,
    "crop-free": 58306,
    "crop-landscape": 58307,
    "crop-original": 58308,
    "crop-portrait": 58309,
    "crop-rotate": 58423,
    "crop-square": 58310,
    "dashboard": 59505,
    "data-usage": 57775,
    "date-range": 59670,
    "dehaze": 58311,
    "delete": 59506,
    "delete-forever": 59691,
    "delete-sweep": 57708,
    "description": 59507,
    "desktop-mac": 58123,
    "desktop-windows": 58124,
    "details": 58312,
    "developer-board": 58125,
    "developer-mode": 57776,
    "device-hub": 58165,
    "devices": 57777,
    "devices-other": 58167,
    "dialer-sip": 57531,
    "dialpad": 57532,
    "directions": 58670,
    "directions-bike": 58671,
    "directions-boat": 58674,
    "directions-bus": 58672,
    "directions-car": 58673,
    "directions-railway": 58676,
    "directions-run": 58726,
    "directions-subway": 58675,
    "directions-transit": 58677,
    "directions-walk": 58678,
    "disc-full": 58896,
    "dns": 59509,
    "do-not-disturb": 58898,
    "do-not-disturb-alt": 58897,
    "do-not-disturb-off": 58947,
    "do-not-disturb-on": 58948,
    "dock": 58126,
    "domain": 59374,
    "done": 59510,
    "done-all": 59511,
    "donut-large": 59671,
    "donut-small": 59672,
    "drafts": 57681,
    "drag-handle": 57949,
    "drive-eta": 58899,
    "dvr": 57778,
    "edit": 58313,
    "edit-location": 58728,
    "eject": 59643,
    "email": 57534,
    "enhanced-encryption": 58943,
    "equalizer": 57373,
    "error": 57344,
    "error-outline": 57345,
    "euro-symbol": 59686,
    "ev-station": 58733,
    "event": 59512,
    "event-available": 58900,
    "event-busy": 58901,
    "event-note": 58902,
    "event-seat": 59651,
    "exit-to-app": 59513,
    "expand-less": 58830,
    "expand-more": 58831,
    "explicit": 57374,
    "explore": 59514,
    "exposure": 58314,
    "exposure-neg-1": 58315,
    "exposure-neg-2": 58316,
    "exposure-plus-1": 58317,
    "exposure-plus-2": 58318,
    "exposure-zero": 58319,
    "extension": 59515,
    "face": 59516,
    "fast-forward": 57375,
    "fast-rewind": 57376,
    "favorite": 59517,
    "favorite-border": 59518,
    "featured-play-list": 57453,
    "featured-video": 57454,
    "feedback": 59519,
    "fiber-dvr": 57437,
    "fiber-manual-record": 57441,
    "fiber-new": 57438,
    "fiber-pin": 57450,
    "fiber-smart-record": 57442,
    "file-download": 58052,
    "file-upload": 58054,
    "filter": 58323,
    "filter-1": 58320,
    "filter-2": 58321,
    "filter-3": 58322,
    "filter-4": 58324,
    "filter-5": 58325,
    "filter-6": 58326,
    "filter-7": 58327,
    "filter-8": 58328,
    "filter-9": 58329,
    "filter-9-plus": 58330,
    "filter-b-and-w": 58331,
    "filter-center-focus": 58332,
    "filter-drama": 58333,
    "filter-frames": 58334,
    "filter-hdr": 58335,
    "filter-list": 57682,
    "filter-none": 58336,
    "filter-tilt-shift": 58338,
    "filter-vintage": 58339,
    "find-in-page": 59520,
    "find-replace": 59521,
    "fingerprint": 59661,
    "first-page": 58844,
    "fitness-center": 60227,
    "flag": 57683,
    "flare": 58340,
    "flash-auto": 58341,
    "flash-off": 58342,
    "flash-on": 58343,
    "flight": 58681,
    "flight-land": 59652,
    "flight-takeoff": 59653,
    "flip": 58344,
    "flip-to-back": 59522,
    "flip-to-front": 59523,
    "folder": 58055,
    "folder-open": 58056,
    "folder-shared": 58057,
    "folder-special": 58903,
    "font-download": 57703,
    "format-align-center": 57908,
    "format-align-justify": 57909,
    "format-align-left": 57910,
    "format-align-right": 57911,
    "format-bold": 57912,
    "format-clear": 57913,
    "format-color-fill": 57914,
    "format-color-reset": 57915,
    "format-color-text": 57916,
    "format-indent-decrease": 57917,
    "format-indent-increase": 57918,
    "format-italic": 57919,
    "format-line-spacing": 57920,
    "format-list-bulleted": 57921,
    "format-list-numbered": 57922,
    "format-paint": 57923,
    "format-quote": 57924,
    "format-shapes": 57950,
    "format-size": 57925,
    "format-strikethrough": 57926,
    "format-textdirection-l-to-r": 57927,
    "format-textdirection-r-to-l": 57928,
    "format-underlined": 57929,
    "forum": 57535,
    "forward": 57684,
    "forward-10": 57430,
    "forward-30": 57431,
    "forward-5": 57432,
    "free-breakfast": 60228,
    "fullscreen": 58832,
    "fullscreen-exit": 58833,
    "functions": 57930,
    "g-translate": 59687,
    "gamepad": 58127,
    "games": 57377,
    "gavel": 59662,
    "gesture": 57685,
    "get-app": 59524,
    "gif": 59656,
    "golf-course": 60229,
    "gps-fixed": 57779,
    "gps-not-fixed": 57780,
    "gps-off": 57781,
    "grade": 59525,
    "gradient": 58345,
    "grain": 58346,
    "graphic-eq": 57784,
    "grid-off": 58347,
    "grid-on": 58348,
    "group": 59375,
    "group-add": 59376,
    "group-work": 59526,
    "hd": 57426,
    "hdr-off": 58349,
    "hdr-on": 58350,
    "hdr-strong": 58353,
    "hdr-weak": 58354,
    "headset": 58128,
    "headset-mic": 58129,
    "healing": 58355,
    "hearing": 57379,
    "help": 59527,
    "help-outline": 59645,
    "high-quality": 57380,
    "highlight": 57951,
    "highlight-off": 59528,
    "history": 59529,
    "home": 59530,
    "hot-tub": 60230,
    "hotel": 58682,
    "hourglass-empty": 59531,
    "hourglass-full": 59532,
    "http": 59650,
    "https": 59533,
    "image": 58356,
    "image-aspect-ratio": 58357,
    "import-contacts": 57568,
    "import-export": 57539,
    "important-devices": 59666,
    "inbox": 57686,
    "indeterminate-check-box": 59657,
    "info": 59534,
    "info-outline": 59535,
    "input": 59536,
    "insert-chart": 57931,
    "insert-comment": 57932,
    "insert-drive-file": 57933,
    "insert-emoticon": 57934,
    "insert-invitation": 57935,
    "insert-link": 57936,
    "insert-photo": 57937,
    "invert-colors": 59537,
    "invert-colors-off": 57540,
    "iso": 58358,
    "keyboard": 58130,
    "keyboard-arrow-down": 58131,
    "keyboard-arrow-left": 58132,
    "keyboard-arrow-right": 58133,
    "keyboard-arrow-up": 58134,
    "keyboard-backspace": 58135,
    "keyboard-capslock": 58136,
    "keyboard-hide": 58138,
    "keyboard-return": 58139,
    "keyboard-tab": 58140,
    "keyboard-voice": 58141,
    "kitchen": 60231,
    "label": 59538,
    "label-outline": 59539,
    "landscape": 58359,
    "language": 59540,
    "laptop": 58142,
    "laptop-chromebook": 58143,
    "laptop-mac": 58144,
    "laptop-windows": 58145,
    "last-page": 58845,
    "launch": 59541,
    "layers": 58683,
    "layers-clear": 58684,
    "leak-add": 58360,
    "leak-remove": 58361,
    "lens": 58362,
    "library-add": 57390,
    "library-books": 57391,
    "library-music": 57392,
    "lightbulb-outline": 59663,
    "line-style": 59673,
    "line-weight": 59674,
    "linear-scale": 57952,
    "link": 57687,
    "linked-camera": 58424,
    "list": 59542,
    "live-help": 57542,
    "live-tv": 58937,
    "local-activity": 58687,
    "local-airport": 58685,
    "local-atm": 58686,
    "local-bar": 58688,
    "local-cafe": 58689,
    "local-car-wash": 58690,
    "local-convenience-store": 58691,
    "local-dining": 58710,
    "local-drink": 58692,
    "local-florist": 58693,
    "local-gas-station": 58694,
    "local-grocery-store": 58695,
    "local-hospital": 58696,
    "local-hotel": 58697,
    "local-laundry-service": 58698,
    "local-library": 58699,
    "local-mall": 58700,
    "local-movies": 58701,
    "local-offer": 58702,
    "local-parking": 58703,
    "local-pharmacy": 58704,
    "local-phone": 58705,
    "local-pizza": 58706,
    "local-play": 58707,
    "local-post-office": 58708,
    "local-printshop": 58709,
    "local-see": 58711,
    "local-shipping": 58712,
    "local-taxi": 58713,
    "location-city": 59377,
    "location-disabled": 57782,
    "location-off": 57543,
    "location-on": 57544,
    "location-searching": 57783,
    "lock": 59543,
    "lock-open": 59544,
    "lock-outline": 59545,
    "looks": 58364,
    "looks-3": 58363,
    "looks-4": 58365,
    "looks-5": 58366,
    "looks-6": 58367,
    "looks-one": 58368,
    "looks-two": 58369,
    "loop": 57384,
    "loupe": 58370,
    "low-priority": 57709,
    "loyalty": 59546,
    "mail": 57688,
    "mail-outline": 57569,
    "map": 58715,
    "markunread": 57689,
    "markunread-mailbox": 59547,
    "memory": 58146,
    "menu": 58834,
    "merge-type": 57938,
    "message": 57545,
    "mic": 57385,
    "mic-none": 57386,
    "mic-off": 57387,
    "mms": 58904,
    "mode-comment": 57939,
    "mode-edit": 57940,
    "monetization-on": 57955,
    "money-off": 57948,
    "monochrome-photos": 58371,
    "mood": 59378,
    "mood-bad": 59379,
    "more": 58905,
    "more-horiz": 58835,
    "more-vert": 58836,
    "motorcycle": 59675,
    "mouse": 58147,
    "move-to-inbox": 57704,
    "movie": 57388,
    "movie-creation": 58372,
    "movie-filter": 58426,
    "multiline-chart": 59103,
    "music-note": 58373,
    "music-video": 57443,
    "my-location": 58716,
    "nature": 58374,
    "nature-people": 58375,
    "navigate-before": 58376,
    "navigate-next": 58377,
    "navigation": 58717,
    "near-me": 58729,
    "network-cell": 57785,
    "network-check": 58944,
    "network-locked": 58906,
    "network-wifi": 57786,
    "new-releases": 57393,
    "next-week": 57706,
    "nfc": 57787,
    "no-encryption": 58945,
    "no-sim": 57548,
    "not-interested": 57395,
    "note": 57455,
    "note-add": 59548,
    "notifications": 59380,
    "notifications-active": 59383,
    "notifications-none": 59381,
    "notifications-off": 59382,
    "notifications-paused": 59384,
    "offline-pin": 59658,
    "ondemand-video": 58938,
    "opacity": 59676,
    "open-in-browser": 59549,
    "open-in-new": 59550,
    "open-with": 59551,
    "pages": 59385,
    "pageview": 59552,
    "palette": 58378,
    "pan-tool": 59685,
    "panorama": 58379,
    "panorama-fish-eye": 58380,
    "panorama-horizontal": 58381,
    "panorama-vertical": 58382,
    "panorama-wide-angle": 58383,
    "party-mode": 59386,
    "pause": 57396,
    "pause-circle-filled": 57397,
    "pause-circle-outline": 57398,
    "payment": 59553,
    "people": 59387,
    "people-outline": 59388,
    "perm-camera-mic": 59554,
    "perm-contact-calendar": 59555,
    "perm-data-setting": 59556,
    "perm-device-information": 59557,
    "perm-identity": 59558,
    "perm-media": 59559,
    "perm-phone-msg": 59560,
    "perm-scan-wifi": 59561,
    "person": 59389,
    "person-add": 59390,
    "person-outline": 59391,
    "person-pin": 58714,
    "person-pin-circle": 58730,
    "personal-video": 58939,
    "pets": 59677,
    "phone": 57549,
    "phone-android": 58148,
    "phone-bluetooth-speaker": 58907,
    "phone-forwarded": 58908,
    "phone-in-talk": 58909,
    "phone-iphone": 58149,
    "phone-locked": 58910,
    "phone-missed": 58911,
    "phone-paused": 58912,
    "phonelink": 58150,
    "phonelink-erase": 57563,
    "phonelink-lock": 57564,
    "phonelink-off": 58151,
    "phonelink-ring": 57565,
    "phonelink-setup": 57566,
    "photo": 58384,
    "photo-album": 58385,
    "photo-camera": 58386,
    "photo-filter": 58427,
    "photo-library": 58387,
    "photo-size-select-actual": 58418,
    "photo-size-select-large": 58419,
    "photo-size-select-small": 58420,
    "picture-as-pdf": 58389,
    "picture-in-picture": 59562,
    "picture-in-picture-alt": 59665,
    "pie-chart": 59076,
    "pie-chart-outlined": 59077,
    "pin-drop": 58718,
    "place": 58719,
    "play-arrow": 57399,
    "play-circle-filled": 57400,
    "play-circle-outline": 57401,
    "play-for-work": 59654,
    "playlist-add": 57403,
    "playlist-add-check": 57445,
    "playlist-play": 57439,
    "plus-one": 59392,
    "poll": 59393,
    "polymer": 59563,
    "pool": 60232,
    "portable-wifi-off": 57550,
    "portrait": 58390,
    "power": 58940,
    "power-input": 58166,
    "power-settings-new": 59564,
    "pregnant-woman": 59678,
    "present-to-all": 57567,
    "print": 59565,
    "priority-high": 58949,
    "public": 59403,
    "publish": 57941,
    "query-builder": 59566,
    "question-answer": 59567,
    "queue": 57404,
    "queue-music": 57405,
    "queue-play-next": 57446,
    "radio": 57406,
    "radio-button-checked": 59447,
    "radio-button-unchecked": 59446,
    "rate-review": 58720,
    "receipt": 59568,
    "recent-actors": 57407,
    "record-voice-over": 59679,
    "redeem": 59569,
    "redo": 57690,
    "refresh": 58837,
    "remove": 57691,
    "remove-circle": 57692,
    "remove-circle-outline": 57693,
    "remove-from-queue": 57447,
    "remove-red-eye": 58391,
    "remove-shopping-cart": 59688,
    "reorder": 59646,
    "repeat": 57408,
    "repeat-one": 57409,
    "replay": 57410,
    "replay-10": 57433,
    "replay-30": 57434,
    "replay-5": 57435,
    "reply": 57694,
    "reply-all": 57695,
    "report": 57696,
    "report-problem": 59570,
    "restaurant": 58732,
    "restaurant-menu": 58721,
    "restore": 59571,
    "restore-page": 59689,
    "ring-volume": 57553,
    "room": 59572,
    "room-service": 60233,
    "rotate-90-degrees-ccw": 58392,
    "rotate-left": 58393,
    "rotate-right": 58394,
    "rounded-corner": 59680,
    "router": 58152,
    "rowing": 59681,
    "rss-feed": 57573,
    "rv-hookup": 58946,
    "satellite": 58722,
    "save": 57697,
    "scanner": 58153,
    "schedule": 59573,
    "school": 59404,
    "screen-lock-landscape": 57790,
    "screen-lock-portrait": 57791,
    "screen-lock-rotation": 57792,
    "screen-rotation": 57793,
    "screen-share": 57570,
    "sd-card": 58915,
    "sd-storage": 57794,
    "search": 59574,
    "security": 58154,
    "select-all": 57698,
    "send": 57699,
    "sentiment-dissatisfied": 59409,
    "sentiment-neutral": 59410,
    "sentiment-satisfied": 59411,
    "sentiment-very-dissatisfied": 59412,
    "sentiment-very-satisfied": 59413,
    "settings": 59576,
    "settings-applications": 59577,
    "settings-backup-restore": 59578,
    "settings-bluetooth": 59579,
    "settings-brightness": 59581,
    "settings-cell": 59580,
    "settings-ethernet": 59582,
    "settings-input-antenna": 59583,
    "settings-input-component": 59584,
    "settings-input-composite": 59585,
    "settings-input-hdmi": 59586,
    "settings-input-svideo": 59587,
    "settings-overscan": 59588,
    "settings-phone": 59589,
    "settings-power": 59590,
    "settings-remote": 59591,
    "settings-system-daydream": 57795,
    "settings-voice": 59592,
    "share": 59405,
    "shop": 59593,
    "shop-two": 59594,
    "shopping-basket": 59595,
    "shopping-cart": 59596,
    "short-text": 57953,
    "show-chart": 59105,
    "shuffle": 57411,
    "signal-cellular-4-bar": 57800,
    "signal-cellular-connected-no-internet-4-bar": 57805,
    "signal-cellular-no-sim": 57806,
    "signal-cellular-null": 57807,
    "signal-cellular-off": 57808,
    "signal-wifi-4-bar": 57816,
    "signal-wifi-4-bar-lock": 57817,
    "signal-wifi-off": 57818,
    "sim-card": 58155,
    "sim-card-alert": 58916,
    "skip-next": 57412,
    "skip-previous": 57413,
    "slideshow": 58395,
    "slow-motion-video": 57448,
    "smartphone": 58156,
    "smoke-free": 60234,
    "smoking-rooms": 60235,
    "sms": 58917,
    "sms-failed": 58918,
    "snooze": 57414,
    "sort": 57700,
    "sort-by-alpha": 57427,
    "spa": 60236,
    "space-bar": 57942,
    "speaker": 58157,
    "speaker-group": 58158,
    "speaker-notes": 59597,
    "speaker-notes-off": 59690,
    "speaker-phone": 57554,
    "spellcheck": 59598,
    "star": 59448,
    "star-border": 59450,
    "star-half": 59449,
    "stars": 59600,
    "stay-current-landscape": 57555,
    "stay-current-portrait": 57556,
    "stay-primary-landscape": 57557,
    "stay-primary-portrait": 57558,
    "stop": 57415,
    "stop-screen-share": 57571,
    "storage": 57819,
    "store": 59601,
    "store-mall-directory": 58723,
    "straighten": 58396,
    "streetview": 58734,
    "strikethrough-s": 57943,
    "style": 58397,
    "subdirectory-arrow-left": 58841,
    "subdirectory-arrow-right": 58842,
    "subject": 59602,
    "subscriptions": 57444,
    "subtitles": 57416,
    "subway": 58735,
    "supervisor-account": 59603,
    "surround-sound": 57417,
    "swap-calls": 57559,
    "swap-horiz": 59604,
    "swap-vert": 59605,
    "swap-vertical-circle": 59606,
    "switch-camera": 58398,
    "switch-video": 58399,
    "sync": 58919,
    "sync-disabled": 58920,
    "sync-problem": 58921,
    "system-update": 58922,
    "system-update-alt": 59607,
    "tab": 59608,
    "tab-unselected": 59609,
    "tablet": 58159,
    "tablet-android": 58160,
    "tablet-mac": 58161,
    "tag-faces": 58400,
    "tap-and-play": 58923,
    "terrain": 58724,
    "text-fields": 57954,
    "text-format": 57701,
    "textsms": 57560,
    "texture": 58401,
    "theaters": 59610,
    "thumb-down": 59611,
    "thumb-up": 59612,
    "thumbs-up-down": 59613,
    "time-to-leave": 58924,
    "timelapse": 58402,
    "timeline": 59682,
    "timer": 58405,
    "timer-10": 58403,
    "timer-3": 58404,
    "timer-off": 58406,
    "title": 57956,
    "toc": 59614,
    "today": 59615,
    "toll": 59616,
    "tonality": 58407,
    "touch-app": 59667,
    "toys": 58162,
    "track-changes": 59617,
    "traffic": 58725,
    "train": 58736,
    "tram": 58737,
    "transfer-within-a-station": 58738,
    "transform": 58408,
    "translate": 59618,
    "trending-down": 59619,
    "trending-flat": 59620,
    "trending-up": 59621,
    "tune": 58409,
    "turned-in": 59622,
    "turned-in-not": 59623,
    "tv": 58163,
    "unarchive": 57705,
    "undo": 57702,
    "unfold-less": 58838,
    "unfold-more": 58839,
    "update": 59683,
    "usb": 57824,
    "verified-user": 59624,
    "vertical-align-bottom": 57944,
    "vertical-align-center": 57945,
    "vertical-align-top": 57946,
    "vibration": 58925,
    "video-call": 57456,
    "video-label": 57457,
    "video-library": 57418,
    "videocam": 57419,
    "videocam-off": 57420,
    "videogame-asset": 58168,
    "view-agenda": 59625,
    "view-array": 59626,
    "view-carousel": 59627,
    "view-column": 59628,
    "view-comfy": 58410,
    "view-compact": 58411,
    "view-day": 59629,
    "view-headline": 59630,
    "view-list": 59631,
    "view-module": 59632,
    "view-quilt": 59633,
    "view-stream": 59634,
    "view-week": 59635,
    "vignette": 58421,
    "visibility": 59636,
    "visibility-off": 59637,
    "voice-chat": 58926,
    "voicemail": 57561,
    "volume-down": 57421,
    "volume-mute": 57422,
    "volume-off": 57423,
    "volume-up": 57424,
    "vpn-key": 57562,
    "vpn-lock": 58927,
    "wallpaper": 57788,
    "warning": 57346,
    "watch": 58164,
    "watch-later": 59684,
    "wb-auto": 58412,
    "wb-cloudy": 58413,
    "wb-incandescent": 58414,
    "wb-iridescent": 58422,
    "wb-sunny": 58416,
    "wc": 58941,
    "web": 57425,
    "web-asset": 57449,
    "weekend": 57707,
    "whatshot": 59406,
    "widgets": 57789,
    "wifi": 58942,
    "wifi-lock": 57825,
    "wifi-tethering": 57826,
    "work": 59641,
    "wrap-text": 57947,
    "youtube-searched-for": 59642,
    "zoom-in": 59647,
    "zoom-out": 59648,
    "zoom-out-map": 58731
  };
},694,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "a37b0c01c0baf1888ca812cc0508f6e2",
    "name": "MaterialIcons",
    "type": "ttf",
    "fileHashes": ["a37b0c01c0baf1888ca812cc0508f6e2"]
  });
},695,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Octicons = _require(_dependencyMap[0]);

  var _Octicons2 = babelHelpers.interopRequireDefault(_Octicons);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_Octicons2.default, 'octicons', _require(_dependencyMap[2]));
},696,[697,511,698]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "alert": 61696,
    "arrow-down": 61697,
    "arrow-left": 61698,
    "arrow-right": 61699,
    "arrow-small-down": 61700,
    "arrow-small-left": 61701,
    "arrow-small-right": 61702,
    "arrow-small-up": 61703,
    "arrow-up": 61704,
    "beaker": 61705,
    "bell": 61706,
    "bold": 61707,
    "book": 61708,
    "bookmark": 61709,
    "briefcase": 61710,
    "broadcast": 61711,
    "browser": 61712,
    "bug": 61713,
    "calendar": 61714,
    "check": 61715,
    "checklist": 61716,
    "chevron-down": 61717,
    "chevron-left": 61718,
    "chevron-right": 61719,
    "chevron-up": 61720,
    "circle-slash": 61721,
    "circuit-board": 61722,
    "clippy": 61723,
    "clock": 61724,
    "cloud-download": 61725,
    "cloud-upload": 61726,
    "code": 61727,
    "comment": 61728,
    "comment-discussion": 61729,
    "credit-card": 61730,
    "dash": 61731,
    "dashboard": 61732,
    "database": 61733,
    "desktop-download": 61734,
    "device-camera": 61735,
    "device-camera-video": 61736,
    "device-desktop": 61737,
    "device-mobile": 61738,
    "diff": 61739,
    "diff-added": 61740,
    "diff-ignored": 61741,
    "diff-modified": 61742,
    "diff-removed": 61743,
    "diff-renamed": 61744,
    "ellipsis": 61745,
    "eye": 61746,
    "file": 61747,
    "file-binary": 61748,
    "file-code": 61749,
    "file-directory": 61750,
    "file-media": 61751,
    "file-pdf": 61752,
    "file-submodule": 61753,
    "file-symlink-directory": 61754,
    "file-symlink-file": 61755,
    "file-text": 61756,
    "file-zip": 61757,
    "flame": 61758,
    "fold": 61759,
    "gear": 61760,
    "gift": 61761,
    "gist": 61762,
    "gist-secret": 61763,
    "git-branch": 61764,
    "git-commit": 61765,
    "git-compare": 61766,
    "git-merge": 61767,
    "git-pull-request": 61768,
    "globe": 61769,
    "grabber": 61770,
    "graph": 61771,
    "heart": 61772,
    "history": 61773,
    "home": 61774,
    "horizontal-rule": 61775,
    "hubot": 61776,
    "inbox": 61777,
    "info": 61778,
    "issue-closed": 61779,
    "issue-opened": 61780,
    "issue-reopened": 61781,
    "italic": 61782,
    "jersey": 61783,
    "kebab-horizontal": 61784,
    "kebab-vertical": 61785,
    "key": 61786,
    "keyboard": 61787,
    "law": 61788,
    "light-bulb": 61789,
    "link": 61790,
    "link-external": 61791,
    "list-ordered": 61792,
    "list-unordered": 61793,
    "location": 61794,
    "lock": 61795,
    "logo-gist": 61796,
    "logo-github": 61797,
    "mail": 61798,
    "mail-read": 61799,
    "mail-reply": 61800,
    "mark-github": 61801,
    "markdown": 61802,
    "megaphone": 61803,
    "mention": 61804,
    "milestone": 61805,
    "mirror": 61806,
    "mortar-board": 61807,
    "mute": 61808,
    "no-newline": 61809,
    "note": 61810,
    "octoface": 61811,
    "organization": 61812,
    "package": 61813,
    "paintcan": 61814,
    "pencil": 61815,
    "person": 61816,
    "pin": 61817,
    "plug": 61818,
    "plus": 61819,
    "plus-small": 61820,
    "primitive-dot": 61821,
    "primitive-square": 61822,
    "project": 61823,
    "pulse": 61824,
    "question": 61825,
    "quote": 61826,
    "radio-tower": 61827,
    "reply": 61828,
    "repo": 61829,
    "repo-clone": 61830,
    "repo-force-push": 61831,
    "repo-forked": 61832,
    "repo-pull": 61833,
    "repo-push": 61834,
    "rocket": 61835,
    "rss": 61836,
    "ruby": 61837,
    "screen-full": 61838,
    "screen-normal": 61839,
    "search": 61840,
    "server": 61841,
    "settings": 61842,
    "shield": 61843,
    "sign-in": 61844,
    "sign-out": 61845,
    "smiley": 61846,
    "squirrel": 61847,
    "star": 61848,
    "stop": 61849,
    "sync": 61850,
    "tag": 61851,
    "tasklist": 61852,
    "telescope": 61853,
    "terminal": 61854,
    "text-size": 61855,
    "three-bars": 61856,
    "thumbsdown": 61857,
    "thumbsup": 61858,
    "tools": 61859,
    "trashcan": 61860,
    "triangle-down": 61861,
    "triangle-left": 61862,
    "triangle-right": 61863,
    "triangle-up": 61864,
    "unfold": 61865,
    "unmute": 61866,
    "unverified": 61867,
    "verified": 61868,
    "versions": 61869,
    "watch": 61870,
    "x": 61871,
    "zap": 61872
  };
},697,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0]).registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
		"scales": [1],
		"hash": "9e9dbe78c20054a6d71d9c10c939ba68",
		"name": "Octicons",
		"type": "ttf",
		"fileHashes": ["9e9dbe78c20054a6d71d9c10c939ba68"]
	});
},698,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _SimpleLineIcons = _require(_dependencyMap[0]);

  var _SimpleLineIcons2 = babelHelpers.interopRequireDefault(_SimpleLineIcons);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_SimpleLineIcons2.default, 'simple-line-icons', _require(_dependencyMap[2]));
},699,[700,511,701]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "user": 57349,
    "people": 57345,
    "user-female": 57344,
    "user-follow": 57346,
    "user-following": 57347,
    "user-unfollow": 57348,
    "login": 57446,
    "logout": 57445,
    "emotsmile": 57377,
    "phone": 58880,
    "call-end": 57416,
    "call-in": 57415,
    "call-out": 57414,
    "map": 57395,
    "location-pin": 57494,
    "direction": 57410,
    "directions": 57409,
    "compass": 57413,
    "layers": 57396,
    "menu": 58881,
    "list": 57447,
    "options-vertical": 58882,
    "options": 58883,
    "arrow-down": 58884,
    "arrow-left": 58885,
    "arrow-right": 58886,
    "arrow-up": 58887,
    "arrow-up-circle": 57464,
    "arrow-left-circle": 57466,
    "arrow-right-circle": 57465,
    "arrow-down-circle": 57467,
    "check": 57472,
    "clock": 57473,
    "plus": 57493,
    "minus": 58901,
    "close": 57474,
    "event": 58905,
    "exclamation": 58903,
    "organization": 58902,
    "trophy": 57350,
    "screen-smartphone": 57360,
    "screen-desktop": 57361,
    "plane": 57362,
    "notebook": 57363,
    "mustache": 57364,
    "mouse": 57365,
    "magnet": 57366,
    "energy": 57376,
    "disc": 57378,
    "cursor": 57454,
    "cursor-move": 57379,
    "crop": 57380,
    "chemistry": 57382,
    "speedometer": 57351,
    "shield": 57358,
    "screen-tablet": 57359,
    "magic-wand": 57367,
    "hourglass": 57368,
    "graduation": 57369,
    "ghost": 57370,
    "game-controller": 57371,
    "fire": 57372,
    "eyeglass": 57373,
    "envelope-open": 57374,
    "envelope-letter": 57375,
    "bell": 57383,
    "badge": 57384,
    "anchor": 57385,
    "wallet": 57386,
    "vector": 57387,
    "speech": 57388,
    "puzzle": 57389,
    "printer": 57390,
    "present": 57391,
    "playlist": 57392,
    "pin": 57393,
    "picture": 57394,
    "handbag": 57397,
    "globe-alt": 57398,
    "globe": 57399,
    "folder-alt": 57401,
    "folder": 57481,
    "film": 57402,
    "feed": 57403,
    "drop": 57406,
    "drawer": 57407,
    "docs": 57408,
    "doc": 57477,
    "diamond": 57411,
    "cup": 57412,
    "calculator": 57417,
    "bubbles": 57418,
    "briefcase": 57419,
    "book-open": 57420,
    "basket-loaded": 57421,
    "basket": 57422,
    "bag": 57423,
    "action-undo": 57424,
    "action-redo": 57425,
    "wrench": 57426,
    "umbrella": 57427,
    "trash": 57428,
    "tag": 57429,
    "support": 57430,
    "frame": 57400,
    "size-fullscreen": 57431,
    "size-actual": 57432,
    "shuffle": 57433,
    "share-alt": 57434,
    "share": 57435,
    "rocket": 57436,
    "question": 57437,
    "pie-chart": 57438,
    "pencil": 57439,
    "note": 57440,
    "loop": 57444,
    "home": 57449,
    "grid": 57450,
    "graph": 57451,
    "microphone": 57443,
    "music-tone-alt": 57441,
    "music-tone": 57442,
    "earphones-alt": 57404,
    "earphones": 57405,
    "equalizer": 57452,
    "like": 57448,
    "dislike": 57453,
    "control-start": 57455,
    "control-rewind": 57456,
    "control-play": 57457,
    "control-pause": 57458,
    "control-forward": 57459,
    "control-end": 57460,
    "volume-1": 57503,
    "volume-2": 57504,
    "volume-off": 57505,
    "calendar": 57461,
    "bulb": 57462,
    "chart": 57463,
    "ban": 57468,
    "bubble": 57469,
    "camrecorder": 57470,
    "camera": 57471,
    "cloud-download": 57475,
    "cloud-upload": 57476,
    "envelope": 57478,
    "eye": 57479,
    "flag": 57480,
    "heart": 57482,
    "info": 57483,
    "key": 57484,
    "link": 57485,
    "lock": 57486,
    "lock-open": 57487,
    "magnifier": 57488,
    "magnifier-add": 57489,
    "magnifier-remove": 57490,
    "paper-clip": 57491,
    "paper-plane": 57492,
    "power": 57495,
    "refresh": 57496,
    "reload": 57497,
    "settings": 57498,
    "star": 57499,
    "symbol-female": 57500,
    "symbol-male": 57501,
    "target": 57502,
    "credit-card": 57381,
    "paypal": 58888,
    "social-tumblr": 57354,
    "social-twitter": 57353,
    "social-facebook": 57355,
    "social-instagram": 58889,
    "social-linkedin": 58890,
    "social-pinterest": 58891,
    "social-github": 58892,
    "social-google": 58893,
    "social-reddit": 58894,
    "social-skype": 58895,
    "social-dribbble": 57357,
    "social-behance": 58896,
    "social-foursqare": 58897,
    "social-soundcloud": 58898,
    "social-spotify": 58899,
    "social-stumbleupon": 58900,
    "social-youtube": 57352,
    "social-dropbox": 57356,
    "social-vkontakte": 58904,
    "social-steam": 58912
  };
},700,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0]).registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
		"scales": [1],
		"hash": "d2285965fe34b05465047401b8595dd0",
		"name": "SimpleLineIcons",
		"type": "ttf",
		"fileHashes": ["d2285965fe34b05465047401b8595dd0"]
	});
},701,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Zocial = _require(_dependencyMap[0]);

  var _Zocial2 = babelHelpers.interopRequireDefault(_Zocial);

  var _createIconSet = _require(_dependencyMap[1]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  exports.default = (0, _createIconSet2.default)(_Zocial2.default, 'zocial', _require(_dependencyMap[2]));
},702,[703,511,704]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "acrobat": 61696,
    "amazon": 61697,
    "android": 61698,
    "angellist": 61699,
    "aol": 61700,
    "appnet": 61701,
    "appstore": 61702,
    "bitbucket": 61703,
    "bitcoin": 61704,
    "blogger": 61705,
    "buffer": 61706,
    "cal": 61707,
    "call": 61708,
    "cart": 61709,
    "chrome": 61710,
    "cloudapp": 61711,
    "creativecommons": 61712,
    "delicious": 61713,
    "digg": 61714,
    "disqus": 61715,
    "dribbble": 61716,
    "dropbox": 61717,
    "drupal": 61718,
    "dwolla": 61720,
    "email": 61721,
    "eventasaurus": 61722,
    "eventbrite": 61723,
    "eventful": 61724,
    "evernote": 61725,
    "facebook": 61726,
    "fivehundredpx": 61727,
    "flattr": 61728,
    "flickr": 61729,
    "forrst": 61730,
    "foursquare": 61731,
    "github": 61732,
    "gmail": 61733,
    "google": 61734,
    "googleplay": 61735,
    "googleplus": 61736,
    "gowalla": 61737,
    "grooveshark": 61738,
    "guest": 61739,
    "html5": 61740,
    "ie": 61741,
    "instagram": 61742,
    "instapaper": 61743,
    "intensedebate": 61744,
    "itunes": 61745,
    "klout": 61746,
    "lanyrd": 61747,
    "lastfm": 61748,
    "lego": 61749,
    "linkedin": 61750,
    "lkdto": 61751,
    "logmein": 61752,
    "macstore": 61753,
    "meetup": 61754,
    "myspace": 61755,
    "ninetyninedesigns": 61756,
    "openid": 61757,
    "opentable": 61758,
    "paypal": 61759,
    "persona": 61796,
    "pinboard": 61760,
    "pinterest": 61761,
    "plancast": 61762,
    "plurk": 61763,
    "pocket": 61764,
    "podcast": 61765,
    "posterous": 61766,
    "print": 61767,
    "quora": 61768,
    "reddit": 61769,
    "rss": 61770,
    "scribd": 61771,
    "skype": 61772,
    "smashing": 61773,
    "songkick": 61774,
    "soundcloud": 61775,
    "spotify": 61776,
    "stackoverflow": 61777,
    "statusnet": 61778,
    "steam": 61779,
    "stripe": 61780,
    "stumbleupon": 61781,
    "tumblr": 61782,
    "twitter": 61783,
    "viadeo": 61784,
    "vimeo": 61785,
    "vk": 61786,
    "weibo": 61787,
    "wikipedia": 61788,
    "windows": 61789,
    "wordpress": 61790,
    "xing": 61791,
    "yahoo": 61792,
    "ycombinator": 61793,
    "yelp": 61794,
    "youtube": 61795
  };
},703,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0]).registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
		"scales": [1],
		"hash": "5cdf883b18a5651a29a4d1ef276d2457",
		"name": "Zocial",
		"type": "ttf",
		"fileHashes": ["5cdf883b18a5651a29a4d1ef276d2457"]
	});
},704,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (config, expoFontName, expoAssetId) {
    return (0, _createIconSetFromFontello2.default)(config, expoFontName, expoAssetId);
  };

  var _createIconSetFromFontello = _require(_dependencyMap[0]);

  var _createIconSetFromFontello2 = babelHelpers.interopRequireDefault(_createIconSetFromFontello);
},705,[706]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconSetFromFontello;

  var _createIconSet = _require(_dependencyMap[0]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  function createIconSetFromFontello(config, fontFamilyArg, fontFile) {
    var glyphMap = {};
    config.glyphs.forEach(function (glyph) {
      glyphMap[glyph.css] = glyph.code;
    });
    var fontFamily = fontFamilyArg || config.name || 'fontello';
    return (0, _createIconSet2.default)(glyphMap, fontFamily, fontFile || fontFamily + ".ttf");
  }
},706,[512]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (config, expoFontName, expoAssetId) {
    return (0, _createIconSetFromIcomoon2.default)(config, expoFontName, expoAssetId);
  };

  var _expo = _require(_dependencyMap[0]);

  var _createIconSetFromIcomoon = _require(_dependencyMap[1]);

  var _createIconSetFromIcomoon2 = babelHelpers.interopRequireDefault(_createIconSetFromIcomoon);
},707,[12,708]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconSetFromIcoMoon;

  var _createIconSet = _require(_dependencyMap[0]);

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  function createIconSetFromIcoMoon(config, fontFamilyArg, fontFile) {
    var glyphMap = {};
    config.icons.forEach(function (icon) {
      glyphMap[icon.properties.name] = icon.properties.code;
    });
    var fontFamily = fontFamilyArg || config.preferences.fontPref.metadata.fontFamily;
    return (0, _createIconSet2.default)(glyphMap, fontFamily, fontFile || fontFamily + ".ttf");
  }
},708,[512]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.manipulate = manipulate;

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentImageManipulator = _reactNative.NativeModules.ExponentImageManipulator;

  function manipulate(uri) {
    var actions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var saveOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return regeneratorRuntime.async(function manipulate$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", ExponentImageManipulator.manipulate(uri, actions, saveOptions));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},709,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MediaTypeOptions = undefined;
  exports.launchImageLibraryAsync = launchImageLibraryAsync;
  exports.launchCameraAsync = launchCameraAsync;

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentImagePicker = _reactNative.NativeModules.ExponentImagePicker;
  var MEDIA_TYPE_OPTIONS = {
    All: 'All',
    Videos: 'Videos',
    Images: 'Images'
  };

  function launchImageLibraryAsync() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return regeneratorRuntime.async(function launchImageLibraryAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", ExponentImagePicker.launchImageLibraryAsync(options));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function launchCameraAsync() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return regeneratorRuntime.async(function launchCameraAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", ExponentImagePicker.launchCameraAsync(options));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  var MediaTypeOptions = exports.MediaTypeOptions = MEDIA_TYPE_OPTIONS;
},710,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.composeAsync = composeAsync;

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentMailComposer = _reactNative.NativeModules.ExponentMailComposer;

  function composeAsync(options) {
    return regeneratorRuntime.async(function composeAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", ExponentMailComposer.composeAsync(options));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},711,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SortBy = exports.MediaType = undefined;
  exports.createAssetAsync = createAssetAsync;
  exports.addAssetsToAlbumAsync = addAssetsToAlbumAsync;
  exports.removeAssetsFromAlbumAsync = removeAssetsFromAlbumAsync;
  exports.deleteAssetsAsync = deleteAssetsAsync;
  exports.getAssetInfoAsync = getAssetInfoAsync;
  exports.getAlbumsAsync = getAlbumsAsync;
  exports.getAlbumAsync = getAlbumAsync;
  exports.createAlbumAsync = createAlbumAsync;
  exports.getAssetsAsync = getAssetsAsync;
  exports.getMomentsAsync = getMomentsAsync;

  var _reactNative = _require(_dependencyMap[0]);

  var MediaLibrary = _reactNative.NativeModules.ExponentMediaLibrary;

  function arrayize(item) {
    if (Array.isArray(item)) {
      return item;
    }

    return item ? [item] : [];
  }

  function getId(ref) {
    if (typeof ref === 'string') {
      return ref;
    }

    return ref ? ref.id : undefined;
  }

  function checkAssetIds(assetIds) {
    if (assetIds.some(function (id) {
      return !id || typeof id !== 'string';
    })) {
      throw new Error('Asset ID must be a string!');
    }
  }

  function checkMediaType(mediaType) {
    if (Object.values(MediaType).indexOf(mediaType) === -1) {
      throw new Error("Invalid mediaType: " + mediaType);
    }
  }

  function checkSortBy(sortBy) {
    if (Array.isArray(sortBy)) {
      checkSortByKey(sortBy[0]);

      if (typeof sortBy[1] !== 'boolean') {
        throw new Error('Invalid sortBy array argument. Second item must be a boolean!');
      }
    } else {
      checkSortByKey(sortBy);
    }
  }

  function checkSortByKey(sortBy) {
    if (Object.values(SortBy).indexOf(sortBy) === -1) {
      throw new Error("Invalid sortBy key: " + sortBy);
    }
  }

  var MediaType = exports.MediaType = MediaLibrary.MediaType;
  var SortBy = exports.SortBy = MediaLibrary.SortBy;

  function createAssetAsync(localUri) {
    var asset;
    return regeneratorRuntime.async(function createAssetAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!localUri || typeof localUri !== 'string')) {
              _context.next = 2;
              break;
            }

            throw new Error('Invalid argument "localUri". It must be a string!');

          case 2:
            _context.next = 4;
            return regeneratorRuntime.awrap(MediaLibrary.createAssetAsync(localUri));

          case 4:
            asset = _context.sent;

            if (!Array.isArray(asset)) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", asset[0]);

          case 7:
            return _context.abrupt("return", asset);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function addAssetsToAlbumAsync(assets, album) {
    var copy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var assetIds, albumId;
    return regeneratorRuntime.async(function addAssetsToAlbumAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            assetIds = arrayize(assets).map(getId);
            albumId = getId(album);
            checkAssetIds(assetIds);

            if (!(!albumId || typeof albumId !== 'string')) {
              _context2.next = 5;
              break;
            }

            throw new Error('Invalid album ID. It must be a string!');

          case 5:
            return _context2.abrupt("return", MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy));

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function removeAssetsFromAlbumAsync(assets, album) {
    var assetIds, albumId;
    return regeneratorRuntime.async(function removeAssetsFromAlbumAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            assetIds = arrayize(assets).map(getId);
            albumId = getId(album);
            checkAssetIds(assetIds);
            return _context3.abrupt("return", MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function deleteAssetsAsync(assets) {
    var assetIds;
    return regeneratorRuntime.async(function deleteAssetsAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            assetIds = arrayize(assets).map(getId);
            checkAssetIds(assetIds);
            return _context4.abrupt("return", MediaLibrary.deleteAssetsAsync(assetIds));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function getAssetInfoAsync(asset) {
    var assetId, assetInfo;
    return regeneratorRuntime.async(function getAssetInfoAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            assetId = getId(asset);
            checkAssetIds([assetId]);
            _context5.next = 4;
            return regeneratorRuntime.awrap(MediaLibrary.getAssetInfoAsync(assetId));

          case 4:
            assetInfo = _context5.sent;

            if (!Array.isArray(assetInfo)) {
              _context5.next = 7;
              break;
            }

            return _context5.abrupt("return", assetInfo[0]);

          case 7:
            return _context5.abrupt("return", assetInfo);

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }

  function getAlbumsAsync() {
    return regeneratorRuntime.async(function getAlbumsAsync$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt("return", MediaLibrary.getAlbumsAsync());

          case 1:
          case "end":
            return _context6.stop();
        }
      }
    }, null, this);
  }

  function getAlbumAsync(title) {
    return regeneratorRuntime.async(function getAlbumAsync$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (!(typeof title !== 'string')) {
              _context7.next = 2;
              break;
            }

            throw new Error('Album title must be a string!');

          case 2:
            return _context7.abrupt("return", MediaLibrary.getAlbumAsync(title));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, null, this);
  }

  function createAlbumAsync(albumName, asset) {
    var assetId;
    return regeneratorRuntime.async(function createAlbumAsync$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            assetId = getId(asset);

            if (!(typeof assetId !== 'string' || assetId.length === 0)) {
              _context8.next = 3;
              break;
            }

            throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');

          case 3:
            if (!(!albumName || typeof albumName !== 'string')) {
              _context8.next = 5;
              break;
            }

            throw new Error('Invalid argument "albumName". It must be a string!');

          case 5:
            if (!(assetId != null && typeof assetId !== 'string')) {
              _context8.next = 7;
              break;
            }

            throw new Error('Asset ID must be a string!');

          case 7:
            return _context8.abrupt("return", MediaLibrary.createAlbumAsync(albumName, assetId));

          case 8:
          case "end":
            return _context8.stop();
        }
      }
    }, null, this);
  }

  function getAssetsAsync() {
    var assetsOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var first, after, album, sortBy, mediaType, options;
    return regeneratorRuntime.async(function getAssetsAsync$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            first = assetsOptions.first, after = assetsOptions.after, album = assetsOptions.album, sortBy = assetsOptions.sortBy, mediaType = assetsOptions.mediaType;
            options = {
              first: first,
              after: getId(after),
              album: getId(album),
              sortBy: arrayize(sortBy),
              mediaType: arrayize(mediaType)
            };

            if (!(first != null && typeof options.first !== 'number')) {
              _context9.next = 4;
              break;
            }

            throw new Error('Option "first" must be a number!');

          case 4:
            if (!(after != null && typeof options.after !== 'string')) {
              _context9.next = 6;
              break;
            }

            throw new Error('Option "after" must be a string!');

          case 6:
            if (!(album != null && typeof options.album !== 'string')) {
              _context9.next = 8;
              break;
            }

            throw new Error('Option "album" must be a string!');

          case 8:
            options.sortBy.forEach(checkSortBy);
            options.mediaType.forEach(checkMediaType);
            return _context9.abrupt("return", MediaLibrary.getAssetsAsync(options));

          case 11:
          case "end":
            return _context9.stop();
        }
      }
    }, null, this);
  }

  function getMomentsAsync() {
    return regeneratorRuntime.async(function getMomentsAsync$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            throw new Error('MediaLibrary.getMomentsAsync is not supported on Android!');

          case 2:
          case "end":
            return _context10.stop();
        }
      }
    }, null, this);
  }
},712,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.watchStepCount = watchStepCount;
  exports.getStepCountAsync = getStepCountAsync;
  exports.isAvailableAsync = isAvailableAsync;

  var _reactNative = _require(_dependencyMap[0]);

  var _invariant = _require(_dependencyMap[1]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var PedometerEventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.ExponentPedometer);
  var _listenerCount = 0;

  function watchStepCount(callback) {
    if (_listenerCount === 0) {
      _reactNative.NativeModules.ExponentPedometer.watchStepCount();
    }

    _listenerCount++;
    var listener = PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);
    return {
      remove: function remove() {
        listener.remove();
        _listenerCount--;

        if (_listenerCount === 0) {
          _reactNative.NativeModules.ExponentPedometer.stopWatchingStepCount();
        }
      }
    };
  }

  function getStepCountAsync(start, end) {
    return regeneratorRuntime.async(function getStepCountAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            (0, _invariant2.default)(start <= end, 'Pedometer: The start date must precede the end date.');
            _context.next = 3;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime()));

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function isAvailableAsync() {
    return regeneratorRuntime.async(function isAvailableAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentPedometer.isAvailableAsync());

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }
},713,[14,319]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentFacebook = _reactNative.NativeModules.ExponentFacebook;
  exports.default = {
    logInWithReadPermissionsAsync: function logInWithReadPermissionsAsync(appId, options) {
      return regeneratorRuntime.async(function logInWithReadPermissionsAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (typeof appId !== 'string') {
                console.warn("logInWithReadPermissionsAsync: parameter 'appId' must be a string, was '" + typeof appId + "''.");
                appId = String(appId);
              }

              if (!options || typeof options !== 'object') {
                options = {};
              }

              return _context.abrupt("return", ExponentFacebook.logInWithReadPermissionsAsync(appId, options));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  };
},714,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    get withNativeAd() {
      return _require(_dependencyMap[0]).default;
    },

    get AdSettings() {
      return _require(_dependencyMap[1]).default;
    },

    get NativeAdsManager() {
      return _require(_dependencyMap[2]).default;
    },

    get InterstitialAdManager() {
      return _require(_dependencyMap[3]).default;
    },

    get BannerView() {
      return _require(_dependencyMap[4]).default;
    }

  };
},715,[716,718,717,719,720]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _fbemitter = _require(_dependencyMap[2]);

  var _NativeAdsManager = _require(_dependencyMap[3]);

  var _NativeAdsManager2 = babelHelpers.interopRequireDefault(_NativeAdsManager);

  var NativeAdView = (0, _reactNative.requireNativeComponent)('CTKNativeAd', null);

  exports.default = function (Component) {
    return function (_React$Component) {
      babelHelpers.inherits(NativeAdWrapper, _React$Component);

      function NativeAdWrapper() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, NativeAdWrapper);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NativeAdWrapper.__proto__ || Object.getPrototypeOf(NativeAdWrapper)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
          ad: null,
          canRequestAds: false
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(NativeAdWrapper, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          this.subscription = this.props.adsManager.onAdsLoaded(function () {
            return _this2.setState({
              canRequestAds: true
            });
          });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.subscription.remove();
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;

          var _props = this.props,
              adsManager = _props.adsManager,
              props = babelHelpers.objectWithoutProperties(_props, ["adsManager"]);

          if (!this.state.canRequestAds) {
            return null;
          }

          return _react2.default.createElement(
            NativeAdView,
            {
              adsManager: adsManager.toJSON(),
              onAdLoaded: function onAdLoaded(e) {
                return _this3.setState({
                  ad: e.nativeEvent
                });
              }
            },
            this.state.ad && _react2.default.createElement(Component, babelHelpers.extends({
              nativeAd: this.state.ad
            }, props))
          );
        }
      }]);
      return NativeAdWrapper;
    }(_react2.default.Component);
  };
},716,[103,14,314,717]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var _fbemitter = _require(_dependencyMap[1]);

  var CTKNativeAdManager = _reactNative.NativeModules.CTKNativeAdManager,
      CTKNativeAdEmitter = _reactNative.NativeModules.CTKNativeAdEmitter;
  var nativeAdEmitter = new _reactNative.NativeEventEmitter(CTKNativeAdEmitter);
  var EVENT_DID_BECOME_VALID = 'AdsManagerDidBecomeValid';

  var NativeAdsManager = function () {
    function NativeAdsManager(placementId) {
      var adsToRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      babelHelpers.classCallCheck(this, NativeAdsManager);
      this.isValid = false;
      this.eventEmitter = new _fbemitter.EventEmitter();
      this.placementId = placementId;
      this.adsToRequest = adsToRequest;

      this._listenForStateChanges();

      CTKNativeAdManager.init(placementId, adsToRequest);
    }

    babelHelpers.createClass(NativeAdsManager, [{
      key: "_listenForStateChanges",
      value: function _listenForStateChanges() {
        var _this = this;

        nativeAdEmitter.addListener('CTKNativeAdsManagersChanged', function (managers) {
          var isValidNew = managers[_this.placementId];
          var isValid = _this.isValid;

          if (isValid !== isValidNew && isValidNew) {
            _this.isValid = true;

            _this.eventEmitter.emit(EVENT_DID_BECOME_VALID);
          }
        });
      }
    }, {
      key: "onAdsLoaded",
      value: function onAdsLoaded(func) {
        if (this.isValid) {
          setTimeout(func);
          return {
            remove: function remove() {}
          };
        }

        return this.eventEmitter.once(EVENT_DID_BECOME_VALID, func);
      }
    }, {
      key: "disableAutoRefresh",
      value: function disableAutoRefresh() {
        CTKNativeAdManager.disableAutoRefresh(this.placementId);
      }
    }, {
      key: "setMediaCachePolicy",
      value: function setMediaCachePolicy(cachePolicy) {
        CTKNativeAdManager.setMediaCachePolicy(this.placementId, cachePolicy);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.placementId;
      }
    }]);
    return NativeAdsManager;
  }();

  exports.default = NativeAdsManager;
},717,[14,314]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var CTKAdSettingsManager = _reactNative.NativeModules.CTKAdSettingsManager;
  exports.default = {
    get currentDeviceHash() {
      return CTKAdSettingsManager.currentDeviceHash;
    },

    addTestDevice: function addTestDevice(deviceHash) {
      CTKAdSettingsManager.addTestDevice(deviceHash);
    },
    clearTestDevices: function clearTestDevices() {
      CTKAdSettingsManager.clearTestDevices();
    },
    setLogLevel: function setLogLevel(logLevel) {
      CTKAdSettingsManager.setLogLevel(logLevel);
    },
    setIsChildDirected: function setIsChildDirected(isDirected) {
      CTKAdSettingsManager.setIsChildDirected(isDirected);
    },
    setMediationService: function setMediationService(mediationService) {
      CTKAdSettingsManager.setMediationService(mediationService);
    },
    setUrlPrefix: function setUrlPrefix(urlPrefix) {
      CTKAdSettingsManager.setUrlPrefix(urlPrefix);
    }
  };
},718,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var CTKInterstitialAdManager = _reactNative.NativeModules.CTKInterstitialAdManager;
  exports.default = {
    showAd: function showAd(placementId) {
      return CTKInterstitialAdManager.showAd(placementId);
    }
  };
},719,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var CTKBannerView = (0, _reactNative.requireNativeComponent)('CTKBannerView', null, {
    onAdPress: true,
    onAdError: true
  });
  var sizeForType = {
    large: 90,
    rectangle: 250,
    standard: 50
  };

  var getSizeForType = function getSizeForType(type) {
    return sizeForType[type] || sizeForType.standard;
  };

  var BannerView = function BannerView(props) {
    var type = props.type,
        onPress = props.onPress,
        onError = props.onError,
        style = props.style,
        restProps = babelHelpers.objectWithoutProperties(props, ["type", "onPress", "onError", "style"]);
    var size = getSizeForType(type);
    return _react2.default.createElement(CTKBannerView, babelHelpers.extends({
      size: size,
      onAdPress: onPress,
      onAdError: onError,
      style: [style, {
        height: size
      }]
    }, restProps));
  };

  exports.default = BannerView;
},720,[103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ACTION_ZEN_MODE_SETTINGS = exports.ACTION_ZEN_MODE_SCHEDULE_RULE_SETTINGS = exports.ACTION_ZEN_MODE_PRIORITY_SETTINGS = exports.ACTION_ZEN_MODE_EXTERNAL_RULE_SETTINGS = exports.ACTION_ZEN_MODE_EVENT_RULE_SETTINGS = exports.ACTION_ZEN_MODE_AUTOMATION_SETTINGS = exports.ACTION_WIRELESS_SETTINGS = exports.ACTION_WIFI_SETTINGS = exports.ACTION_WIFI_IP_SETTINGS = exports.ACTION_WEBVIEW_SETTINGS = exports.ACTION_VR_LISTENER_SETTINGS = exports.ACTION_VPN_SETTINGS = exports.ACTION_VOICE_INPUT_SETTINGS = exports.ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE = exports.ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE = exports.ACTION_VOICE_CONTROL_AIRPLANE_MODE = exports.ACTION_USER_SETTINGS = exports.ACTION_USER_DICTIONARY_SETTINGS = exports.ACTION_USER_DICTIONARY_INSERT = exports.ACTION_USAGE_ACCESS_SETTINGS = exports.ACTION_TRUSTED_CREDENTIALS_USER = exports.ACTION_TETHER_PROVISIONING_UI = exports.ACTION_SYSTEM_UPDATE_SETTINGS = exports.ACTION_SYNC_SETTINGS = exports.ACTION_STORAGE_MANAGER_SETTINGS = exports.ACTION_SOUND_SETTINGS = exports.ACTION_SHOW_REMOTE_BUGREPORT_DIALOG = exports.ACTION_SHOW_REGULATORY_INFO = exports.ACTION_SHOW_INPUT_METHOD_PICKER = exports.ACTION_SHOW_ADMIN_SUPPORT_DETAILS = exports.ACTION_SETTINGS = exports.ACTION_SECURITY_SETTINGS = exports.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS = exports.ACTION_QUICK_LAUNCH_SETTINGS = exports.ACTION_PRIVACY_SETTINGS = exports.ACTION_PAIRING_SETTINGS = exports.ACTION_NOTIFICATION_SETTINGS = exports.ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS = exports.ACTION_NIGHT_DISPLAY_SETTINGS = exports.ACTION_NFC_SETTINGS = exports.ACTION_NFC_PAYMENT_SETTINGS = exports.ACTION_NFCSHARING_SETTINGS = exports.ACTION_NETWORK_OPERATOR_SETTINGS = exports.ACTION_MONITORING_CERT_INFO = exports.ACTION_MEMORY_CARD_SETTINGS = exports.ACTION_MANAGE_DEFAULT_APPS_SETTINGS = exports.ACTION_MANAGE_APPLICATIONS_SETTINGS = exports.ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS = exports.ACTION_LOCATION_SOURCE_SETTINGS = exports.ACTION_LOCALE_SETTINGS = exports.ACTION_INTERNAL_STORAGE_SETTINGS = exports.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS = exports.ACTION_INPUT_METHOD_SETTINGS = exports.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS = exports.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS = exports.ACTION_HOME_SETTINGS = exports.ACTION_HARD_KEYBOARD_SETTINGS = exports.ACTION_DREAM_SETTINGS = exports.ACTION_DISPLAY_SETTINGS = exports.ACTION_DEVICE_NAME = exports.ACTION_DEVICE_INFO_SETTINGS = exports.ACTION_DATE_SETTINGS = exports.ACTION_DATA_ROAMING_SETTINGS = exports.ACTION_CAST_SETTINGS = exports.ACTION_CAPTIONING_SETTINGS = exports.ACTION_BLUETOOTH_SETTINGS = exports.ACTION_BATTERY_SAVER_SETTINGS = exports.ACTION_APP_OPS_SETTINGS = exports.ACTION_APP_NOTIFICATION_SETTINGS = exports.ACTION_APPLICATION_SETTINGS = exports.ACTION_APPLICATION_DEVELOPMENT_SETTINGS = exports.ACTION_APPLICATION_DETAILS_SETTINGS = exports.ACTION_APN_SETTINGS = exports.ACTION_AIRPLANE_MODE_SETTINGS = exports.ACTION_ADD_ACCOUNT_SETTINGS = exports.ACTION_PRINT_SETTINGS = exports.ACTION_NOTIFICATION_LISTENER_SETTINGS = exports.ACTION_CONDITION_PROVIDER_SETTINGS = exports.ACTION_APP_NOTIFICATION_REDACTION = exports.ACTION_ACCESSIBILITY_SETTINGS = undefined;
  exports.startActivityAsync = startActivityAsync;

  var _reactNative = _require(_dependencyMap[0]);

  var ACTION_ACCESSIBILITY_SETTINGS = exports.ACTION_ACCESSIBILITY_SETTINGS = 'android.settings.ACCESSIBILITY_SETTINGS';
  var ACTION_APP_NOTIFICATION_REDACTION = exports.ACTION_APP_NOTIFICATION_REDACTION = 'android.settings.ACTION_APP_NOTIFICATION_REDACTION';
  var ACTION_CONDITION_PROVIDER_SETTINGS = exports.ACTION_CONDITION_PROVIDER_SETTINGS = 'android.settings.ACTION_CONDITION_PROVIDER_SETTINGS';
  var ACTION_NOTIFICATION_LISTENER_SETTINGS = exports.ACTION_NOTIFICATION_LISTENER_SETTINGS = 'android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS';
  var ACTION_PRINT_SETTINGS = exports.ACTION_PRINT_SETTINGS = 'android.settings.ACTION_PRINT_SETTINGS';
  var ACTION_ADD_ACCOUNT_SETTINGS = exports.ACTION_ADD_ACCOUNT_SETTINGS = 'android.settings.ADD_ACCOUNT_SETTINGS';
  var ACTION_AIRPLANE_MODE_SETTINGS = exports.ACTION_AIRPLANE_MODE_SETTINGS = 'android.settings.AIRPLANE_MODE_SETTINGS';
  var ACTION_APN_SETTINGS = exports.ACTION_APN_SETTINGS = 'android.settings.APN_SETTINGS';
  var ACTION_APPLICATION_DETAILS_SETTINGS = exports.ACTION_APPLICATION_DETAILS_SETTINGS = 'android.settings.APPLICATION_DETAILS_SETTINGS';
  var ACTION_APPLICATION_DEVELOPMENT_SETTINGS = exports.ACTION_APPLICATION_DEVELOPMENT_SETTINGS = 'android.settings.APPLICATION_DEVELOPMENT_SETTINGS';
  var ACTION_APPLICATION_SETTINGS = exports.ACTION_APPLICATION_SETTINGS = 'android.settings.APPLICATION_SETTINGS';
  var ACTION_APP_NOTIFICATION_SETTINGS = exports.ACTION_APP_NOTIFICATION_SETTINGS = 'android.settings.APP_NOTIFICATION_SETTINGS';
  var ACTION_APP_OPS_SETTINGS = exports.ACTION_APP_OPS_SETTINGS = 'android.settings.APP_OPS_SETTINGS';
  var ACTION_BATTERY_SAVER_SETTINGS = exports.ACTION_BATTERY_SAVER_SETTINGS = 'android.settings.BATTERY_SAVER_SETTINGS';
  var ACTION_BLUETOOTH_SETTINGS = exports.ACTION_BLUETOOTH_SETTINGS = 'android.settings.BLUETOOTH_SETTINGS';
  var ACTION_CAPTIONING_SETTINGS = exports.ACTION_CAPTIONING_SETTINGS = 'android.settings.CAPTIONING_SETTINGS';
  var ACTION_CAST_SETTINGS = exports.ACTION_CAST_SETTINGS = 'android.settings.CAST_SETTINGS';
  var ACTION_DATA_ROAMING_SETTINGS = exports.ACTION_DATA_ROAMING_SETTINGS = 'android.settings.DATA_ROAMING_SETTINGS';
  var ACTION_DATE_SETTINGS = exports.ACTION_DATE_SETTINGS = 'android.settings.DATE_SETTINGS';
  var ACTION_DEVICE_INFO_SETTINGS = exports.ACTION_DEVICE_INFO_SETTINGS = 'android.settings.DEVICE_INFO_SETTINGS';
  var ACTION_DEVICE_NAME = exports.ACTION_DEVICE_NAME = 'android.settings.DEVICE_NAME';
  var ACTION_DISPLAY_SETTINGS = exports.ACTION_DISPLAY_SETTINGS = 'android.settings.DISPLAY_SETTINGS';
  var ACTION_DREAM_SETTINGS = exports.ACTION_DREAM_SETTINGS = 'android.settings.DREAM_SETTINGS';
  var ACTION_HARD_KEYBOARD_SETTINGS = exports.ACTION_HARD_KEYBOARD_SETTINGS = 'android.settings.HARD_KEYBOARD_SETTINGS';
  var ACTION_HOME_SETTINGS = exports.ACTION_HOME_SETTINGS = 'android.settings.HOME_SETTINGS';
  var ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS = exports.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS = 'android.settings.IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS';
  var ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS = exports.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS = 'android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS';
  var ACTION_INPUT_METHOD_SETTINGS = exports.ACTION_INPUT_METHOD_SETTINGS = 'android.settings.INPUT_METHOD_SETTINGS';
  var ACTION_INPUT_METHOD_SUBTYPE_SETTINGS = exports.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS = 'android.settings.INPUT_METHOD_SUBTYPE_SETTINGS';
  var ACTION_INTERNAL_STORAGE_SETTINGS = exports.ACTION_INTERNAL_STORAGE_SETTINGS = 'android.settings.INTERNAL_STORAGE_SETTINGS';
  var ACTION_LOCALE_SETTINGS = exports.ACTION_LOCALE_SETTINGS = 'android.settings.LOCALE_SETTINGS';
  var ACTION_LOCATION_SOURCE_SETTINGS = exports.ACTION_LOCATION_SOURCE_SETTINGS = 'android.settings.LOCATION_SOURCE_SETTINGS';
  var ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS = exports.ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS = 'android.settings.MANAGE_ALL_APPLICATIONS_SETTINGS';
  var ACTION_MANAGE_APPLICATIONS_SETTINGS = exports.ACTION_MANAGE_APPLICATIONS_SETTINGS = 'android.settings.MANAGE_APPLICATIONS_SETTINGS';
  var ACTION_MANAGE_DEFAULT_APPS_SETTINGS = exports.ACTION_MANAGE_DEFAULT_APPS_SETTINGS = 'android.settings.MANAGE_DEFAULT_APPS_SETTINGS';
  var ACTION_MEMORY_CARD_SETTINGS = exports.ACTION_MEMORY_CARD_SETTINGS = 'android.settings.MEMORY_CARD_SETTINGS';
  var ACTION_MONITORING_CERT_INFO = exports.ACTION_MONITORING_CERT_INFO = 'android.settings.MONITORING_CERT_INFO';
  var ACTION_NETWORK_OPERATOR_SETTINGS = exports.ACTION_NETWORK_OPERATOR_SETTINGS = 'android.settings.NETWORK_OPERATOR_SETTINGS';
  var ACTION_NFCSHARING_SETTINGS = exports.ACTION_NFCSHARING_SETTINGS = 'android.settings.NFCSHARING_SETTINGS';
  var ACTION_NFC_PAYMENT_SETTINGS = exports.ACTION_NFC_PAYMENT_SETTINGS = 'android.settings.NFC_PAYMENT_SETTINGS';
  var ACTION_NFC_SETTINGS = exports.ACTION_NFC_SETTINGS = 'android.settings.NFC_SETTINGS';
  var ACTION_NIGHT_DISPLAY_SETTINGS = exports.ACTION_NIGHT_DISPLAY_SETTINGS = 'android.settings.NIGHT_DISPLAY_SETTINGS';
  var ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS = exports.ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS = 'android.settings.NOTIFICATION_POLICY_ACCESS_SETTINGS';
  var ACTION_NOTIFICATION_SETTINGS = exports.ACTION_NOTIFICATION_SETTINGS = 'android.settings.NOTIFICATION_SETTINGS';
  var ACTION_PAIRING_SETTINGS = exports.ACTION_PAIRING_SETTINGS = 'android.settings.PAIRING_SETTINGS';
  var ACTION_PRIVACY_SETTINGS = exports.ACTION_PRIVACY_SETTINGS = 'android.settings.PRIVACY_SETTINGS';
  var ACTION_QUICK_LAUNCH_SETTINGS = exports.ACTION_QUICK_LAUNCH_SETTINGS = 'android.settings.QUICK_LAUNCH_SETTINGS';
  var ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS = exports.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS = 'android.settings.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS';
  var ACTION_SECURITY_SETTINGS = exports.ACTION_SECURITY_SETTINGS = 'android.settings.SECURITY_SETTINGS';
  var ACTION_SETTINGS = exports.ACTION_SETTINGS = 'android.settings.SETTINGS';
  var ACTION_SHOW_ADMIN_SUPPORT_DETAILS = exports.ACTION_SHOW_ADMIN_SUPPORT_DETAILS = 'android.settings.SHOW_ADMIN_SUPPORT_DETAILS';
  var ACTION_SHOW_INPUT_METHOD_PICKER = exports.ACTION_SHOW_INPUT_METHOD_PICKER = 'android.settings.SHOW_INPUT_METHOD_PICKER';
  var ACTION_SHOW_REGULATORY_INFO = exports.ACTION_SHOW_REGULATORY_INFO = 'android.settings.SHOW_REGULATORY_INFO';
  var ACTION_SHOW_REMOTE_BUGREPORT_DIALOG = exports.ACTION_SHOW_REMOTE_BUGREPORT_DIALOG = 'android.settings.SHOW_REMOTE_BUGREPORT_DIALOG';
  var ACTION_SOUND_SETTINGS = exports.ACTION_SOUND_SETTINGS = 'android.settings.SOUND_SETTINGS';
  var ACTION_STORAGE_MANAGER_SETTINGS = exports.ACTION_STORAGE_MANAGER_SETTINGS = 'android.settings.STORAGE_MANAGER_SETTINGS';
  var ACTION_SYNC_SETTINGS = exports.ACTION_SYNC_SETTINGS = 'android.settings.SYNC_SETTINGS';
  var ACTION_SYSTEM_UPDATE_SETTINGS = exports.ACTION_SYSTEM_UPDATE_SETTINGS = 'android.settings.SYSTEM_UPDATE_SETTINGS';
  var ACTION_TETHER_PROVISIONING_UI = exports.ACTION_TETHER_PROVISIONING_UI = 'android.settings.TETHER_PROVISIONING_UI';
  var ACTION_TRUSTED_CREDENTIALS_USER = exports.ACTION_TRUSTED_CREDENTIALS_USER = 'android.settings.TRUSTED_CREDENTIALS_USER';
  var ACTION_USAGE_ACCESS_SETTINGS = exports.ACTION_USAGE_ACCESS_SETTINGS = 'android.settings.USAGE_ACCESS_SETTINGS';
  var ACTION_USER_DICTIONARY_INSERT = exports.ACTION_USER_DICTIONARY_INSERT = 'android.settings.USER_DICTIONARY_INSERT';
  var ACTION_USER_DICTIONARY_SETTINGS = exports.ACTION_USER_DICTIONARY_SETTINGS = 'android.settings.USER_DICTIONARY_SETTINGS';
  var ACTION_USER_SETTINGS = exports.ACTION_USER_SETTINGS = 'android.settings.USER_SETTINGS';
  var ACTION_VOICE_CONTROL_AIRPLANE_MODE = exports.ACTION_VOICE_CONTROL_AIRPLANE_MODE = 'android.settings.VOICE_CONTROL_AIRPLANE_MODE';
  var ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE = exports.ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE = 'android.settings.VOICE_CONTROL_BATTERY_SAVER_MODE';
  var ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE = exports.ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE = 'android.settings.VOICE_CONTROL_DO_NOT_DISTURB_MODE';
  var ACTION_VOICE_INPUT_SETTINGS = exports.ACTION_VOICE_INPUT_SETTINGS = 'android.settings.VOICE_INPUT_SETTINGS';
  var ACTION_VPN_SETTINGS = exports.ACTION_VPN_SETTINGS = 'android.settings.VPN_SETTINGS';
  var ACTION_VR_LISTENER_SETTINGS = exports.ACTION_VR_LISTENER_SETTINGS = 'android.settings.VR_LISTENER_SETTINGS';
  var ACTION_WEBVIEW_SETTINGS = exports.ACTION_WEBVIEW_SETTINGS = 'android.settings.WEBVIEW_SETTINGS';
  var ACTION_WIFI_IP_SETTINGS = exports.ACTION_WIFI_IP_SETTINGS = 'android.settings.WIFI_IP_SETTINGS';
  var ACTION_WIFI_SETTINGS = exports.ACTION_WIFI_SETTINGS = 'android.settings.WIFI_SETTINGS';
  var ACTION_WIRELESS_SETTINGS = exports.ACTION_WIRELESS_SETTINGS = 'android.settings.WIRELESS_SETTINGS';
  var ACTION_ZEN_MODE_AUTOMATION_SETTINGS = exports.ACTION_ZEN_MODE_AUTOMATION_SETTINGS = 'android.settings.ZEN_MODE_AUTOMATION_SETTINGS';
  var ACTION_ZEN_MODE_EVENT_RULE_SETTINGS = exports.ACTION_ZEN_MODE_EVENT_RULE_SETTINGS = 'android.settings.ZEN_MODE_EVENT_RULE_SETTINGS';
  var ACTION_ZEN_MODE_EXTERNAL_RULE_SETTINGS = exports.ACTION_ZEN_MODE_EXTERNAL_RULE_SETTINGS = 'android.settings.ZEN_MODE_EXTERNAL_RULE_SETTINGS';
  var ACTION_ZEN_MODE_PRIORITY_SETTINGS = exports.ACTION_ZEN_MODE_PRIORITY_SETTINGS = 'android.settings.ZEN_MODE_PRIORITY_SETTINGS';
  var ACTION_ZEN_MODE_SCHEDULE_RULE_SETTINGS = exports.ACTION_ZEN_MODE_SCHEDULE_RULE_SETTINGS = 'android.settings.ZEN_MODE_SCHEDULE_RULE_SETTINGS';
  var ACTION_ZEN_MODE_SETTINGS = exports.ACTION_ZEN_MODE_SETTINGS = 'android.settings.ZEN_MODE_SETTINGS';

  function startActivityAsync(activity) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    {
      return _reactNative.NativeModules.ExponentIntentLauncher.startActivity(activity, data);
    }
  }
},721,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Orientation = undefined;
  exports.allow = allow;

  var _reactNative = _require(_dependencyMap[0]);

  var Orientation = exports.Orientation = {
    ALL: 'ALL',
    ALL_BUT_UPSIDE_DOWN: 'ALL_BUT_UPSIDE_DOWN',
    PORTRAIT: 'PORTRAIT',
    PORTRAIT_UP: 'PORTRAIT_UP',
    PORTRAIT_DOWN: 'PORTRAIT_DOWN',
    LANDSCAPE: 'LANDSCAPE',
    LANDSCAPE_LEFT: 'LANDSCAPE_LEFT',
    LANDSCAPE_RIGHT: 'LANDSCAPE_RIGHT'
  };

  function allow(orientation) {
    _reactNative.NativeModules.ExponentScreenOrientation.allow(orientation);
  }
},722,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WHEN_UNLOCKED_THIS_DEVICE_ONLY = exports.WHEN_UNLOCKED = exports.ALWAYS_THIS_DEVICE_ONLY = exports.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = exports.ALWAYS = exports.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = exports.AFTER_FIRST_UNLOCK = undefined;
  exports.deleteItemAsync = deleteItemAsync;
  exports.getItemAsync = getItemAsync;
  exports.setItemAsync = setItemAsync;

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentSecureStore = _reactNative.NativeModules.ExponentSecureStore;
  var AFTER_FIRST_UNLOCK = exports.AFTER_FIRST_UNLOCK = ExponentSecureStore.AFTER_FIRST_UNLOCK;
  var AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = exports.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = ExponentSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;
  var ALWAYS = exports.ALWAYS = ExponentSecureStore.ALWAYS;
  var WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = exports.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = ExponentSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;
  var ALWAYS_THIS_DEVICE_ONLY = exports.ALWAYS_THIS_DEVICE_ONLY = ExponentSecureStore.ALWAYS_THIS_DEVICE_ONLY;
  var WHEN_UNLOCKED = exports.WHEN_UNLOCKED = ExponentSecureStore.WHEN_UNLOCKED;
  var WHEN_UNLOCKED_THIS_DEVICE_ONLY = exports.WHEN_UNLOCKED_THIS_DEVICE_ONLY = ExponentSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;

  function deleteItemAsync(key) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return regeneratorRuntime.async(function deleteItemAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ensureValidKey(key);

            _context.next = 3;
            return regeneratorRuntime.awrap(ExponentSecureStore.deleteValueWithKeyAsync(key, options));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function getItemAsync(key) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return regeneratorRuntime.async(function getItemAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _ensureValidKey(key);

            _context2.next = 3;
            return regeneratorRuntime.awrap(ExponentSecureStore.getValueWithKeyAsync(key, options));

          case 3:
            return _context2.abrupt("return", _context2.sent);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function setItemAsync(key, value) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return regeneratorRuntime.async(function setItemAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _ensureValidKey(key);

            if (_isValidValue(value)) {
              _context3.next = 3;
              break;
            }

            throw new Error("Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.");

          case 3:
            _context3.next = 5;
            return regeneratorRuntime.awrap(ExponentSecureStore.setValueWithKeyAsync(value, key, options));

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function _ensureValidKey(key) {
    if (!_isValidKey(key)) {
      throw new Error("Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".");
    }
  }

  function _isValidKey(key) {
    return typeof key === 'string' && /^[\w.-]+$/.test(key);
  }

  function _isValidValue(value) {
    return typeof value === 'string';
  }
},723,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentSegment = _reactNative.NativeModules.ExponentSegment;
  exports.default = {
    initialize: function initialize(options) {
      {
        return ExponentSegment.initializeAndroid(options.androidWriteKey);
      }
    },
    identify: function identify(userId) {
      return ExponentSegment.identify(userId);
    },
    identifyWithTraits: function identifyWithTraits(userId, traits) {
      return ExponentSegment.identifyWithTraits(userId, traits);
    },
    group: function group(groupId) {
      return ExponentSegment.group(groupId);
    },
    groupWithTraits: function groupWithTraits(groupId, traits) {
      return ExponentSegment.groupWithTraits(groupId, traits);
    },
    reset: function reset() {
      return ExponentSegment.reset();
    },
    track: function track(event) {
      return ExponentSegment.track(event);
    },
    trackWithProperties: function trackWithProperties(event, properties) {
      return ExponentSegment.trackWithProperties(event, properties);
    },
    screen: function screen(screenName) {
      return ExponentSegment.screen(screenName);
    },
    screenWithProperties: function screenWithProperties(event, properties) {
      return ExponentSegment.screenWithProperties(event, properties);
    },
    flush: function flush() {
      return ExponentSegment.flush();
    }
  };
},724,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.speak = speak;
  exports.isSpeakingAsync = isSpeakingAsync;
  exports.stop = stop;
  exports.pause = pause;
  exports.resume = resume;

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentSpeech = _reactNative.NativeModules.ExponentSpeech;
  var SpeechEventEmitter = new _reactNative.NativeEventEmitter(ExponentSpeech);
  var _GLOBAL_ID = 1;
  var _CALLBACKS = {};
  var _LISTENERS_SET = false;

  function _unregisterListenersIfNeeded() {
    if (Object.keys(_CALLBACKS).length === 0) {
      removeSpeakingListener('Exponent.speakingStarted');
      removeSpeakingListener('Exponent.speakingDone');
      removeSpeakingListener('Exponent.speakingStopped');
      removeSpeakingListener('Exponent.speakingError');
      _LISTENERS_SET = false;
    }
  }

  function _registerListenersIfNeeded() {
    if (_LISTENERS_SET) return;
    _LISTENERS_SET = true;
    setSpeakingListener('Exponent.speakingStarted', function (_ref) {
      var id = _ref.id;
      var options = _CALLBACKS[id];

      if (options && options.onStart) {
        options.onStart();
      }
    });
    setSpeakingListener('Exponent.speakingDone', function (_ref2) {
      var id = _ref2.id;
      var options = _CALLBACKS[id];

      if (options && options.onDone) {
        options.onDone();
      }

      delete _CALLBACKS[id];

      _unregisterListenersIfNeeded();
    });
    setSpeakingListener('Exponent.speakingStopped', function (_ref3) {
      var id = _ref3.id;
      var options = _CALLBACKS[id];

      if (options && options.onStopped) {
        options.onStopped();
      }

      delete _CALLBACKS[id];

      _unregisterListenersIfNeeded();
    });
    setSpeakingListener('Exponent.speakingError', function (_ref4) {
      var id = _ref4.id,
          error = _ref4.error;
      var options = _CALLBACKS[id];

      if (options && options.onError) {
        options.onError(error);
      }

      delete _CALLBACKS[id];

      _unregisterListenersIfNeeded();
    });
  }

  function speak(text) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var id = _GLOBAL_ID++;
    _CALLBACKS[id] = options;

    _registerListenersIfNeeded();

    ExponentSpeech.speak(String(id), text, options);
  }

  function isSpeakingAsync() {
    return regeneratorRuntime.async(function isSpeakingAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(ExponentSpeech.isSpeaking());

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function stop() {
    ExponentSpeech.stop();
  }

  function pause() {
    {
      throw new Error('Speech.pause is not available on Android');
    }
  }

  function resume() {
    {
      throw new Error('Speech.resume is not available on Android');
    }
  }

  function setSpeakingListener(eventName, callback) {
    if (SpeechEventEmitter.listeners(eventName).length > 0) {
      SpeechEventEmitter.removeAllListeners(eventName);
    }

    SpeechEventEmitter.addListener(eventName, callback);
  }

  function removeSpeakingListener(eventName) {
    SpeechEventEmitter.removeAllListeners(eventName);
  }
},725,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EventType = undefined;
  exports.reload = reload;
  exports.reloadFromCache = reloadFromCache;
  exports.checkForUpdateAsync = checkForUpdateAsync;
  exports.fetchUpdateAsync = fetchUpdateAsync;
  exports.addListener = addListener;

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _fbemitter = _require(_dependencyMap[1]);

  var _reactNative = _require(_dependencyMap[2]);

  var ExponentUpdates = _reactNative.NativeModules.ExponentUpdates;

  function reload() {
    ExponentUpdates.reload();
  }

  function reloadFromCache() {
    ExponentUpdates.reloadFromCache();
  }

  function checkForUpdateAsync() {
    var result, returnObj;
    return regeneratorRuntime.async(function checkForUpdateAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(ExponentUpdates.checkForUpdateAsync());

          case 2:
            result = _context.sent;
            returnObj = {
              isAvailable: !!result
            };

            if (result) {
              returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;
            }

            return _context.abrupt("return", returnObj);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function fetchUpdateAsync() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        eventListener = _ref.eventListener;

    var subscription, result, returnObj;
    return regeneratorRuntime.async(function fetchUpdateAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            subscription = void 0;
            result = void 0;

            if (eventListener && typeof eventListener === 'function') {
              subscription = addListener(eventListener);
            }

            _context2.prev = 3;
            _context2.next = 6;
            return regeneratorRuntime.awrap(ExponentUpdates.fetchUpdateAsync());

          case 6:
            result = _context2.sent;

          case 7:
            _context2.prev = 7;
            subscription && subscription.remove();
            return _context2.finish(7);

          case 10:
            returnObj = {
              isNew: !!result
            };

            if (result) {
              returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;
            }

            return _context2.abrupt("return", returnObj);

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this, [[3,, 7, 10]]);
  }

  var _emitter = void 0;

  function _getEmitter() {
    if (!_emitter) {
      _emitter = new _fbemitter.EventEmitter();

      _reactNative.DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);
    }

    return _emitter;
  }

  function _emitEvent(params) {
    var newParams = params;

    if (typeof params === 'string') {
      newParams = JSON.parse(params);
    }

    if (newParams.manifestString) {
      newParams.manifest = JSON.parse(newParams.manifestString);
      delete newParams.manifestString;
    }

    (0, _invariant2.default)(_emitter, "EventEmitter must be initialized to use from its listener");

    _emitter.emit('Exponent.updatesEvent', newParams);
  }

  function addListener(listener) {
    var emitter = _getEmitter();

    return emitter.addListener('Exponent.updatesEvent', listener);
  }

  var EventType = exports.EventType = {
    DOWNLOAD_STARTED: 'downloadStart',
    DOWNLOAD_PROGRESS: 'downloadProgress',
    DOWNLOAD_FINISHED: 'downloadFinished',
    NO_UPDATE_AVAILABLE: 'noUpdateAvailable',
    ERROR: 'error'
  };
},726,[319,314,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getCurrentDeviceCountryAsync = getCurrentDeviceCountryAsync;
  exports.getCurrentLocaleAsync = getCurrentLocaleAsync;
  exports.getCurrentTimeZoneAsync = getCurrentTimeZoneAsync;
  exports.reload = reload;
  exports.addNewVersionListenerExperimental = addNewVersionListenerExperimental;

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _fbemitter = _require(_dependencyMap[1]);

  var _reactNative = _require(_dependencyMap[2]);

  var _Localization = _require(_dependencyMap[3]);

  var _Localization2 = babelHelpers.interopRequireDefault(_Localization);

  var _Updates = _require(_dependencyMap[4]);

  var Updates = babelHelpers.interopRequireWildcard(_Updates);

  function getCurrentDeviceCountryAsync() {
    console.warn('Util.getCurrentDeviceCountryAsync is deprecated, use Localization.getCurrentDeviceCountryAsync');
    return _Localization2.default.getCurrentDeviceCountryAsync();
  }

  function getCurrentLocaleAsync() {
    console.warn('Util.getCurrentLocaleAsync is deprecated, use Localization.getCurrentLocaleAsync');
    return _Localization2.default.getCurrentLocaleAsync();
  }

  function getCurrentTimeZoneAsync() {
    console.warn('Util.getCurrentTimeZoneAsync is deprecated, use Localization.getCurrentTimeZoneAsync');
    return _Localization2.default.getCurrentTimeZoneAsync();
  }

  function reload() {
    console.warn('Util.reload is deprecated, use Updates.reload instead');
    return Updates.reload();
  }

  var _emitter = void 0;

  function _getEmitter() {
    if (!_emitter) {
      _emitter = new _fbemitter.EventEmitter();

      _reactNative.DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitNewVersionAvailable);
    }

    return _emitter;
  }

  function _emitNewVersionAvailable(newVersionEvent) {
    if (typeof newVersionEvent === 'string') {
      newVersionEvent = JSON.parse(newVersionEvent);
    }

    if (newVersionEvent.type === 'downloadFinished') {
      if (newVersionEvent.manifestString && typeof newVersionEvent.manifestString === 'string') {
        newVersionEvent.manifest = JSON.parse(newVersionEvent.manifestString);
        delete newVersionEvent.manifestString;
      }

      delete newVersionEvent.type;
      (0, _invariant2.default)(_emitter, "EventEmitter must be initialized to use from its listener");

      _emitter.emit('newVersionAvailable', newVersionEvent);
    }
  }

  function addNewVersionListenerExperimental(listener) {
    console.warn('Util.addNewVersionListenerExperimental is deprecated, use Updates.addListener instead');

    var emitter = _getEmitter();

    return emitter.addListener('newVersionAvailable', listener);
  }
},727,[319,314,14,499,726]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  _require(_dependencyMap[2]);

  var _Navigation = _require(_dependencyMap[3]);

  var _Navigation2 = babelHelpers.interopRequireDefault(_Navigation);

  var _reactNativeMeteor = _require(_dependencyMap[4]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _Styles = _require(_dependencyMap[5]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var App = function (_React$Component) {
    babelHelpers.inherits(App, _React$Component);

    function App() {
      babelHelpers.classCallCheck(this, App);
      return babelHelpers.possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));
    }

    babelHelpers.createClass(App, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var url = 'ws://192.168.1.231:3000/websocket';

        _reactNativeMeteor2.default.connect(url);
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(_Navigation2.default, null)
        );
      }
    }]);
    return App;
  }(_react2.default.Component);

  exports.default = App;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      justifyContent: 'center'
    }
  });
},728,[103,14,729,734,858,1015]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _reactotronReactNative = _require(_dependencyMap[0]);

  var _reactotronReactNative2 = babelHelpers.interopRequireDefault(_reactotronReactNative);

  _reactotronReactNative2.default.configure().useReactNative().connect();
},729,[730]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function _interopDefault(e) {
    return e && "object" == typeof e && "default" in e ? e.default : e;
  }

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var reactNative = _require(_dependencyMap[0]),
      React = _require(_dependencyMap[1]),
      React__default = _interopDefault(React),
      PropTypes = _interopDefault(_require(_dependencyMap[2])),
      mitt = _interopDefault(_require(_dependencyMap[3])),
      XHRInterceptor = _interopDefault(_require(_dependencyMap[4])),
      reactotronCoreClient = _require(_dependencyMap[5]),
      parseErrorStack = void 0,
      symbolicateStackTrace = void 0,
      PLUGIN_DEFAULTS = {
    veto: null
  },
      trackGlobalErrors = function trackGlobalErrors(e) {
    return function (t) {
      var r = babelHelpers.extends({}, PLUGIN_DEFAULTS, e || {}),
          n = null,
          o = false;

      function a(e, o, a) {
        n(e, o, a);

        try {
          var i = o.map(function (e) {
            return {
              functionName: "<unknown>" === e.methodName ? null : e.methodName,
              lineNumber: e.lineNumber,
              columnNumber: e.column,
              fileName: e.file
            };
          });
          r.veto && (i = i.filter(function (e) {
            return r.veto(e);
          })), t.error(e, i);
        } catch (e) {}
      }

      function i() {
        o || reactNative.NativeModules.ExceptionsManager && (n = reactNative.NativeModules.ExceptionsManager.updateExceptionMessage, reactNative.NativeModules.ExceptionsManager.updateExceptionMessage = a, o = true);
      }

      return i(), {
        features: {
          reportError: function reportError(e) {
            try {
              if (parseErrorStack = parseErrorStack || _require(_dependencyMap[6]), symbolicateStackTrace = symbolicateStackTrace || _require(_dependencyMap[7]), parseErrorStack && symbolicateStackTrace) {
                var n = parseErrorStack(e);
                symbolicateStackTrace(n).then(function (n) {
                  var o = n.map(function (e) {
                    return {
                      fileName: e.file,
                      functionName: e.methodName,
                      lineNumber: e.lineNumber
                    };
                  });
                  r.veto && (o = o.filter(function (e) {
                    return r.veto(e);
                  })), t.error(e.message, o);
                });
              }
            } catch (e) {}
          },
          trackGlobalErrors: i,
          untrackGlobalErrors: function untrackGlobalErrors() {
            n && reactNative.NativeModules.ExceptionsManager && (reactNative.NativeModules.ExceptionsManager.updateExceptionMessage = n, o = false);
          }
        }
      };
    };
  },
      DEFAULTS$1 = {
    url: "http://localhost:8081"
  },
      openInEditor = function openInEditor() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    return function (t) {
      var r = babelHelpers.extends({}, DEFAULTS$1, e);
      return {
        onCommand: function onCommand(e) {
          if ("editor.open" === e.type) {
            var t = e.payload,
                n = t.file,
                o = t.lineNumber,
                a = r.url + "/open-stack-frame",
                i = {
              file: n,
              lineNumber: o || 1
            };
            fetch(a, {
              method: "POST",
              body: JSON.stringify(i)
            });
          }
        }
      };
    };
  },
      _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (e) {
    return typeof e;
  } : function (e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof e;
  },
      asyncToGenerator = function asyncToGenerator(e) {
    return function () {
      var t = e.apply(this, arguments);
      return new Promise(function (e, r) {
        return function n(o, a) {
          try {
            var i = t[o](a),
                c = i.value;
          } catch (e) {
            return void r(e);
          }

          if (!i.done) return Promise.resolve(c).then(function (e) {
            n("next", e);
          }, function (e) {
            n("throw", e);
          });
          e(c);
        }("next");
      });
    };
  },
      classCallCheck = function classCallCheck(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  },
      createClass = function () {
    function e(e, t) {
      for (var r = 0; r < t.length; r++) {
        var n = t[r];
        n.enumerable = n.enumerable || false, n.configurable = true, "value" in n && (n.writable = true), Object.defineProperty(e, n.key, n);
      }
    }

    return function (t, r, n) {
      return r && e(t.prototype, r), n && e(t, n), t;
    };
  }(),
      _extends = Object.assign || function (e) {
    for (var t = 1; t < arguments.length; t++) {
      var r = arguments[t];

      for (var n in r) {
        Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);
      }
    }

    return e;
  },
      inherits = function inherits(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: false,
        writable: true,
        configurable: true
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  },
      possibleConstructorReturn = function possibleConstructorReturn(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  },
      Styles = {
    container: {
      position: "absolute",
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      zIndex: 1e3,
      opacity: .25
    }
  },
      FullScreenOverlay = function (e) {
    function t(e) {
      classCallCheck(this, t);
      var r = possibleConstructorReturn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
      return r.state = {
        opacity: Styles.container.opacity,
        uri: null,
        justifyContent: "center",
        alignItems: "center"
      }, e.emitter.on("overlay", function (e) {
        r.setState(_extends({}, r.state, e));
      }), r;
    }

    return inherits(t, e), createClass(t, [{
      key: "createContainerStyle",
      value: function value() {
        var e = this.state,
            t = e.opacity,
            r = e.justifyContent,
            n = e.alignItems,
            o = reactNative.Dimensions.get("window"),
            a = o.width,
            i = o.height;
        return _extends({}, Styles.container, {
          opacity: t,
          width: a,
          height: i,
          justifyContent: r,
          alignItems: n
        });
      }
    }, {
      key: "render",
      value: function value() {
        var e = this.state,
            t = e.uri,
            r = e.width,
            n = e.height,
            o = e.growToWindow,
            a = e.resizeMode,
            i = e.marginLeft,
            c = void 0 === i ? 0 : i,
            s = e.marginRight,
            u = void 0 === s ? 0 : s,
            l = e.marginTop,
            f = void 0 === l ? 0 : l,
            p = e.marginBottom,
            v = {
          width: r,
          height: n,
          marginTop: f,
          marginRight: u,
          marginBottom: void 0 === p ? 0 : p,
          marginLeft: c
        };

        if (o) {
          var m = reactNative.Dimensions.get("window");
          v.width = m.width, v.height = m.height;
        }

        var d = t ? React__default.createElement(reactNative.Image, {
          source: {
            uri: t
          },
          style: v,
          resizeMode: o ? a : null
        }) : React__default.createElement(reactNative.View, null);
        return React__default.createElement(reactNative.View, {
          style: this.createContainerStyle(),
          pointerEvents: "none"
        }, d);
      }
    }]), t;
  }(React.Component);

  FullScreenOverlay.propTypes = {
    emitter: PropTypes.object.isRequired
  };

  var overlay = function overlay() {
    return function (e) {
      var t = mitt();
      return {
        onCommand: function onCommand(e) {
          "overlay" === e.type && t.emit("overlay", e.payload);
        },
        features: {
          overlay: function overlay(e) {
            return function (r) {
              return React__default.createElement(reactNative.View, {
                style: {
                  flex: 1
                }
              }, React__default.createElement(e, r), React__default.createElement(FullScreenOverlay, {
                emitter: t
              }));
            };
          }
        }
      };
    };
  },
      _this$1 = void 0,
      PLUGIN_DEFAULTS$1 = {
    ignore: []
  },
      asyncStorage = function asyncStorage(e) {
    return function (t) {
      var r,
          n,
          o,
          a,
          i,
          c,
          s,
          u = babelHelpers.extends({}, PLUGIN_DEFAULTS$1, e || {}).ignore || PLUGIN_DEFAULTS$1.ignore,
          l = void 0,
          f = void 0,
          p = void 0,
          v = void 0,
          m = void 0,
          d = void 0,
          y = void 0,
          g = false,
          h = function h(e, r) {
        t.send("asyncStorage.mutation", {
          action: e,
          data: r
        });
      },
          N = (r = asyncToGenerator(regeneratorRuntime.mark(function e(t, r, n) {
        return regeneratorRuntime.wrap(function (e) {
          for (;;) {
            switch (e.prev = e.next) {
              case 0:
                try {
                  u.indexOf(t) < 0 && h("setItem", {
                    key: t,
                    value: r
                  });
                } catch (e) {}

                return e.abrupt("return", l(t, r, n));

              case 2:
              case "end":
                return e.stop();
            }
          }
        }, e, _this$1);
      })), function (e, t, n) {
        return r.apply(this, arguments);
      }),
          b = (n = asyncToGenerator(regeneratorRuntime.mark(function e(t, r) {
        return regeneratorRuntime.wrap(function (e) {
          for (;;) {
            switch (e.prev = e.next) {
              case 0:
                try {
                  u.indexOf(t) < 0 && h("removeItem", {
                    key: t
                  });
                } catch (e) {}

                return e.abrupt("return", f(t, r));

              case 2:
              case "end":
                return e.stop();
            }
          }
        }, e, _this$1);
      })), function (e, t) {
        return n.apply(this, arguments);
      }),
          S = (o = asyncToGenerator(regeneratorRuntime.mark(function e(t, r, n) {
        return regeneratorRuntime.wrap(function (e) {
          for (;;) {
            switch (e.prev = e.next) {
              case 0:
                try {
                  u.indexOf(t) < 0 && h("mergeItem", {
                    key: t,
                    value: r
                  });
                } catch (e) {}

                return e.abrupt("return", p(t, r, n));

              case 2:
              case "end":
                return e.stop();
            }
          }
        }, e, _this$1);
      })), function (e, t, r) {
        return o.apply(this, arguments);
      }),
          _ = (a = asyncToGenerator(regeneratorRuntime.mark(function e(t) {
        return regeneratorRuntime.wrap(function (e) {
          for (;;) {
            switch (e.prev = e.next) {
              case 0:
                try {
                  h("clear");
                } catch (e) {}

                return e.abrupt("return", v(t));

              case 2:
              case "end":
                return e.stop();
            }
          }
        }, e, _this$1);
      })), function (e) {
        return a.apply(this, arguments);
      }),
          w = (i = asyncToGenerator(regeneratorRuntime.mark(function e(t, r) {
        var n;
        return regeneratorRuntime.wrap(function (e) {
          for (;;) {
            switch (e.prev = e.next) {
              case 0:
                try {
                  (n = (t || []).filter(function (e) {
                    return e && e[0] && u.indexOf(e[0]) < 0;
                  })).length > 0 && h("multiSet", {
                    pairs: n
                  });
                } catch (e) {}

                return e.abrupt("return", m(t, r));

              case 2:
              case "end":
                return e.stop();
            }
          }
        }, e, _this$1);
      })), function (e, t) {
        return i.apply(this, arguments);
      }),
          k = (c = asyncToGenerator(regeneratorRuntime.mark(function e(t, r) {
        var n;
        return regeneratorRuntime.wrap(function (e) {
          for (;;) {
            switch (e.prev = e.next) {
              case 0:
                try {
                  (n = (t || []).filter(function (e) {
                    return u.indexOf(e) < 0;
                  })).length > 0 && h("multiRemove", {
                    keys: n
                  });
                } catch (e) {}

                return e.abrupt("return", d(t, r));

              case 2:
              case "end":
                return e.stop();
            }
          }
        }, e, _this$1);
      })), function (e, t) {
        return c.apply(this, arguments);
      }),
          R = (s = asyncToGenerator(regeneratorRuntime.mark(function e(t, r) {
        var n;
        return regeneratorRuntime.wrap(function (e) {
          for (;;) {
            switch (e.prev = e.next) {
              case 0:
                try {
                  (n = (t || []).filter(function (e) {
                    return e && e[0] && u.indexOf(e[0]) < 0;
                  })).length > 0 && h("multiMerge", {
                    pairs: n
                  });
                } catch (e) {}

                return e.abrupt("return", y(t, r));

              case 2:
              case "end":
                return e.stop();
            }
          }
        }, e, _this$1);
      })), function (e, t) {
        return s.apply(this, arguments);
      }),
          E = function E() {
        g || (l = reactNative.AsyncStorage.setItem, reactNative.AsyncStorage.setItem = N, f = reactNative.AsyncStorage.removeItem, reactNative.AsyncStorage.removeItem = b, p = reactNative.AsyncStorage.mergeItem, reactNative.AsyncStorage.mergeItem = S, v = reactNative.AsyncStorage.clear, reactNative.AsyncStorage.clear = _, m = reactNative.AsyncStorage.multiSet, reactNative.AsyncStorage.multiSet = w, d = reactNative.AsyncStorage.multiRemove, reactNative.AsyncStorage.multiRemove = k, y = reactNative.AsyncStorage.multiMerge, reactNative.AsyncStorage.multiMerge = R, g = true);
      };

      return E(), {
        features: {
          trackAsyncStorage: E,
          untrackAsyncStorage: function untrackAsyncStorage() {
            g && (reactNative.AsyncStorage.setItem = l, reactNative.AsyncStorage.removeItem = f, reactNative.AsyncStorage.mergeItem = p, reactNative.AsyncStorage.clear = v, reactNative.AsyncStorage.multiSet = m, reactNative.AsyncStorage.multiRemove = d, reactNative.AsyncStorage.multiMerge = y, g = false);
          }
        }
      };
    };
  },
      DEFAULT_CONTENT_TYPES_RX = /^(image)\/.*$/i,
      DEFAULTS$2 = {},
      networking = function networking() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    return function (t) {
      var r = babelHelpers.extends({}, DEFAULTS$2, e),
          n = r.ignoreContentTypes || DEFAULT_CONTENT_TYPES_RX,
          o = 1e3,
          a = {};
      return XHRInterceptor.setSendCallback(function (e, n) {
        r.ignoreUrls && r.ignoreUrls.test(n._url) ? n._skipReactotron = true : (o++, n._trackingName = o, a[o] = {
          data: e,
          xhr: n,
          stopTimer: t.startTimer()
        });
      }), XHRInterceptor.setResponseCallback(function (e, r, o, i, c, s) {
        if (!s._skipReactotron) {
          var u = s._trackingName,
              l = a[u] || {};
          a[u] = null;

          var f = l.data,
              p = l.stopTimer,
              v = {
            url: i || l.xhr._url,
            method: s._method || null,
            data: f,
            headers: s._headers || null
          },
              m = s.responseHeaders && s.responseHeaders["content-type"] || s.responseHeaders && s.responseHeaders["Content-Type"] || "",
              d = function d(r) {
            var n = "~~~ skipped ~~~";
            if (r) try {
              n = JSON.parse(r);
            } catch (e) {
              n = o;
            }
            var a = {
              body: n,
              status: e,
              headers: s.responseHeaders || null
            };
            t.apiResponse(v, a, p());
          };

          if ("string" != typeof o && "object" !== (void 0 === o ? "undefined" : _typeof(o)) || n.test(m || "")) d("");else if ("blob" === c && "undefined" != typeof FileReader) {
            var y = new FileReader();
            y.addEventListener("loadend", function e() {
              d(y.result), y.removeEventListener("loadend", e);
            }), y.readAsText(o);
          } else d(o);
        }
      }), XHRInterceptor.enableInterception(), {};
    };
  },
      StorybookSwitcher = function (e) {
    function t(e) {
      classCallCheck(this, t);
      var r = possibleConstructorReturn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
      return r.state = {
        showStorybook: false
      }, e.emitter.on("storybook", function (e) {
        r.setState({
          showStorybook: e
        });
      }), r;
    }

    return inherits(t, e), createClass(t, [{
      key: "render",
      value: function value() {
        var e = this.state.showStorybook,
            t = this.props,
            r = t.storybookUi,
            n = t.children;
        return React__default.createElement(reactNative.View, {
          style: {
            flex: 1
          }
        }, e ? React__default.createElement(r, null) : n);
      }
    }]), t;
  }(React.Component);

  StorybookSwitcher.propTypes = {
    storybookUi: PropTypes.func,
    emitter: PropTypes.object.isRequired
  };

  var storybook = function storybook() {
    return function (e) {
      var t = mitt();
      return {
        onCommand: function onCommand(e) {
          "storybook" === e.type && t.emit("storybook", e.payload);
        },
        features: {
          storybookSwitcher: function storybookSwitcher(e) {
            return function (r) {
              return function (n) {
                return React__default.createElement(StorybookSwitcher, {
                  storybookUi: e,
                  emitter: t
                }, React__default.createElement(r, n));
              };
            };
          }
        }
      };
    };
  },
      NativeModules$1 = _require(_dependencyMap[0]).NativeModules;

  function getByRemoteConfig(e) {
    var t = "undefined" != typeof window && window.__fbBatchedBridgeConfig && window.__fbBatchedBridgeConfig.remoteModuleConfig;
    if (!Array.isArray(t) || "localhost" !== e && "127.0.0.1" !== e) return e;
    var r = (t.find(getConstants) || [])[1];
    return r ? (r.ServerHost || e).split(":")[0] : e;
  }

  function getConstants(e) {
    return e && ("AndroidConstants" === e[0] || "PlatformConstants" === e[0]);
  }

  var getHost = function getHost(e) {
    if ("object" !== ("undefined" == typeof __fbBatchedBridge ? "undefined" : _typeof(__fbBatchedBridge)) || "localhost" !== e && "127.0.0.1" !== e) return e;
    e = getByRemoteConfig(e);
    var t = console.warn;
    return console.warn = function () {
      if (!(arguments[0] && arguments[0].indexOf("Requiring module 'NativeModules' by name") > -1)) return t.apply(console, arguments);
    }, "undefined" != typeof window && window.__DEV__ && "function" == typeof window.require ? (console.warn = t, e) : e;
  };

  function getReactNativeVersion() {
    try {
      if (!reactNative.NativeModules.PlatformConstants) return;
      if (!reactNative.NativeModules.PlatformConstants.reactNativeVersion) return;
      var e = reactNative.NativeModules.PlatformConstants.reactNativeVersion.major,
          t = reactNative.NativeModules.PlatformConstants.reactNativeVersion.minor,
          r = reactNative.NativeModules.PlatformConstants.reactNativeVersion.patch,
          n = reactNative.NativeModules.PlatformConstants.reactNativeVersion.prerelease;
      if ("number" != typeof e) return;
      var o = [];
      return o.push(e + "." + t + "." + r), n && o.push("-" + n), o.join("");
    } catch (e) {}
  }

  function getReactNativeDimensions() {
    try {
      var e = reactNative.Dimensions.get("screen"),
          t = reactNative.Dimensions.get("window");
      return {
        screenWidth: Math.ceil(e.width),
        screenHeight: Math.ceil(e.height),
        screenScale: e.scale,
        screenFontScale: e.fontScale,
        windowWidth: Math.ceil(t.width),
        windowHeight: Math.ceil(t.height),
        windowScale: t.scale,
        windowFontScale: t.fontScale
      };
    } catch (e) {}
  }

  var _this = void 0,
      constants = reactNative.NativeModules.PlatformConstants || {},
      REACTOTRON_ASYNC_CLIENT_ID = "@REACTOTRON/clientId",
      DEFAULTS = {
    createSocket: function createSocket(e) {
      return new WebSocket(e);
    },
    host: getHost("localhost"),
    port: 9090,
    name: "React Native App",
    environment: "production",
    client: _extends({
      reactotronLibraryName: "reactotron-react-native",
      reactotronLibraryVersion: "2.1.0",
      platform: reactNative.Platform.OS,
      platformVersion: reactNative.Platform.Version,
      osRelease: constants.Release,
      model: constants.Model,
      serverHost: constants.ServerHost,
      forceTouch: constants.forceTouchAvailable || false,
      interfaceIdiom: constants.interfaceIdiom,
      systemName: constants.systemName,
      uiMode: constants.uiMode,
      serial: constants.Serial,
      androidId: constants.androidID,
      reactNativeVersion: getReactNativeVersion()
    }, getReactNativeDimensions()),
    getClientId: function () {
      var e = asyncToGenerator(regeneratorRuntime.mark(function e() {
        return regeneratorRuntime.wrap(function (e) {
          for (;;) {
            switch (e.prev = e.next) {
              case 0:
                return e.abrupt("return", reactNative.AsyncStorage.getItem(REACTOTRON_ASYNC_CLIENT_ID));

              case 1:
              case "end":
                return e.stop();
            }
          }
        }, e, _this);
      }));
      return function () {
        return e.apply(this, arguments);
      };
    }(),
    setClientId: function setClientId(e) {
      return reactNative.AsyncStorage.setItem(REACTOTRON_ASYNC_CLIENT_ID, e);
    },
    proxyHack: true
  },
      reactotron = reactotronCoreClient.createClient(DEFAULTS);

  reactotron.useReactNative = function () {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    return false !== e.errors && reactotron.use(trackGlobalErrors(e.errors)), false !== e.editor && reactotron.use(openInEditor(e.editor)), false !== e.overlay && reactotron.use(overlay()), false !== e.asyncStorage && reactotron.use(asyncStorage(e.asyncStorage)), false !== e.networking && reactotron.use(networking(e.networking)), false !== e.storybook && reactotron.use(storybook()), reactotron;
  }, exports.trackGlobalErrors = trackGlobalErrors, exports.openInEditor = openInEditor, exports.overlay = overlay, exports.asyncStorage = asyncStorage, exports.networking = networking, exports.storybook = storybook, exports.default = reactotron;
},730,[14,103,121,731,732,733,57,307]);
__d(function (global, _require, module, exports, _dependencyMap) {
  function n(n) {
    return n = n || Object.create(null), {
      on: function on(c, e) {
        (n[c] || (n[c] = [])).push(e);
      },
      off: function off(c, e) {
        n[c] && n[c].splice(n[c].indexOf(e) >>> 0, 1);
      },
      emit: function emit(c, e) {
        (n[c] || []).slice().map(function (n) {
          n(e);
        }), (n["*"] || []).slice().map(function (n) {
          n(c, e);
        });
      }
    };
  }

  module.exports = n;
},731,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var XMLHttpRequest = _require(_dependencyMap[0]);

  var originalXHROpen = XMLHttpRequest.prototype.open;
  var originalXHRSend = XMLHttpRequest.prototype.send;
  var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;
  var openCallback;
  var sendCallback;
  var requestHeaderCallback;
  var headerReceivedCallback;
  var responseCallback;
  var _isInterceptorEnabled = false;
  var XHRInterceptor = {
    setOpenCallback: function setOpenCallback(callback) {
      openCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
      headerReceivedCallback = callback;
    },
    setResponseCallback: function setResponseCallback(callback) {
      responseCallback = callback;
    },
    setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
      requestHeaderCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      XMLHttpRequest.prototype.open = function (method, url) {
        if (openCallback) {
          openCallback(method, url, this);
        }

        originalXHROpen.apply(this, arguments);
      };

      XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
        if (requestHeaderCallback) {
          requestHeaderCallback(header, value, this);
        }

        originalXHRSetRequestHeader.apply(this, arguments);
      };

      XMLHttpRequest.prototype.send = function (data) {
        var _this = this;

        if (sendCallback) {
          sendCallback(data, this);
        }

        if (this.addEventListener) {
          this.addEventListener('readystatechange', function () {
            if (!_isInterceptorEnabled) {
              return;
            }

            if (_this.readyState === _this.HEADERS_RECEIVED) {
              var contentTypeString = _this.getResponseHeader('Content-Type');

              var contentLengthString = _this.getResponseHeader('Content-Length');

              var responseContentType = void 0,
                  responseSize = void 0;

              if (contentTypeString) {
                responseContentType = contentTypeString.split(';')[0];
              }

              if (contentLengthString) {
                responseSize = parseInt(contentLengthString, 10);
              }

              if (headerReceivedCallback) {
                headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
              }
            }

            if (_this.readyState === _this.DONE) {
              if (responseCallback) {
                responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
              }
            }
          }, false);
        }

        originalXHRSend.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      XMLHttpRequest.prototype.send = originalXHRSend;
      XMLHttpRequest.prototype.open = originalXHROpen;
      XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
      responseCallback = null;
      openCallback = null;
      sendCallback = null;
      headerReceivedCallback = null;
      requestHeaderCallback = null;
    }
  };
  module.exports = XHRInterceptor;
},732,[63]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var isCreateSocketValid = function isCreateSocketValid(e) {
    return null != e;
  },
      isHostValid = function isHostValid(e) {
    return "string" == typeof e && e && "" !== e;
  },
      isPortValid = function isPortValid(e) {
    return "number" == typeof e && 1 <= e && e <= 65535;
  },
      onCommandValid = function onCommandValid(e) {
    return "function" == typeof e;
  },
      validate = function validate(e) {
    var n = e.createSocket,
        t = e.host,
        r = e.port,
        o = e.onCommand;
    if (!isCreateSocketValid(n)) throw new Error("invalid createSocket function");
    if (!isHostValid(t)) throw new Error("invalid host");
    if (!isPortValid(r)) throw new Error("invalid port");
    if (!onCommandValid(o)) throw new Error("invalid onCommand handler");
  },
      logger = function logger() {
    return function (r) {
      return {
        features: {
          log: function log() {
            for (var e = [], n = 0; n < arguments.length; n++) {
              e[n] = arguments[n];
            }

            var t = e && 1 === e.length ? e[0] : e;
            r.send("log", {
              level: "debug",
              message: t
            }, false);
          },
          logImportant: function logImportant() {
            for (var e = [], n = 0; n < arguments.length; n++) {
              e[n] = arguments[n];
            }

            var t = e && 1 === e.length ? e[0] : e;
            r.send("log", {
              level: "debug",
              message: t
            }, true);
          },
          debug: function debug(e, n) {
            return void 0 === n && (n = false), r.send("log", {
              level: "debug",
              message: e
            }, !!n);
          },
          warn: function warn(e) {
            return r.send("log", {
              level: "warn",
              message: e
            }, true);
          },
          error: function error(e, n) {
            return r.send("log", {
              level: "error",
              message: e,
              stack: n
            }, true);
          }
        }
      };
    };
  },
      image = function image() {
    return function (a) {
      return {
        features: {
          image: function image(e) {
            var n = e.uri,
                t = e.preview,
                r = e.filename,
                o = e.width,
                i = e.height,
                s = e.caption;
            return a.send("image", {
              uri: n,
              preview: t,
              filename: r,
              width: o,
              height: i,
              caption: s
            });
          }
        }
      };
    };
  },
      benchmark = function benchmark() {
    return function (i) {
      var s = i.startTimer;
      return {
        features: {
          benchmark: function benchmark(n) {
            var r = [],
                o = s(),
                t = function t(e) {
              var n = 0 === r.length ? 0 : r[r.length - 1].time,
                  t = o();
              r.push({
                title: e,
                time: t,
                delta: t - n
              });
            };

            r.push({
              title: n,
              time: 0,
              delta: 0
            });

            var e = function e(_e) {
              t(_e), i.send("benchmark.report", {
                title: n,
                steps: r
              });
            };

            return {
              step: t,
              stop: e,
              last: e
            };
          }
        }
      };
    };
  },
      stateResponses = function stateResponses() {
    return function (r) {
      return {
        features: {
          stateActionComplete: function stateActionComplete(e, n, t) {
            return void 0 === t && (t = false), r.send("state.action.complete", {
              name: e,
              action: n
            }, !!t);
          },
          stateValuesResponse: function stateValuesResponse(e, n, t) {
            return void 0 === t && (t = true), r.send("state.values.response", {
              path: e,
              value: n,
              valid: t
            });
          },
          stateKeysResponse: function stateKeysResponse(e, n, t) {
            return void 0 === t && (t = true), r.send("state.keys.response", {
              path: e,
              keys: n,
              valid: t
            });
          },
          stateValuesChange: function stateValuesChange(e) {
            return r.send("state.values.change", {
              changes: e
            });
          },
          stateBackupResponse: function stateBackupResponse(e) {
            return r.send("state.backup.response", {
              state: e
            });
          }
        }
      };
    };
  },
      apiResponse = function apiResponse() {
    return function (o) {
      return {
        features: {
          apiResponse: function apiResponse(e, n, t) {
            var r = !(n && n.status && "number" == typeof n.status && 200 <= n.status && n.status <= 299);
            o.send("api.response", {
              request: e,
              response: n,
              duration: t
            }, r);
          }
        }
      };
    };
  },
      clear = function clear() {
    return function (e) {
      return {
        features: {
          clear: function clear() {
            return e.send("clear");
          }
        }
      };
    };
  },
      UNDEFINED = "~~~ undefined ~~~",
      NULL = "~~~ null ~~~",
      FALSE = "~~~ false ~~~",
      ZERO = "~~~ zero ~~~",
      EMPTY_STRING = "~~~ empty string ~~~",
      CIRCULAR = "~~~ Circular Reference ~~~",
      ANONYMOUS = "~~~ anonymous function ~~~",
      INFINITY = "~~~ Infinity ~~~",
      NEGATIVE_INFINITY = "~~~ -Infinity ~~~";

  function getFunctionName(e) {
    var n = e.name;
    return null == n || "" === n ? ANONYMOUS : "~~~ " + n + "() ~~~";
  }

  function serialize(e, r) {
    void 0 === r && (r = false);
    var o,
        i = [];
    return JSON.stringify(e, (o = null, function (e, n) {
      if (true === n) return true;
      if (n === Infinity) return INFINITY;
      if (n === -1 / 0) return NEGATIVE_INFINITY;
      if (0 === n) return ZERO;
      if (void 0 === n) return UNDEFINED;
      if (null === n) return NULL;
      if (false === n) return FALSE;
      if (-0 === n) return ZERO;
      if ("" === n) return EMPTY_STRING;
      if (r && "object" == typeof n && n.nativeEvent) return n.nativeEvent;

      switch (typeof n) {
        case "string":
        case "number":
          return n;

        case "function":
          return getFunctionName(n);
      }

      if (0 < i.length) {
        var t = i.indexOf(this);
        ~t ? i.splice(t + 1) : i.push(this), ~i.indexOf(n) && (n = CIRCULAR);
      } else i.push(n);

      return null == o ? n : o.call(this, e, n);
    }));
  }

  var defaultPerformanceNow = function defaultPerformanceNow(e) {
    return Date.now();
  },
      nativePerformance = "undefined" != typeof window && window && (window.performance || window.msPerformance || window.webkitPerformance),
      performanceNow = defaultPerformanceNow,
      delta = function delta(e) {
    return performanceNow() - e;
  };

  global.nativePerformanceNow ? performanceNow = global.nativePerformanceNow : nativePerformance && (performanceNow = function performanceNow() {
    return nativePerformance.now && nativePerformance.now();
  });

  var start = function start() {
    var e = performanceNow();
    return function () {
      return delta(e);
    };
  },
      _assign = function __assign() {
    return (_assign = Object.assign || function (e) {
      for (var n, t = 1, r = arguments.length; t < r; t++) {
        for (var o in n = arguments[t]) {
          Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);
        }
      }

      return e;
    }).apply(this, arguments);
  },
      corePlugins = [image(), logger(), benchmark(), stateResponses(), apiResponse(), clear()],
      DEFAULT_OPTIONS = {
    createSocket: null,
    host: "localhost",
    port: 9090,
    name: "reactotron-core-client",
    secure: false,
    plugins: corePlugins,
    safeRecursion: true,
    onCommand: function onCommand(e) {
      return null;
    },
    onConnect: function onConnect() {
      return null;
    },
    onDisconnect: function onDisconnect() {
      return null;
    }
  },
      reservedFeatures = ["options", "connected", "socket", "plugins", "configure", "connect", "send", "use", "startTimer"],
      isReservedFeature = function isReservedFeature(n) {
    return reservedFeatures.some(function (e) {
      return e === n;
    });
  };

  function emptyPromise() {
    return Promise.resolve("");
  }

  var Client = function () {
    function e() {
      var s = this;
      this.options = babelHelpers.extends({}, DEFAULT_OPTIONS), this.connected = false, this.socket = null, this.plugins = [], this.sendQueue = [], this.isReady = false, this.lastMessageDate = new Date(), this.customCommands = [], this.customCommandLatestId = 1, this.startTimer = function () {
        return start();
      }, this.send = function (e, n, t) {
        if (void 0 === n && (n = {}), void 0 === t && (t = false), s.socket) {
          var r = new Date(),
              o = r.getTime() - s.lastMessageDate.getTime();
          o < 0 && (o = 0);
          var i = serialize({
            type: e,
            payload: n,
            important: !!t,
            date: (s.lastMessageDate = r).toISOString(),
            deltaTime: o
          }, s.options.proxyHack);
          s.isReady ? s.socket.send(i) : s.sendQueue.push(i);
        }
      };
    }

    return e.prototype.configure = function (e) {
      var n = this;
      void 0 === e && (e = {});
      var t = babelHelpers.extends({}, this.options, e);
      return validate(t), this.options = t, Array.isArray(this.options.plugins) && this.options.plugins.forEach(function (e) {
        return n.use(e);
      }), this;
    }, e.prototype.close = function () {
      this.connected = false, this.socket && this.socket.close && this.socket.close();
    }, e.prototype.connect = function () {
      var t = this;
      this.connected = true;

      var e = this.options,
          n = e.createSocket,
          r = e.secure,
          o = e.host,
          i = e.environment,
          s = e.port,
          a = e.name,
          u = e.client,
          c = void 0 === u ? {} : u,
          f = e.getClientId,
          l = this.options,
          d = l.onCommand,
          m = l.onConnect,
          p = l.onDisconnect,
          h = n((r ? "wss" : "ws") + "://" + o + ":" + s),
          v = function v() {
        m && m(), t.plugins.forEach(function (e) {
          return e.onConnect && e.onConnect();
        }), (f || emptyPromise)().then(function (e) {
          for (t.isReady = true, t.send("client.intro", _assign({
            environment: i
          }, c, {
            name: a,
            clientId: e,
            reactotronCoreClientVersion: "2.2.0"
          })); 0 < t.sendQueue.length;) {
            var n = t.sendQueue[0];
            t.sendQueue = t.sendQueue.slice(1), t.socket.send(n);
          }
        });
      },
          g = function g() {
        t.isReady = false, p && p(), t.plugins.forEach(function (e) {
          return e.onDisconnect && e.onDisconnect();
        });
      },
          w = function w(e) {
        var n = JSON.parse(e);
        d && d(n), t.plugins.forEach(function (e) {
          return e.onCommand && e.onCommand(n);
        }), "custom" === n.type ? t.customCommands.filter(function (e) {
          return e.command === n.payload;
        }).forEach(function (e) {
          return e.handler();
        }) : "setClientId" === n.type && t.options.setClientId && t.options.setClientId(n.payload);
      };

      return h.on ? (h.on("open", v), h.on("close", g), h.on("message", w)) : (h.onopen = v, h.onclose = g, h.onmessage = function (e) {
        return w(e.data);
      }), this.socket = h, this;
    }, e.prototype.display = function (e) {
      void 0 === e && (e = {});
      var n = e.name,
          t = e.value,
          r = e.preview,
          o = e.image,
          i = e.important,
          s = void 0 !== i && i,
          a = {
        name: n,
        value: t || null,
        preview: r || null,
        image: o || null
      };
      this.send("display", a, s);
    }, e.prototype.reportError = function (e) {
      this.error(e);
    }, e.prototype.use = function (e) {
      var t = this;
      if ("function" != typeof e) throw new Error("plugins must be a function");
      var r = e.bind(this)(this);
      if ("object" != typeof r) throw new Error("plugins must return an object");

      if (r.features) {
        if ("object" != typeof r.features) throw new Error("features must be an object");
        Object.keys(r.features).forEach(function (e) {
          return function (e) {
            var n = r.features[e];
            if ("function" != typeof n) throw new Error("feature " + e + " is not a function");
            if (isReservedFeature(e)) throw new Error("feature " + e + " is a reserved name");
            t[e] = n;
          }(e);
        });
      }

      return this.plugins.push(r), r.onPlugin && "function" == typeof r.onPlugin && r.onPlugin.bind(this)(this), this;
    }, e.prototype.onCustomCommand = function (e, n) {
      var t = this,
          r = {
        id: this.customCommandLatestId,
        command: e,
        handler: n
      };
      return this.customCommandLatestId += 1, this.customCommands.push(r), this.send("customCommand.register", {
        id: r.id,
        command: r.command
      }), function () {
        t.customCommands = t.customCommands.filter(function (e) {
          return e.id !== r.id;
        }), t.send("customCommand.unregister", {
          id: r.id,
          command: r.command
        });
      };
    }, e;
  }();

  function createClient(e) {
    var n = new Client();
    return n.configure(e), n;
  }

  exports.corePlugins = corePlugins, exports.Client = Client, exports.createClient = createClient;
},733,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNavigation = _require(_dependencyMap[2]);

  var _Login = _require(_dependencyMap[3]);

  var _Login2 = babelHelpers.interopRequireDefault(_Login);

  var _Home = _require(_dependencyMap[4]);

  var _Home2 = babelHelpers.interopRequireDefault(_Home);

  var _Register = _require(_dependencyMap[5]);

  var _Register2 = babelHelpers.interopRequireDefault(_Register);

  var _Collects = _require(_dependencyMap[6]);

  var _Collects2 = babelHelpers.interopRequireDefault(_Collects);

  var _History = _require(_dependencyMap[7]);

  var _History2 = babelHelpers.interopRequireDefault(_History);

  var _Loader = _require(_dependencyMap[8]);

  var _Loader2 = babelHelpers.interopRequireDefault(_Loader);

  var _Welcome = _require(_dependencyMap[9]);

  var _Welcome2 = babelHelpers.interopRequireDefault(_Welcome);

  var _Collect = _require(_dependencyMap[10]);

  var _Collect2 = babelHelpers.interopRequireDefault(_Collect);

  var _EditCollect = _require(_dependencyMap[11]);

  var _EditCollect2 = babelHelpers.interopRequireDefault(_EditCollect);

  var _Item = _require(_dependencyMap[12]);

  var _Item2 = babelHelpers.interopRequireDefault(_Item);

  var _AddItem = _require(_dependencyMap[13]);

  var _AddItem2 = babelHelpers.interopRequireDefault(_AddItem);

  var _Styles = _require(_dependencyMap[14]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _SettingsLauncher = _require(_dependencyMap[15]);

  var _SettingsLauncher2 = babelHelpers.interopRequireDefault(_SettingsLauncher);

  var _Settings = _require(_dependencyMap[16]);

  var _Settings2 = babelHelpers.interopRequireDefault(_Settings);

  var _ShareLauncher = _require(_dependencyMap[17]);

  var _ShareLauncher2 = babelHelpers.interopRequireDefault(_ShareLauncher);

  var _Icon = _require(_dependencyMap[18]);

  var _Entry = _require(_dependencyMap[19]);

  var _Entry2 = babelHelpers.interopRequireDefault(_Entry);

  var _Results = _require(_dependencyMap[20]);

  var _Results2 = babelHelpers.interopRequireDefault(_Results);

  var styles = _reactNative.StyleSheet.create({
    headerBackground: {
      width: '100%',
      height: '100%'
    }
  });

  var CollectionsTab = (0, _reactNavigation.createStackNavigator)({
    Collections: {
      screen: _Collects2.default,
      path: '/collections',
      navigationOptions: function navigationOptions(props) {
        return {
          headerTitle: 'My Collections',
          headerRight: _react2.default.createElement(_SettingsLauncher2.default, props)
        };
      }
    },
    Collection: {
      screen: _Collect2.default,
      path: '/collection/:id',
      navigationOptions: function navigationOptions(_ref) {
        var navigation = _ref.navigation;
        return {
          headerTitle: navigation.state.params.name
        };
      }
    },
    EditCollection: {
      screen: _EditCollect2.default,
      path: '/collection/:id/edit'
    },
    Item: {
      screen: _Item2.default,
      path: '/collection/:id/:itemId',
      navigationOptions: function navigationOptions(props) {
        return {
          headerTitle: 'Product',
          headerRight: _react2.default.createElement(_ShareLauncher2.default, props)
        };
      }
    },
    AddItem: {
      screen: _AddItem2.default,
      path: '/collection/:collectId/add'
    },
    Settings: {
      screen: _Settings2.default,
      path: '/settings',
      navigationOptions: function navigationOptions(props) {
        return {
          headerTitle: 'Settings'
        };
      }
    }
  }, {
    headerLayoutPreset: 'center',
    navigationOptions: {
      headerTintColor: _Styles2.default.colors.gray,
      headerTitleStyle: {
        color: _Styles2.default.colors.gray
      },
      headerBackground: _react2.default.createElement(_reactNative.Image, {
        style: styles.headerBackground,
        source: _require(_dependencyMap[21])
      })
    }
  });
  var HomeTab = (0, _reactNavigation.createStackNavigator)({
    Home: {
      screen: _Home2.default,
      path: '/',
      navigationOptions: function navigationOptions(props) {
        return {
          headerTitle: 'CLUTCH',
          headerRight: _react2.default.createElement(_SettingsLauncher2.default, props)
        };
      }
    },
    Results: {
      screen: _Results2.default,
      path: '/results',
      navigationOptions: function navigationOptions(props) {
        return {
          headerTitle: 'Searching for:',
          headerRight: _react2.default.createElement(_SettingsLauncher2.default, props)
        };
      }
    },
    Item: {
      screen: _Item2.default,
      path: '/results/:itemId',
      navigationOptions: function navigationOptions(props) {
        return {
          headerTitle: 'Product',
          headerRight: _react2.default.createElement(_ShareLauncher2.default, props)
        };
      }
    },
    Settings: {
      screen: _Settings2.default,
      path: '/settings',
      navigationOptions: function navigationOptions() {
        return {
          headerTitle: 'Settings'
        };
      }
    }
  }, {
    headerLayoutPreset: 'center',
    navigationOptions: {
      headerTintColor: _Styles2.default.colors.gray,
      headerTitleStyle: {
        color: _Styles2.default.colors.gray
      },
      headerBackground: _react2.default.createElement(_reactNative.Image, {
        style: styles.headerBackground,
        source: _require(_dependencyMap[21])
      })
    }
  });
  var HistoryTab = (0, _reactNavigation.createStackNavigator)({
    History: {
      screen: _History2.default,
      path: '/history',
      navigationOptions: function navigationOptions(props) {
        return {
          headerTitle: 'Search History',
          headerRight: _react2.default.createElement(_SettingsLauncher2.default, props)
        };
      }
    },
    Item: {
      screen: _Item2.default,
      path: '/history/:itemId',
      navigationOptions: function navigationOptions(props) {
        return {
          headerTitle: 'Product',
          headerRight: _react2.default.createElement(_ShareLauncher2.default, props)
        };
      }
    },
    Settings: {
      screen: _Settings2.default,
      path: '/settings',
      navigationOptions: function navigationOptions() {
        return {
          headerTitle: 'Settings'
        };
      }
    }
  }, {
    headerLayoutPreset: 'center',
    navigationOptions: {
      headerTitleStyle: {
        color: _Styles2.default.colors.gray
      },
      headerTintColor: _Styles2.default.colors.light,
      headerBackground: _react2.default.createElement(_reactNative.Image, {
        style: styles.headerBackground,
        source: _require(_dependencyMap[21])
      })
    }
  });

  var getFocusedColor = function getFocusedColor(focused, home) {
    if (home) return 'salmon';
    return focused ? 'white' : 'aqua';
  };

  var TabNavigation = (0, _reactNavigation.createBottomTabNavigator)({
    HistoryTab: {
      path: '/history',
      screen: HistoryTab,
      navigationOptions: function navigationOptions(props) {
        return {
          tabBarIcon: function tabBarIcon(_ref2) {
            var focused = _ref2.focused,
                horizontal = _ref2.horizontal,
                tintColor = _ref2.tintColor;
            return _react2.default.createElement(_Icon.HistoryIcon, babelHelpers.extends({
              color: getFocusedColor(focused)
            }, props));
          }
        };
      }
    },
    HomeTab: {
      path: '/',
      screen: HomeTab,
      navigationOptions: function navigationOptions(props) {
        return {
          tabBarIcon: function tabBarIcon(_ref3) {
            var focused = _ref3.focused,
                horizontal = _ref3.horizontal,
                tintColor = _ref3.tintColor;
            return _react2.default.createElement(_Icon.Camera, babelHelpers.extends({
              color: getFocusedColor(focused, true)
            }, props));
          }
        };
      }
    },
    CollectionsTab: {
      path: '/collections',
      screen: CollectionsTab,
      navigationOptions: function navigationOptions(props) {
        return {
          tabBarIcon: function tabBarIcon(_ref4) {
            var focused = _ref4.focused,
                horizontal = _ref4.horizontal,
                tintColor = _ref4.tintColor;
            return _react2.default.createElement(_Icon.CollectsIcon, babelHelpers.extends({
              color: getFocusedColor(focused)
            }, props));
          }
        };
      }
    }
  }, {
    initialRouteName: 'HomeTab',
    headerLayoutPreset: 'center',
    tabBarOptions: {
      showLabel: false,
      style: {
        backgroundColor: _Styles2.default.colors.teal
      }
    }
  });
  var AuthNavigation = (0, _reactNavigation.createStackNavigator)({
    Entry: {
      path: '/',
      screen: _Entry2.default,
      navigationOptions: {
        header: null
      }
    },
    Login: {
      path: '/login',
      screen: _Login2.default,
      navigationOptions: {
        headerTitle: 'Sign In'
      }
    },
    Register: {
      path: '/register',
      screen: _Register2.default,
      navigationOptions: {
        headerTitle: 'Register'
      }
    }
  }, {
    initialRouteName: 'Entry',
    headerLayoutPreset: 'center',
    navigationOptions: {
      headerTintColor: _Styles2.default.colors.gray,
      headerTitleStyle: {
        color: _Styles2.default.colors.gray
      },
      headerBackground: _react2.default.createElement(_reactNative.Image, {
        style: styles.headerBackground,
        source: _require(_dependencyMap[21])
      })
    }
  });
  var WelcomeNavigation = (0, _reactNavigation.createStackNavigator)({
    Welcome: {
      screen: _Welcome2.default
    }
  });
  var Navigation = (0, _reactNavigation.createSwitchNavigator)({
    Loader: _Loader2.default,
    Auth: {
      screen: AuthNavigation
    },
    Main: {
      screen: TabNavigation
    },
    Welcome: {
      screen: WelcomeNavigation
    }
  }, {
    initialRouteName: 'Loader'
  });
  exports.default = Navigation;
},734,[103,14,735,857,1017,1020,1021,1054,1063,1064,1065,1066,1067,1068,1015,1018,1069,1070,1019,1071,1072,1073]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    get createNavigationContainer() {
      return _require(_dependencyMap[0]).default;
    },

    get StateUtils() {
      return _require(_dependencyMap[1]).default;
    },

    get getNavigation() {
      return _require(_dependencyMap[2]).default;
    },

    get createNavigator() {
      return _require(_dependencyMap[3]).default;
    },

    get createKeyboardAwareNavigator() {
      return _require(_dependencyMap[4]).default;
    },

    get NavigationProvider() {
      return _require(_dependencyMap[5]).default.NavigationProvider;
    },

    get NavigationConsumer() {
      return _require(_dependencyMap[5]).default.NavigationConsumer;
    },

    get createStackNavigator() {
      return _require(_dependencyMap[6]).createStackNavigator;
    },

    get StackNavigator() {
      console.warn('The StackNavigator function name is deprecated, please use createStackNavigator instead');
      return _require(_dependencyMap[6]).createStackNavigator;
    },

    get createSwitchNavigator() {
      return _require(_dependencyMap[7]).default;
    },

    get SwitchNavigator() {
      console.warn('The SwitchNavigator function name is deprecated, please use createSwitchNavigator instead');
      return _require(_dependencyMap[7]).default;
    },

    get createDrawerNavigator() {
      return _require(_dependencyMap[8]).createDrawerNavigator;
    },

    get DrawerNavigator() {
      console.warn('The DrawerNavigator function name is deprecated, please use createDrawerNavigator instead');
      return _require(_dependencyMap[8]).createDrawerNavigator;
    },

    get createTabNavigator() {
      console.warn('createTabNavigator is deprecated. Please use the createBottomTabNavigator or createMaterialTopTabNavigator instead.');
      return _require(_dependencyMap[9]).createTabNavigator;
    },

    get TabNavigator() {
      console.warn('TabNavigator is deprecated. Please use the createBottomTabNavigator or createMaterialTopTabNavigator instead.');
      return _require(_dependencyMap[9]).createTabNavigator;
    },

    get createBottomTabNavigator() {
      return _require(_dependencyMap[10]).createBottomTabNavigator;
    },

    get createMaterialTopTabNavigator() {
      return _require(_dependencyMap[10]).createMaterialTopTabNavigator;
    },

    get NavigationActions() {
      return _require(_dependencyMap[11]).default;
    },

    get StackActions() {
      return _require(_dependencyMap[12]).default;
    },

    get DrawerActions() {
      return _require(_dependencyMap[8]).DrawerActions;
    },

    get StackRouter() {
      return _require(_dependencyMap[13]).default;
    },

    get TabRouter() {
      return _require(_dependencyMap[14]).default;
    },

    get DrawerRouter() {
      return _require(_dependencyMap[8]).DrawerRouter;
    },

    get SwitchRouter() {
      return _require(_dependencyMap[15]).default;
    },

    get createConfigGetter() {
      return _require(_dependencyMap[16]).default;
    },

    get getScreenForRouteName() {
      return _require(_dependencyMap[17]).default;
    },

    get validateRouteConfigMap() {
      return _require(_dependencyMap[18]).default;
    },

    get getActiveChildNavigationOptions() {
      return _require(_dependencyMap[19]).default;
    },

    get pathUtils() {
      return _require(_dependencyMap[20]).default;
    },

    get Transitioner() {
      return _require(_dependencyMap[6]).Transitioner;
    },

    get StackView() {
      return _require(_dependencyMap[6]).StackView;
    },

    get StackViewCard() {
      return _require(_dependencyMap[6]).StackViewCard;
    },

    get StackViewTransitionConfigs() {
      return _require(_dependencyMap[6]).StackViewTransitionConfigs;
    },

    get SafeAreaView() {
      return _require(_dependencyMap[21]).default;
    },

    get SceneView() {
      return _require(_dependencyMap[22]).default;
    },

    get ResourceSavingSceneView() {
      return _require(_dependencyMap[23]).default;
    },

    get Header() {
      return _require(_dependencyMap[6]).Header;
    },

    get HeaderTitle() {
      return _require(_dependencyMap[6]).HeaderTitle;
    },

    get HeaderBackButton() {
      return _require(_dependencyMap[6]).HeaderBackButton;
    },

    get HeaderStyleInterpolator() {
      return _require(_dependencyMap[6]).HeaderStyleInterpolator;
    },

    get DrawerView() {
      return _require(_dependencyMap[8]).DrawerView;
    },

    get DrawerItems() {
      return _require(_dependencyMap[8]).DrawerNavigatorItems;
    },

    get DrawerSidebar() {
      return _require(_dependencyMap[8]).DrawerSidebar;
    },

    get TabView() {
      console.warn('TabView is deprecated. Please use the react-navigation-tabs package instead: https://github.com/react-navigation/react-navigation-tabs');
      return _require(_dependencyMap[9]).TabView;
    },

    get TabBarTop() {
      console.warn('TabBarTop is deprecated. Please use the react-navigation-tabs package instead: https://github.com/react-navigation/react-navigation-tabs');
      return _require(_dependencyMap[9]).TabBarTop;
    },

    get TabBarBottom() {
      console.warn('TabBarBottom is deprecated. Please use the react-navigation-tabs package instead: https://github.com/react-navigation/react-navigation-tabs');
      return _require(_dependencyMap[9]).TabBarBottom;
    },

    get SwitchView() {
      return _require(_dependencyMap[24]).default;
    },

    get NavigationEvents() {
      return _require(_dependencyMap[25]).default;
    },

    get withNavigation() {
      return _require(_dependencyMap[26]).default;
    },

    get withNavigationFocus() {
      return _require(_dependencyMap[27]).default;
    },

    get withOrientation() {
      return _require(_dependencyMap[28]).default;
    }

  };
},735,[736,752,739,753,754,755,759,784,796,808,824,738,792,845,847,786,790,787,793,849,746,850,795,852,794,853,854,855,856]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._TESTING_ONLY_reset_container_count = _TESTING_ONLY_reset_container_count;
  exports.default = createNavigationContainer;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactLifecyclesCompat = _require(_dependencyMap[2]);

  var _NavigationActions = _require(_dependencyMap[3]);

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _getNavigation = _require(_dependencyMap[4]);

  var _getNavigation2 = babelHelpers.interopRequireDefault(_getNavigation);

  var _invariant = _require(_dependencyMap[5]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _docsUrl = _require(_dependencyMap[6]);

  var _docsUrl2 = babelHelpers.interopRequireDefault(_docsUrl);

  var _pathUtils = _require(_dependencyMap[7]);

  function isStateful(props) {
    return !props.navigation;
  }

  function validateProps(props) {
    if (isStateful(props)) {
      return;
    }

    var navigation = props.navigation,
        screenProps = props.screenProps,
        containerProps = babelHelpers.objectWithoutProperties(props, ["navigation", "screenProps"]);
    var keys = Object.keys(containerProps);

    if (keys.length !== 0) {
      throw new Error('This navigator has both navigation and container props, so it is ' + ("unclear if it should own its own state. Remove props: \"" + keys.join(', ') + "\" ") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');
    }
  }

  var _statefulContainerCount = 0;

  function _TESTING_ONLY_reset_container_count() {
    _statefulContainerCount = 0;
  }

  var _reactNavigationIsHydratingState = false;

  function createNavigationContainer(Component) {
    var _class, _temp;

    var NavigationContainer = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(NavigationContainer, _React$Component);
      babelHelpers.createClass(NavigationContainer, null, [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          validateProps(nextProps);
          return null;
        }
      }]);

      function NavigationContainer(props) {
        var _this2 = this;

        babelHelpers.classCallCheck(this, NavigationContainer);

        var _this = babelHelpers.possibleConstructorReturn(this, (NavigationContainer.__proto__ || Object.getPrototypeOf(NavigationContainer)).call(this, props));

        _this.subs = null;
        _this._actionEventSubscribers = new Set();

        _this._handleOpenURL = function (_ref) {
          var url = _ref.url;
          var _this$props = _this.props,
              enableURLHandling = _this$props.enableURLHandling,
              uriPrefix = _this$props.uriPrefix;

          if (enableURLHandling === false) {
            return;
          }

          var parsedUrl = (0, _pathUtils.urlToPathAndParams)(url, uriPrefix);

          if (parsedUrl) {
            var path = parsedUrl.path,
                params = parsedUrl.params;
            var action = Component.router.getActionForPathAndParams(path, params);

            if (action) {
              _this.dispatch(action);
            }
          }
        };

        _this._persistNavigationState = function _callee(nav) {
          var persistenceKey;
          return regeneratorRuntime.async(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  persistenceKey = _this.props.persistenceKey;

                  if (persistenceKey) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  _context.next = 5;
                  return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem(persistenceKey, JSON.stringify(nav)));

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, null, _this2);
        };

        _this.dispatch = function (action) {
          if (_this.props.navigation) {
            return _this.props.navigation.dispatch(action);
          }

          _this._navState = _this._navState || _this.state.nav;
          var lastNavState = _this._navState;
          (0, _invariant2.default)(lastNavState, 'should be set in constructor if stateful');
          var reducedState = Component.router.getStateForAction(action, lastNavState);
          var navState = reducedState === null ? lastNavState : reducedState;

          var dispatchActionEvents = function dispatchActionEvents() {
            _this._actionEventSubscribers.forEach(function (subscriber) {
              return subscriber({
                type: 'action',
                action: action,
                state: navState,
                lastState: lastNavState
              });
            });
          };

          if (reducedState === null) {
            dispatchActionEvents();
            return true;
          }

          if (navState !== lastNavState) {
            _this._navState = navState;

            _this.setState({
              nav: navState
            }, function () {
              _this._onNavigationStateChange(lastNavState, navState, action);

              dispatchActionEvents();

              _this._persistNavigationState(navState);
            });

            return true;
          }

          dispatchActionEvents();
          return false;
        };

        _this._getScreenProps = function () {
          return _this.props.screenProps;
        };

        validateProps(props);
        _this._initialAction = _NavigationActions2.default.init();

        if (_this._isStateful()) {
          _this.subs = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {
            if (!_this._isMounted) {
              _this.subs && _this.subs.remove();
            } else {
              return _this.dispatch(_NavigationActions2.default.back());
            }
          });
        }

        _this.state = {
          nav: _this._isStateful() && !props.persistenceKey ? Component.router.getStateForAction(_this._initialAction) : null
        };
        return _this;
      }

      babelHelpers.createClass(NavigationContainer, [{
        key: "_renderLoading",
        value: function _renderLoading() {
          return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;
        }
      }, {
        key: "_isStateful",
        value: function _isStateful() {
          return isStateful(this.props);
        }
      }, {
        key: "_validateProps",
        value: function _validateProps(props) {
          if (this._isStateful()) {
            return;
          }

          var navigation = props.navigation,
              screenProps = props.screenProps,
              containerProps = babelHelpers.objectWithoutProperties(props, ["navigation", "screenProps"]);
          var keys = Object.keys(containerProps);

          if (keys.length !== 0) {
            throw new Error('This navigator has both navigation and container props, so it is ' + ("unclear if it should own its own state. Remove props: \"" + keys.join(', ') + "\" ") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');
          }
        }
      }, {
        key: "_onNavigationStateChange",
        value: function _onNavigationStateChange(prevNav, nav, action) {
          if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {
            if (console.group) {
              console.group('Navigation Dispatch: ');
              console.log('Action: ', action);
              console.log('New State: ', nav);
              console.log('Last State: ', prevNav);
              console.groupEnd();
            } else {
              console.log('Navigation Dispatch: ', {
                action: action,
                newState: nav,
                lastState: prevNav
              });
            }

            return;
          }

          if (typeof this.props.onNavigationStateChange === 'function') {
            this.props.onNavigationStateChange(prevNav, nav, action);
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (this._navState === this.state.nav) {
            this._navState = null;
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this3 = this;

          var _props, persistenceKey, uriPrefix, enableURLHandling, parsedUrl, startupStateJSON, _url, action, startupState, _parsedUrl, path, params, urlAction, dispatchActions;

          return regeneratorRuntime.async(function componentDidMount$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this._isMounted = true;

                  if (this._isStateful()) {
                    _context2.next = 3;
                    break;
                  }

                  return _context2.abrupt("return");

                case 3:
                  _statefulContainerCount++;

                  _reactNative.Linking.addEventListener('url', this._handleOpenURL);

                  _props = this.props, persistenceKey = _props.persistenceKey, uriPrefix = _props.uriPrefix, enableURLHandling = _props.enableURLHandling;
                  parsedUrl = null;
                  startupStateJSON = null;

                  if (!(enableURLHandling !== false)) {
                    _context2.next = 19;
                    break;
                  }

                  _context2.t0 = persistenceKey;

                  if (!_context2.t0) {
                    _context2.next = 14;
                    break;
                  }

                  _context2.next = 13;
                  return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem(persistenceKey));

                case 13:
                  _context2.t0 = _context2.sent;

                case 14:
                  startupStateJSON = _context2.t0;
                  _context2.next = 17;
                  return regeneratorRuntime.awrap(_reactNative.Linking.getInitialURL());

                case 17:
                  _url = _context2.sent;
                  parsedUrl = _url && (0, _pathUtils.urlToPathAndParams)(_url, uriPrefix);

                case 19:
                  action = this._initialAction;
                  startupState = this.state.nav;

                  if (!startupState) {
                    !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');
                    startupState = Component.router.getStateForAction(action);
                  }

                  if (startupStateJSON) {
                    try {
                      startupState = JSON.parse(startupStateJSON);
                      _reactNavigationIsHydratingState = true;
                    } catch (e) {}
                  }

                  if (parsedUrl) {
                    _parsedUrl = parsedUrl, path = _parsedUrl.path, params = _parsedUrl.params;
                    urlAction = Component.router.getActionForPathAndParams(path, params);

                    if (urlAction) {
                      !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', url);
                      action = urlAction;
                      startupState = Component.router.getStateForAction(urlAction, startupState);
                    }
                  }

                  dispatchActions = function dispatchActions() {
                    return _this3._actionEventSubscribers.forEach(function (subscriber) {
                      return subscriber({
                        type: 'action',
                        action: action,
                        state: _this3.state.nav,
                        lastState: null
                      });
                    });
                  };

                  if (!(startupState === this.state.nav)) {
                    _context2.next = 28;
                    break;
                  }

                  dispatchActions();
                  return _context2.abrupt("return");

                case 28:
                  this.setState({
                    nav: startupState
                  }, function () {
                    _reactNavigationIsHydratingState = false;
                    dispatchActions();
                  });

                case 29:
                case "end":
                  return _context2.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "componentDidCatch",
        value: function componentDidCatch(e, errorInfo) {
          if (_reactNavigationIsHydratingState) {
            _reactNavigationIsHydratingState = false;
            console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state..');
            this.dispatch(_NavigationActions2.default.init());
          } else {
            throw e;
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._isMounted = false;

          _reactNative.Linking.removeEventListener('url', this._handleOpenURL);

          this.subs && this.subs.remove();

          if (this._isStateful()) {
            _statefulContainerCount--;
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this4 = this;

          var navigation = this.props.navigation;

          if (this._isStateful()) {
            var navState = this.state.nav;

            if (!navState) {
              return this._renderLoading();
            }

            if (!this._navigation || this._navigation.state !== navState) {
              this._navigation = (0, _getNavigation2.default)(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function () {
                return _this4._navigation;
              });
            }

            navigation = this._navigation;
          }

          (0, _invariant2.default)(navigation, 'failed to get navigation');
          return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
            navigation: navigation
          }));
        }
      }]);
      return NavigationContainer;
    }(_react2.default.Component), _class.router = Component.router, _class.navigationOptions = null, _temp);
    return (0, _reactLifecyclesCompat.polyfill)(NavigationContainer);
  }
},736,[103,14,737,738,739,741,745,746]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  function componentWillMount() {
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);

    if (state !== null && state !== undefined) {
      this.setState(state);
    }
  }

  function componentWillReceiveProps(nextProps) {
    function updater(prevState) {
      var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
      return state !== null && state !== undefined ? state : null;
    }

    this.setState(updater.bind(this));
  }

  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props;
      var prevState = this.state;
      this.props = nextProps;
      this.state = nextState;
      this.__reactInternalSnapshotFlag = true;
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally {
      this.props = prevProps;
      this.state = prevState;
    }
  }

  componentWillMount.__suppressDeprecationWarning = true;
  componentWillReceiveProps.__suppressDeprecationWarning = true;
  componentWillUpdate.__suppressDeprecationWarning = true;

  function polyfill(Component) {
    var prototype = Component.prototype;

    if (!prototype || !prototype.isReactComponent) {
      throw new Error('Can only polyfill class components');
    }

    if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {
      return Component;
    }

    var foundWillMountName = null;
    var foundWillReceivePropsName = null;
    var foundWillUpdateName = null;

    if (typeof prototype.componentWillMount === 'function') {
      foundWillMountName = 'componentWillMount';
    } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
      foundWillMountName = 'UNSAFE_componentWillMount';
    }

    if (typeof prototype.componentWillReceiveProps === 'function') {
      foundWillReceivePropsName = 'componentWillReceiveProps';
    } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
      foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
    }

    if (typeof prototype.componentWillUpdate === 'function') {
      foundWillUpdateName = 'componentWillUpdate';
    } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
      foundWillUpdateName = 'UNSAFE_componentWillUpdate';
    }

    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
      var componentName = Component.displayName || Component.name;
      var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
      throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') + '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks');
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      prototype.componentWillMount = componentWillMount;
      prototype.componentWillReceiveProps = componentWillReceiveProps;
    }

    if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
      if (typeof prototype.componentDidUpdate !== 'function') {
        throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
      }

      prototype.componentWillUpdate = componentWillUpdate;
      var componentDidUpdate = prototype.componentDidUpdate;

      prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
        var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
        componentDidUpdate.call(this, prevProps, prevState, snapshot);
      };
    }

    return Component;
  }

  exports.polyfill = polyfill;
},737,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var BACK = 'Navigation/BACK';
  var INIT = 'Navigation/INIT';
  var NAVIGATE = 'Navigation/NAVIGATE';
  var SET_PARAMS = 'Navigation/SET_PARAMS';

  var back = function back() {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return {
      type: BACK,
      key: payload.key,
      immediate: payload.immediate
    };
  };

  var init = function init() {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = {
      type: INIT
    };

    if (payload.params) {
      action.params = payload.params;
    }

    return action;
  };

  var navigate = function navigate(payload) {
    var action = {
      type: NAVIGATE,
      routeName: payload.routeName
    };

    if (payload.params) {
      action.params = payload.params;
    }

    if (payload.action) {
      action.action = payload.action;
    }

    if (payload.key) {
      action.key = payload.key;
    }

    return action;
  };

  var setParams = function setParams(payload) {
    return {
      type: SET_PARAMS,
      key: payload.key,
      params: payload.params
    };
  };

  exports.default = {
    BACK: BACK,
    INIT: INIT,
    NAVIGATE: NAVIGATE,
    SET_PARAMS: SET_PARAMS,
    back: back,
    init: init,
    navigate: navigate,
    setParams: setParams
  };
},738,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getNavigation;

  var _getNavigationActionCreators = _require(_dependencyMap[0]);

  var _getNavigationActionCreators2 = babelHelpers.interopRequireDefault(_getNavigationActionCreators);

  var _getChildNavigation2 = _require(_dependencyMap[1]);

  var _getChildNavigation3 = babelHelpers.interopRequireDefault(_getChildNavigation2);

  function getNavigation(router, state, dispatch, actionSubscribers, getScreenProps, getCurrentNavigation) {
    var actions = router.getActionCreators(state, null);
    var navigation = {
      actions: actions,
      router: router,
      state: state,
      dispatch: dispatch,
      getScreenProps: getScreenProps,
      getChildNavigation: function getChildNavigation(childKey) {
        return (0, _getChildNavigation3.default)(navigation, childKey, getCurrentNavigation);
      },
      isFocused: function isFocused(childKey) {
        var _getCurrentNavigation = getCurrentNavigation().state,
            routes = _getCurrentNavigation.routes,
            index = _getCurrentNavigation.index;

        if (childKey == null || routes[index].key === childKey) {
          return true;
        }

        return false;
      },
      addListener: function addListener(eventName, handler) {
        if (eventName !== 'action') {
          return {
            remove: function remove() {}
          };
        }

        actionSubscribers.add(handler);
        return {
          remove: function remove() {
            actionSubscribers.delete(handler);
          }
        };
      },
      dangerouslyGetParent: function dangerouslyGetParent() {
        return null;
      }
    };
    var actionCreators = babelHelpers.extends({}, (0, _getNavigationActionCreators2.default)(navigation.state), actions);
    Object.keys(actionCreators).forEach(function (actionName) {
      navigation[actionName] = function () {
        return navigation.dispatch(actionCreators[actionName].apply(actionCreators, arguments));
      };
    });
    return navigation;
  }
},739,[740,742]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _NavigationActions = _require(_dependencyMap[0]);

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _invariant = _require(_dependencyMap[1]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var getNavigationActionCreators = function getNavigationActionCreators(route) {
    return {
      goBack: function goBack(key) {
        var actualizedKey = key;

        if (key === undefined && route.key) {
          (0, _invariant2.default)(typeof route.key === 'string', 'key should be a string');
          actualizedKey = route.key;
        }

        return _NavigationActions2.default.back({
          key: actualizedKey
        });
      },
      navigate: function navigate(navigateTo, params, action) {
        if (typeof navigateTo === 'string') {
          return _NavigationActions2.default.navigate({
            routeName: navigateTo,
            params: params,
            action: action
          });
        }

        (0, _invariant2.default)(typeof navigateTo === 'object', 'Must navigateTo an object or a string');
        (0, _invariant2.default)(params == null, 'Params must not be provided to .navigate() when specifying an object');
        (0, _invariant2.default)(action == null, 'Child action must not be provided to .navigate() when specifying an object');
        return _NavigationActions2.default.navigate(navigateTo);
      },
      setParams: function setParams(params) {
        (0, _invariant2.default)(route.key && typeof route.key === 'string', 'setParams cannot be called by root navigator');
        return _NavigationActions2.default.setParams({
          params: params,
          key: route.key
        });
      }
    };
  };

  exports.default = getNavigationActionCreators;
},740,[738,741]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var validateFormat = function validateFormat(format) {};

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},741,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _getChildEventSubscriber = _require(_dependencyMap[0]);

  var _getChildEventSubscriber2 = babelHelpers.interopRequireDefault(_getChildEventSubscriber);

  var _getChildRouter = _require(_dependencyMap[1]);

  var _getChildRouter2 = babelHelpers.interopRequireDefault(_getChildRouter);

  var _getNavigationActionCreators = _require(_dependencyMap[2]);

  var _getNavigationActionCreators2 = babelHelpers.interopRequireDefault(_getNavigationActionCreators);

  var _invariant = _require(_dependencyMap[3]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var createParamGetter = function createParamGetter(route) {
    return function (paramName, defaultValue) {
      var params = route.params;

      if (params && paramName in params) {
        return params[paramName];
      }

      return defaultValue;
    };
  };

  function _getChildNavigation(navigation, childKey, getCurrentParentNavigation) {
    var children = navigation._childrenNavigation || (navigation._childrenNavigation = {});
    var childRoute = navigation.state.routes.find(function (r) {
      return r.key === childKey;
    });

    if (!childRoute) {
      return null;
    }

    if (children[childKey] && children[childKey].state === childRoute) {
      return children[childKey];
    }

    var childRouter = (0, _getChildRouter2.default)(navigation.router, childRoute.routeName);
    var focusedGrandChildRoute = childRoute.routes && typeof childRoute.index === 'number' ? childRoute.routes[childRoute.index] : null;
    var actionCreators = babelHelpers.extends({}, navigation.actions, navigation.router.getActionCreators(childRoute, navigation.state.key), childRouter ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key) : {}, (0, _getNavigationActionCreators2.default)(childRoute));
    var actionHelpers = {};
    Object.keys(actionCreators).forEach(function (actionName) {
      actionHelpers[actionName] = function () {
        var actionCreator = actionCreators[actionName];
        var action = actionCreator.apply(undefined, arguments);
        return navigation.dispatch(action);
      };
    });

    if (children[childKey]) {
      children[childKey] = babelHelpers.extends({}, children[childKey], actionHelpers, {
        state: childRoute,
        router: childRouter,
        actions: actionCreators,
        getParam: createParamGetter(childRoute)
      });
      return children[childKey];
    }

    var childSubscriber = (0, _getChildEventSubscriber2.default)(navigation.addListener, childKey);
    children[childKey] = babelHelpers.extends({}, actionHelpers, {
      state: childRoute,
      router: childRouter,
      actions: actionCreators,
      getParam: createParamGetter(childRoute),
      getChildNavigation: function getChildNavigation(grandChildKey) {
        return _getChildNavigation(children[childKey], grandChildKey, function () {
          var nav = getCurrentParentNavigation();
          return nav && nav.getChildNavigation(childKey);
        });
      },
      isFocused: function isFocused() {
        var currentNavigation = getCurrentParentNavigation();

        if (!currentNavigation) {
          return false;
        }

        var _currentNavigation$st = currentNavigation.state,
            routes = _currentNavigation$st.routes,
            index = _currentNavigation$st.index;

        if (!currentNavigation.isFocused()) {
          return false;
        }

        if (routes[index].key === childKey) {
          return true;
        }

        return false;
      },
      dispatch: navigation.dispatch,
      getScreenProps: navigation.getScreenProps,
      dangerouslyGetParent: getCurrentParentNavigation,
      addListener: childSubscriber.addListener
    });
    return children[childKey];
  }

  exports.default = _getChildNavigation;
},742,[743,744,740,741]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getChildEventSubscriber;

  function getChildEventSubscriber(addListener, key) {
    var actionSubscribers = new Set();
    var willFocusSubscribers = new Set();
    var didFocusSubscribers = new Set();
    var willBlurSubscribers = new Set();
    var didBlurSubscribers = new Set();

    var removeAll = function removeAll() {
      [actionSubscribers, willFocusSubscribers, didFocusSubscribers, willBlurSubscribers, didBlurSubscribers].forEach(function (set) {
        return set.clear();
      });
      upstreamSubscribers.forEach(function (subs) {
        return subs && subs.remove();
      });
    };

    var getChildSubscribers = function getChildSubscribers(evtName) {
      switch (evtName) {
        case 'action':
          return actionSubscribers;

        case 'willFocus':
          return willFocusSubscribers;

        case 'didFocus':
          return didFocusSubscribers;

        case 'willBlur':
          return willBlurSubscribers;

        case 'didBlur':
          return didBlurSubscribers;

        default:
          return null;
      }
    };

    var emit = function emit(type, payload) {
      var payloadWithType = babelHelpers.extends({}, payload, {
        type: type
      });
      var subscribers = getChildSubscribers(type);
      subscribers && subscribers.forEach(function (subs) {
        subs(payloadWithType);
      });
    };

    var lastEmittedEvent = 'didBlur';
    var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'action'];
    var upstreamSubscribers = upstreamEvents.map(function (eventName) {
      return addListener(eventName, function (payload) {
        var state = payload.state,
            lastState = payload.lastState,
            action = payload.action;
        var lastRoutes = lastState && lastState.routes;
        var routes = state && state.routes;
        var lastFocusKey = lastState && lastState.routes && lastState.routes[lastState.index].key;
        var focusKey = routes && routes[state.index].key;
        var isChildFocused = focusKey === key;
        var lastRoute = lastRoutes && lastRoutes.find(function (route) {
          return route.key === key;
        });
        var newRoute = routes && routes.find(function (route) {
          return route.key === key;
        });
        var childPayload = {
          context: key + ":" + action.type + "_" + (payload.context || 'Root'),
          state: newRoute,
          lastState: lastRoute,
          action: action,
          type: eventName
        };
        var isTransitioning = !!state && state.isTransitioning;
        var previouslyLastEmittedEvent = lastEmittedEvent;

        if (lastEmittedEvent === 'didBlur') {
          if (eventName === 'willFocus' && isChildFocused) {
            emit(lastEmittedEvent = 'willFocus', childPayload);
          } else if (eventName === 'action' && isChildFocused) {
            emit(lastEmittedEvent = 'willFocus', childPayload);
          }
        }

        if (lastEmittedEvent === 'willFocus') {
          if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {
            emit(lastEmittedEvent = 'didFocus', childPayload);
          } else if (eventName === 'action' && isChildFocused && !isTransitioning) {
            emit(lastEmittedEvent = 'didFocus', childPayload);
          }
        }

        if (lastEmittedEvent === 'didFocus') {
          if (!isChildFocused) {
            emit(lastEmittedEvent = 'willBlur', childPayload);
          } else if (eventName === 'willBlur') {
            emit(lastEmittedEvent = 'willBlur', childPayload);
          } else if (eventName === 'action' && previouslyLastEmittedEvent === 'didFocus') {
            emit('action', childPayload);
          }
        }

        if (lastEmittedEvent === 'willBlur') {
          if (eventName === 'action' && !isChildFocused && !isTransitioning) {
            emit(lastEmittedEvent = 'didBlur', childPayload);
          } else if (eventName === 'didBlur') {
            emit(lastEmittedEvent = 'didBlur', childPayload);
          }
        }

        if (lastEmittedEvent === 'didBlur' && !newRoute) {
          removeAll();
        }
      });
    });
    return {
      addListener: function addListener(eventName, eventHandler) {
        var subscribers = getChildSubscribers(eventName);

        if (!subscribers) {
          throw new Error("Invalid event name \"" + eventName + "\"");
        }

        subscribers.add(eventHandler);

        var remove = function remove() {
          subscribers.delete(eventHandler);
        };

        return {
          remove: remove
        };
      }
    };
  }
},743,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getChildRouter;

  function getChildRouter(router, routeName) {
    if (router.childRouters && router.childRouters[routeName]) {
      return router.childRouters[routeName];
    }

    var Component = router.getComponentForRouteName(routeName);
    return Component.router;
  }
},744,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = docsUrl;

  function docsUrl(path) {
    return "https://reactnavigation.org/docs/" + path;
  }
},745,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createPathParser = exports.urlToPathAndParams = undefined;

  var _pathToRegexp = _require(_dependencyMap[0]);

  var _pathToRegexp2 = babelHelpers.interopRequireDefault(_pathToRegexp);

  var _NavigationActions = _require(_dependencyMap[1]);

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _invariant = _require(_dependencyMap[2]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var queryString = _require(_dependencyMap[3]);

  function isEmpty(obj) {
    if (!obj) return true;

    for (var key in obj) {
      return false;
    }

    return true;
  }

  var getParamsFromPath = function getParamsFromPath(inputParams, pathMatch, pathMatchKeys) {
    var params = pathMatch.slice(1).reduce(function (paramsOut, matchResult, i) {
      var key = pathMatchKeys[i];

      if (!key || key.asterisk) {
        return paramsOut;
      }

      var paramName = key.name;
      var decodedMatchResult = void 0;

      try {
        decodedMatchResult = decodeURIComponent(matchResult);
      } catch (e) {}

      paramsOut[paramName] = decodedMatchResult || matchResult;
      return paramsOut;
    }, babelHelpers.extends({}, inputParams));
    return params;
  };

  var getRestOfPath = function getRestOfPath(pathMatch, pathMatchKeys) {
    var rest = pathMatch[pathMatchKeys.findIndex(function (k) {
      return k.asterisk;
    }) + 1];
    return rest;
  };

  var urlToPathAndParams = exports.urlToPathAndParams = function urlToPathAndParams(url, uriPrefix) {
    var searchMatch = url.match(/^(.*)\?(.*)$/);
    var params = searchMatch ? queryString.parse(searchMatch[2]) : {};
    var urlWithoutSearch = searchMatch ? searchMatch[1] : url;
    var delimiter = uriPrefix || '://';
    var path = urlWithoutSearch.split(delimiter)[1];

    if (path === undefined) {
      path = urlWithoutSearch;
    }

    if (path === '/') {
      path = '';
    }

    if (path[path.length - 1] === '/') {
      path = path.slice(0, -1);
    }

    return {
      path: path,
      params: params
    };
  };

  var createPathParser = exports.createPathParser = function createPathParser(childRouters, routeConfigs, _ref) {
    var _ref$paths = _ref.paths,
        pathConfigs = _ref$paths === undefined ? {} : _ref$paths,
        disableRouteNamePaths = _ref.disableRouteNamePaths;
    var pathsByRouteNames = {};
    var paths = [];
    Object.keys(childRouters).forEach(function (routeName) {
      var pathPattern = void 0;

      if (pathConfigs[routeName] !== undefined) {
        pathPattern = pathConfigs[routeName];
      } else {
        pathPattern = routeConfigs[routeName].path;
      }

      if (pathPattern === undefined) {
        pathPattern = disableRouteNamePaths ? null : routeName;
      }

      (0, _invariant2.default)(pathPattern === null || typeof pathPattern === 'string', "Route path for " + routeName + " must be specified as a string, or null.");
      var isPathMatchable = pathPattern !== null;
      var exactReKeys = [];
      var exactRe = isPathMatchable ? (0, _pathToRegexp2.default)(pathPattern, exactReKeys) : null;
      var extendedPathReKeys = [];
      var isWildcard = pathPattern === '' || !isPathMatchable;
      var extendedPathRe = (0, _pathToRegexp2.default)(isWildcard ? '*' : pathPattern + "/*", extendedPathReKeys);
      pathsByRouteNames[routeName] = {
        exactRe: exactRe,
        exactReKeys: exactReKeys,
        extendedPathRe: extendedPathRe,
        extendedPathReKeys: extendedPathReKeys,
        isWildcard: isWildcard,
        toPath: pathPattern === null ? function () {
          return '';
        } : (0, _pathToRegexp.compile)(pathPattern)
      };
    });
    paths = Object.entries(pathsByRouteNames);

    var getActionForPathAndParams = function getActionForPathAndParams() {
      var pathToResolve = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var inputParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var matchedAction = null;

      for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref4;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref4 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref4 = _i.value;
        }

        var _ref2 = _ref4;

        var _ref3 = babelHelpers.slicedToArray(_ref2, 2);

        var routeName = _ref3[0];
        var path = _ref3[1];
        var exactRe = path.exactRe,
            exactReKeys = path.exactReKeys,
            extendedPathRe = path.extendedPathRe,
            extendedPathReKeys = path.extendedPathReKeys;
        var childRouter = childRouters[routeName];
        var exactMatch = exactRe && exactRe.exec(pathToResolve);

        if (exactMatch && exactMatch.length) {
          var extendedMatch = extendedPathRe && extendedPathRe.exec(pathToResolve);
          var childAction = null;

          if (extendedMatch && childRouter) {
            var restOfPath = getRestOfPath(extendedMatch, extendedPathReKeys);
            childAction = childRouter.getActionForPathAndParams(restOfPath, inputParams);
          }

          return _NavigationActions2.default.navigate({
            routeName: routeName,
            params: getParamsFromPath(inputParams, exactMatch, exactReKeys),
            action: childAction
          });
        }
      }

      for (var _iterator2 = paths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref7;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref7 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref7 = _i2.value;
        }

        var _ref5 = _ref7;

        var _ref6 = babelHelpers.slicedToArray(_ref5, 2);

        var _routeName = _ref6[0];
        var _path = _ref6[1];
        var extendedPathRe = _path.extendedPathRe,
            extendedPathReKeys = _path.extendedPathReKeys;
        var childRouter = childRouters[_routeName];
        var extendedMatch = extendedPathRe && extendedPathRe.exec(pathToResolve);

        if (extendedMatch && extendedMatch.length) {
          var _restOfPath = getRestOfPath(extendedMatch, extendedPathReKeys);

          var _childAction = null;

          if (childRouter) {
            _childAction = childRouter.getActionForPathAndParams(_restOfPath, inputParams);
          }

          if (!_childAction) {
            continue;
          }

          return _NavigationActions2.default.navigate({
            routeName: _routeName,
            params: getParamsFromPath(inputParams, extendedMatch, extendedPathReKeys),
            action: _childAction
          });
        }
      }

      return null;
    };

    var getPathAndParamsForRoute = function getPathAndParamsForRoute(route) {
      var routeName = route.routeName,
          params = route.params;
      var childRouter = childRouters[routeName];
      var _pathsByRouteNames$ro = pathsByRouteNames[routeName],
          toPath = _pathsByRouteNames$ro.toPath,
          exactReKeys = _pathsByRouteNames$ro.exactReKeys;
      var subPath = toPath(params);
      var nonPathParams = {};

      if (params) {
        Object.keys(params).filter(function (paramName) {
          return !exactReKeys.find(function (k) {
            return k.name === paramName;
          });
        }).forEach(function (paramName) {
          nonPathParams[paramName] = params[paramName];
        });
      }

      if (childRouter) {
        var child = childRouter.getPathAndParamsForState(route);
        return {
          path: subPath ? subPath + "/" + child.path : child.path,
          params: child.params ? babelHelpers.extends({}, nonPathParams, child.params) : nonPathParams
        };
      }

      return {
        path: subPath,
        params: nonPathParams
      };
    };

    return {
      getActionForPathAndParams: getActionForPathAndParams,
      getPathAndParamsForRoute: getPathAndParamsForRoute
    };
  };

  exports.default = {
    getParamsFromPath: getParamsFromPath,
    createPathParser: createPathParser
  };
},746,[747,738,741,749]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isarray = _require(_dependencyMap[0]);

  module.exports = pathToRegexp;
  module.exports.parse = parse;
  module.exports.compile = compile;
  module.exports.tokensToFunction = tokensToFunction;
  module.exports.tokensToRegExp = tokensToRegExp;
  var PATH_REGEXP = new RegExp(['(\\\\.)', '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

  function parse(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || '/';
    var res;

    while ((res = PATH_REGEXP.exec(str)) != null) {
      var m = res[0];
      var escaped = res[1];
      var offset = res.index;
      path += str.slice(index, offset);
      index = offset + m.length;

      if (escaped) {
        path += escaped[1];
        continue;
      }

      var next = str[index];
      var prefix = res[2];
      var name = res[3];
      var capture = res[4];
      var group = res[5];
      var modifier = res[6];
      var asterisk = res[7];

      if (path) {
        tokens.push(path);
        path = '';
      }

      var partial = prefix != null && next != null && next !== prefix;
      var repeat = modifier === '+' || modifier === '*';
      var optional = modifier === '?' || modifier === '*';
      var delimiter = res[2] || defaultDelimiter;
      var pattern = capture || group;
      tokens.push({
        name: name || key++,
        prefix: prefix || '',
        delimiter: delimiter,
        optional: optional,
        repeat: repeat,
        partial: partial,
        asterisk: !!asterisk,
        pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
      });
    }

    if (index < str.length) {
      path += str.substr(index);
    }

    if (path) {
      tokens.push(path);
    }

    return tokens;
  }

  function compile(str, options) {
    return tokensToFunction(parse(str, options));
  }

  function encodeURIComponentPretty(str) {
    return encodeURI(str).replace(/[\/?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  function encodeAsterisk(str) {
    return encodeURI(str).replace(/[?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  function tokensToFunction(tokens) {
    var matches = new Array(tokens.length);

    for (var i = 0; i < tokens.length; i++) {
      if (typeof tokens[i] === 'object') {
        matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
      }
    }

    return function (obj, opts) {
      var path = '';
      var data = obj || {};
      var options = opts || {};
      var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          path += token;
          continue;
        }

        var value = data[token.name];
        var segment;

        if (value == null) {
          if (token.optional) {
            if (token.partial) {
              path += token.prefix;
            }

            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to be defined');
          }
        }

        if (isarray(value)) {
          if (!token.repeat) {
            throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
          }

          if (value.length === 0) {
            if (token.optional) {
              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to not be empty');
            }
          }

          for (var j = 0; j < value.length; j++) {
            segment = encode(value[j]);

            if (!matches[i].test(segment)) {
              throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
            }

            path += (j === 0 ? token.prefix : token.delimiter) + segment;
          }

          continue;
        }

        segment = token.asterisk ? encodeAsterisk(value) : encode(value);

        if (!matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
        }

        path += token.prefix + segment;
      }

      return path;
    };
  }

  function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
  }

  function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
  }

  function attachKeys(re, keys) {
    re.keys = keys;
    return re;
  }

  function flags(options) {
    return options.sensitive ? '' : 'i';
  }

  function regexpToRegexp(path, keys) {
    var groups = path.source.match(/\((?!\?)/g);

    if (groups) {
      for (var i = 0; i < groups.length; i++) {
        keys.push({
          name: i,
          prefix: null,
          delimiter: null,
          optional: false,
          repeat: false,
          partial: false,
          asterisk: false,
          pattern: null
        });
      }
    }

    return attachKeys(path, keys);
  }

  function arrayToRegexp(path, keys, options) {
    var parts = [];

    for (var i = 0; i < path.length; i++) {
      parts.push(pathToRegexp(path[i], keys, options).source);
    }

    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
  }

  function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse(path, options), keys, options);
  }

  function tokensToRegExp(tokens, keys, options) {
    if (!isarray(keys)) {
      options = keys || options;
      keys = [];
    }

    options = options || {};
    var strict = options.strict;
    var end = options.end !== false;
    var route = '';

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        route += escapeString(token);
      } else {
        var prefix = escapeString(token.prefix);
        var capture = '(?:' + token.pattern + ')';
        keys.push(token);

        if (token.repeat) {
          capture += '(?:' + prefix + capture + ')*';
        }

        if (token.optional) {
          if (!token.partial) {
            capture = '(?:' + prefix + '(' + capture + '))?';
          } else {
            capture = prefix + '(' + capture + ')?';
          }
        } else {
          capture = prefix + '(' + capture + ')';
        }

        route += capture;
      }
    }

    var delimiter = escapeString(options.delimiter || '/');
    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

    if (!strict) {
      route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
    }

    if (end) {
      route += '$';
    } else {
      route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
    }

    return attachKeys(new RegExp('^' + route, flags(options)), keys);
  }

  function pathToRegexp(path, keys, options) {
    if (!isarray(keys)) {
      options = keys || options;
      keys = [];
    }

    options = options || {};

    if (path instanceof RegExp) {
      return regexpToRegexp(path, keys);
    }

    if (isarray(path)) {
      return arrayToRegexp(path, keys, options);
    }

    return stringToRegexp(path, keys, options);
  }
},747,[748]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = Array.isArray || function (arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
  };
},748,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	'use strict';

	var strictUriEncode = _require(_dependencyMap[0]);

	var decodeComponent = _require(_dependencyMap[1]);

	function encoderForArrayFormat(options) {
		switch (options.arrayFormat) {
			case 'index':
				return function (key, value, index) {
					return value === null ? [encode(key, options), '[', index, ']'].join('') : [encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('');
				};

			case 'bracket':
				return function (key, value) {
					return value === null ? [encode(key, options), '[]'].join('') : [encode(key, options), '[]=', encode(value, options)].join('');
				};

			default:
				return function (key, value) {
					return value === null ? encode(key, options) : [encode(key, options), '=', encode(value, options)].join('');
				};
		}
	}

	function parserForArrayFormat(options) {
		var result = void 0;

		switch (options.arrayFormat) {
			case 'index':
				return function (key, value, accumulator) {
					result = /\[(\d*)\]$/.exec(key);
					key = key.replace(/\[\d*\]$/, '');

					if (!result) {
						accumulator[key] = value;
						return;
					}

					if (accumulator[key] === undefined) {
						accumulator[key] = {};
					}

					accumulator[key][result[1]] = value;
				};

			case 'bracket':
				return function (key, value, accumulator) {
					result = /(\[\])$/.exec(key);
					key = key.replace(/\[\]$/, '');

					if (!result) {
						accumulator[key] = value;
						return;
					}

					if (accumulator[key] === undefined) {
						accumulator[key] = [value];
						return;
					}

					accumulator[key] = [].concat(accumulator[key], value);
				};

			default:
				return function (key, value, accumulator) {
					if (accumulator[key] === undefined) {
						accumulator[key] = value;
						return;
					}

					accumulator[key] = [].concat(accumulator[key], value);
				};
		}
	}

	function encode(value, options) {
		if (options.encode) {
			return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
		}

		return value;
	}

	function decode(value, options) {
		if (options.decode) {
			return decodeComponent(value);
		}

		return value;
	}

	function keysSorter(input) {
		if (Array.isArray(input)) {
			return input.sort();
		}

		if (typeof input === 'object') {
			return keysSorter(Object.keys(input)).sort(function (a, b) {
				return Number(a) - Number(b);
			}).map(function (key) {
				return input[key];
			});
		}

		return input;
	}

	function extract(input) {
		var queryStart = input.indexOf('?');

		if (queryStart === -1) {
			return '';
		}

		return input.slice(queryStart + 1);
	}

	function parse(input, options) {
		options = babelHelpers.extends({
			decode: true,
			arrayFormat: 'none'
		}, options);
		var formatter = parserForArrayFormat(options);
		var ret = Object.create(null);

		if (typeof input !== 'string') {
			return ret;
		}

		input = input.trim().replace(/^[?#&]/, '');

		if (!input) {
			return ret;
		}

		for (var _iterator = input.split('&'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
			var _ref;

			if (_isArray) {
				if (_i >= _iterator.length) break;
				_ref = _iterator[_i++];
			} else {
				_i = _iterator.next();
				if (_i.done) break;
				_ref = _i.value;
			}

			var param = _ref;

			var _param$replace$split = param.replace(/\+/g, ' ').split('='),
			    _param$replace$split2 = babelHelpers.slicedToArray(_param$replace$split, 2),
			    key = _param$replace$split2[0],
			    value = _param$replace$split2[1];

			value = value === undefined ? null : decode(value, options);
			formatter(decode(key, options), value, ret);
		}

		return Object.keys(ret).sort().reduce(function (result, key) {
			var value = ret[key];

			if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
				result[key] = keysSorter(value);
			} else {
				result[key] = value;
			}

			return result;
		}, Object.create(null));
	}

	exports.extract = extract;
	exports.parse = parse;

	exports.stringify = function (obj, options) {
		var defaults = {
			encode: true,
			strict: true,
			arrayFormat: 'none'
		};
		options = babelHelpers.extends(defaults, options);

		if (options.sort === false) {
			options.sort = function () {};
		}

		var formatter = encoderForArrayFormat(options);
		return obj ? Object.keys(obj).sort(options.sort).map(function (key) {
			var value = obj[key];

			if (value === undefined) {
				return '';
			}

			if (value === null) {
				return encode(key, options);
			}

			if (Array.isArray(value)) {
				var result = [];

				for (var _iterator2 = value.slice(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var value2 = _ref2;

					if (value2 === undefined) {
						continue;
					}

					result.push(formatter(key, value2, result.length));
				}

				return result.join('&');
			}

			return encode(key, options) + '=' + encode(value, options);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};

	exports.parseUrl = function (input, options) {
		return {
			url: input.split('?')[0] || '',
			query: parse(extract(input), options)
		};
	};
},749,[750,751]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function (str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (x) {
      return "%" + x.charCodeAt(0).toString(16).toUpperCase();
    });
  };
},750,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	'use strict';

	var token = '%[a-f0-9]{2}';
	var singleMatcher = new RegExp(token, 'gi');
	var multiMatcher = new RegExp('(' + token + ')+', 'gi');

	function decodeComponents(components, split) {
		try {
			return decodeURIComponent(components.join(''));
		} catch (err) {}

		if (components.length === 1) {
			return components;
		}

		split = split || 1;
		var left = components.slice(0, split);
		var right = components.slice(split);
		return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
	}

	function decode(input) {
		try {
			return decodeURIComponent(input);
		} catch (err) {
			var tokens = input.match(singleMatcher);

			for (var i = 1; i < tokens.length; i++) {
				input = decodeComponents(tokens, i).join('');
				tokens = input.match(singleMatcher);
			}

			return input;
		}
	}

	function customDecodeURIComponent(input) {
		var replaceMap = {
			'%FE%FF': "\uFFFD\uFFFD",
			'%FF%FE': "\uFFFD\uFFFD"
		};
		var match = multiMatcher.exec(input);

		while (match) {
			try {
				replaceMap[match[0]] = decodeURIComponent(match[0]);
			} catch (err) {
				var result = decode(match[0]);

				if (result !== match[0]) {
					replaceMap[match[0]] = result;
				}
			}

			match = multiMatcher.exec(input);
		}

		replaceMap['%C2'] = "\uFFFD";
		var entries = Object.keys(replaceMap);

		for (var i = 0; i < entries.length; i++) {
			var key = entries[i];
			input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
		}

		return input;
	}

	module.exports = function (encodedURI) {
		if (typeof encodedURI !== 'string') {
			throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
		}

		try {
			encodedURI = encodedURI.replace(/\+/g, ' ');
			return decodeURIComponent(encodedURI);
		} catch (err) {
			return customDecodeURIComponent(encodedURI);
		}
	};
},751,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var StateUtils = {
    get: function get(state, key) {
      return state.routes.find(function (route) {
        return route.key === key;
      }) || null;
    },
    indexOf: function indexOf(state, key) {
      return state.routes.findIndex(function (route) {
        return route.key === key;
      });
    },
    has: function has(state, key) {
      return !!state.routes.some(function (route) {
        return route.key === key;
      });
    },
    push: function push(state, route) {
      (0, _invariant2.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);
      var routes = state.routes.slice();
      routes.push(route);
      return babelHelpers.extends({}, state, {
        index: routes.length - 1,
        routes: routes
      });
    },
    pop: function pop(state) {
      if (state.index <= 0) {
        return state;
      }

      var routes = state.routes.slice(0, -1);
      return babelHelpers.extends({}, state, {
        index: routes.length - 1,
        routes: routes
      });
    },
    jumpToIndex: function jumpToIndex(state, index) {
      if (index === state.index) {
        return state;
      }

      (0, _invariant2.default)(!!state.routes[index], 'invalid index %s to jump to', index);
      return babelHelpers.extends({}, state, {
        index: index
      });
    },
    jumpTo: function jumpTo(state, key) {
      var index = StateUtils.indexOf(state, key);
      return StateUtils.jumpToIndex(state, index);
    },
    back: function back(state) {
      var index = state.index - 1;
      var route = state.routes[index];
      return route ? StateUtils.jumpToIndex(state, index) : state;
    },
    forward: function forward(state) {
      var index = state.index + 1;
      var route = state.routes[index];
      return route ? StateUtils.jumpToIndex(state, index) : state;
    },
    replaceAndPrune: function replaceAndPrune(state, key, route) {
      var index = StateUtils.indexOf(state, key);
      var replaced = StateUtils.replaceAtIndex(state, index, route);
      return babelHelpers.extends({}, replaced, {
        routes: replaced.routes.slice(0, index + 1)
      });
    },
    replaceAt: function replaceAt(state, key, route) {
      var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var index = StateUtils.indexOf(state, key);
      var nextIndex = preserveIndex ? state.index : index;
      var nextState = StateUtils.replaceAtIndex(state, index, route);
      nextState.index = nextIndex;
      return nextState;
    },
    replaceAtIndex: function replaceAtIndex(state, index, route) {
      (0, _invariant2.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);

      if (state.routes[index] === route && index === state.index) {
        return state;
      }

      var routes = state.routes.slice();
      routes[index] = route;
      return babelHelpers.extends({}, state, {
        index: index,
        routes: routes
      });
    },
    reset: function reset(state, routes, index) {
      (0, _invariant2.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');
      var nextIndex = index === undefined ? routes.length - 1 : index;

      if (state.routes.length === routes.length && state.index === nextIndex) {
        var compare = function compare(route, ii) {
          return routes[ii] === route;
        };

        if (state.routes.every(compare)) {
          return state;
        }
      }

      (0, _invariant2.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);
      return babelHelpers.extends({}, state, {
        index: nextIndex,
        routes: routes
      });
    }
  };
  exports.default = StateUtils;
},752,[741]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactLifecyclesCompat = _require(_dependencyMap[1]);

  function createNavigator(NavigatorView, router, navigationConfig) {
    var _class, _temp2;

    var Navigator = (_temp2 = _class = function (_React$Component) {
      babelHelpers.inherits(Navigator, _React$Component);

      function Navigator() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, Navigator);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Navigator.__proto__ || Object.getPrototypeOf(Navigator)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
          descriptors: {},
          screenProps: _this.props.screenProps
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(Navigator, [{
        key: "render",
        value: function render() {
          return _react2.default.createElement(NavigatorView, babelHelpers.extends({}, this.props, {
            screenProps: this.state.screenProps,
            navigation: this.props.navigation,
            navigationConfig: navigationConfig,
            descriptors: this.state.descriptors
          }));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          var prevDescriptors = prevState.descriptors;
          var navigation = nextProps.navigation,
              screenProps = nextProps.screenProps;
          var state = navigation.state;
          var routes = state.routes;

          if (typeof routes === 'undefined') {
            throw new TypeError('No "routes" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop');
          }

          var descriptors = {};
          routes.forEach(function (route) {
            if (prevDescriptors && prevDescriptors[route.key] && route === prevDescriptors[route.key].state && screenProps === prevState.screenProps) {
              descriptors[route.key] = prevDescriptors[route.key];
              return;
            }

            var getComponent = router.getComponentForRouteName.bind(null, route.routeName);
            var childNavigation = navigation.getChildNavigation(route.key);
            var options = router.getScreenOptions(childNavigation, screenProps);
            descriptors[route.key] = {
              key: route.key,
              getComponent: getComponent,
              options: options,
              state: route,
              navigation: childNavigation
            };
          });
          return {
            descriptors: descriptors,
            screenProps: screenProps
          };
        }
      }]);
      return Navigator;
    }(_react2.default.Component), _class.router = router, _class.navigationOptions = null, _temp2);
    return (0, _reactLifecyclesCompat.polyfill)(Navigator);
  }

  exports.default = createNavigator;
},753,[103,737]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  exports.default = function (Navigator, navigatorConfig) {
    var _class, _temp2;

    return _temp2 = _class = function (_React$Component) {
      babelHelpers.inherits(KeyboardAwareNavigator, _React$Component);

      function KeyboardAwareNavigator() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, KeyboardAwareNavigator);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = KeyboardAwareNavigator.__proto__ || Object.getPrototypeOf(KeyboardAwareNavigator)).call.apply(_ref, [this].concat(args))), _this), _this._previouslyFocusedTextInput = null, _this._handleGestureBegin = function () {
          _this._previouslyFocusedTextInput = _reactNative.TextInput.State.currentlyFocusedField();

          if (_this._previouslyFocusedTextInput) {
            _reactNative.TextInput.State.blurTextInput(_this._previouslyFocusedTextInput);
          }

          _this.props.onGestureBegin && _this.props.onGestureBegin();
        }, _this._handleGestureCanceled = function () {
          if (_this._previouslyFocusedTextInput) {
            _reactNative.TextInput.State.focusTextInput(_this._previouslyFocusedTextInput);
          }

          _this.props.onGestureCanceled && _this.props.onGestureCanceled();
        }, _this._handleGestureFinish = function () {
          _this._previouslyFocusedTextInput = null;
          _this.props.onGestureFinish && _this.props.onGestureFinish();
        }, _this._handleTransitionStart = function (transitionProps, prevTransitionProps) {
          if (transitionProps.index !== prevTransitionProps.index) {
            var currentField = _reactNative.TextInput.State.currentlyFocusedField();

            if (currentField) {
              _reactNative.TextInput.State.blurTextInput(currentField);
            }
          }

          var onTransitionStart = _this.props.onTransitionStart || navigatorConfig.onTransitionStart;
          onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(KeyboardAwareNavigator, [{
        key: "render",
        value: function render() {
          return _react2.default.createElement(Navigator, babelHelpers.extends({}, this.props, {
            onGestureBegin: this._handleGestureBegin,
            onGestureCanceled: this._handleGestureCanceled,
            onGestureFinish: this._handleGestureFinish,
            onTransitionStart: this._handleTransitionStart
          }));
        }
      }]);
      return KeyboardAwareNavigator;
    }(_react2.default.Component), _class.router = Navigator.router, _temp2;
  };
},754,[103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NavigationConsumer = exports.NavigationProvider = undefined;

  var _createReactContext = _require(_dependencyMap[0]);

  var _createReactContext2 = babelHelpers.interopRequireDefault(_createReactContext);

  var NavigationContext = (0, _createReactContext2.default)();
  var NavigationProvider = exports.NavigationProvider = NavigationContext.Provider;
  var NavigationConsumer = exports.NavigationConsumer = NavigationContext.Consumer;
  exports.default = {
    NavigationProvider: NavigationProvider,
    NavigationConsumer: NavigationConsumer
  };
},755,[756]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _react = _require(_dependencyMap[0]);

  var _react2 = _interopRequireDefault(_react);

  var _implementation = _require(_dependencyMap[1]);

  var _implementation2 = _interopRequireDefault(_implementation);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = _react2.default.createContext || _implementation2.default;
  module.exports = exports['default'];
},756,[103,757]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _react = _require(_dependencyMap[0]);

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _gud = _require(_dependencyMap[2]);

  var _gud2 = _interopRequireDefault(_gud);

  var _warning = _require(_dependencyMap[3]);

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var MAX_SIGNED_31_BIT_INT = 1073741823;

  function objectIs(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function createEventEmitter(value) {
    var handlers = [];
    return {
      on: function on(handler) {
        handlers.push(handler);
      },
      off: function off(handler) {
        handlers = handlers.filter(function (h) {
          return h !== handler;
        });
      },
      get: function get() {
        return value;
      },
      set: function set(newValue, changedBits) {
        value = newValue;
        handlers.forEach(function (handler) {
          return handler(value, changedBits);
        });
      }
    };
  }

  function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
  }

  function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;

    var contextProp = '__create-react-context-' + (0, _gud2.default)() + '__';

    var Provider = function (_Component) {
      _inherits(Provider, _Component);

      function Provider() {
        var _temp, _this, _ret;

        _classCallCheck(this, Provider);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.emitter = createEventEmitter(_this.props.value), _temp), _possibleConstructorReturn(_this, _ret);
      }

      Provider.prototype.getChildContext = function getChildContext() {
        var _ref;

        return _ref = {}, _ref[contextProp] = this.emitter, _ref;
      };

      Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
          var oldValue = this.props.value;
          var newValue = nextProps.value;
          var changedBits = void 0;

          if (objectIs(oldValue, newValue)) {
            changedBits = 0;
          } else {
            changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            changedBits |= 0;

            if (changedBits !== 0) {
              this.emitter.set(nextProps.value, changedBits);
            }
          }
        }
      };

      Provider.prototype.render = function render() {
        return this.props.children;
      };

      return Provider;
    }(_react.Component);

    Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);

    var Consumer = function (_Component2) {
      _inherits(Consumer, _Component2);

      function Consumer() {
        var _temp2, _this2, _ret2;

        _classCallCheck(this, Consumer);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _Component2.call.apply(_Component2, [this].concat(args))), _this2), _this2.state = {
          value: _this2.getValue()
        }, _this2.onUpdate = function (newValue, changedBits) {
          var observedBits = _this2.observedBits | 0;

          if ((observedBits & changedBits) !== 0) {
            _this2.setState({
              value: _this2.getValue()
            });
          }
        }, _temp2), _possibleConstructorReturn(_this2, _ret2);
      }

      Consumer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var observedBits = nextProps.observedBits;
        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };

      Consumer.prototype.componentDidMount = function componentDidMount() {
        if (this.context[contextProp]) {
          this.context[contextProp].on(this.onUpdate);
        }

        var observedBits = this.props.observedBits;
        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };

      Consumer.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.context[contextProp]) {
          this.context[contextProp].off(this.onUpdate);
        }
      };

      Consumer.prototype.getValue = function getValue() {
        if (this.context[contextProp]) {
          return this.context[contextProp].get();
        } else {
          return defaultValue;
        }
      };

      Consumer.prototype.render = function render() {
        return onlyChild(this.props.children)(this.state.value);
      };

      return Consumer;
    }(_react.Component);

    Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);
    return {
      Provider: Provider,
      Consumer: Consumer
    };
  }

  exports.default = createReactContext;
  module.exports = exports['default'];
},757,[103,121,758,29]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var key = '__global_unique_id__';

  module.exports = function () {
    return global[key] = (global[key] || 0) + 1;
  };
},758,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    get createStackNavigator() {
      return _require(_dependencyMap[0]).default;
    },

    get createUncontainedStackNavigator() {
      return _require(_dependencyMap[1]).default;
    },

    get Header() {
      return _require(_dependencyMap[2]).default;
    },

    get HeaderBackButton() {
      return _require(_dependencyMap[3]).default;
    },

    get HeaderTitle() {
      return _require(_dependencyMap[4]).default;
    },

    get HeaderStyleInterpolator() {
      return _require(_dependencyMap[5]).default;
    },

    get StackView() {
      return _require(_dependencyMap[6]).default;
    },

    get StackViewCard() {
      return _require(_dependencyMap[7]).default;
    },

    get StackViewLayout() {
      return _require(_dependencyMap[8]).default;
    },

    get StackViewStyleInterpolator() {
      return _require(_dependencyMap[9]).default;
    },

    get StackViewTransitionConfigs() {
      return _require(_dependencyMap[10]).default;
    },

    get createPointerEventsContainer() {
      return _require(_dependencyMap[11]).default;
    },

    get Transitioner() {
      return _require(_dependencyMap[12]).default;
    },

    get ScenesReducer() {
      return _require(_dependencyMap[13]).default;
    }

  };
},759,[760,761,769,771,770,775,762,766,763,779,778,767,781,782]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNavigation = _require(_dependencyMap[0]);

  var _createStackNavigator = _require(_dependencyMap[1]);

  var _createStackNavigator2 = babelHelpers.interopRequireDefault(_createStackNavigator);

  var createContainedStackNavigator = function createContainedStackNavigator(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var navigator = (0, _createStackNavigator2.default)(routeConfigs, config);
    return (0, _reactNavigation.createNavigationContainer)(navigator);
  };

  exports.default = createContainedStackNavigator;
},760,[735,761]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNavigation = _require(_dependencyMap[0]);

  var _StackView = _require(_dependencyMap[1]);

  var _StackView2 = babelHelpers.interopRequireDefault(_StackView);

  function createStackNavigator(routeConfigMap) {
    var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var initialRouteKey = stackConfig.initialRouteKey,
        initialRouteName = stackConfig.initialRouteName,
        initialRouteParams = stackConfig.initialRouteParams,
        paths = stackConfig.paths,
        navigationOptions = stackConfig.navigationOptions,
        disableKeyboardHandling = stackConfig.disableKeyboardHandling,
        getCustomActionCreators = stackConfig.getCustomActionCreators;
    var stackRouterConfig = {
      initialRouteKey: initialRouteKey,
      initialRouteName: initialRouteName,
      initialRouteParams: initialRouteParams,
      paths: paths,
      navigationOptions: navigationOptions,
      getCustomActionCreators: getCustomActionCreators
    };
    var router = (0, _reactNavigation.StackRouter)(routeConfigMap, stackRouterConfig);
    var Navigator = (0, _reactNavigation.createNavigator)(_StackView2.default, router, stackConfig);

    if (!disableKeyboardHandling) {
      Navigator = (0, _reactNavigation.createKeyboardAwareNavigator)(Navigator, stackConfig);
    }

    return Navigator;
  }

  exports.default = createStackNavigator;
},761,[735,762]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNavigation = _require(_dependencyMap[2]);

  var _StackViewLayout = _require(_dependencyMap[3]);

  var _StackViewLayout2 = babelHelpers.interopRequireDefault(_StackViewLayout);

  var _Transitioner = _require(_dependencyMap[4]);

  var _Transitioner2 = babelHelpers.interopRequireDefault(_Transitioner);

  var _StackViewTransitionConfigs = _require(_dependencyMap[5]);

  var _StackViewTransitionConfigs2 = babelHelpers.interopRequireDefault(_StackViewTransitionConfigs);

  var NativeAnimatedModule = _reactNative.NativeModules && _reactNative.NativeModules.NativeAnimatedModule;
  var StackView = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(StackView, _React$Component);

    function StackView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, StackView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = StackView.__proto__ || Object.getPrototypeOf(StackView)).call.apply(_ref, [this].concat(args))), _this), _this._configureTransition = function (transitionProps, prevTransitionProps) {
        return babelHelpers.extends({}, _StackViewTransitionConfigs2.default.getTransitionConfig(_this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, _this.props.navigationConfig.mode === 'modal').transitionSpec, {
          useNativeDriver: !!NativeAnimatedModule
        });
      }, _this._render = function (transitionProps, lastTransitionProps) {
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            navigationConfig = _this$props.navigationConfig;
        return _react2.default.createElement(_StackViewLayout2.default, babelHelpers.extends({}, navigationConfig, {
          onGestureBegin: _this.props.onGestureBegin,
          onGestureCanceled: _this.props.onGestureCanceled,
          onGestureEnd: _this.props.onGestureEnd,
          screenProps: screenProps,
          descriptors: _this.props.descriptors,
          transitionProps: transitionProps,
          lastTransitionProps: lastTransitionProps
        }));
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(StackView, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(_Transitioner2.default, {
          render: this._render,
          configureTransition: this._configureTransition,
          screenProps: this.props.screenProps,
          navigation: this.props.navigation,
          descriptors: this.props.descriptors,
          onTransitionStart: this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart,
          onTransitionEnd: function onTransitionEnd(transition, lastTransition) {
            var _props = _this2.props,
                navigationConfig = _props.navigationConfig,
                navigation = _props.navigation;
            var onTransitionEnd = _this2.props.onTransitionEnd || navigationConfig.onTransitionEnd;

            if (transition.navigation.state.isTransitioning) {
              navigation.dispatch(_reactNavigation.StackActions.completeTransition({
                key: navigation.state.key
              }));
            }

            onTransitionEnd && onTransitionEnd(transition, lastTransition);
          }
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var navigation = this.props.navigation;

        if (navigation.state.isTransitioning) {
          navigation.dispatch(_reactNavigation.StackActions.completeTransition({
            key: navigation.state.key
          }));
        }
      }
    }]);
    return StackView;
  }(_react2.default.Component), _class.defaultProps = {
    navigationConfig: {
      mode: 'card'
    }
  }, _temp2);
  exports.default = StackView;
},762,[103,14,735,763,781,778]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _clamp = _require(_dependencyMap[1]);

  var _clamp2 = babelHelpers.interopRequireDefault(_clamp);

  var _reactNative = _require(_dependencyMap[2]);

  var _reactNavigation = _require(_dependencyMap[3]);

  var _reactNativeScreens = _require(_dependencyMap[4]);

  var _StackViewCard = _require(_dependencyMap[5]);

  var _StackViewCard2 = babelHelpers.interopRequireDefault(_StackViewCard);

  var _Header = _require(_dependencyMap[6]);

  var _Header2 = babelHelpers.interopRequireDefault(_Header);

  var _StackViewTransitionConfigs = _require(_dependencyMap[7]);

  var _StackViewTransitionConfigs2 = babelHelpers.interopRequireDefault(_StackViewTransitionConfigs);

  var _ReactNativeFeatures = _require(_dependencyMap[8]);

  var emptyFunction = function emptyFunction() {};

  var IPHONE_XS_HEIGHT = 812;
  var IPHONE_XR_HEIGHT = 896;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      WINDOW_WIDTH = _Dimensions$get.width,
      WINDOW_HEIGHT = _Dimensions$get.height;

  var IS_IPHONE_X = false;

  var EaseInOut = _reactNative.Easing.inOut(_reactNative.Easing.ease);

  var HEADER_LAYOUT_PRESET_VALUES = ['center', 'left'];
  var HEADER_TRANSITION_PRESET_VALUES = ['uikit', 'fade-in-place'];
  var ANIMATION_DURATION = 500;
  var POSITION_THRESHOLD = 0.5;
  var RESPOND_THRESHOLD = 20;
  var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;
  var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;

  var animatedSubscribeValue = function animatedSubscribeValue(animatedValue) {
    if (!animatedValue.__isNative) {
      return;
    }

    if (Object.keys(animatedValue._listeners).length === 0) {
      animatedValue.addListener(emptyFunction);
    }
  };

  var getDefaultHeaderHeight = function getDefaultHeaderHeight(isLandscape) {
    {
      return 56;
    }
  };

  var StackViewLayout = function (_React$Component) {
    babelHelpers.inherits(StackViewLayout, _React$Component);

    function StackViewLayout(props) {
      babelHelpers.classCallCheck(this, StackViewLayout);

      var _this = babelHelpers.possibleConstructorReturn(this, (StackViewLayout.__proto__ || Object.getPrototypeOf(StackViewLayout)).call(this, props));

      _this._gestureStartValue = 0;
      _this._isResponding = false;
      _this._immediateIndex = null;
      _this._panResponder = _reactNative.PanResponder.create({
        onPanResponderTerminate: function onPanResponderTerminate() {
          var navigation = _this.props.transitionProps.navigation;
          var index = navigation.state.index;
          _this._isResponding = false;

          _this._reset(index, 0);

          _this.props.onGestureCanceled && _this.props.onGestureCanceled();
        },
        onPanResponderGrant: function onPanResponderGrant() {
          var _this$props$transitio = _this.props.transitionProps,
              navigation = _this$props$transitio.navigation,
              position = _this$props$transitio.position,
              scene = _this$props$transitio.scene;
          var index = navigation.state.index;

          if (index !== scene.index) {
            return false;
          }

          position.stopAnimation(function (value) {
            _this._isResponding = true;
            _this._gestureStartValue = value;
          });
          _this.props.onGestureBegin && _this.props.onGestureBegin();
        },
        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {
          var _this$props = _this.props,
              _this$props$transitio2 = _this$props.transitionProps,
              navigation = _this$props$transitio2.navigation,
              layout = _this$props$transitio2.layout,
              scene = _this$props$transitio2.scene,
              mode = _this$props.mode;
          var index = navigation.state.index;
          var isVertical = mode === 'modal';
          var options = scene.descriptor.options;
          var gestureDirection = options.gestureDirection;
          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;

          if (index !== scene.index) {
            return false;
          }

          var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;
          var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];
          var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];
          var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var axisHasBeenMeasured = !!axisLength;
          var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;
          var _options$gestureRespo = options.gestureResponseDistance,
              userGestureResponseDistance = _options$gestureRespo === undefined ? {} : _options$gestureRespo;
          var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;

          if (screenEdgeDistance > gestureResponseDistance) {
            return false;
          }

          var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;
          var isOnFirstCard = immediateIndex === 0;
          var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;
          return shouldSetResponder;
        },
        onPanResponderMove: function onPanResponderMove(event, gesture) {
          var _this$props2 = _this.props,
              _this$props2$transiti = _this$props2.transitionProps,
              navigation = _this$props2$transiti.navigation,
              position = _this$props2$transiti.position,
              layout = _this$props2$transiti.layout,
              scene = _this$props2$transiti.scene,
              mode = _this$props2.mode;
          var index = navigation.state.index;
          var isVertical = mode === 'modal';
          var options = scene.descriptor.options;
          var gestureDirection = options.gestureDirection;
          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;
          var startValue = _this._gestureStartValue;
          var axis = isVertical ? 'dy' : 'dx';
          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var currentValue = axis === 'dx' && gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;
          var value = (0, _clamp2.default)(index - 1, currentValue, index);
          position.setValue(value);
        },
        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
          return false;
        },
        onPanResponderRelease: function onPanResponderRelease(event, gesture) {
          var _this$props3 = _this.props,
              _this$props3$transiti = _this$props3.transitionProps,
              navigation = _this$props3$transiti.navigation,
              position = _this$props3$transiti.position,
              layout = _this$props3$transiti.layout,
              scene = _this$props3$transiti.scene,
              mode = _this$props3.mode;
          var index = navigation.state.index;
          var isVertical = mode === 'modal';
          var options = scene.descriptor.options;
          var gestureDirection = options.gestureDirection;
          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;

          if (!_this._isResponding) {
            return;
          }

          _this._isResponding = false;
          var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;
          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var movementDirection = gestureDirectionInverted ? -1 : 1;
          var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];
          var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];
          var defaultVelocity = axisDistance / ANIMATION_DURATION;
          var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);
          var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;
          var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;
          position.stopAnimation(function (value) {
            if (gestureVelocity < -0.5) {
              _this.props.onGestureCanceled && _this.props.onGestureCanceled();

              _this._reset(immediateIndex, resetDuration);

              return;
            }

            if (gestureVelocity > 0.5) {
              _this.props.onGestureFinish && _this.props.onGestureFinish();

              _this._goBack(immediateIndex, goBackDuration);

              return;
            }

            if (value <= index - POSITION_THRESHOLD) {
              _this.props.onGestureFinish && _this.props.onGestureFinish();

              _this._goBack(immediateIndex, goBackDuration);
            } else {
              _this.props.onGestureCanceled && _this.props.onGestureCanceled();

              _this._reset(immediateIndex, resetDuration);
            }
          });
        }
      });

      _this._onFloatingHeaderLayout = function (e) {
        _this.setState({
          floatingHeaderHeight: e.nativeEvent.layout.height
        });
      };

      _this._getTransitionConfig = function () {
        var isModal = _this.props.mode === 'modal';
        return _StackViewTransitionConfigs2.default.getTransitionConfig(_this.props.transitionConfig, _this.props.transitionProps, _this.props.lastTransitionProps, isModal);
      };

      _this._renderCard = function (scene) {
        var _this$_getTransitionC = _this._getTransitionConfig(),
            screenInterpolator = _this$_getTransitionC.screenInterpolator;

        var style = screenInterpolator && screenInterpolator(babelHelpers.extends({}, _this.props.transitionProps, {
          scene: scene
        }));
        var options = scene.descriptor.options;
        var hasHeader = options.header !== null;

        var headerMode = _this._getHeaderMode();

        var paddingTop = 0;

        if (hasHeader && headerMode === 'float' && !options.headerTransparent) {
          paddingTop = _this.state.floatingHeaderHeight;
        }

        return _react2.default.createElement(
          _StackViewCard2.default,
          babelHelpers.extends({}, _this.props.transitionProps, {
            key: "card_" + scene.key,
            transparent: _this.props.transparentCard,
            style: [style, {
              paddingTop: paddingTop
            }, _this.props.cardStyle],
            scene: scene
          }),
          _this._renderInnerScene(scene)
        );
      };

      _this.state = {
        floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)
      };
      return _this;
    }

    babelHelpers.createClass(StackViewLayout, [{
      key: "_renderHeader",
      value: function _renderHeader(scene, headerMode) {
        var options = scene.descriptor.options;
        var header = options.header;

        if (header === null && headerMode === 'screen') {
          return null;
        }

        if (_react2.default.isValidElement(header)) {
          return header;
        }

        var renderHeader = header || function (props) {
          return _react2.default.createElement(_Header2.default, props);
        };

        var _getTransitionConfig = this._getTransitionConfig(),
            headerLeftInterpolator = _getTransitionConfig.headerLeftInterpolator,
            headerTitleInterpolator = _getTransitionConfig.headerTitleInterpolator,
            headerRightInterpolator = _getTransitionConfig.headerRightInterpolator,
            headerBackgroundInterpolator = _getTransitionConfig.headerBackgroundInterpolator;

        var _props = this.props,
            transitionProps = _props.transitionProps,
            passProps = babelHelpers.objectWithoutProperties(_props, ["transitionProps"]);
        return _react2.default.createElement(
          _reactNavigation.NavigationProvider,
          {
            value: scene.descriptor.navigation
          },
          renderHeader(babelHelpers.extends({}, passProps, transitionProps, {
            scene: scene,
            mode: headerMode,
            transitionPreset: this._getHeaderTransitionPreset(),
            layoutPreset: this._getHeaderLayoutPreset(),
            backTitleVisible: this._getheaderBackTitleVisible(),
            leftInterpolator: headerLeftInterpolator,
            titleInterpolator: headerTitleInterpolator,
            rightInterpolator: headerRightInterpolator,
            backgroundInterpolator: headerBackgroundInterpolator
          }))
        );
      }
    }, {
      key: "_animatedSubscribe",
      value: function _animatedSubscribe(props) {
        animatedSubscribeValue(props.transitionProps.layout.width);
        animatedSubscribeValue(props.transitionProps.layout.height);
        animatedSubscribeValue(props.transitionProps.position);
      }
    }, {
      key: "_reset",
      value: function _reset(resetToIndex, duration) {
        {
          _reactNative.Animated.timing(this.props.transitionProps.position, {
            toValue: resetToIndex,
            duration: duration,
            easing: EaseInOut,
            useNativeDriver: this.props.transitionProps.position.__isNative
          }).start();
        }
      }
    }, {
      key: "_goBack",
      value: function _goBack(backFromIndex, duration) {
        var _this2 = this;

        var _props$transitionProp = this.props.transitionProps,
            navigation = _props$transitionProp.navigation,
            position = _props$transitionProp.position,
            scenes = _props$transitionProp.scenes;
        var toValue = Math.max(backFromIndex - 1, 0);
        this._immediateIndex = toValue;

        var onCompleteAnimation = function onCompleteAnimation() {
          _this2._immediateIndex = null;
          var backFromScene = scenes.find(function (s) {
            return s.index === toValue + 1;
          });

          if (!_this2._isResponding && backFromScene) {
            navigation.dispatch(_reactNavigation.NavigationActions.back({
              key: backFromScene.route.key,
              immediate: true
            }));
            navigation.dispatch(_reactNavigation.StackActions.completeTransition());
          }
        };

        {
          _reactNative.Animated.timing(position, {
            toValue: toValue,
            duration: duration,
            easing: EaseInOut,
            useNativeDriver: position.__isNative
          }).start(onCompleteAnimation);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var floatingHeader = null;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'float') {
          var _scene = this.props.transitionProps.scene;
          floatingHeader = _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.floatingHeader,
              pointerEvents: "box-none",
              onLayout: this._onFloatingHeaderLayout
            },
            this._renderHeader(_scene, headerMode)
          );
        }

        var _props$transitionProp2 = this.props.transitionProps,
            scene = _props$transitionProp2.scene,
            scenes = _props$transitionProp2.scenes;
        var options = scene.descriptor.options;
        var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : false;
        var responder = !gesturesEnabled ? null : this._panResponder;
        var handlers = gesturesEnabled ? responder.panHandlers : {};
        var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];
        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({}, handlers, {
            style: containerStyle
          }),
          _react2.default.createElement(
            _reactNativeScreens.ScreenContainer,
            {
              style: styles.scenes
            },
            scenes.map(function (s) {
              return _this3._renderCard(s);
            })
          ),
          floatingHeader
        );
      }
    }, {
      key: "_getHeaderMode",
      value: function _getHeaderMode() {
        if (this.props.headerMode) {
          return this.props.headerMode;
        }

        {
          return 'screen';
        }
        return 'float';
      }
    }, {
      key: "_getHeaderLayoutPreset",
      value: function _getHeaderLayoutPreset() {
        var headerLayoutPreset = this.props.headerLayoutPreset;

        if (headerLayoutPreset) {
          if (HEADER_LAYOUT_PRESET_VALUES.includes(headerLayoutPreset)) {
            return headerLayoutPreset;
          }
        }

        {
          return 'left';
        }
      }
    }, {
      key: "_getHeaderTransitionPreset",
      value: function _getHeaderTransitionPreset() {
        {
          return 'fade-in-place';
        }
        var headerTransitionPreset = this.props.headerTransitionPreset;

        if (headerTransitionPreset) {
          if (HEADER_TRANSITION_PRESET_VALUES.includes(headerTransitionPreset)) {
            return headerTransitionPreset;
          }
        }

        return 'fade-in-place';
      }
    }, {
      key: "_getheaderBackTitleVisible",
      value: function _getheaderBackTitleVisible() {
        var headerBackTitleVisible = this.props.headerBackTitleVisible;
        return headerBackTitleVisible;
      }
    }, {
      key: "_renderInnerScene",
      value: function _renderInnerScene(scene) {
        var _scene$descriptor = scene.descriptor,
            navigation = _scene$descriptor.navigation,
            getComponent = _scene$descriptor.getComponent;
        var SceneComponent = getComponent();
        var screenProps = this.props.screenProps;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'screen') {
          return _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.scenes
              },
              _react2.default.createElement(_reactNavigation.SceneView, {
                screenProps: screenProps,
                navigation: navigation,
                component: SceneComponent
              })
            ),
            this._renderHeader(scene, headerMode)
          );
        }

        return _react2.default.createElement(_reactNavigation.SceneView, {
          screenProps: screenProps,
          navigation: navigation,
          component: SceneComponent
        });
      }
    }]);
    return StackViewLayout;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'column-reverse',
      overflow: 'hidden'
    },
    scenes: {
      flex: 1
    },
    floatingHeader: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });

  exports.default = (0, _reactNavigation.withOrientation)(StackViewLayout);
},763,[103,764,14,735,765,766,769,778,780]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = clamp;

  function clamp(min, value, max) {
    if (value < min) {
      return min;
    }

    if (value > max) {
      return max;
    }

    return value;
  }
},764,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ScreenContainer = exports.Screen = exports.NativeScreenContainer = exports.NativeScreen = undefined;
  exports.useScreens = useScreens;
  exports.screensEnabled = screensEnabled;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _ReactNativeVersion = _require(_dependencyMap[2]);

  var USE_SCREENS = false;

  var getViewManagerConfigCompat = function getViewManagerConfigCompat(name) {
    return typeof _reactNative.UIManager.getViewManagerConfig !== 'undefined' ? _reactNative.UIManager.getViewManagerConfig(name) : _reactNative.UIManager[name];
  };

  function useScreens() {
    var shouldUseScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    USE_SCREENS = shouldUseScreens;

    if (USE_SCREENS && !getViewManagerConfigCompat('RNSScreen')) {
      console.error("Screen native module hasn't been linked. Please check the react-native-screens README for more details");
    }
  }

  function screensEnabled() {
    return USE_SCREENS;
  }

  var NativeScreen = exports.NativeScreen = (0, _reactNative.requireNativeComponent)('RNSScreen', null);

  var AnimatedNativeScreen = _reactNative.Animated.createAnimatedComponent(NativeScreen);

  var NativeScreenContainer = exports.NativeScreenContainer = (0, _reactNative.requireNativeComponent)('RNSScreenContainer', null);

  var Screen = exports.Screen = function (_React$Component) {
    babelHelpers.inherits(Screen, _React$Component);

    function Screen() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Screen);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Screen.__proto__ || Object.getPrototypeOf(Screen)).call.apply(_ref, [this].concat(args))), _this), _this.setRef = function (ref) {
        _this._ref = ref;
        _this.props.onComponentRef && _this.props.onComponentRef(ref);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Screen, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this._ref.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        if (!USE_SCREENS) {
          var _props = this.props,
              active = _props.active,
              onComponentRef = _props.onComponentRef,
              props = babelHelpers.objectWithoutProperties(_props, ["active", "onComponentRef"]);
          return _react2.default.createElement(_reactNative.Animated.View, babelHelpers.extends({}, props, {
            ref: this.setRef
          }));
        } else if (_ReactNativeVersion.version.minor >= 57) {
          return _react2.default.createElement(AnimatedNativeScreen, this.props);
        } else {
          var _props2 = this.props,
              style = _props2.style,
              children = _props2.children,
              rest = babelHelpers.objectWithoutProperties(_props2, ["style", "children"]);
          return _react2.default.createElement(
            AnimatedNativeScreen,
            babelHelpers.extends({}, rest, {
              ref: this.setRef,
              style: _reactNative.StyleSheet.absoluteFill
            }),
            _react2.default.createElement(
              _reactNative.Animated.View,
              {
                style: style
              },
              children
            )
          );
        }
      }
    }]);
    return Screen;
  }(_react2.default.Component);

  var ScreenContainer = exports.ScreenContainer = function (_React$Component2) {
    babelHelpers.inherits(ScreenContainer, _React$Component2);

    function ScreenContainer() {
      babelHelpers.classCallCheck(this, ScreenContainer);
      return babelHelpers.possibleConstructorReturn(this, (ScreenContainer.__proto__ || Object.getPrototypeOf(ScreenContainer)).apply(this, arguments));
    }

    babelHelpers.createClass(ScreenContainer, [{
      key: "render",
      value: function render() {
        if (!USE_SCREENS) {
          return _react2.default.createElement(_reactNative.View, this.props);
        } else {
          return _react2.default.createElement(NativeScreenContainer, this.props);
        }
      }
    }]);
    return ScreenContainer;
  }(_react2.default.Component);
},765,[103,14,61]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeScreens = _require(_dependencyMap[2]);

  var _createPointerEventsContainer = _require(_dependencyMap[3]);

  var _createPointerEventsContainer2 = babelHelpers.interopRequireDefault(_createPointerEventsContainer);

  var EPS = 1e-5;

  function getAccessibilityProps(isActive) {
    {
      return {
        importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants'
      };
    }
  }

  var Card = function (_React$Component) {
    babelHelpers.inherits(Card, _React$Component);

    function Card() {
      babelHelpers.classCallCheck(this, Card);
      return babelHelpers.possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
    }

    babelHelpers.createClass(Card, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            pointerEvents = _props.pointerEvents,
            style = _props.style,
            position = _props.position,
            transparent = _props.transparent,
            _props$scene = _props.scene,
            index = _props$scene.index,
            isActive = _props$scene.isActive;
        var active = transparent || isActive ? 1 : position.interpolate({
          inputRange: [index, index + 1 - EPS, index + 1],
          outputRange: [1, 1, 0],
          extrapolate: 'clamp'
        });
        return _react2.default.createElement(
          _reactNativeScreens.Screen,
          babelHelpers.extends({
            pointerEvents: pointerEvents,
            onComponentRef: this.props.onComponentRef,
            style: [transparent ? styles.transparent : styles.main, style],
            active: active
          }, getAccessibilityProps(isActive)),
          children
        );
      }
    }]);
    return Card;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    main: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      backgroundColor: '#E9E9EF',
      shadowColor: 'black',
      shadowOffset: {
        width: 0,
        height: 0
      },
      shadowOpacity: 0.2,
      shadowRadius: 5
    }),
    transparent: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      backgroundColor: 'transparent'
    })
  });

  exports.default = (0, _createPointerEventsContainer2.default)(Card);
},766,[103,14,765,767]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createPointerEventsContainer;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _invariant = _require(_dependencyMap[1]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var MIN_POSITION_OFFSET = 0.01;

  function createPointerEventsContainer(Component) {
    var Container = function (_React$Component) {
      babelHelpers.inherits(Container, _React$Component);

      function Container(props, context) {
        babelHelpers.classCallCheck(this, Container);

        var _this = babelHelpers.possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props, context));

        _this._onComponentRef = function (component) {
          _this._component = component;

          if (component) {
            (0, _invariant2.default)(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');
          }
        };

        _this._onPositionChange = function () {
          if (_this._component) {
            var pointerEvents = _this._computePointerEvents();

            if (_this._pointerEvents !== pointerEvents) {
              _this._pointerEvents = pointerEvents;

              _this._component.setNativeProps({
                pointerEvents: pointerEvents
              });
            }
          }
        };

        _this._pointerEvents = _this._computePointerEvents();
        return _this;
      }

      babelHelpers.createClass(Container, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._positionListener && this._positionListener.remove();
        }
      }, {
        key: "render",
        value: function render() {
          this._bindPosition();

          this._pointerEvents = this._computePointerEvents();
          return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
            pointerEvents: this._pointerEvents,
            onComponentRef: this._onComponentRef
          }));
        }
      }, {
        key: "_bindPosition",
        value: function _bindPosition() {
          this._positionListener && this._positionListener.remove();
          this._positionListener = new AnimatedValueSubscription(this.props.position, this._onPositionChange);
        }
      }, {
        key: "_computePointerEvents",
        value: function _computePointerEvents() {
          var _props = this.props,
              navigation = _props.navigation,
              position = _props.position,
              scene = _props.scene;

          if (scene.isStale || navigation.state.index !== scene.index) {
            return scene.index > navigation.state.index ? 'box-only' : 'none';
          }

          var offset = position.__getAnimatedValue() - navigation.state.index;

          if (Math.abs(offset) > MIN_POSITION_OFFSET) {
            return 'box-only';
          }

          return 'auto';
        }
      }]);
      return Container;
    }(_react2.default.Component);

    return Container;
  }

  var AnimatedValueSubscription = function () {
    function AnimatedValueSubscription(value, callback) {
      babelHelpers.classCallCheck(this, AnimatedValueSubscription);
      this._value = value;
      this._token = value.addListener(callback);
    }

    babelHelpers.createClass(AnimatedValueSubscription, [{
      key: "remove",
      value: function remove() {
        this._value.removeListener(this._token);
      }
    }]);
    return AnimatedValueSubscription;
  }();
},767,[103,768]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = invariant;

  function invariant(condition, format, a, b, c, d, e, f) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }
},768,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNavigation = _require(_dependencyMap[2]);

  var _HeaderTitle = _require(_dependencyMap[3]);

  var _HeaderTitle2 = babelHelpers.interopRequireDefault(_HeaderTitle);

  var _HeaderBackButton = _require(_dependencyMap[4]);

  var _HeaderBackButton2 = babelHelpers.interopRequireDefault(_HeaderBackButton);

  var _ModularHeaderBackButton = _require(_dependencyMap[5]);

  var _ModularHeaderBackButton2 = babelHelpers.interopRequireDefault(_ModularHeaderBackButton);

  var _HeaderStyleInterpolator = _require(_dependencyMap[6]);

  var _HeaderStyleInterpolator2 = babelHelpers.interopRequireDefault(_HeaderStyleInterpolator);

  var APPBAR_HEIGHT = 56;
  var STATUSBAR_HEIGHT = 0;
  var TITLE_OFFSET_CENTER_ALIGN = 56;
  var TITLE_OFFSET_LEFT_ALIGN = 56;

  var getTitleOffsets = function getTitleOffsets(layoutPreset, forceBackTitle, hasLeftComponent, hasRightComponent) {
    if (layoutPreset === 'left') {
      var style = {
        left: TITLE_OFFSET_LEFT_ALIGN,
        right: TITLE_OFFSET_LEFT_ALIGN
      };

      if (!hasLeftComponent) {
        style.left = 0;
      }

      if (!hasRightComponent) {
        style.right = 0;
      }

      return style;
    } else if (layoutPreset === 'center') {
      var _style = {
        left: TITLE_OFFSET_CENTER_ALIGN,
        right: TITLE_OFFSET_CENTER_ALIGN
      };

      if (!hasLeftComponent && !hasRightComponent) {
        _style.left = 0;
        _style.right = 0;
      }

      return _style;
    }
  };

  var getAppBarHeight = function getAppBarHeight(isLandscape) {
    return 56;
  };

  var Header = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(Header, _React$PureComponent);

    function Header() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Header);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Header.__proto__ || Object.getPrototypeOf(Header)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        widths: {}
      }, _this._renderTitleComponent = function (props) {
        var layoutPreset = _this.props.layoutPreset;
        var options = props.scene.descriptor.options;
        var headerTitle = options.headerTitle;

        if (_react2.default.isValidElement(headerTitle)) {
          return headerTitle;
        }

        var titleString = _this._getHeaderTitleString(props.scene);

        var titleStyle = options.headerTitleStyle;
        var color = options.headerTintColor;
        var allowFontScaling = options.headerTitleAllowFontScaling;
        var onLayout = layoutPreset === 'center' ? function (e) {
          _this.setState({
            widths: babelHelpers.extends({}, _this.state.widths, babelHelpers.defineProperty({}, props.scene.key, e.nativeEvent.layout.width))
          });
        } : undefined;
        var HeaderTitleComponent = headerTitle && typeof headerTitle !== 'string' ? headerTitle : _HeaderTitle2.default;
        return _react2.default.createElement(
          HeaderTitleComponent,
          {
            onLayout: onLayout,
            allowFontScaling: allowFontScaling == null ? true : allowFontScaling,
            style: [color ? {
              color: color
            } : null, layoutPreset === 'center' ? {
              textAlign: 'center'
            } : {
              textAlign: 'left'
            }, titleStyle]
          },
          titleString
        );
      }, _this._renderLeftComponent = function (props) {
        var options = props.scene.descriptor.options;

        if (_react2.default.isValidElement(options.headerLeft) || options.headerLeft === null) {
          return options.headerLeft;
        }

        if (!options.headerLeft && props.scene.index === 0) {
          return;
        }

        var backButtonTitle = _this._getBackButtonTitleString(props.scene);

        var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);

        var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;
        var RenderedLeftComponent = options.headerLeft || _HeaderBackButton2.default;

        var goBack = function goBack() {
          requestAnimationFrame(function () {
            props.scene.descriptor.navigation.goBack(props.scene.descriptor.key);
          });
        };

        return _react2.default.createElement(RenderedLeftComponent, {
          onPress: goBack,
          pressColorAndroid: options.headerPressColorAndroid,
          tintColor: options.headerTintColor,
          backImage: options.headerBackImage,
          title: backButtonTitle,
          truncatedTitle: truncatedBackButtonTitle,
          backTitleVisible: _this.props.backTitleVisible,
          titleStyle: options.headerBackTitleStyle,
          layoutPreset: _this.props.layoutPreset,
          width: width
        });
      }, _this._renderModularLeftComponent = function (props, ButtonContainerComponent, LabelContainerComponent) {
        var _props$scene$descript = props.scene.descriptor,
            options = _props$scene$descript.options,
            navigation = _props$scene$descript.navigation;

        var backButtonTitle = _this._getBackButtonTitleString(props.scene);

        var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);

        var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;

        var goBack = function goBack() {
          requestAnimationFrame(function () {
            navigation.goBack(props.scene.descriptor.key);
          });
        };

        return _react2.default.createElement(_ModularHeaderBackButton2.default, {
          onPress: goBack,
          ButtonContainerComponent: ButtonContainerComponent,
          LabelContainerComponent: LabelContainerComponent,
          pressColorAndroid: options.headerPressColorAndroid,
          tintColor: options.headerTintColor,
          backImage: options.headerBackImage,
          title: backButtonTitle,
          truncatedTitle: truncatedBackButtonTitle,
          titleStyle: options.headerBackTitleStyle,
          width: width
        });
      }, _this._renderRightComponent = function (props) {
        var headerRight = props.scene.descriptor.options.headerRight;
        return headerRight || null;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Header, [{
      key: "_getHeaderTitleString",
      value: function _getHeaderTitleString(scene) {
        var options = scene.descriptor.options;

        if (typeof options.headerTitle === 'string') {
          return options.headerTitle;
        }

        if (options.title && typeof options.title !== 'string' && false) {
          throw new Error("Invalid title for route \"" + scene.route.routeName + "\" - title must be string or null, instead it was of type " + typeof options.title);
        }

        return options.title;
      }
    }, {
      key: "_getLastScene",
      value: function _getLastScene(scene) {
        return this.props.scenes.find(function (s) {
          return s.index === scene.index - 1;
        });
      }
    }, {
      key: "_getBackButtonTitleString",
      value: function _getBackButtonTitleString(scene) {
        var lastScene = this._getLastScene(scene);

        if (!lastScene) {
          return null;
        }

        var headerBackTitle = lastScene.descriptor.options.headerBackTitle;

        if (headerBackTitle || headerBackTitle === null) {
          return headerBackTitle;
        }

        return this._getHeaderTitleString(lastScene);
      }
    }, {
      key: "_getTruncatedBackButtonTitle",
      value: function _getTruncatedBackButtonTitle(scene) {
        var lastScene = this._getLastScene(scene);

        if (!lastScene) {
          return null;
        }

        return lastScene.descriptor.options.headerTruncatedBackTitle;
      }
    }, {
      key: "_renderLeft",
      value: function _renderLeft(props) {
        var options = props.scene.descriptor.options;
        var transitionPreset = this.props.transitionPreset;
        var style = props.style;

        if (options.headerLeftContainerStyle) {
          style = [style, options.headerLeftContainerStyle];
        }

        if (transitionPreset !== 'uikit' || options.headerBackImage || options.headerLeft || options.headerLeft === null) {
          return this._renderSubView(babelHelpers.extends({}, props, {
            style: style
          }), 'left', this._renderLeftComponent, this.props.leftInterpolator);
        } else {
          return this._renderModularSubView(babelHelpers.extends({}, props, {
            style: style
          }), 'left', this._renderModularLeftComponent, this.props.leftLabelInterpolator, this.props.leftButtonInterpolator);
        }
      }
    }, {
      key: "_renderTitle",
      value: function _renderTitle(props, options) {
        var _props = this.props,
            layoutPreset = _props.layoutPreset,
            transitionPreset = _props.transitionPreset;
        var style = [{
          justifyContent: layoutPreset === 'center' ? 'center' : 'flex-start'
        }, getTitleOffsets(layoutPreset, false, options.hasLeftComponent, options.hasRightComponent), options.headerTitleContainerStyle];
        return this._renderSubView(babelHelpers.extends({}, props, {
          style: style
        }), 'title', this._renderTitleComponent, transitionPreset === 'uikit' ? this.props.titleFromLeftInterpolator : this.props.titleInterpolator);
      }
    }, {
      key: "_renderRight",
      value: function _renderRight(props) {
        var options = props.scene.descriptor.options;
        var style = props.style;

        if (options.headerRightContainerStyle) {
          style = [style, options.headerRightContainerStyle];
        }

        return this._renderSubView(babelHelpers.extends({}, props, {
          style: style
        }), 'right', this._renderRightComponent, this.props.rightInterpolator);
      }
    }, {
      key: "_renderBackground",
      value: function _renderBackground(props) {
        var _props$scene = props.scene,
            index = _props$scene.index,
            options = _props$scene.descriptor.options;
        var offset = this.props.navigation.state.index - index;

        if (Math.abs(offset) > 2) {
          return null;
        }

        return this._renderSubView(babelHelpers.extends({}, props, {
          style: _reactNative.StyleSheet.absoluteFill
        }), 'background', function () {
          return options.headerBackground;
        }, this.props.backgroundInterpolator);
      }
    }, {
      key: "_renderModularSubView",
      value: function _renderModularSubView(props, name, renderer, labelStyleInterpolator, buttonStyleInterpolator) {
        var _this2 = this;

        var scene = props.scene;
        var index = scene.index,
            isStale = scene.isStale,
            key = scene.key;

        if (index === 0) {
          return;
        }

        var offset = this.props.navigation.state.index - index;

        if (Math.abs(offset) > 2) {
          return null;
        }

        var ButtonContainer = function ButtonContainer(_ref2) {
          var children = _ref2.children;
          return _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [buttonStyleInterpolator(babelHelpers.extends({}, _this2.props, props))]
            },
            children
          );
        };

        var LabelContainer = function LabelContainer(_ref3) {
          var children = _ref3.children;
          return _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [labelStyleInterpolator(babelHelpers.extends({}, _this2.props, props))]
            },
            children
          );
        };

        var subView = renderer(props, ButtonContainer, LabelContainer);

        if (subView === null) {
          return subView;
        }

        var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
        return _react2.default.createElement(
          _reactNative.View,
          {
            key: name + "_" + key,
            pointerEvents: pointerEvents,
            style: [styles.item, styles[name], props.style]
          },
          subView
        );
      }
    }, {
      key: "_renderSubView",
      value: function _renderSubView(props, name, renderer, styleInterpolator) {
        var scene = props.scene;
        var index = scene.index,
            isStale = scene.isStale,
            key = scene.key;
        var offset = this.props.navigation.state.index - index;

        if (Math.abs(offset) > 2) {
          return null;
        }

        var subView = renderer(props);

        if (subView == null) {
          return null;
        }

        var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: pointerEvents,
            key: name + "_" + key,
            style: [styles.item, styles[name], props.style, styleInterpolator(babelHelpers.extends({}, this.props, props))]
          },
          subView
        );
      }
    }, {
      key: "_renderHeader",
      value: function _renderHeader(props) {
        var options = props.scene.descriptor.options;

        if (options.header === null) {
          return null;
        }

        var left = this._renderLeft(props);

        var right = this._renderRight(props);

        var title = this._renderTitle(props, {
          hasLeftComponent: !!left,
          hasRightComponent: !!right,
          headerTitleContainerStyle: options.headerTitleContainerStyle
        });

        var transitionPreset = this.props.transitionPreset;
        var wrapperProps = {
          style: styles.header,
          key: "scene_" + props.scene.key
        };

        if (options.headerLeft || options.headerBackImage || true || transitionPreset !== 'uikit') {
          return _react2.default.createElement(
            _reactNative.View,
            wrapperProps,
            title,
            left,
            right
          );
        } else {
          return _react2.default.createElement(
            _reactNative.MaskedViewIOS,
            babelHelpers.extends({}, wrapperProps, {
              maskElement: _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.iconMaskContainer
                },
                _react2.default.createElement(_reactNative.Image, {
                  source: _require(_dependencyMap[7]),
                  style: styles.iconMask
                }),
                _react2.default.createElement(_reactNative.View, {
                  style: styles.iconMaskFillerRect
                })
              )
            }),
            title,
            left,
            right
          );
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var appBar = void 0;
        var background = void 0;
        var _props2 = this.props,
            mode = _props2.mode,
            scene = _props2.scene,
            isLandscape = _props2.isLandscape;

        if (mode === 'float') {
          var scenesByIndex = {};
          this.props.scenes.forEach(function (scene) {
            scenesByIndex[scene.index] = scene;
          });
          var scenesProps = Object.values(scenesByIndex).map(function (scene) {
            return {
              position: _this3.props.position,
              progress: _this3.props.progress,
              scene: scene
            };
          });
          appBar = scenesProps.map(this._renderHeader, this);
          background = scenesProps.map(this._renderBackground, this);
        } else {
          var headerProps = {
            position: new _reactNative.Animated.Value(this.props.scene.index),
            progress: new _reactNative.Animated.Value(0),
            scene: this.props.scene
          };
          appBar = this._renderHeader(headerProps);
          background = this._renderBackground(headerProps);
        }

        var options = scene.descriptor.options;
        var _options$headerStyle = options.headerStyle,
            headerStyle = _options$headerStyle === undefined ? {} : _options$headerStyle;

        var headerStyleObj = _reactNative.StyleSheet.flatten(headerStyle);

        var appBarHeight = getAppBarHeight(isLandscape);
        var alignItems = headerStyleObj.alignItems,
            justifyContent = headerStyleObj.justifyContent,
            flex = headerStyleObj.flex,
            flexDirection = headerStyleObj.flexDirection,
            flexGrow = headerStyleObj.flexGrow,
            flexShrink = headerStyleObj.flexShrink,
            flexBasis = headerStyleObj.flexBasis,
            flexWrap = headerStyleObj.flexWrap,
            position = headerStyleObj.position,
            padding = headerStyleObj.padding,
            paddingHorizontal = headerStyleObj.paddingHorizontal,
            paddingRight = headerStyleObj.paddingRight,
            paddingLeft = headerStyleObj.paddingLeft,
            top = headerStyleObj.top,
            right = headerStyleObj.right,
            bottom = headerStyleObj.bottom,
            left = headerStyleObj.left,
            safeHeaderStyle = babelHelpers.objectWithoutProperties(headerStyleObj, ["alignItems", "justifyContent", "flex", "flexDirection", "flexGrow", "flexShrink", "flexBasis", "flexWrap", "position", "padding", "paddingHorizontal", "paddingRight", "paddingLeft", "top", "right", "bottom", "left"]);
        var containerStyles = [options.headerTransparent ? styles.transparentContainer : styles.container, {
          height: appBarHeight
        }, safeHeaderStyle];
        var headerForceInset = options.headerForceInset;
        var forceInset = headerForceInset || {
          top: 'always',
          bottom: 'never'
        };
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: [this.props.layoutInterpolator(this.props), null]
          },
          _react2.default.createElement(
            _reactNavigation.SafeAreaView,
            {
              forceInset: forceInset,
              style: containerStyles
            },
            background,
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.flexOne
              },
              appBar
            )
          )
        );
      }
    }], [{
      key: "HEIGHT",
      get: function get() {
        return APPBAR_HEIGHT + STATUSBAR_HEIGHT;
      }
    }]);
    return Header;
  }(_react2.default.PureComponent), _class.defaultProps = {
    layoutInterpolator: _HeaderStyleInterpolator2.default.forLayout,
    leftInterpolator: _HeaderStyleInterpolator2.default.forLeft,
    leftButtonInterpolator: _HeaderStyleInterpolator2.default.forLeftButton,
    leftLabelInterpolator: _HeaderStyleInterpolator2.default.forLeftLabel,
    titleFromLeftInterpolator: _HeaderStyleInterpolator2.default.forCenterFromLeft,
    titleInterpolator: _HeaderStyleInterpolator2.default.forCenter,
    rightInterpolator: _HeaderStyleInterpolator2.default.forRight,
    backgroundInterpolator: _HeaderStyleInterpolator2.default.forBackground
  }, _temp2);

  function warnIfHeaderStyleDefined(value, styleProp) {
    if (styleProp === 'position' && value === 'absolute') {
      console.warn("position: 'absolute' is not supported on headerStyle. If you would like to render content under the header, use the headerTransparent navigationOption.");
    } else if (value !== undefined) {
      console.warn(styleProp + " was given a value of " + value + ", this has no effect on headerStyle.");
    }
  }

  var platformContainerStyles = void 0;
  {
    platformContainerStyles = {
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      elevation: 4
    };
  }
  var DEFAULT_BACKGROUND_COLOR = '#FFF';

  var styles = _reactNative.StyleSheet.create({
    container: babelHelpers.extends({
      backgroundColor: DEFAULT_BACKGROUND_COLOR
    }, platformContainerStyles),
    transparentContainer: babelHelpers.extends({
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0
    }, platformContainerStyles, {
      borderBottomWidth: 0,
      borderBottomColor: 'transparent',
      elevation: 0
    }),
    header: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      flexDirection: 'row'
    }),
    item: {
      backgroundColor: 'transparent'
    },
    iconMaskContainer: {
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'center'
    },
    iconMaskFillerRect: {
      flex: 1,
      backgroundColor: '#d8d8d8',
      marginLeft: -3
    },
    iconMask: {
      height: 21,
      width: 12,
      marginLeft: 9,
      marginTop: -0.5,
      alignSelf: 'center',
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    title: {
      bottom: 0,
      top: 0,
      position: 'absolute',
      alignItems: 'center',
      flexDirection: 'row'
    },
    left: {
      left: 0,
      bottom: 0,
      top: 0,
      position: 'absolute',
      alignItems: 'center',
      flexDirection: 'row'
    },
    right: {
      right: 0,
      bottom: 0,
      top: 0,
      position: 'absolute',
      flexDirection: 'row',
      alignItems: 'center'
    },
    flexOne: {
      flex: 1
    }
  });

  exports.default = (0, _reactNavigation.withOrientation)(Header);
},769,[103,14,735,770,771,774,775,777]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var AnimatedText = _reactNative.Animated.Text;

  var HeaderTitle = function HeaderTitle(_ref) {
    var style = _ref.style,
        rest = babelHelpers.objectWithoutProperties(_ref, ["style"]);
    return _react2.default.createElement(AnimatedText, babelHelpers.extends({
      numberOfLines: 1
    }, rest, {
      style: [styles.title, style],
      accessibilityTraits: "header",
      accessible: false
    }));
  };

  var styles = _reactNative.StyleSheet.create({
    title: {
      fontSize: 20,
      fontWeight: '500',
      color: 'rgba(0, 0, 0, .9)',
      marginHorizontal: 16
    }
  });

  exports.default = HeaderTitle;
},770,[103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _TouchableItem = _require(_dependencyMap[2]);

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var _backIcon = _require(_dependencyMap[3]);

  var _backIcon2 = babelHelpers.interopRequireDefault(_backIcon);

  var HeaderBackButton = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(HeaderBackButton, _React$PureComponent);

    function HeaderBackButton() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, HeaderBackButton);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = HeaderBackButton.__proto__ || Object.getPrototypeOf(HeaderBackButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this._onTextLayout = function (e) {
        if (_this.state.initialTextWidth) {
          return;
        }

        _this.setState({
          initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(HeaderBackButton, [{
      key: "_renderBackImage",
      value: function _renderBackImage() {
        var _props = this.props,
            backImage = _props.backImage,
            title = _props.title,
            tintColor = _props.tintColor;
        var BackImage = void 0;
        var props = void 0;

        if (_react2.default.isValidElement(backImage)) {
          return backImage;
        } else if (backImage) {
          BackImage = backImage;
          props = {
            tintColor: tintColor,
            title: title
          };
        } else {
          BackImage = _reactNative.Image;
          props = {
            style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {
              tintColor: tintColor
            }],
            source: _backIcon2.default
          };
        }

        return _react2.default.createElement(BackImage, props);
      }
    }, {
      key: "_maybeRenderTitle",
      value: function _maybeRenderTitle() {
        var _props2 = this.props,
            layoutPreset = _props2.layoutPreset,
            backTitleVisible = _props2.backTitleVisible,
            width = _props2.width,
            title = _props2.title,
            titleStyle = _props2.titleStyle,
            tintColor = _props2.tintColor,
            truncatedTitle = _props2.truncatedTitle;
        var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;
        var backButtonTitle = renderTruncated ? truncatedTitle : title;
        var titleDefaultsToDisabled = layoutPreset === 'left' || true || typeof backButtonTitle !== 'string';

        if (titleDefaultsToDisabled && !backTitleVisible) {
          return null;
        }

        return _react2.default.createElement(
          _reactNative.Text,
          {
            accessible: false,
            onLayout: this._onTextLayout,
            style: [styles.title, !!tintColor && {
              color: tintColor
            }, titleStyle],
            numberOfLines: 1
          },
          backButtonTitle
        );
      }
    }, {
      key: "render",
      value: function render() {
        var _props3 = this.props,
            onPress = _props3.onPress,
            pressColorAndroid = _props3.pressColorAndroid,
            title = _props3.title;

        var button = _react2.default.createElement(
          _TouchableItem2.default,
          {
            accessible: true,
            accessibilityComponentType: "button",
            accessibilityLabel: title,
            accessibilityTraits: "button",
            testID: "header-back",
            delayPressIn: 0,
            onPress: onPress,
            pressColor: pressColorAndroid,
            style: styles.container,
            borderless: true
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container
            },
            this._renderBackImage(),
            this._maybeRenderTitle()
          )
        );

        {
          return _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.androidButtonWrapper
            },
            button
          );
        }
      }
    }]);
    return HeaderBackButton;
  }(_react2.default.PureComponent), _class.defaultProps = {
    pressColorAndroid: 'rgba(0, 0, 0, .32)',
    tintColor: undefined,
    truncatedTitle: 'Back'
  }, _temp2);

  var styles = _reactNative.StyleSheet.create({
    androidButtonWrapper: {
      margin: 13,
      backgroundColor: 'transparent'
    },
    container: {
      alignItems: 'center',
      flexDirection: 'row',
      backgroundColor: 'transparent'
    },
    title: {
      fontSize: 17,
      paddingRight: 10
    },
    icon: {
      height: 24,
      width: 24,
      margin: 3,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    iconWithTitle: {}
  });

  exports.default = HeaderBackButton;
},771,[103,14,772,773]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var ANDROID_VERSION_LOLLIPOP = 21;
  var TouchableItem = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      babelHelpers.classCallCheck(this, TouchableItem);
      return babelHelpers.possibleConstructorReturn(this, (TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).apply(this, arguments));
    }

    babelHelpers.createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        if (_reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP) {
          var _props = this.props,
              style = _props.style,
              rest = babelHelpers.objectWithoutProperties(_props, ["style"]);
          return _react2.default.createElement(
            _reactNative.TouchableNativeFeedback,
            babelHelpers.extends({}, rest, {
              style: null,
              background: _reactNative.TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless)
            }),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: style
              },
              _react2.default.Children.only(this.props.children)
            )
          );
        }

        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          this.props,
          this.props.children
        );
      }
    }]);
    return TouchableItem;
  }(_react2.default.Component), _class.defaultProps = {
    borderless: false,
    pressColor: 'rgba(0, 0, 0, .32)'
  }, _temp);
  exports.default = TouchableItem;
},772,[103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-navigation-stack/dist/views/assets",
    "width": 24,
    "height": 24,
    "scales": [1, 1.5, 2, 3, 4],
    "hash": "a364dc7a784101f7c8f6791c7b4514ce",
    "name": "back-icon",
    "type": "png",
    "fileHashes": ["778ffc9fe8773a878e9c30a6304784de", "376d6a4c7f622917c39feb23671ef71d", "c79c3606a1cf168006ad3979763c7e0c", "02bc1fa7c0313217bde2d65ccbff40c9", "35ba0eaec5a4f5ed12ca16fabeae451d"]
  });
},773,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _TouchableItem = _require(_dependencyMap[2]);

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var _backIcon = _require(_dependencyMap[3]);

  var _backIcon2 = babelHelpers.interopRequireDefault(_backIcon);

  var ModularHeaderBackButton = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(ModularHeaderBackButton, _React$PureComponent);

    function ModularHeaderBackButton() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ModularHeaderBackButton);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ModularHeaderBackButton.__proto__ || Object.getPrototypeOf(ModularHeaderBackButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this._onTextLayout = function (e) {
        if (_this.state.initialTextWidth) {
          return;
        }

        _this.setState({
          initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ModularHeaderBackButton, [{
      key: "_renderBackImage",
      value: function _renderBackImage() {
        var _props = this.props,
            backImage = _props.backImage,
            title = _props.title,
            tintColor = _props.tintColor;
        var BackImage = void 0;
        var props = void 0;

        if (_react2.default.isValidElement(backImage)) {
          return backImage;
        } else if (backImage) {
          BackImage = backImage;
          props = {
            tintColor: tintColor,
            title: title
          };
        } else {
          BackImage = _reactNative.Image;
          props = {
            style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {
              tintColor: tintColor
            }],
            source: _backIcon2.default
          };
        }

        return _react2.default.createElement(BackImage, props);
      }
    }, {
      key: "render",
      value: function render() {
        var _props2 = this.props,
            onPress = _props2.onPress,
            width = _props2.width,
            title = _props2.title,
            titleStyle = _props2.titleStyle,
            tintColor = _props2.tintColor,
            truncatedTitle = _props2.truncatedTitle;
        var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;
        var backButtonTitle = renderTruncated ? truncatedTitle : title;

        if (backButtonTitle && backButtonTitle.length > 8) {
          backButtonTitle = truncatedTitle;
        }

        var _props3 = this.props,
            ButtonContainerComponent = _props3.ButtonContainerComponent,
            LabelContainerComponent = _props3.LabelContainerComponent;
        return _react2.default.createElement(
          _TouchableItem2.default,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: backButtonTitle,
            accessibilityTraits: "button",
            testID: "header-back",
            delayPressIn: 0,
            onPress: onPress,
            style: styles.container,
            borderless: true
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container
            },
            _react2.default.createElement(
              ButtonContainerComponent,
              null,
              this._renderBackImage()
            ),
            typeof backButtonTitle === 'string' && _react2.default.createElement(
              LabelContainerComponent,
              null,
              _react2.default.createElement(
                _reactNative.Text,
                {
                  onLayout: this._onTextLayout,
                  style: [styles.title, !!tintColor && {
                    color: tintColor
                  }, titleStyle],
                  numberOfLines: 1
                },
                backButtonTitle
              )
            )
          )
        );
      }
    }]);
    return ModularHeaderBackButton;
  }(_react2.default.PureComponent), _class.defaultProps = {
    tintColor: '#037aff',
    truncatedTitle: 'Back'
  }, _temp2);

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center',
      flexDirection: 'row',
      backgroundColor: 'transparent'
    },
    title: {
      fontSize: 17,
      paddingRight: 10
    },
    icon: {
      height: 21,
      width: 12,
      marginLeft: 9,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    iconWithTitle: {
      marginRight: 3
    }
  });

  exports.default = ModularHeaderBackButton;
},774,[103,14,772,773]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var _getSceneIndicesForInterpolationInputRange = _require(_dependencyMap[1]);

  var _getSceneIndicesForInterpolationInputRange2 = babelHelpers.interopRequireDefault(_getSceneIndicesForInterpolationInputRange);

  function hasHeader(scene) {
    if (!scene) {
      return true;
    }

    var descriptor = scene.descriptor;
    return descriptor.options.header !== null;
  }

  var crossFadeInterpolation = function crossFadeInterpolation(scenes, first, index, last) {
    return {
      inputRange: [first, first + 0.001, index - 0.9, index - 0.2, index, last - 0.001, last],
      outputRange: [0, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[first]) ? 0.3 : 1, hasHeader(scenes[index]) ? 1 : 0, hasHeader(scenes[last]) ? 0 : 1, 0]
    };
  };

  function isGoingBack(scenes) {
    var lastSceneIndexInScenes = scenes.length - 1;
    return !scenes[lastSceneIndexInScenes].isActive;
  }

  function forLayout(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene,
        scenes = props.scenes,
        mode = props.mode;

    if (mode !== 'float') {
      return {};
    }

    var isBack = isGoingBack(scenes);
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {};
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;

    var width = layout.initWidth || _reactNative.Dimensions.get('window').width;

    if (isBack && !hasHeader(scenes[index]) && !hasHeader(scenes[last]) || !isBack && !hasHeader(scenes[first]) && !hasHeader(scenes[index])) {
      return {
        transform: [{
          translateX: width
        }]
      };
    }

    var rtlMult = _reactNative.I18nManager.isRTL ? -1 : 1;
    var translateX = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [rtlMult * (hasHeader(scenes[first]) ? 0 : width), rtlMult * (hasHeader(scenes[index]) ? 0 : isBack ? width : -width), rtlMult * (hasHeader(scenes[last]) ? 0 : -width)]
    });
    return {
      transform: [{
        translateX: translateX
      }]
    };
  }

  function forLeft(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(scenes, first, index, last))
    };
  }

  function forCenter(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(scenes, first, index, last))
    };
  }

  function forRight(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(scenes, first, index, last))
    };
  }

  function forLeftButton(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, first + 0.001, first + Math.abs(index - first) / 2, index, last - Math.abs(last - index) / 2, last - 0.001, last];
    var outputRange = [0, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[first]) ? 0.1 : 1, hasHeader(scenes[index]) ? 1 : 0, hasHeader(scenes[last]) ? 0.1 : 1, hasHeader(scenes[last]) ? 0 : 1, 0];
    return {
      opacity: position.interpolate({
        inputRange: inputRange,
        outputRange: outputRange
      })
    };
  }

  var LEFT_LABEL_OFFSET = _reactNative.Dimensions.get('window').width / 2 - 70 - 25;

  function forLeftLabel(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var offset = LEFT_LABEL_OFFSET;
    return {
      opacity: position.interpolate({
        inputRange: [first, first + 0.001, index - 0.35, index, index + 0.5, last - 0.001, last],
        outputRange: [0, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[index]) ? 1 : 0, hasHeader(scenes[last]) ? 0.5 : 1, hasHeader(scenes[last]) ? 0 : 1, 0]
      }),
      transform: [{
        translateX: position.interpolate({
          inputRange: [first, first + 0.001, index, last - 0.001, last],
          outputRange: _reactNative.I18nManager.isRTL ? [-offset * 1.5, hasHeader(scenes[first]) ? -offset * 1.5 : 0, 0, hasHeader(scenes[last]) ? offset : 0, offset] : [offset, hasHeader(scenes[first]) ? offset : 0, 0, hasHeader(scenes[last]) ? -offset * 1.5 : 0, -offset * 1.5]
        })
      }]
    };
  }

  var TITLE_OFFSET_IOS = _reactNative.Dimensions.get('window').width / 2 - 70 + 25;

  function forCenterFromLeft(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var offset = TITLE_OFFSET_IOS;
    return {
      opacity: position.interpolate({
        inputRange: [first, first + 0.001, index - 0.5, index, index + 0.7, last - 0.001, last],
        outputRange: [0, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[index]) ? 1 : 0, hasHeader(scenes[last]) ? 0 : 1, hasHeader(scenes[last]) ? 0 : 1, 0]
      }),
      transform: [{
        translateX: position.interpolate({
          inputRange: [first, first + 0.001, index, last - 0.001, last],
          outputRange: _reactNative.I18nManager.isRTL ? [-offset, hasHeader(scenes[first]) ? -offset : 0, 0, hasHeader(scenes[last]) ? offset : 0, offset] : [offset, hasHeader(scenes[first]) ? offset : 0, 0, hasHeader(scenes[last]) ? -offset : 0, -offset]
        })
      }]
    };
  }

  function forBackground() {
    return null;
  }

  var BACKGROUND_OFFSET = _reactNative.Dimensions.get('window').width;

  function forBackgroundWithTranslation(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var offset = BACKGROUND_OFFSET;
    var outputRange = [offset, 0, -offset];
    return {
      transform: [{
        translateX: position.interpolate({
          inputRange: [first, index, last],
          outputRange: _reactNative.I18nManager.isRTL ? outputRange.reverse() : outputRange
        })
      }]
    };
  }

  exports.default = {
    forLayout: forLayout,
    forLeft: forLeft,
    forLeftButton: forLeftButton,
    forLeftLabel: forLeftLabel,
    forCenterFromLeft: forCenterFromLeft,
    forCenter: forCenter,
    forRight: forRight,
    forBackground: forBackground,
    forBackgroundWithTranslation: forBackgroundWithTranslation
  };
},775,[14,776]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function getSceneIndicesForInterpolationInputRange(props) {
    var scene = props.scene,
        scenes = props.scenes;
    var index = scene.index;
    var lastSceneIndexInScenes = scenes.length - 1;
    var isBack = !scenes[lastSceneIndexInScenes].isActive;

    if (isBack) {
      var currentSceneIndexInScenes = scenes.findIndex(function (item) {
        return item === scene;
      });
      var targetSceneIndexInScenes = scenes.findIndex(function (item) {
        return item.isActive;
      });
      var targetSceneIndex = scenes[targetSceneIndexInScenes].index;
      var lastSceneIndex = scenes[lastSceneIndexInScenes].index;

      if (index !== targetSceneIndex && currentSceneIndexInScenes === lastSceneIndexInScenes) {
        return {
          first: Math.min(targetSceneIndex, index - 1),
          last: index + 1
        };
      } else if (index === targetSceneIndex && currentSceneIndexInScenes === targetSceneIndexInScenes) {
        return {
          first: index - 1,
          last: Math.max(lastSceneIndex, index + 1)
        };
      } else if (index === targetSceneIndex || currentSceneIndexInScenes > targetSceneIndexInScenes) {
        return null;
      } else {
        return {
          first: index - 1,
          last: index + 1
        };
      }
    } else {
      return {
        first: index - 1,
        last: index + 1
      };
    }
  }

  exports.default = getSceneIndicesForInterpolationInputRange;
},776,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-navigation-stack/dist/views/assets",
    "width": 48,
    "height": 82,
    "scales": [1],
    "hash": "755fce460f64aed4d3f3ac1a6249ceea",
    "name": "back-icon-mask",
    "type": "png",
    "fileHashes": ["755fce460f64aed4d3f3ac1a6249ceea"]
  });
},777,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var _StackViewStyleInterpolator = _require(_dependencyMap[1]);

  var _StackViewStyleInterpolator2 = babelHelpers.interopRequireDefault(_StackViewStyleInterpolator);

  var _ReactNativeFeatures = _require(_dependencyMap[2]);

  var IOSTransitionSpec = void 0;

  if ((0, _ReactNativeFeatures.supportsImprovedSpringAnimation)()) {
    IOSTransitionSpec = {
      timing: _reactNative.Animated.spring,
      stiffness: 1000,
      damping: 500,
      mass: 3
    };
  } else {
    IOSTransitionSpec = {
      duration: 500,
      easing: _reactNative.Easing.bezier(0.2833, 0.99, 0.31833, 0.99),
      timing: _reactNative.Animated.timing
    };
  }

  var SlideFromRightIOS = {
    transitionSpec: IOSTransitionSpec,
    screenInterpolator: _StackViewStyleInterpolator2.default.forHorizontal,
    containerStyle: {
      backgroundColor: '#000'
    }
  };
  var ModalSlideFromBottomIOS = {
    transitionSpec: IOSTransitionSpec,
    screenInterpolator: _StackViewStyleInterpolator2.default.forVertical,
    containerStyle: {
      backgroundColor: '#000'
    }
  };
  var FadeInFromBottomAndroid = {
    transitionSpec: {
      duration: 350,
      easing: _reactNative.Easing.out(_reactNative.Easing.poly(5)),
      timing: _reactNative.Animated.timing
    },
    screenInterpolator: _StackViewStyleInterpolator2.default.forFadeFromBottomAndroid
  };
  var FadeOutToBottomAndroid = {
    transitionSpec: {
      duration: 230,
      easing: _reactNative.Easing.in(_reactNative.Easing.poly(4)),
      timing: _reactNative.Animated.timing
    },
    screenInterpolator: _StackViewStyleInterpolator2.default.forFadeFromBottomAndroid
  };

  function defaultTransitionConfig(transitionProps, prevTransitionProps, isModal) {
    {
      if (prevTransitionProps && transitionProps.index < prevTransitionProps.index) {
        return FadeOutToBottomAndroid;
      }

      return FadeInFromBottomAndroid;
    }

    if (isModal) {
      return ModalSlideFromBottomIOS;
    }

    return SlideFromRightIOS;
  }

  function getTransitionConfig(transitionConfigurer, transitionProps, prevTransitionProps, isModal) {
    var defaultConfig = defaultTransitionConfig(transitionProps, prevTransitionProps, isModal);

    if (transitionConfigurer) {
      return babelHelpers.extends({}, defaultConfig, transitionConfigurer(transitionProps, prevTransitionProps, isModal));
    }

    return defaultConfig;
  }

  exports.default = {
    defaultTransitionConfig: defaultTransitionConfig,
    getTransitionConfig: getTransitionConfig,
    SlideFromRightIOS: SlideFromRightIOS,
    ModalSlideFromBottomIOS: ModalSlideFromBottomIOS,
    FadeInFromBottomAndroid: FadeInFromBottomAndroid,
    FadeOutToBottomAndroid: FadeOutToBottomAndroid
  };
},778,[14,779,780]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var _getSceneIndicesForInterpolationInputRange = _require(_dependencyMap[1]);

  var _getSceneIndicesForInterpolationInputRange2 = babelHelpers.interopRequireDefault(_getSceneIndicesForInterpolationInputRange);

  function forInitial(props) {
    var navigation = props.navigation,
        scene = props.scene;
    var focused = navigation.state.index === scene.index;
    var opacity = focused ? 1 : 0;
    var translate = focused ? 0 : 1000000;
    return {
      opacity: opacity,
      transform: [{
        translateX: translate
      }, {
        translateY: translate
      }]
    };
  }

  function forHorizontal(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, first + 0.01, index, last - 0.01, last],
      outputRange: [0, 1, 1, 0.85, 0],
      extrapolate: 'clamp'
    });
    var width = layout.initWidth;
    var translateX = position.interpolate({
      inputRange: [first, index, last],
      outputRange: _reactNative.I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3],
      extrapolate: 'clamp'
    });
    var translateY = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forVertical(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, first + 0.01, index, last - 0.01, last],
      outputRange: [0, 1, 1, 0.85, 0],
      extrapolate: 'clamp'
    });
    var height = layout.initHeight;
    var translateY = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [height, 0, 0],
      extrapolate: 'clamp'
    });
    var translateX = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forFadeFromBottomAndroid(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, index, last - 0.01, last];
    var opacity = position.interpolate({
      inputRange: inputRange,
      outputRange: [0, 1, 1, 0],
      extrapolate: 'clamp'
    });
    var translateY = position.interpolate({
      inputRange: inputRange,
      outputRange: [50, 0, 0, 0],
      extrapolate: 'clamp'
    });
    var translateX = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forFade(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [0, 1, 1],
      extrapolate: 'clamp'
    });
    return {
      opacity: opacity
    };
  }

  exports.default = {
    forHorizontal: forHorizontal,
    forVertical: forVertical,
    forFadeFromBottomAndroid: forFadeFromBottomAndroid,
    forFade: forFade
  };
},779,[14,776]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.supportsImprovedSpringAnimation = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  var PlatformConstants = _reactNative.NativeModules.PlatformConstants;

  var supportsImprovedSpringAnimation = exports.supportsImprovedSpringAnimation = function supportsImprovedSpringAnimation() {
    if (PlatformConstants && PlatformConstants.reactNativeVersion) {
      var _PlatformConstants$re = PlatformConstants.reactNativeVersion,
          major = _PlatformConstants$re.major,
          minor = _PlatformConstants$re.minor;
      return minor >= 50 || major === 0 && minor === 0;
    }

    return false;
  };
},780,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _invariant = _require(_dependencyMap[2]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _ScenesReducer = _require(_dependencyMap[3]);

  var _ScenesReducer2 = babelHelpers.interopRequireDefault(_ScenesReducer);

  var DefaultTransitionSpec = {
    duration: 250,
    easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
    timing: _reactNative.Animated.timing
  };
  var Transitioner = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Transitioner, _React$Component);

    function Transitioner(props, context) {
      babelHelpers.classCallCheck(this, Transitioner);

      var _this = babelHelpers.possibleConstructorReturn(this, (Transitioner.__proto__ || Object.getPrototypeOf(Transitioner)).call(this, props, context));

      _initialiseProps.call(_this);

      var layout = {
        height: new _reactNative.Animated.Value(0),
        initHeight: 0,
        initWidth: 0,
        isMeasured: false,
        width: new _reactNative.Animated.Value(0)
      };
      _this.state = {
        layout: layout,
        position: new _reactNative.Animated.Value(_this.props.navigation.state.index),
        progress: new _reactNative.Animated.Value(1),
        scenes: (0, _ScenesReducer2.default)([], _this.props.navigation.state, null, _this.props.descriptors)
      };
      _this._prevTransitionProps = null;
      _this._transitionProps = buildTransitionProps(props, _this.state);
      _this._isMounted = false;
      _this._isTransitionRunning = false;
      _this._queuedTransition = null;
      return _this;
    }

    babelHelpers.createClass(Transitioner, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var nextScenes = (0, _ScenesReducer2.default)(this.state.scenes, nextProps.navigation.state, this.props.navigation.state, nextProps.descriptors);

        if (!nextProps.navigation.state.isTransitioning) {
          nextScenes = filterStale(nextScenes);
        }

        if (nextProps.screenProps !== this.props.screenProps) {
          this.setState({
            nextScenes: nextScenes
          });
        }

        if (nextScenes === this.state.scenes) {
          return;
        }

        var indexHasChanged = nextProps.navigation.state.index !== this.props.navigation.state.index;

        if (this._isTransitionRunning) {
          this._queuedTransition = {
            nextProps: nextProps,
            nextScenes: nextScenes,
            indexHasChanged: indexHasChanged
          };
          return;
        }

        this._startTransition(nextProps, nextScenes, indexHasChanged);
      }
    }, {
      key: "_startTransition",
      value: function _startTransition(nextProps, nextScenes, indexHasChanged) {
        var _this2 = this;

        var nextState = babelHelpers.extends({}, this.state, {
          scenes: nextScenes
        });
        var position = nextState.position,
            progress = nextState.progress;
        progress.setValue(0);
        this._prevTransitionProps = this._transitionProps;
        this._transitionProps = buildTransitionProps(nextProps, nextState);
        var toValue = nextProps.navigation.state.index;

        if (!this._transitionProps.navigation.state.isTransitioning) {
          this.setState(nextState, function _callee() {
            var result;
            return regeneratorRuntime.async(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);

                    if (!(result instanceof Promise)) {
                      _context.next = 4;
                      break;
                    }

                    _context.next = 4;
                    return regeneratorRuntime.awrap(result);

                  case 4:
                    progress.setValue(1);
                    position.setValue(toValue);

                    _this2._onTransitionEnd();

                  case 7:
                  case "end":
                    return _context.stop();
                }
              }
            }, null, _this2);
          });
          return;
        }

        var transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;
        var transitionSpec = babelHelpers.extends({}, DefaultTransitionSpec, transitionUserSpec);
        var timing = transitionSpec.timing;
        delete transitionSpec.timing;
        var positionHasChanged = position.__getValue() !== toValue;
        var animations = indexHasChanged && positionHasChanged ? [timing(progress, babelHelpers.extends({}, transitionSpec, {
          toValue: 1
        })), timing(position, babelHelpers.extends({}, transitionSpec, {
          toValue: nextProps.navigation.state.index
        }))] : [];
        this._isTransitionRunning = true;
        this.setState(nextState, function _callee2() {
          var result;
          return regeneratorRuntime.async(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!nextProps.onTransitionStart) {
                    _context2.next = 5;
                    break;
                  }

                  result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);

                  if (!(result instanceof Promise)) {
                    _context2.next = 5;
                    break;
                  }

                  _context2.next = 5;
                  return regeneratorRuntime.awrap(result);

                case 5:
                  _reactNative.Animated.parallel(animations).start(_this2._onTransitionEnd);

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, null, _this2);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            onLayout: this._onLayout,
            style: styles.main
          },
          this.props.render(this._transitionProps, this._prevTransitionProps)
        );
      }
    }]);
    return Transitioner;
  }(_react2.default.Component), _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._onLayout = function (event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          height = _event$nativeEvent$la.height,
          width = _event$nativeEvent$la.width;

      if (_this3.state.layout.initWidth === width && _this3.state.layout.initHeight === height) {
        return;
      }

      var layout = babelHelpers.extends({}, _this3.state.layout, {
        initHeight: height,
        initWidth: width,
        isMeasured: true
      });
      layout.height.setValue(height);
      layout.width.setValue(width);
      var nextState = babelHelpers.extends({}, _this3.state, {
        layout: layout
      });
      _this3._transitionProps = buildTransitionProps(_this3.props, nextState);

      _this3.setState(nextState);
    };

    this._onTransitionEnd = function () {
      if (!_this3._isMounted) {
        return;
      }

      var prevTransitionProps = _this3._prevTransitionProps;
      _this3._prevTransitionProps = null;
      var scenes = filterStale(_this3.state.scenes);
      var nextState = babelHelpers.extends({}, _this3.state, {
        scenes: scenes
      });
      _this3._transitionProps = buildTransitionProps(_this3.props, nextState);

      _this3.setState(nextState, function _callee3() {
        var result;
        return regeneratorRuntime.async(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!_this3.props.onTransitionEnd) {
                  _context3.next = 5;
                  break;
                }

                result = _this3.props.onTransitionEnd(_this3._transitionProps, prevTransitionProps);

                if (!(result instanceof Promise)) {
                  _context3.next = 5;
                  break;
                }

                _context3.next = 5;
                return regeneratorRuntime.awrap(result);

              case 5:
                if (_this3._queuedTransition) {
                  _this3._startTransition(_this3._queuedTransition.nextProps, _this3._queuedTransition.nextScenes, _this3._queuedTransition.indexHasChanged);

                  _this3._queuedTransition = null;
                } else {
                  _this3._isTransitionRunning = false;
                }

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, null, _this3);
      });
    };
  }, _temp);

  function buildTransitionProps(props, state) {
    var navigation = props.navigation;
    var layout = state.layout,
        position = state.position,
        progress = state.progress,
        scenes = state.scenes;
    var scene = scenes.find(isSceneActive);
    (0, _invariant2.default)(scene, 'Could not find active scene');
    return {
      layout: layout,
      navigation: navigation,
      position: position,
      progress: progress,
      scenes: scenes,
      scene: scene,
      index: scene.index
    };
  }

  function isSceneNotStale(scene) {
    return !scene.isStale;
  }

  function filterStale(scenes) {
    var filtered = scenes.filter(isSceneNotStale);

    if (filtered.length === scenes.length) {
      return scenes;
    }

    return filtered;
  }

  function isSceneActive(scene) {
    return scene.isActive;
  }

  var styles = _reactNative.StyleSheet.create({
    main: {
      flex: 1
    }
  });

  exports.default = Transitioner;
},781,[103,14,768,782]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ScenesReducer;

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _shallowEqual = _require(_dependencyMap[1]);

  var _shallowEqual2 = babelHelpers.interopRequireDefault(_shallowEqual);

  var SCENE_KEY_PREFIX = 'scene_';

  function compareKey(one, two) {
    var delta = one.length - two.length;

    if (delta > 0) {
      return 1;
    }

    if (delta < 0) {
      return -1;
    }

    return one > two ? 1 : -1;
  }

  function compareScenes(one, two) {
    if (one.index > two.index) {
      return 1;
    }

    if (one.index < two.index) {
      return -1;
    }

    return compareKey(one.key, two.key);
  }

  function areScenesShallowEqual(one, two) {
    return one.key === two.key && one.index === two.index && one.isStale === two.isStale && one.isActive === two.isActive && areRoutesShallowEqual(one.route, two.route);
  }

  function areRoutesShallowEqual(one, two) {
    if (!one || !two) {
      return one === two;
    }

    if (one.key !== two.key) {
      return false;
    }

    return (0, _shallowEqual2.default)(one, two);
  }

  function ScenesReducer(scenes, nextState, prevState, descriptors) {
    scenes.forEach(function (scene) {
      var route = scene.route;

      if (descriptors && descriptors[route.key]) {
        scene.descriptor = descriptors[route.key];
      }
    });

    if (prevState === nextState) {
      return scenes;
    }

    var prevScenes = new Map();
    var freshScenes = new Map();
    var staleScenes = new Map();
    scenes.forEach(function (scene) {
      var key = scene.key;

      if (scene.isStale) {
        staleScenes.set(key, scene);
      }

      prevScenes.set(key, scene);
    });
    var nextKeys = new Set();
    nextState.routes.forEach(function (route, index) {
      var key = SCENE_KEY_PREFIX + route.key;
      var descriptor = descriptors && descriptors[route.key];
      var scene = {
        index: index,
        isActive: false,
        isStale: false,
        key: key,
        route: route,
        descriptor: descriptor
      };
      (0, _invariant2.default)(!nextKeys.has(key), "navigation.state.routes[" + index + "].key \"" + key + "\" conflicts with " + 'another route!');
      nextKeys.add(key);

      if (staleScenes.has(key)) {
        staleScenes.delete(key);
      }

      freshScenes.set(key, scene);
    });

    if (prevState) {
      prevState.routes.forEach(function (route, index) {
        var key = SCENE_KEY_PREFIX + route.key;

        if (freshScenes.has(key)) {
          return;
        }

        var lastScene = scenes.find(function (scene) {
          return scene.route.key === route.key;
        });
        var descriptor = lastScene ? lastScene.descriptor : descriptors[route.key];

        if (descriptor) {
          staleScenes.set(key, {
            index: index,
            isActive: false,
            isStale: true,
            key: key,
            route: route,
            descriptor: descriptor
          });
        }
      });
    }

    var nextScenes = [];

    var mergeScene = function mergeScene(nextScene) {
      var key = nextScene.key;
      var prevScene = prevScenes.has(key) ? prevScenes.get(key) : null;

      if (prevScene && areScenesShallowEqual(prevScene, nextScene)) {
        nextScenes.push(prevScene);
      } else {
        nextScenes.push(nextScene);
      }
    };

    staleScenes.forEach(mergeScene);
    freshScenes.forEach(mergeScene);
    nextScenes.sort(compareScenes);
    var activeScenesCount = 0;
    nextScenes.forEach(function (scene, ii) {
      var isActive = !scene.isStale && scene.index === nextState.index;

      if (isActive !== scene.isActive) {
        nextScenes[ii] = babelHelpers.extends({}, scene, {
          isActive: isActive
        });
      }

      if (isActive) {
        activeScenesCount++;
      }
    });
    (0, _invariant2.default)(activeScenesCount === 1, 'there should always be only one scene active, not %s.', activeScenesCount);

    if (nextScenes.length !== scenes.length) {
      return nextScenes;
    }

    if (nextScenes.some(function (scene, index) {
      return !areScenesShallowEqual(scenes[index], scene);
    })) {
      return nextScenes;
    }

    return scenes;
  }
},782,[768,783]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  exports.default = shallowEqual;
},783,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createNavigationContainer = _require(_dependencyMap[0]);

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _createSwitchNavigator = _require(_dependencyMap[1]);

  var _createSwitchNavigator2 = babelHelpers.interopRequireDefault(_createSwitchNavigator);

  var SwitchNavigator = function SwitchNavigator(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var navigator = (0, _createSwitchNavigator2.default)(routeConfigs, config);
    return (0, _createNavigationContainer2.default)(navigator);
  };

  exports.default = SwitchNavigator;
},784,[736,785]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createNavigator = _require(_dependencyMap[0]);

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  var _SwitchRouter = _require(_dependencyMap[1]);

  var _SwitchRouter2 = babelHelpers.interopRequireDefault(_SwitchRouter);

  var _SwitchView = _require(_dependencyMap[2]);

  var _SwitchView2 = babelHelpers.interopRequireDefault(_SwitchView);

  function createSwitchNavigator(routeConfigMap) {
    var switchConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var router = (0, _SwitchRouter2.default)(routeConfigMap, switchConfig);
    var Navigator = (0, _createNavigator2.default)(_SwitchView2.default, router, switchConfig);
    return Navigator;
  }

  exports.default = createSwitchNavigator;
},785,[753,786,794]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _getScreenForRouteName = _require(_dependencyMap[1]);

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _createConfigGetter = _require(_dependencyMap[2]);

  var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

  var _NavigationActions = _require(_dependencyMap[3]);

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _StackActions = _require(_dependencyMap[4]);

  var _StackActions2 = babelHelpers.interopRequireDefault(_StackActions);

  var _validateRouteConfigMap = _require(_dependencyMap[5]);

  var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

  var _pathUtils = _require(_dependencyMap[6]);

  var defaultActionCreators = function defaultActionCreators(route, navStateKey) {
    return {};
  };

  function childrenUpdateWithoutSwitchingIndex(actionType) {
    return [_NavigationActions2.default.SET_PARAMS, _StackActions2.default.COMPLETE_TRANSITION].includes(actionType);
  }

  exports.default = function (routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap2.default)(routeConfigs);
    var order = config.order || Object.keys(routeConfigs);
    var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;
    var initialRouteParams = config.initialRouteParams;
    var initialRouteName = config.initialRouteName || order[0];
    var backBehavior = config.backBehavior || 'none';
    var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';
    var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;
    var initialRouteIndex = order.indexOf(initialRouteName);
    var childRouters = {};
    order.forEach(function (routeName) {
      var routeConfig = routeConfigs[routeName];
      childRouters[routeName] = null;
      var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);

      if (screen.router) {
        childRouters[routeName] = screen.router;
      }
    });

    var _createPathParser = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, config),
        getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,
        _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;

    if (initialRouteIndex === -1) {
      throw new Error("Invalid initialRouteName '" + initialRouteName + "'." + ("Should be one of " + order.map(function (n) {
        return "\"" + n + "\"";
      }).join(', ')));
    }

    function resetChildRoute(routeName) {
      var params = routeName === initialRouteName ? initialRouteParams : undefined;
      var childRouter = childRouters[routeName];

      if (childRouter) {
        var childAction = _NavigationActions2.default.init();

        return babelHelpers.extends({}, childRouter.getStateForAction(childAction), {
          key: routeName,
          routeName: routeName,
          params: params
        });
      }

      return {
        key: routeName,
        routeName: routeName,
        params: params
      };
    }

    function getNextState(prevState, possibleNextState) {
      if (!prevState) {
        return possibleNextState;
      }

      var nextState = void 0;

      if (prevState.index !== possibleNextState.index && resetOnBlur) {
        var prevRouteName = prevState.routes[prevState.index].routeName;
        var nextRoutes = [].concat(babelHelpers.toConsumableArray(possibleNextState.routes));
        nextRoutes[prevState.index] = resetChildRoute(prevRouteName);
        return babelHelpers.extends({}, possibleNextState, {
          routes: nextRoutes
        });
      } else {
        nextState = possibleNextState;
      }

      return nextState;
    }

    function getInitialState() {
      var routes = order.map(resetChildRoute);
      return {
        routes: routes,
        index: initialRouteIndex,
        isTransitioning: false
      };
    }

    return {
      childRouters: childRouters,
      getActionCreators: function getActionCreators(route, stateKey) {
        return getCustomActionCreators(route, stateKey);
      },
      getStateForAction: function getStateForAction(action, inputState) {
        var prevState = inputState ? babelHelpers.extends({}, inputState) : inputState;
        var state = inputState || getInitialState();
        var activeChildIndex = state.index;

        if (action.type === _NavigationActions2.default.INIT) {
          var params = action.params;

          if (params) {
            state.routes = state.routes.map(function (route) {
              return babelHelpers.extends({}, route, {
                params: babelHelpers.extends({}, route.params, params, route.routeName === initialRouteName ? initialRouteParams : null)
              });
            });
          }
        }

        var activeChildLastState = state.routes[state.index];
        var activeChildRouter = childRouters[order[state.index]];

        if (activeChildRouter) {
          var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);

          if (!activeChildState && inputState) {
            return null;
          }

          if (activeChildState && activeChildState !== activeChildLastState) {
            var _routes = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes[state.index] = activeChildState;
            return getNextState(prevState, babelHelpers.extends({}, state, {
              routes: _routes
            }));
          }
        }

        var isBackEligible = action.key == null || action.key === activeChildLastState.key;

        if (action.type === _NavigationActions2.default.BACK) {
          if (isBackEligible && shouldBackNavigateToInitialRoute) {
            activeChildIndex = initialRouteIndex;
          } else {
            return state;
          }
        }

        var didNavigate = false;

        if (action.type === _NavigationActions2.default.NAVIGATE) {
          didNavigate = !!order.find(function (childId, i) {
            if (childId === action.routeName) {
              activeChildIndex = i;
              return true;
            }

            return false;
          });

          if (didNavigate) {
            var childState = state.routes[activeChildIndex];
            var childRouter = childRouters[action.routeName];
            var newChildState = void 0;

            if (action.action) {
              newChildState = childRouter ? childRouter.getStateForAction(action.action, childState) : null;
            } else if (!action.action && action.params) {
              newChildState = babelHelpers.extends({}, childState, {
                params: babelHelpers.extends({}, childState.params || {}, action.params)
              });
            }

            if (newChildState && newChildState !== childState) {
              var _routes2 = [].concat(babelHelpers.toConsumableArray(state.routes));

              _routes2[activeChildIndex] = newChildState;
              return getNextState(prevState, babelHelpers.extends({}, state, {
                routes: _routes2,
                index: activeChildIndex
              }));
            } else if (!newChildState && state.index === activeChildIndex && prevState) {
              return null;
            }
          }
        }

        if (action.type === _NavigationActions2.default.SET_PARAMS) {
          var key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === key;
          });

          if (lastRoute) {
            var _params = babelHelpers.extends({}, lastRoute.params, action.params);

            var _routes3 = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes3[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
              params: _params
            });
            return getNextState(prevState, babelHelpers.extends({}, state, {
              routes: _routes3
            }));
          }
        }

        if (activeChildIndex !== state.index) {
          return getNextState(prevState, babelHelpers.extends({}, state, {
            index: activeChildIndex
          }));
        } else if (didNavigate && !inputState) {
          return state;
        } else if (didNavigate) {
          return babelHelpers.extends({}, state);
        }

        var index = state.index;
        var routes = state.routes;
        order.find(function (childId, i) {
          var childRouter = childRouters[childId];

          if (i === index) {
            return false;
          }

          var childState = routes[i];

          if (childRouter) {
            childState = childRouter.getStateForAction(action, childState);
          }

          if (!childState) {
            index = i;
            return true;
          }

          if (childState !== routes[i]) {
            routes = [].concat(babelHelpers.toConsumableArray(routes));
            routes[i] = childState;
            index = i;
            return true;
          }

          return false;
        });

        if (childrenUpdateWithoutSwitchingIndex(action.type)) {
          index = state.index;
        }

        if (index !== state.index || routes !== state.routes) {
          return getNextState(prevState, babelHelpers.extends({}, state, {
            index: index,
            routes: routes
          }));
        }

        return state;
      },
      getComponentForState: function getComponentForState(state) {
        var routeName = state.routes[state.index].routeName;
        (0, _invariant2.default)(routeName, "There is no route defined for index " + state.index + ". Check that\n        that you passed in a navigation state with a valid tab/screen index.");
        var childRouter = childRouters[routeName];

        if (childRouter) {
          return childRouter.getComponentForState(state.routes[state.index]);
        }

        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        return getPathAndParamsForRoute(route);
      },
      getActionForPathAndParams: function getActionForPathAndParams(path, params) {
        return _getActionForPathAndParams(path, params);
      },
      getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, config.navigationOptions)
    };
  };
},786,[741,787,790,738,792,793,746]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getScreenForRouteName;

  var _reactIs = _require(_dependencyMap[0]);

  var _invariant = _require(_dependencyMap[1]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function getScreenForRouteName(routeConfigs, routeName) {
    var routeConfig = routeConfigs[routeName];

    if (!routeConfig) {
      throw new Error("There is no route defined for key " + routeName + ".\n" + ("Must be one of: " + Object.keys(routeConfigs).map(function (a) {
        return "'" + a + "'";
      }).join(',')));
    }

    if (routeConfig.screen) {
      return routeConfig.screen;
    }

    if (typeof routeConfig.getScreen === 'function') {
      var screen = routeConfig.getScreen();
      (0, _invariant2.default)((0, _reactIs.isValidElementType)(screen), "The getScreen defined for route '" + routeName + " didn't return a valid " + 'screen or navigator.\n\n' + 'Please pass it like this:\n' + (routeName + ": {\n  getScreen: () => require('./MyScreen').default\n}"));
      return screen;
    }

    return routeConfig;
  }
},787,[788,741]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _require(_dependencyMap[0]);
  }
},788,[789]);
__d(function (global, _require, module, exports, _dependencyMap) {
  /** @license React v16.8.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var b = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      c = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      d = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      e = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      f = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      g = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      h = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      k = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      l = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.async_mode") : 60111,
      m = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      n = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      p = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      q = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      r = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116;

  function t(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;

      switch (u) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;

            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case h:
                  return a;

                default:
                  return u;
              }

          }

        case r:
        case q:
        case d:
          return u;
      }
    }
  }

  function v(a) {
    return t(a) === m;
  }

  exports.typeOf = t;
  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Lazy = r;
  exports.Memo = q;
  exports.Portal = d;
  exports.Profiler = g;
  exports.StrictMode = f;
  exports.Suspense = p;

  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === typeof a && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
  };

  exports.isAsyncMode = function (a) {
    return v(a) || t(a) === l;
  };

  exports.isConcurrentMode = v;

  exports.isContextConsumer = function (a) {
    return t(a) === k;
  };

  exports.isContextProvider = function (a) {
    return t(a) === h;
  };

  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };

  exports.isForwardRef = function (a) {
    return t(a) === n;
  };

  exports.isFragment = function (a) {
    return t(a) === e;
  };

  exports.isLazy = function (a) {
    return t(a) === r;
  };

  exports.isMemo = function (a) {
    return t(a) === q;
  };

  exports.isPortal = function (a) {
    return t(a) === d;
  };

  exports.isProfiler = function (a) {
    return t(a) === g;
  };

  exports.isStrictMode = function (a) {
    return t(a) === f;
  };

  exports.isSuspense = function (a) {
    return t(a) === p;
  };
},789,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _getScreenForRouteName = _require(_dependencyMap[1]);

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _validateScreenOptions = _require(_dependencyMap[2]);

  var _validateScreenOptions2 = babelHelpers.interopRequireDefault(_validateScreenOptions);

  function applyConfig(configurer, navigationOptions, configProps) {
    if (typeof configurer === 'function') {
      return babelHelpers.extends({}, navigationOptions, configurer(babelHelpers.extends({}, configProps, {
        navigationOptions: navigationOptions
      })));
    }

    if (typeof configurer === 'object') {
      return babelHelpers.extends({}, navigationOptions, configurer);
    }

    return navigationOptions;
  }

  exports.default = function (routeConfigs, navigatorScreenConfig) {
    return function (navigation, screenProps) {
      var state = navigation.state;
      var route = state;
      (0, _invariant2.default)(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');
      var Component = (0, _getScreenForRouteName2.default)(routeConfigs, route.routeName);
      var routeConfig = routeConfigs[route.routeName];
      var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;
      var componentScreenConfig = Component.navigationOptions;
      var configOptions = {
        navigation: navigation,
        screenProps: screenProps || {}
      };
      var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);
      outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);
      outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);
      (0, _validateScreenOptions2.default)(outputConfig, route);
      return outputConfig;
    };
  };
},790,[741,787,791]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var deprecatedKeys = ['tabBar'];

  exports.default = function (screenOptions, route) {
    var keys = Object.keys(screenOptions);
    var deprecatedKey = keys.find(function (key) {
      return deprecatedKeys.includes(key);
    });

    if (typeof screenOptions.title === 'function') {
      throw new Error(["`title` cannot be defined as a function in navigation options for `" + route.routeName + "` screen. \n", 'Try replacing the following:', '{', '    title: ({ state }) => state...', '}', '', 'with:', '({ navigation }) => ({', '    title: navigation.state...', '})'].join('\n'));
    }

    if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'function') {
      throw new Error(["`" + deprecatedKey + "` cannot be defined as a function in navigation options for `" + route.routeName + "` screen. \n", 'Try replacing the following:', '{', "    " + deprecatedKey + ": ({ state }) => ({", '         key: state...', '    })', '}', '', 'with:', '({ navigation }) => ({', "    " + deprecatedKey + "Key: navigation.state...", '})'].join('\n'));
    }

    if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'object') {
      throw new Error(["Invalid key `" + deprecatedKey + "` defined in navigation options for `" + route.routeName + "` screen.", '\n', 'Try replacing the following navigation options:', '{', "    " + deprecatedKey + ": {"].concat(babelHelpers.toConsumableArray(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
        return "        " + key + ": ...,";
      })), ['    },', '}', '\n', 'with:', '{'], babelHelpers.toConsumableArray(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
        return "    " + (deprecatedKey + key[0].toUpperCase() + key.slice(1)) + ": ...,";
      })), ['}']).join('\n'));
    }
  };
},791,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var POP = 'Navigation/POP';
  var POP_TO_TOP = 'Navigation/POP_TO_TOP';
  var PUSH = 'Navigation/PUSH';
  var RESET = 'Navigation/RESET';
  var REPLACE = 'Navigation/REPLACE';
  var COMPLETE_TRANSITION = 'Navigation/COMPLETE_TRANSITION';

  var pop = function pop(payload) {
    return babelHelpers.extends({
      type: POP
    }, payload);
  };

  var popToTop = function popToTop(payload) {
    return babelHelpers.extends({
      type: POP_TO_TOP
    }, payload);
  };

  var push = function push(payload) {
    return babelHelpers.extends({
      type: PUSH
    }, payload);
  };

  var reset = function reset(payload) {
    return babelHelpers.extends({
      type: RESET
    }, payload);
  };

  var replace = function replace(payload) {
    return babelHelpers.extends({
      type: REPLACE
    }, payload);
  };

  var completeTransition = function completeTransition(payload) {
    return babelHelpers.extends({
      type: COMPLETE_TRANSITION
    }, payload);
  };

  exports.default = {
    POP: POP,
    POP_TO_TOP: POP_TO_TOP,
    PUSH: PUSH,
    RESET: RESET,
    REPLACE: REPLACE,
    COMPLETE_TRANSITION: COMPLETE_TRANSITION,
    pop: pop,
    popToTop: popToTop,
    push: push,
    reset: reset,
    replace: replace,
    completeTransition: completeTransition
  };
},792,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactIs = _require(_dependencyMap[0]);

  var _invariant = _require(_dependencyMap[1]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function validateRouteConfigMap(routeConfigs) {
    var routeNames = Object.keys(routeConfigs);
    (0, _invariant2.default)(routeNames.length > 0, 'Please specify at least one route when configuring a navigator.');
    routeNames.forEach(function (routeName) {
      var routeConfig = routeConfigs[routeName];
      var screenComponent = getScreenComponent(routeConfig);

      if (!screenComponent || !(0, _reactIs.isValidElementType)(screenComponent) && !routeConfig.getScreen) {
        throw new Error("The component for route '" + routeName + "' must be a React component. For example:\n\nimport MyScreen from './MyScreen';\n...\n" + routeName + ": MyScreen,\n}\n\nYou can also use a navigator:\n\nimport MyNavigator from './MyNavigator';\n...\n" + routeName + ": MyNavigator,\n}");
      }

      if (routeConfig.screen && routeConfig.getScreen) {
        throw new Error("Route '" + routeName + "' should declare a screen or a getScreen, not both.");
      }
    });
  }

  function getScreenComponent(routeConfig) {
    if (!routeConfig) {
      return null;
    }

    return routeConfig.screen ? routeConfig.screen : routeConfig;
  }

  exports.default = validateRouteConfigMap;
},793,[788,741]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _SceneView = _require(_dependencyMap[1]);

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var SwitchView = function (_React$Component) {
    babelHelpers.inherits(SwitchView, _React$Component);

    function SwitchView() {
      babelHelpers.classCallCheck(this, SwitchView);
      return babelHelpers.possibleConstructorReturn(this, (SwitchView.__proto__ || Object.getPrototypeOf(SwitchView)).apply(this, arguments));
    }

    babelHelpers.createClass(SwitchView, [{
      key: "render",
      value: function render() {
        var state = this.props.navigation.state;
        var activeKey = state.routes[state.index].key;
        var descriptor = this.props.descriptors[activeKey];
        var ChildComponent = descriptor.getComponent();
        return _react2.default.createElement(_SceneView2.default, {
          component: ChildComponent,
          navigation: descriptor.navigation,
          screenProps: this.props.screenProps
        });
      }
    }]);
    return SwitchView;
  }(_react2.default.Component);

  exports.default = SwitchView;
},794,[103,795]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _NavigationContext = _require(_dependencyMap[1]);

  var SceneView = function (_React$PureComponent) {
    babelHelpers.inherits(SceneView, _React$PureComponent);

    function SceneView() {
      babelHelpers.classCallCheck(this, SceneView);
      return babelHelpers.possibleConstructorReturn(this, (SceneView.__proto__ || Object.getPrototypeOf(SceneView)).apply(this, arguments));
    }

    babelHelpers.createClass(SceneView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            screenProps = _props.screenProps,
            Component = _props.component,
            navigation = _props.navigation;
        return _react2.default.createElement(
          _NavigationContext.NavigationProvider,
          {
            value: navigation
          },
          _react2.default.createElement(Component, {
            screenProps: screenProps,
            navigation: navigation
          })
        );
      }
    }]);
    return SceneView;
  }(_react2.default.PureComponent);

  exports.default = SceneView;
},795,[103,755]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    get createDrawerNavigator() {
      return _require(_dependencyMap[0]).default;
    },

    get DrawerRouter() {
      return _require(_dependencyMap[1]).default;
    },

    get DrawerActions() {
      return _require(_dependencyMap[2]).default;
    },

    get DrawerNavigatorItems() {
      return _require(_dependencyMap[3]).default;
    },

    get DrawerSidebar() {
      return _require(_dependencyMap[4]).default;
    },

    get DrawerView() {
      return _require(_dependencyMap[5]).default;
    }

  };
},796,[797,798,799,806,804,800]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNavigation = _require(_dependencyMap[2]);

  var _DrawerRouter = _require(_dependencyMap[3]);

  var _DrawerRouter2 = babelHelpers.interopRequireDefault(_DrawerRouter);

  var _DrawerView = _require(_dependencyMap[4]);

  var _DrawerView2 = babelHelpers.interopRequireDefault(_DrawerView);

  var _DrawerNavigatorItems = _require(_dependencyMap[5]);

  var _DrawerNavigatorItems2 = babelHelpers.interopRequireDefault(_DrawerNavigatorItems);

  var defaultContentComponent = function defaultContentComponent(props) {
    return _react2.default.createElement(
      _reactNative.ScrollView,
      {
        alwaysBounceVertical: false
      },
      _react2.default.createElement(
        _reactNavigation.SafeAreaView,
        {
          forceInset: {
            top: 'always',
            horizontal: 'never'
          }
        },
        _react2.default.createElement(_DrawerNavigatorItems2.default, props)
      )
    );
  };

  var DefaultDrawerConfig = {
    drawerWidth: function drawerWidth() {
      var _Dimensions$get = _reactNative.Dimensions.get('window'),
          height = _Dimensions$get.height,
          width = _Dimensions$get.width;

      var smallerAxisSize = Math.min(height, width);
      var isLandscape = width > height;
      var isTablet = smallerAxisSize >= 600;
      var appBarHeight = 56;
      var maxWidth = isTablet ? 320 : 280;
      return Math.min(smallerAxisSize - appBarHeight, maxWidth);
    },
    contentComponent: defaultContentComponent,
    drawerPosition: 'left',
    drawerBackgroundColor: 'white',
    useNativeAnimations: true
  };

  var DrawerNavigator = function DrawerNavigator(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var mergedConfig = babelHelpers.extends({}, DefaultDrawerConfig, config);
    var order = mergedConfig.order,
        paths = mergedConfig.paths,
        initialRouteName = mergedConfig.initialRouteName,
        initialRouteParams = mergedConfig.initialRouteParams,
        backBehavior = mergedConfig.backBehavior,
        getCustomActionCreators = mergedConfig.getCustomActionCreators,
        drawerConfig = babelHelpers.objectWithoutProperties(mergedConfig, ["order", "paths", "initialRouteName", "initialRouteParams", "backBehavior", "getCustomActionCreators"]);
    var routerConfig = {
      order: order,
      paths: paths,
      initialRouteName: initialRouteName,
      initialRouteParams: initialRouteParams,
      backBehavior: backBehavior,
      getCustomActionCreators: getCustomActionCreators
    };
    var drawerRouter = (0, _DrawerRouter2.default)(routeConfigs, routerConfig);
    var navigator = (0, _reactNavigation.createNavigator)(_DrawerView2.default, drawerRouter, drawerConfig);
    return (0, _reactNavigation.createNavigationContainer)(navigator);
  };

  exports.default = DrawerNavigator;
},797,[103,14,735,798,800,806]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNavigation = _require(_dependencyMap[0]);

  var _DrawerActions = _require(_dependencyMap[1]);

  var _DrawerActions2 = babelHelpers.interopRequireDefault(_DrawerActions);

  function withDefaultValue(obj, key, defaultValue) {
    if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {
      return obj;
    }

    obj[key] = defaultValue;
    return obj;
  }

  var getActiveRouteKey = function getActiveRouteKey(route) {
    if (route.routes && route.routes[route.index]) {
      return getActiveRouteKey(route.routes[route.index]);
    }

    return route.key;
  };

  exports.default = function (routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    config = babelHelpers.extends({}, config);
    config = withDefaultValue(config, 'resetOnBlur', false);
    config = withDefaultValue(config, 'backBehavior', 'initialRoute');
    var switchRouter = (0, _reactNavigation.SwitchRouter)(routeConfigs, config);
    return babelHelpers.extends({}, switchRouter, {
      getActionCreators: function getActionCreators(route, navStateKey) {
        return babelHelpers.extends({
          openDrawer: function openDrawer() {
            return _DrawerActions2.default.openDrawer({
              key: navStateKey
            });
          },
          closeDrawer: function closeDrawer() {
            return _DrawerActions2.default.closeDrawer({
              key: navStateKey
            });
          },
          toggleDrawer: function toggleDrawer() {
            return _DrawerActions2.default.toggleDrawer({
              key: navStateKey
            });
          }
        }, switchRouter.getActionCreators(route, navStateKey));
      },
      getStateForAction: function getStateForAction(action, state) {
        if (!state) {
          return babelHelpers.extends({}, switchRouter.getStateForAction(action, undefined), {
            isDrawerOpen: false,
            openId: 0,
            closeId: 0,
            toggleId: 0
          });
        }

        var isRouterTargeted = action.key == null || action.key === state.key;

        if (isRouterTargeted) {
          if (action.type === _DrawerActions2.default.DRAWER_CLOSED) {
            return babelHelpers.extends({}, state, {
              isDrawerOpen: false
            });
          }

          if (action.type === _DrawerActions2.default.DRAWER_OPENED) {
            return babelHelpers.extends({}, state, {
              isDrawerOpen: true
            });
          }

          if (action.type === _DrawerActions2.default.CLOSE_DRAWER) {
            return babelHelpers.extends({}, state, {
              closeId: state.closeId + 1
            });
          }

          if (action.type === _reactNavigation.NavigationActions.BACK && state.isDrawerOpen) {
            return babelHelpers.extends({}, state, {
              closeId: state.closeId + 1
            });
          }

          if (action.type === _DrawerActions2.default.OPEN_DRAWER) {
            return babelHelpers.extends({}, state, {
              openId: state.openId + 1
            });
          }

          if (action.type === _DrawerActions2.default.TOGGLE_DRAWER) {
            return babelHelpers.extends({}, state, {
              toggleId: state.toggleId + 1
            });
          }
        }

        var switchedState = switchRouter.getStateForAction(action, state);

        if (switchedState === null) {
          return null;
        }

        if (switchedState !== state) {
          if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state)) {
            return babelHelpers.extends({}, switchedState, {
              closeId: state.closeId + 1
            });
          }

          return switchedState;
        }

        return state;
      }
    });
  };
},798,[735,799]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var OPEN_DRAWER = 'Navigation/OPEN_DRAWER';
  var CLOSE_DRAWER = 'Navigation/CLOSE_DRAWER';
  var TOGGLE_DRAWER = 'Navigation/TOGGLE_DRAWER';
  var DRAWER_OPENED = 'Navigation/DRAWER_OPENED';
  var DRAWER_CLOSED = 'Navigation/DRAWER_CLOSED';

  var openDrawer = function openDrawer(payload) {
    return babelHelpers.extends({
      type: OPEN_DRAWER
    }, payload);
  };

  var closeDrawer = function closeDrawer(payload) {
    return babelHelpers.extends({
      type: CLOSE_DRAWER
    }, payload);
  };

  var toggleDrawer = function toggleDrawer(payload) {
    return babelHelpers.extends({
      type: TOGGLE_DRAWER
    }, payload);
  };

  exports.default = {
    OPEN_DRAWER: OPEN_DRAWER,
    CLOSE_DRAWER: CLOSE_DRAWER,
    TOGGLE_DRAWER: TOGGLE_DRAWER,
    DRAWER_OPENED: DRAWER_OPENED,
    DRAWER_CLOSED: DRAWER_CLOSED,
    openDrawer: openDrawer,
    closeDrawer: closeDrawer,
    toggleDrawer: toggleDrawer
  };
},799,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeDrawerLayoutPolyfill = _require(_dependencyMap[2]);

  var _reactNativeDrawerLayoutPolyfill2 = babelHelpers.interopRequireDefault(_reactNativeDrawerLayoutPolyfill);

  var _reactNavigation = _require(_dependencyMap[3]);

  var _DrawerSidebar = _require(_dependencyMap[4]);

  var _DrawerSidebar2 = babelHelpers.interopRequireDefault(_DrawerSidebar);

  var _DrawerActions = _require(_dependencyMap[5]);

  var _DrawerActions2 = babelHelpers.interopRequireDefault(_DrawerActions);

  var DrawerView = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerView, _React$PureComponent);

    function DrawerView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, DrawerView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DrawerView.__proto__ || Object.getPrototypeOf(DrawerView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth
      }, _this._handleDrawerOpen = function () {
        _this.props.navigation.dispatch({
          type: _DrawerActions2.default.DRAWER_OPENED,
          key: _this.props.navigation.state.key
        });
      }, _this._handleDrawerClose = function () {
        _this.props.navigation.dispatch({
          type: _DrawerActions2.default.DRAWER_CLOSED,
          key: _this.props.navigation.state.key
        });
      }, _this._updateWidth = function () {
        var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;

        if (_this.state.drawerWidth !== drawerWidth) {
          _this.setState({
            drawerWidth: drawerWidth
          });
        }
      }, _this._renderNavigationView = function () {
        return _react2.default.createElement(_DrawerSidebar2.default, babelHelpers.extends({
          screenProps: _this.props.screenProps,
          navigation: _this.props.navigation,
          descriptors: _this.props.descriptors,
          contentComponent: _this.props.navigationConfig.contentComponent,
          contentOptions: _this.props.navigationConfig.contentOptions,
          drawerPosition: _this.props.navigationConfig.drawerPosition,
          style: _this.props.navigationConfig.style
        }, _this.props.navigationConfig));
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(DrawerView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        _reactNative.Dimensions.addEventListener('change', this._updateWidth);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _props$navigation$sta = this.props.navigation.state,
            openId = _props$navigation$sta.openId,
            closeId = _props$navigation$sta.closeId,
            toggleId = _props$navigation$sta.toggleId,
            isDrawerOpen = _props$navigation$sta.isDrawerOpen;
        var _prevProps$navigation = prevProps.navigation.state,
            prevOpenId = _prevProps$navigation.openId,
            prevCloseId = _prevProps$navigation.closeId,
            prevToggleId = _prevProps$navigation.toggleId;

        if (openId !== prevOpenId) {
          this._drawer.openDrawer();
        } else if (closeId !== prevCloseId) {
          this._drawer.closeDrawer();
        } else if (toggleId !== prevToggleId) {
          if (isDrawerOpen) {
            this._drawer.closeDrawer();
          } else {
            this._drawer.openDrawer();
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _reactNative.Dimensions.removeEventListener('change', this._updateWidth);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var state = this.props.navigation.state;
        var activeKey = state.routes[state.index].key;
        var descriptor = this.props.descriptors[activeKey];
        var drawerLockMode = descriptor.options.drawerLockMode;
        return _react2.default.createElement(
          _reactNativeDrawerLayoutPolyfill2.default,
          {
            ref: function ref(c) {
              _this2._drawer = c;
            },
            drawerLockMode: drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,
            drawerBackgroundColor: this.props.navigationConfig.drawerBackgroundColor,
            drawerWidth: this.state.drawerWidth,
            onDrawerOpen: this._handleDrawerOpen,
            onDrawerClose: this._handleDrawerClose,
            useNativeAnimations: this.props.navigationConfig.useNativeAnimations,
            renderNavigationView: this._renderNavigationView,
            drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? _reactNativeDrawerLayoutPolyfill2.default.positions.Right : _reactNativeDrawerLayoutPolyfill2.default.positions.Left
          },
          _react2.default.createElement(_reactNavigation.SceneView, {
            navigation: descriptor.navigation,
            screenProps: this.props.screenProps,
            component: descriptor.getComponent()
          })
        );
      }
    }]);
    return DrawerView;
  }(_react2.default.PureComponent);

  exports.default = DrawerView;
},800,[103,14,1112,735,804,799]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  exports.default = _reactNative.DrawerLayoutAndroid;
},1112,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNavigation = _require(_dependencyMap[2]);

  var _invariant = _require(_dependencyMap[3]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var DrawerSidebar = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerSidebar, _React$PureComponent);

    function DrawerSidebar() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, DrawerSidebar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DrawerSidebar.__proto__ || Object.getPrototypeOf(DrawerSidebar)).call.apply(_ref, [this].concat(args))), _this), _this._getScreenOptions = function (routeKey) {
        var descriptor = _this.props.descriptors[routeKey];
        (0, _invariant2.default)(descriptor.options, 'Cannot access screen descriptor options from drawer sidebar');
        return descriptor.options;
      }, _this._getLabel = function (_ref2) {
        var focused = _ref2.focused,
            tintColor = _ref2.tintColor,
            route = _ref2.route;

        var _this$_getScreenOptio = _this._getScreenOptions(route.key),
            drawerLabel = _this$_getScreenOptio.drawerLabel,
            title = _this$_getScreenOptio.title;

        if (drawerLabel) {
          return typeof drawerLabel === 'function' ? drawerLabel({
            tintColor: tintColor,
            focused: focused
          }) : drawerLabel;
        }

        if (typeof title === 'string') {
          return title;
        }

        return route.routeName;
      }, _this._renderIcon = function (_ref3) {
        var focused = _ref3.focused,
            tintColor = _ref3.tintColor,
            route = _ref3.route;

        var _this$_getScreenOptio2 = _this._getScreenOptions(route.key),
            drawerIcon = _this$_getScreenOptio2.drawerIcon;

        if (drawerIcon) {
          return typeof drawerIcon === 'function' ? drawerIcon({
            tintColor: tintColor,
            focused: focused
          }) : drawerIcon;
        }

        return null;
      }, _this._onItemPress = function (_ref4) {
        var route = _ref4.route,
            focused = _ref4.focused;

        if (!focused) {
          var subAction = void 0;

          if (route.index != null && route.index !== 0) {
            subAction = _reactNavigation.StackActions.reset({
              index: 0,
              actions: [_reactNavigation.NavigationActions.navigate({
                routeName: route.routes[0].routeName
              })]
            });
          }

          _this.props.navigation.dispatch(_reactNavigation.NavigationActions.navigate({
            routeName: route.routeName,
            action: subAction
          }));
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(DrawerSidebar, [{
      key: "render",
      value: function render() {
        var ContentComponent = this.props.contentComponent;

        if (!ContentComponent) {
          return null;
        }

        var state = this.props.navigation.state;
        (0, _invariant2.default)(typeof state.index === 'number', 'should be set');
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.container, this.props.style]
          },
          _react2.default.createElement(ContentComponent, babelHelpers.extends({}, this.props.contentOptions, {
            navigation: this.props.navigation,
            descriptors: this.props.descriptors,
            items: state.routes,
            activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,
            screenProps: this.props.screenProps,
            getLabel: this._getLabel,
            renderIcon: this._renderIcon,
            onItemPress: this._onItemPress,
            drawerPosition: this.props.drawerPosition
          }))
        );
      }
    }]);
    return DrawerSidebar;
  }(_react2.default.PureComponent);

  exports.default = DrawerSidebar;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},804,[103,14,735,805]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = invariant;

  function invariant(condition, format, a, b, c, d, e, f) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }
},805,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNavigation = _require(_dependencyMap[2]);

  var _TouchableItem = _require(_dependencyMap[3]);

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var DrawerNavigatorItems = function DrawerNavigatorItems(_ref) {
    var items = _ref.items,
        activeItemKey = _ref.activeItemKey,
        activeTintColor = _ref.activeTintColor,
        activeBackgroundColor = _ref.activeBackgroundColor,
        inactiveTintColor = _ref.inactiveTintColor,
        inactiveBackgroundColor = _ref.inactiveBackgroundColor,
        getLabel = _ref.getLabel,
        renderIcon = _ref.renderIcon,
        onItemPress = _ref.onItemPress,
        itemsContainerStyle = _ref.itemsContainerStyle,
        itemStyle = _ref.itemStyle,
        labelStyle = _ref.labelStyle,
        activeLabelStyle = _ref.activeLabelStyle,
        inactiveLabelStyle = _ref.inactiveLabelStyle,
        iconContainerStyle = _ref.iconContainerStyle,
        drawerPosition = _ref.drawerPosition;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [styles.container, itemsContainerStyle]
      },
      items.map(function (route, index) {
        var _ref2;

        var focused = activeItemKey === route.key;
        var color = focused ? activeTintColor : inactiveTintColor;
        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
        var scene = {
          route: route,
          index: index,
          focused: focused,
          tintColor: color
        };
        var icon = renderIcon(scene);
        var label = getLabel(scene);
        var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;
        return _react2.default.createElement(
          _TouchableItem2.default,
          {
            key: route.key,
            onPress: function onPress() {
              onItemPress({
                route: route,
                focused: focused
              });
            },
            delayPressIn: 0
          },
          _react2.default.createElement(
            _reactNavigation.SafeAreaView,
            {
              style: {
                backgroundColor: backgroundColor
              },
              forceInset: (_ref2 = {}, babelHelpers.defineProperty(_ref2, drawerPosition, 'always'), babelHelpers.defineProperty(_ref2, drawerPosition === 'left' ? 'right' : 'left', 'never'), babelHelpers.defineProperty(_ref2, "vertical", 'never'), _ref2)
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: [styles.item, itemStyle]
              },
              icon ? _react2.default.createElement(
                _reactNative.View,
                {
                  style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]
                },
                icon
              ) : null,
              typeof label === 'string' ? _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.label, {
                    color: color
                  }, labelStyle, extraLabelStyle]
                },
                label
              ) : label
            )
          )
        );
      })
    );
  };

  DrawerNavigatorItems.defaultProps = {
    activeTintColor: '#2196f3',
    activeBackgroundColor: 'rgba(0, 0, 0, .04)',
    inactiveTintColor: 'rgba(0, 0, 0, .87)',
    inactiveBackgroundColor: 'transparent'
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingVertical: 4
    },
    item: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    icon: {
      marginHorizontal: 16,
      width: 24,
      alignItems: 'center'
    },
    inactiveIcon: {
      opacity: 0.62
    },
    label: {
      margin: 16,
      fontWeight: 'bold'
    }
  });

  exports.default = DrawerNavigatorItems;
},806,[103,14,735,807]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var ANDROID_VERSION_LOLLIPOP = 21;
  var TouchableItem = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      babelHelpers.classCallCheck(this, TouchableItem);
      return babelHelpers.possibleConstructorReturn(this, (TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).apply(this, arguments));
    }

    babelHelpers.createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        if (_reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP) {
          var _props = this.props,
              style = _props.style,
              rest = babelHelpers.objectWithoutProperties(_props, ["style"]);
          return _react2.default.createElement(
            _reactNative.TouchableNativeFeedback,
            babelHelpers.extends({}, rest, {
              style: null,
              background: _reactNative.TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless)
            }),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: style
              },
              _react2.default.Children.only(this.props.children)
            )
          );
        }

        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          this.props,
          this.props.children
        );
      }
    }]);
    return TouchableItem;
  }(_react2.default.Component), _class.defaultProps = {
    borderless: false,
    pressColor: 'rgba(0, 0, 0, .32)'
  }, _temp);
  exports.default = TouchableItem;
},807,[103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _createTabNavigator = _require(_dependencyMap[0]);

  var _createTabNavigator2 = babelHelpers.interopRequireDefault(_createTabNavigator);

  var _TabView = _require(_dependencyMap[1]);

  var _TabView2 = babelHelpers.interopRequireDefault(_TabView);

  var _TabBarBottom = _require(_dependencyMap[2]);

  var _TabBarBottom2 = babelHelpers.interopRequireDefault(_TabBarBottom);

  var _TabBarTop = _require(_dependencyMap[3]);

  var _TabBarTop2 = babelHelpers.interopRequireDefault(_TabBarTop);

  module.exports = {
    createTabNavigator: _createTabNavigator2.default,
    TabView: _TabView2.default,
    TabBarBottom: _TabBarBottom2.default,
    TabBarTop: _TabBarTop2.default
  };
},808,[809,810,823,821]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNavigation = _require(_dependencyMap[2]);

  var _TabView = _require(_dependencyMap[3]);

  var _TabView2 = babelHelpers.interopRequireDefault(_TabView);

  var _TabBarTop = _require(_dependencyMap[4]);

  var _TabBarTop2 = babelHelpers.interopRequireDefault(_TabBarTop);

  var _TabBarBottom = _require(_dependencyMap[5]);

  var _TabBarBottom2 = babelHelpers.interopRequireDefault(_TabBarBottom);

  var createTabNavigator = function createTabNavigator(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var tabsConfig = babelHelpers.extends({}, createTabNavigator.Presets.Default, config);
    var router = (0, _reactNavigation.TabRouter)(routeConfigs, tabsConfig);
    var navigator = (0, _reactNavigation.createNavigator)(_TabView2.default, router, tabsConfig);
    return (0, _reactNavigation.createNavigationContainer)(navigator);
  };

  var Presets = {
    iOSBottomTabs: {
      tabBarComponent: _TabBarBottom2.default,
      tabBarPosition: 'bottom',
      swipeEnabled: false,
      animationEnabled: false,
      initialLayout: undefined
    },
    AndroidTopTabs: {
      tabBarComponent: _TabBarTop2.default,
      tabBarPosition: 'top',
      swipeEnabled: true,
      animationEnabled: true,
      initialLayout: undefined
    }
  };
  createTabNavigator.Presets = {
    iOSBottomTabs: Presets.iOSBottomTabs,
    AndroidTopTabs: Presets.AndroidTopTabs,
    Default: Presets.AndroidTopTabs
  };
  exports.default = createTabNavigator;
},809,[103,14,735,810,821,823]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeTabView = _require(_dependencyMap[2]);

  var _reactNavigation = _require(_dependencyMap[3]);

  var TabView = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabView, _React$PureComponent);

    function TabView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabView.__proto__ || Object.getPrototypeOf(TabView)).call.apply(_ref, [this].concat(args))), _this), _this._handlePageChanged = function (index) {
        var routeName = _this.props.navigation.state.routes[index].routeName;

        _this.props.navigation.dispatch(_reactNavigation.NavigationActions.navigate({
          routeName: routeName
        }));
      }, _this._renderScene = function (_ref2) {
        var route = _ref2.route;
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            navigation = _this$props.navigation,
            descriptors = _this$props.descriptors;
        var _this$props$navigatio = _this.props.navigationConfig,
            lazy = _this$props$navigatio.lazy,
            removeClippedSubviews = _this$props$navigatio.removeClippedSubviews,
            animationEnabled = _this$props$navigatio.animationEnabled,
            swipeEnabled = _this$props$navigatio.swipeEnabled;
        var descriptor = descriptors[route.key];
        var focusedIndex = navigation.state.index;
        var focusedKey = navigation.state.routes[focusedIndex].key;
        var key = route.key;
        var TabComponent = descriptor.getComponent();
        return _react2.default.createElement(_reactNavigation.ResourceSavingSceneView, {
          lazy: lazy,
          isFocused: focusedKey === key,
          removeClippedSubViews: removeClippedSubviews,
          animationEnabled: animationEnabled,
          swipeEnabled: swipeEnabled,
          screenProps: screenProps,
          component: TabComponent,
          navigation: navigation,
          childNavigation: descriptor.navigation
        });
      }, _this._getLabel = function (_ref3) {
        var route = _ref3.route,
            tintColor = _ref3.tintColor,
            focused = _ref3.focused;
        var _this$props2 = _this.props,
            screenProps = _this$props2.screenProps,
            descriptors = _this$props2.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarLabel) {
          return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarLabel;
        }

        if (typeof options.title === 'string') {
          return options.title;
        }

        return route.routeName;
      }, _this._getOnPress = function (previousScene, _ref4) {
        var route = _ref4.route;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        return options.tabBarOnPress;
      }, _this._getTestIDProps = function (_ref5) {
        var route = _ref5.route;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        return typeof options.tabBarTestIDProps === 'function' ? options.tabBarTestIDProps({
          focused: focused
        }) : options.tabBarTestIDProps;
      }, _this._renderIcon = function (_ref6) {
        var focused = _ref6.focused,
            route = _ref6.route,
            tintColor = _ref6.tintColor;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarIcon) {
          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarIcon;
        }

        return null;
      }, _this._renderTabBar = function (props) {
        var _this$props$navigatio2 = _this.props.navigationConfig,
            tabBarOptions = _this$props$navigatio2.tabBarOptions,
            TabBarComponent = _this$props$navigatio2.tabBarComponent,
            animationEnabled = _this$props$navigatio2.animationEnabled,
            tabBarPosition = _this$props$navigatio2.tabBarPosition;

        if (typeof TabBarComponent === 'undefined') {
          return null;
        }

        return _react2.default.createElement(TabBarComponent, babelHelpers.extends({}, props, tabBarOptions, {
          tabBarPosition: tabBarPosition,
          screenProps: _this.props.screenProps,
          navigation: _this.props.navigation,
          getLabel: _this._getLabel,
          getTestIDProps: _this._getTestIDProps,
          getOnPress: _this._getOnPress,
          renderIcon: _this._renderIcon,
          animationEnabled: animationEnabled
        }));
      }, _this._renderPager = function (props) {
        return _react2.default.createElement(_reactNativeTabView.TabViewPagerPan, props);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabView, [{
      key: "render",
      value: function render() {
        var _props$navigationConf = this.props.navigationConfig,
            tabBarComponent = _props$navigationConf.tabBarComponent,
            tabBarPosition = _props$navigationConf.tabBarPosition,
            animationEnabled = _props$navigationConf.animationEnabled,
            configureTransition = _props$navigationConf.configureTransition,
            initialLayout = _props$navigationConf.initialLayout;
        var renderHeader = void 0;
        var renderFooter = void 0;
        var renderPager = void 0;
        var state = this.props.navigation.state;
        var route = state.routes[state.index];
        var descriptors = this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;
        var swipeEnabled = options.swipeEnabled == null ? this.props.navigationConfig.swipeEnabled : options.swipeEnabled;

        if (typeof swipeEnabled === 'function') {
          swipeEnabled = swipeEnabled(state);
        }

        if (tabBarComponent !== undefined && tabBarVisible) {
          if (tabBarPosition === 'bottom') {
            renderFooter = this._renderTabBar;
          } else {
            renderHeader = this._renderTabBar;
          }
        }

        if (animationEnabled === false && swipeEnabled === false || typeof configureTransition === 'function') {
          renderPager = this._renderPager;
        }

        var props = {
          initialLayout: initialLayout,
          animationEnabled: animationEnabled,
          configureTransition: configureTransition,
          swipeEnabled: swipeEnabled,
          renderPager: renderPager,
          renderHeader: renderHeader,
          renderFooter: renderFooter,
          renderScene: this._renderScene,
          onIndexChange: this._handlePageChanged,
          navigationState: this.props.navigation.state,
          style: styles.container
        };
        return _react2.default.createElement(_reactNativeTabView.TabViewAnimated, props);
      }
    }]);
    return TabView;
  }(_react2.default.PureComponent), _class.defaultProps = {
    lazy: true,
    removedClippedSubviews: true,
    initialLayout: {
      width: 1,
      height: 0
    }
  }, _temp2);
  exports.default = TabView;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},810,[103,14,811,735]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    get TabViewAnimated() {
      return _require(_dependencyMap[0]).default;
    },

    get TabViewPagerPan() {
      return _require(_dependencyMap[1]).default;
    },

    get TabViewPagerScroll() {
      return _require(_dependencyMap[2]).default;
    },

    get TabViewPagerAndroid() {
      return _require(_dependencyMap[3]).default;
    },

    get TabViewPagerExperimental() {
      return _require(_dependencyMap[4]).default;
    },

    get TabBar() {
      return _require(_dependencyMap[5]).default;
    },

    get SceneMap() {
      return _require(_dependencyMap[6]).default;
    }

  };
},811,[812,816,815,814,817,818,820]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _TabViewPropTypes = _require(_dependencyMap[3]);

  var TabViewPager = void 0;

  switch ("android") {
    case 'android':
      TabViewPager = _require(_dependencyMap[4]).default;
      break;

    case 'ios':
      TabViewPager = _require(_dependencyMap[5]).default;
      break;

    default:
      TabViewPager = _require(_dependencyMap[6]).default;
      break;
  }

  var TabViewAnimated = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewAnimated, _React$Component);

    function TabViewAnimated(props) {
      babelHelpers.classCallCheck(this, TabViewAnimated);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewAnimated.__proto__ || Object.getPrototypeOf(TabViewAnimated)).call(this, props));

      _initialiseProps.call(_this);

      var navigationState = _this.props.navigationState;
      var layout = babelHelpers.extends({}, _this.props.initialLayout, {
        measured: false
      });
      var panX = new _reactNative.Animated.Value(0);
      var offsetX = new _reactNative.Animated.Value(-navigationState.index * layout.width);
      var layoutXY = new _reactNative.Animated.ValueXY({
        x: layout.width || 0.001,
        y: layout.height || 0.001
      });

      var position = _reactNative.Animated.multiply(_reactNative.Animated.divide(_reactNative.Animated.add(panX, offsetX), layoutXY.x), -1);

      _this.state = {
        layout: layout,
        layoutXY: layoutXY,
        panX: panX,
        offsetX: offsetX,
        position: position
      };
      return _this;
    }

    babelHelpers.createClass(TabViewAnimated, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._mounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._mounted = false;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            navigationState = _props.navigationState,
            onIndexChange = _props.onIndexChange,
            initialLayout = _props.initialLayout,
            renderScene = _props.renderScene,
            renderPager = _props.renderPager,
            renderHeader = _props.renderHeader,
            renderFooter = _props.renderFooter,
            rest = babelHelpers.objectWithoutProperties(_props, ["navigationState", "onIndexChange", "initialLayout", "renderScene", "renderPager", "renderHeader", "renderFooter"]);

        var props = this._buildSceneRendererProps();

        return React.createElement(
          _reactNative.View,
          {
            collapsable: false,
            style: [styles.container, this.props.style]
          },
          renderHeader && renderHeader(props),
          React.createElement(
            _reactNative.View,
            {
              onLayout: this._handleLayout,
              style: styles.pager
            },
            renderPager(babelHelpers.extends({}, props, rest, {
              panX: this.state.panX,
              offsetX: this.state.offsetX,
              children: navigationState.routes.map(function (route, index) {
                var scene = _this2._renderScene(babelHelpers.extends({}, props, {
                  route: route,
                  index: index,
                  focused: index === navigationState.index
                }));

                if (scene) {
                  return React.cloneElement(scene, {
                    key: route.key
                  });
                }

                return scene;
              })
            }))
          ),
          renderFooter && renderFooter(props)
        );
      }
    }]);
    return TabViewAnimated;
  }(React.Component), _class.propTypes = {
    navigationState: _TabViewPropTypes.NavigationStatePropType.isRequired,
    onIndexChange: _propTypes2.default.func.isRequired,
    initialLayout: _propTypes2.default.shape({
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }),
    canJumpToTab: _propTypes2.default.func.isRequired,
    renderPager: _propTypes2.default.func.isRequired,
    renderScene: _propTypes2.default.func.isRequired,
    renderHeader: _propTypes2.default.func,
    renderFooter: _propTypes2.default.func
  }, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    renderPager: function renderPager(props) {
      return React.createElement(TabViewPager, props);
    },
    initialLayout: {
      height: 0,
      width: 0
    },
    useNativeDriver: false
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._mounted = false;

    this._renderScene = function (props) {
      return _this3.props.renderScene(props);
    };

    this._handleLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          height = _e$nativeEvent$layout.height,
          width = _e$nativeEvent$layout.width;

      if (_this3.state.layout.width === width && _this3.state.layout.height === height) {
        return;
      }

      _this3.state.offsetX.setValue(-_this3.props.navigationState.index * width);

      _this3.state.layoutXY.setValue({
        x: width || 0.001,
        y: height || 0.001
      });

      _this3.setState({
        layout: {
          measured: true,
          height: height,
          width: width
        }
      });
    };

    this._buildSceneRendererProps = function () {
      return {
        panX: _this3.state.panX,
        offsetX: _this3.state.offsetX,
        position: _this3.state.position,
        layout: _this3.state.layout,
        navigationState: _this3.props.navigationState,
        jumpTo: _this3._jumpTo,
        jumpToIndex: _this3._jumpToIndex,
        useNativeDriver: _this3.props.useNativeDriver === true
      };
    };

    this._jumpToIndex = function (index) {
      var key = _this3.props.navigationState.routes[index].key;
      console.warn('Method `jumpToIndex` is deprecated. Please upgrade your code to use `jumpTo` instead.', "Change your code from `jumpToIndex(" + index + ")` to `jumpTo('" + key + "').`");

      _this3._jumpTo(key);
    };

    this._jumpTo = function (key) {
      if (!_this3._mounted) {
        return;
      }

      var _props2 = _this3.props,
          canJumpToTab = _props2.canJumpToTab,
          navigationState = _props2.navigationState;
      var index = navigationState.routes.findIndex(function (route) {
        return route.key === key;
      });

      if (!canJumpToTab(navigationState.routes[index])) {
        return;
      }

      if (index !== navigationState.index) {
        _this3.props.onIndexChange(index);
      }
    };
  }, _temp);
  exports.default = TabViewAnimated;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    pager: {
      flex: 1
    }
  });
},812,[103,121,14,813,814,815,816]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PagerRendererPropType = exports.SceneRendererPropType = exports.NavigationStatePropType = exports.NavigationRoutePropType = undefined;

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[1]);

  var NavigationRoutePropType = exports.NavigationRoutePropType = _propTypes2.default.shape({
    title: _propTypes2.default.string,
    key: _propTypes2.default.string.isRequired
  });

  var NavigationStatePropType = exports.NavigationStatePropType = _propTypes2.default.shape({
    routes: _propTypes2.default.arrayOf(NavigationRoutePropType).isRequired,
    index: _propTypes2.default.number.isRequired
  });

  var SceneRendererPropType = exports.SceneRendererPropType = {
    panX: _propTypes2.default.object.isRequired,
    offsetX: _propTypes2.default.object.isRequired,
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    position: _propTypes2.default.object.isRequired,
    jumpTo: _propTypes2.default.func.isRequired,
    jumpToIndex: _propTypes2.default.func.isRequired,
    useNativeDriver: _propTypes2.default.bool
  };
  var PagerRendererPropType = exports.PagerRendererPropType = {
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    panX: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    offsetX: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    canJumpToTab: _propTypes2.default.func.isRequired,
    jumpTo: _propTypes2.default.func.isRequired,
    animationEnabled: _propTypes2.default.bool,
    swipeEnabled: _propTypes2.default.bool,
    useNativeDriver: _propTypes2.default.bool,
    onSwipeStart: _propTypes2.default.func,
    onSwipeEnd: _propTypes2.default.func,
    onAnimationEnd: _propTypes2.default.func,
    children: _propTypes2.default.node.isRequired
  };
},813,[121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _TabViewPropTypes = _require(_dependencyMap[2]);

  var TabViewPagerAndroid = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerAndroid, _React$Component);

    function TabViewPagerAndroid(props) {
      babelHelpers.classCallCheck(this, TabViewPagerAndroid);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerAndroid.__proto__ || Object.getPrototypeOf(TabViewPagerAndroid)).call(this, props));

      _this._isIdle = true;
      _this._currentIndex = 0;

      _this._getPageIndex = function (index) {
        return _reactNative.I18nManager.isRTL ? _this.props.navigationState.routes.length - (index + 1) : index;
      };

      _this._setPage = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var pager = _this._viewPager;

        if (pager) {
          var page = _this._getPageIndex(index);

          if (_this.props.animationEnabled === false || animated === false) {
            pager.setPageWithoutAnimation(page);
          } else {
            pager.setPage(page);
          }
        }
      };

      _this._handlePageChange = function (index, animated) {
        if (_this._isIdle && _this._currentIndex !== index) {
          _this._setPage(index, animated);

          _this._currentIndex = index;
        }
      };

      _this._handlePageScroll = function (e) {
        _this.props.offsetX.setValue(e.nativeEvent.position * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));

        _this.props.panX.setValue(e.nativeEvent.offset * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));
      };

      _this._handlePageScrollStateChanged = function (e) {
        _this._isIdle = e === 'idle';
        var nextIndex = _this._currentIndex;
        var nextRoute = _this.props.navigationState.routes[nextIndex];

        if (_this.props.canJumpToTab(nextRoute)) {
          _this.props.jumpTo(nextRoute.key);
        } else {
          _this._setPage(_this.props.navigationState.index);

          _this._currentIndex = _this.props.navigationState.index;
        }

        switch (e) {
          case 'dragging':
            _this.props.onSwipeStart && _this.props.onSwipeStart();
            break;

          case 'settling':
            _this.props.onSwipeEnd && _this.props.onSwipeEnd();
            break;

          case 'idle':
            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            break;
        }
      };

      _this._handlePageSelected = function (e) {
        var index = _this._getPageIndex(e.nativeEvent.position);

        _this._currentIndex = index;
      };

      _this._setRef = function (el) {
        return _this._viewPager = el;
      };

      _this._currentIndex = _this.props.navigationState.index;
      return _this;
    }

    babelHelpers.createClass(TabViewPagerAndroid, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._handlePageChange(this.props.navigationState.index, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._handlePageChange(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled,
            keyboardDismissMode = _props.keyboardDismissMode;
        var content = React.Children.map(children, function (child, i) {
          return React.createElement(
            _reactNative.View,
            {
              key: navigationState.routes[i].key,
              testID: navigationState.routes[i].testID,
              style: styles.page
            },
            child
          );
        });

        if (_reactNative.I18nManager.isRTL) {
          content.reverse();
        }

        var initialPage = this._getPageIndex(navigationState.index);

        return React.createElement(
          _reactNative.ViewPagerAndroid,
          {
            key: navigationState.routes.length,
            keyboardDismissMode: keyboardDismissMode,
            initialPage: initialPage,
            scrollEnabled: swipeEnabled !== false,
            onPageScroll: this._handlePageScroll,
            onPageScrollStateChanged: this._handlePageScrollStateChanged,
            onPageSelected: this._handlePageSelected,
            style: styles.container,
            ref: this._setRef
          },
          content
        );
      }
    }]);
    return TabViewPagerAndroid;
  }(React.Component), _class.propTypes = _TabViewPropTypes.PagerRendererPropType, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    keyboardDismissMode: 'on-drag'
  }, _temp);
  exports.default = TabViewPagerAndroid;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexGrow: 1
    },
    page: {
      overflow: 'hidden'
    }
  });
},814,[103,14,813]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _TabViewPropTypes = _require(_dependencyMap[2]);

  var TabViewPagerScroll = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerScroll, _React$Component);

    function TabViewPagerScroll(props) {
      babelHelpers.classCallCheck(this, TabViewPagerScroll);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerScroll.__proto__ || Object.getPrototypeOf(TabViewPagerScroll)).call(this, props));

      _initialiseProps.call(_this);

      var _this$props = _this.props,
          navigationState = _this$props.navigationState,
          layout = _this$props.layout;
      _this.state = {
        initialOffset: {
          x: navigationState.index * layout.width,
          y: 0
        }
      };
      return _this;
    }

    babelHelpers.createClass(TabViewPagerScroll, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._setInitialPage();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var amount = this.props.navigationState.index * this.props.layout.width;

        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._scrollTo(amount, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._scrollTo(amount);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            children = _props.children,
            layout = _props.layout,
            navigationState = _props.navigationState,
            onSwipeStart = _props.onSwipeStart,
            onSwipeEnd = _props.onSwipeEnd;
        return React.createElement(
          _reactNative.ScrollView,
          {
            horizontal: true,
            pagingEnabled: true,
            directionalLockEnabled: true,
            keyboardDismissMode: "on-drag",
            keyboardShouldPersistTaps: "always",
            overScrollMode: "never",
            scrollEnabled: this.props.swipeEnabled,
            automaticallyAdjustContentInsets: false,
            bounces: false,
            alwaysBounceHorizontal: false,
            scrollsToTop: false,
            showsHorizontalScrollIndicator: false,
            scrollEventThrottle: 1,
            onScroll: this._handleScroll,
            onScrollBeginDrag: onSwipeStart,
            onScrollEndDrag: onSwipeEnd,
            onMomentumScrollEnd: this._handleMomentumScrollEnd,
            contentOffset: this.state.initialOffset,
            style: styles.container,
            contentContainerStyle: layout.width ? null : styles.container,
            ref: function ref(el) {
              return _this2._scrollView = el;
            }
          },
          React.Children.map(children, function (child, i) {
            return React.createElement(
              _reactNative.View,
              {
                key: navigationState.routes[i].key,
                testID: navigationState.routes[i].testID,
                style: layout.width ? {
                  width: layout.width,
                  overflow: 'hidden'
                } : i === navigationState.index ? styles.page : null
              },
              i === navigationState.index || layout.width ? child : null
            );
          })
        );
      }
    }]);
    return TabViewPagerScroll;
  }(React.Component), _class.propTypes = _TabViewPropTypes.PagerRendererPropType, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._isIdle = true;
    this._isInitial = true;

    this._setInitialPage = function () {
      if (_this3.props.layout.width) {
        _this3._isInitial = true;

        _this3._scrollTo(_this3.props.navigationState.index * _this3.props.layout.width, false);
      }

      setTimeout(function () {
        _this3._isInitial = false;
      }, 50);
    };

    this._scrollTo = function (x) {
      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (_this3._isIdle && _this3._scrollView) {
        _this3._scrollView.scrollTo({
          x: x,
          animated: animated && _this3.props.animationEnabled !== false
        });
      }
    };

    this._handleMomentumScrollEnd = function (e) {
      var nextIndex = Math.round(e.nativeEvent.contentOffset.x / _this3.props.layout.width);
      var nextRoute = _this3.props.navigationState.routes[nextIndex];

      if (_this3.props.canJumpToTab(nextRoute)) {
        _this3.props.jumpTo(nextRoute.key);

        _this3.props.onAnimationEnd && _this3.props.onAnimationEnd();
      } else {
        global.requestAnimationFrame(function () {
          _this3._scrollTo(_this3.props.navigationState.index * _this3.props.layout.width);
        });
      }
    };

    this._handleScroll = function (e) {
      if (_this3._isInitial || e.nativeEvent.contentSize.width === 0) {
        return;
      }

      var _props2 = _this3.props,
          navigationState = _props2.navigationState,
          layout = _props2.layout;
      var offset = navigationState.index * layout.width;

      _this3.props.offsetX.setValue(-offset);

      _this3.props.panX.setValue(offset - e.nativeEvent.contentOffset.x);

      global.cancelAnimationFrame(_this3._idleCallback);
      _this3._isIdle = false;
      _this3._idleCallback = global.requestAnimationFrame(function () {
        _this3._isIdle = true;
      });
    };
  }, _temp);
  exports.default = TabViewPagerScroll;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    page: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},815,[103,14,813]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _TabViewPropTypes = _require(_dependencyMap[3]);

  var DEAD_ZONE = 12;
  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 300,
    friction: 35
  };
  var TabViewPagerPan = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerPan, _React$Component);

    function TabViewPagerPan(props) {
      babelHelpers.classCallCheck(this, TabViewPagerPan);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerPan.__proto__ || Object.getPrototypeOf(TabViewPagerPan)).call(this, props));

      _this._isMovingHorizontally = function (evt, gestureState) {
        return Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 2) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 2);
      };

      _this._canMoveScreen = function (evt, gestureState) {
        if (_this.props.swipeEnabled === false) {
          return false;
        }

        var routes = _this.props.navigationState.routes;
        return _this._isMovingHorizontally(evt, gestureState) && (gestureState.dx >= DEAD_ZONE && _this._currentIndex > 0 || gestureState.dx <= -DEAD_ZONE && _this._currentIndex < routes.length - 1);
      };

      _this._startGesture = function () {
        _this.props.onSwipeStart && _this.props.onSwipeStart();

        _this.props.panX.stopAnimation();
      };

      _this._respondToGesture = function (evt, gestureState) {
        var _this$props$navigatio = _this.props.navigationState,
            routes = _this$props$navigatio.routes,
            index = _this$props$navigatio.index;

        if (gestureState.dx > 0 && index <= 0 || gestureState.dx < 0 && index >= routes.length - 1) {
          return;
        }

        _this.props.panX.setValue(gestureState.dx);
      };

      _this._finishGesture = function (evt, gestureState) {
        var _this$props = _this.props,
            navigationState = _this$props.navigationState,
            layout = _this$props.layout,
            _this$props$swipeDist = _this$props.swipeDistanceThreshold,
            swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist;
        var _this$props$swipeVelo = _this.props.swipeVelocityThreshold,
            swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 0.15 : _this$props$swipeVelo;
        _this.props.onSwipeEnd && _this.props.onSwipeEnd();
        {
          swipeVelocityThreshold /= 1000000;
        }
        var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : _this._currentIndex;
        var nextIndex = currentIndex;

        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy) && (Math.abs(gestureState.dx) > swipeDistanceThreshold || Math.abs(gestureState.vx) > swipeVelocityThreshold)) {
          nextIndex = Math.round(Math.min(Math.max(0, currentIndex - gestureState.dx / Math.abs(gestureState.dx)), navigationState.routes.length - 1));
          _this._currentIndex = nextIndex;
        }

        if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
          nextIndex = currentIndex;
        }

        _this._transitionTo(nextIndex);
      };

      _this._transitionTo = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false || animated === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = babelHelpers.objectWithoutProperties(DefaultTransitionSpec, ["timing"]);

        _reactNative.Animated.parallel([timing(_this.props.panX, babelHelpers.extends({}, transitionConfig, {
          toValue: 0
        })), timing(_this.props.offsetX, babelHelpers.extends({}, transitionConfig, {
          toValue: offset
        }))]).start(function (_ref) {
          var finished = _ref.finished;

          if (finished) {
            var route = _this.props.navigationState.routes[index];

            _this.props.jumpTo(route.key);

            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      };

      _this._currentIndex = _this.props.navigationState.index;
      return _this;
    }

    babelHelpers.createClass(TabViewPagerPan, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._panResponder = _reactNative.PanResponder.create({
          onMoveShouldSetPanResponder: this._canMoveScreen,
          onMoveShouldSetPanResponderCapture: this._canMoveScreen,
          onPanResponderGrant: this._startGesture,
          onPanResponderMove: this._respondToGesture,
          onPanResponderTerminate: this._finishGesture,
          onPanResponderRelease: this._finishGesture,
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return true;
          }
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        this._currentIndex = this.props.navigationState.index;

        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._transitionTo(this.props.navigationState.index, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            panX = _props.panX,
            offsetX = _props.offsetX,
            navigationState = _props.navigationState,
            layout = _props.layout,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        });

        return React.createElement(
          _reactNative.Animated.View,
          babelHelpers.extends({
            style: [styles.sheet, width ? {
              width: routes.length * width,
              transform: [{
                translateX: translateX
              }]
            } : null]
          }, this._panResponder.panHandlers),
          React.Children.map(children, function (child, i) {
            return React.createElement(
              _reactNative.View,
              {
                key: navigationState.routes[i].key,
                testID: navigationState.routes[i].testID,
                style: width ? {
                  width: width
                } : i === navigationState.index ? _reactNative.StyleSheet.absoluteFill : null
              },
              i === navigationState.index || width ? child : null
            );
          })
        );
      }
    }]);
    return TabViewPagerPan;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _TabViewPropTypes.PagerRendererPropType, {
    swipeDistanceThreshold: _propTypes2.default.number,
    swipeVelocityThreshold: _propTypes2.default.number
  }), _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    initialLayout: {
      height: 0,
      width: 0
    }
  }, _temp);
  exports.default = TabViewPagerPan;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},816,[103,121,14,813]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _TabViewPropTypes = _require(_dependencyMap[3]);

  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 75,
    friction: 25
  };
  var TabViewPagerExperimental = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerExperimental, _React$Component);

    function TabViewPagerExperimental() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabViewPagerExperimental);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabViewPagerExperimental.__proto__ || Object.getPrototypeOf(TabViewPagerExperimental)).call.apply(_ref, [this].concat(args))), _this), _this._handleHandlerStateChange = function (event) {
        var GestureHandler = _this.props.GestureHandler;

        if (event.nativeEvent.state === GestureHandler.State.BEGIN) {
          _this.props.onSwipeStart && _this.props.onSwipeStart();
        } else if (event.nativeEvent.state === GestureHandler.State.END) {
          _this.props.onSwipeEnd && _this.props.onSwipeEnd();

          var _this$props = _this.props,
              navigationState = _this$props.navigationState,
              layout = _this$props.layout,
              _this$props$swipeDist = _this$props.swipeDistanceThreshold,
              _swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist,
              _this$props$swipeVelo = _this$props.swipeVelocityThreshold,
              _swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 150 : _this$props$swipeVelo;

          var _event$nativeEvent = event.nativeEvent,
              translationX = _event$nativeEvent.translationX,
              translationY = _event$nativeEvent.translationY,
              velocityX = _event$nativeEvent.velocityX,
              velocityY = _event$nativeEvent.velocityY;
          var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : navigationState.index;
          var nextIndex = currentIndex;

          if (Math.abs(translationX) > Math.abs(translationY) && Math.abs(velocityX) > Math.abs(velocityY) && (Math.abs(translationX) > _swipeDistanceThreshold || Math.abs(velocityX) > _swipeVelocityThreshold)) {
            nextIndex = Math.round(Math.min(Math.max(0, currentIndex - translationX / Math.abs(translationX)), navigationState.routes.length - 1));
          }

          if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
            nextIndex = currentIndex;
          }

          _this._transitionTo(nextIndex, velocityX);
        }
      }, _this._transitionTo = function (index, velocity) {
        var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false || animated === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = babelHelpers.objectWithoutProperties(DefaultTransitionSpec, ["timing"]);
        var useNativeDriver = _this.props.useNativeDriver;

        _reactNative.Animated.parallel([timing(_this.props.panX, babelHelpers.extends({}, transitionConfig, {
          toValue: 0,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        })), timing(_this.props.offsetX, babelHelpers.extends({}, transitionConfig, {
          toValue: offset,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        }))]).start(function (_ref2) {
          var finished = _ref2.finished;

          if (finished) {
            var route = _this.props.navigationState.routes[index];

            _this.props.jumpTo(route.key);

            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabViewPagerExperimental, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._transitionTo(this.props.navigationState.index, undefined, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            GestureHandler = _props.GestureHandler,
            panX = _props.panX,
            offsetX = _props.offsetX,
            layout = _props.layout,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        });

        return React.createElement(
          GestureHandler.PanGestureHandler,
          {
            enabled: layout.width !== 0 && swipeEnabled !== false,
            minDeltaX: 10,
            onGestureEvent: _reactNative.Animated.event([{
              nativeEvent: {
                translationX: this.props.panX
              }
            }], {
              useNativeDriver: this.props.useNativeDriver
            }),
            onHandlerStateChange: this._handleHandlerStateChange
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.sheet, width ? {
                width: routes.length * width,
                transform: [{
                  translateX: translateX
                }]
              } : null]
            },
            React.Children.map(children, function (child, i) {
              return React.createElement(
                _reactNative.View,
                {
                  key: navigationState.routes[i].key,
                  testID: navigationState.routes[i].testID,
                  style: width ? {
                    width: width
                  } : i === navigationState.index ? _reactNative.StyleSheet.absoluteFill : null
                },
                i === navigationState.index || width ? child : null
              );
            })
          )
        );
      }
    }]);
    return TabViewPagerExperimental;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _TabViewPropTypes.PagerRendererPropType, {
    swipeDistanceThreshold: _propTypes2.default.number,
    swipeVelocityThreshold: _propTypes2.default.number,
    GestureHandler: _propTypes2.default.object
  }), _class.defaultProps = {
    GestureHandler: global.__expo && global.__expo.DangerZone ? global.__expo.DangerZone.GestureHandler : undefined,
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  }, _temp2);
  exports.default = TabViewPagerExperimental;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},817,[103,121,14,813]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _TouchableItem = _require(_dependencyMap[3]);

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var _TabViewPropTypes = _require(_dependencyMap[4]);

  var useNativeDriver = Boolean(_reactNative.NativeModules.NativeAnimatedModule);
  var TabBar = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabBar, _React$Component);

    function TabBar(props) {
      babelHelpers.classCallCheck(this, TabBar);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this, props));

      _initialiseProps.call(_this);

      var initialVisibility = 1;

      if (_this.props.scrollEnabled) {
        var tabWidth = _this._getTabWidth(_this.props);

        if (!tabWidth) {
          initialVisibility = 0;
        }
      }

      var initialOffset = _this.props.scrollEnabled && _this.props.layout.width ? {
        x: _this._getScrollAmount(_this.props, _this.props.navigationState.index),
        y: 0
      } : undefined;
      _this.state = {
        visibility: new _reactNative.Animated.Value(initialVisibility),
        scrollAmount: new _reactNative.Animated.Value(0),
        initialOffset: initialOffset
      };
      return _this;
    }

    babelHelpers.createClass(TabBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.props.scrollEnabled && this._startTrackingPosition();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevTabWidth = this._getTabWidth(prevProps);

        var currentTabWidth = this._getTabWidth(this.props);

        if (prevTabWidth !== currentTabWidth && currentTabWidth) {
          this.state.visibility.setValue(1);
        }

        if ((prevProps.navigationState !== this.props.navigationState || prevProps.layout !== this.props.layout || prevTabWidth !== currentTabWidth) && this.props.navigationState.index !== this._pendingIndex) {
          this._resetScroll(this.props.navigationState.index, Boolean(prevProps.layout.width));

          this._pendingIndex = null;
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._stopTrackingPosition();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            position = _props.position,
            navigationState = _props.navigationState,
            scrollEnabled = _props.scrollEnabled,
            bounces = _props.bounces;
        var routes = navigationState.routes,
            index = navigationState.index;

        var tabWidth = this._getTabWidth(this.props);

        var tabBarWidth = tabWidth * routes.length;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));

        var translateX = _reactNative.Animated.multiply(this.state.scrollAmount, -1);

        return React.createElement(
          _reactNative.Animated.View,
          {
            style: [styles.tabBar, this.props.style]
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              pointerEvents: "none",
              style: [styles.indicatorContainer, scrollEnabled ? {
                width: tabBarWidth,
                transform: [{
                  translateX: translateX
                }]
              } : null]
            },
            this._renderIndicator(babelHelpers.extends({}, this.props, {
              width: tabWidth
            }))
          ),
          React.createElement(
            _reactNative.View,
            {
              style: styles.scroll
            },
            React.createElement(
              _reactNative.Animated.ScrollView,
              {
                horizontal: true,
                keyboardShouldPersistTaps: "handled",
                scrollEnabled: scrollEnabled,
                bounces: bounces,
                alwaysBounceHorizontal: false,
                scrollsToTop: false,
                showsHorizontalScrollIndicator: false,
                automaticallyAdjustContentInsets: false,
                overScrollMode: "never",
                contentContainerStyle: [styles.tabContent, scrollEnabled ? null : styles.container],
                scrollEventThrottle: 1,
                onScroll: _reactNative.Animated.event([{
                  nativeEvent: {
                    contentOffset: {
                      x: this.state.scrollAmount
                    }
                  }
                }], {
                  useNativeDriver: useNativeDriver
                }),
                onScrollBeginDrag: this._handleBeginDrag,
                onScrollEndDrag: this._handleEndDrag,
                onMomentumScrollBegin: this._handleMomentumScrollBegin,
                onMomentumScrollEnd: this._handleMomentumScrollEnd,
                contentOffset: this.state.initialOffset,
                ref: this._setRef
              },
              routes.map(function (route, i) {
                var focused = index === i;
                var outputRange = inputRange.map(function (inputIndex) {
                  return inputIndex === i ? 1 : 0.7;
                });

                var opacity = _reactNative.Animated.multiply(_this2.state.visibility, position.interpolate({
                  inputRange: inputRange,
                  outputRange: outputRange
                }));

                var scene = {
                  route: route,
                  focused: focused,
                  index: i
                };

                var label = _this2._renderLabel(scene);

                var icon = _this2.props.renderIcon ? _this2.props.renderIcon(scene) : null;
                var badge = _this2.props.renderBadge ? _this2.props.renderBadge(scene) : null;
                var tabStyle = {};
                tabStyle.opacity = opacity;

                if (icon) {
                  if (label) {
                    tabStyle.paddingTop = 8;
                  } else {
                    tabStyle.padding = 12;
                  }
                }

                var passedTabStyle = _reactNative.StyleSheet.flatten(_this2.props.tabStyle);

                var isWidthSet = passedTabStyle && typeof passedTabStyle.width !== 'undefined' || scrollEnabled === true;
                var tabContainerStyle = {};

                if (isWidthSet) {
                  tabStyle.width = tabWidth;
                }

                if (passedTabStyle && typeof passedTabStyle.flex === 'number') {
                  tabContainerStyle.flex = passedTabStyle.flex;
                } else if (!isWidthSet) {
                  tabContainerStyle.flex = 1;
                }

                var accessibilityLabel = route.accessibilityLabel || route.title;
                return React.createElement(
                  _TouchableItem2.default,
                  {
                    borderless: true,
                    key: route.key,
                    testID: route.testID,
                    accessible: route.accessible,
                    accessibilityLabel: accessibilityLabel,
                    accessibilityTraits: "button",
                    pressColor: _this2.props.pressColor,
                    pressOpacity: _this2.props.pressOpacity,
                    delayPressIn: 0,
                    onPress: function onPress() {
                      return _this2._handleTabPress(scene);
                    },
                    style: tabContainerStyle
                  },
                  React.createElement(
                    _reactNative.View,
                    {
                      pointerEvents: "none",
                      style: styles.container
                    },
                    React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.tabItem, tabStyle, passedTabStyle, styles.container]
                      },
                      icon,
                      label
                    ),
                    badge ? React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.badge, {
                          opacity: _this2.state.visibility
                        }]
                      },
                      badge
                    ) : null
                  )
                );
              })
            )
          )
        );
      }
    }]);
    return TabBar;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
    scrollEnabled: _propTypes2.default.bool,
    bounces: _propTypes2.default.bool,
    pressColor: _TouchableItem2.default.propTypes.pressColor,
    pressOpacity: _TouchableItem2.default.propTypes.pressOpacity,
    getLabelText: _propTypes2.default.func,
    renderIcon: _propTypes2.default.func,
    renderLabel: _propTypes2.default.func,
    renderIndicator: _propTypes2.default.func,
    onTabPress: _propTypes2.default.func,
    labelStyle: _propTypes2.default.any,
    style: _propTypes2.default.any
  }), _class.defaultProps = {
    getLabelText: function getLabelText(_ref) {
      var route = _ref.route;
      return typeof route.title === 'string' ? route.title.toUpperCase() : route.title;
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._isIntial = true;
    this._isManualScroll = false;
    this._isMomentumScroll = false;

    this._startTrackingPosition = function () {
      _this3._offsetXListener = _this3.props.offsetX.addListener(function (_ref2) {
        var value = _ref2.value;
        _this3._lastOffsetX = value;

        _this3._handlePosition();
      });
      _this3._panXListener = _this3.props.panX.addListener(function (_ref3) {
        var value = _ref3.value;
        _this3._lastPanX = value;

        _this3._handlePosition();
      });
    };

    this._stopTrackingPosition = function () {
      _this3.props.offsetX.removeListener(_this3._offsetXListener);

      _this3.props.panX.removeListener(_this3._panXListener);
    };

    this._handlePosition = function () {
      var _props2 = _this3.props,
          navigationState = _props2.navigationState,
          layout = _props2.layout;

      if (layout.width === 0) {
        return;
      }

      var panX = typeof _this3._lastPanX === 'number' ? _this3._lastPanX : 0;
      var offsetX = typeof _this3._lastOffsetX === 'number' ? _this3._lastOffsetX : -navigationState.index * layout.width;
      var value = (panX + offsetX) / -(layout.width || 0.001);

      _this3._adjustScroll(value);
    };

    this._renderLabel = function (scene) {
      if (typeof _this3.props.renderLabel !== 'undefined') {
        return _this3.props.renderLabel(scene);
      }

      var label = _this3.props.getLabelText(scene);

      if (typeof label !== 'string') {
        return null;
      }

      return React.createElement(
        _reactNative.Animated.Text,
        {
          style: [styles.tabLabel, _this3.props.labelStyle]
        },
        label
      );
    };

    this._renderIndicator = function (props) {
      if (typeof _this3.props.renderIndicator !== 'undefined') {
        return _this3.props.renderIndicator(props);
      }

      var width = props.width,
          position = props.position,
          navigationState = props.navigationState;

      var translateX = _reactNative.Animated.multiply(_reactNative.Animated.multiply(position.interpolate({
        inputRange: [0, navigationState.routes.length - 1],
        outputRange: [0, navigationState.routes.length - 1],
        extrapolate: 'clamp'
      }), width), _reactNative.I18nManager.isRTL ? -1 : 1);

      return React.createElement(_reactNative.Animated.View, {
        style: [styles.indicator, {
          width: width,
          transform: [{
            translateX: translateX
          }]
        }, _this3.props.indicatorStyle]
      });
    };

    this._getTabWidth = function (props) {
      var layout = props.layout,
          navigationState = props.navigationState,
          tabStyle = props.tabStyle;

      var flattened = _reactNative.StyleSheet.flatten(tabStyle);

      if (flattened) {
        switch (typeof flattened.width) {
          case 'number':
            return flattened.width;

          case 'string':
            if (flattened.width.endsWith('%')) {
              var _width = parseFloat(flattened.width);

              if (Number.isFinite(_width)) {
                return layout.width * (_width / 100);
              }
            }

        }
      }

      if (props.scrollEnabled) {
        return layout.width / 5 * 2;
      }

      return layout.width / navigationState.routes.length;
    };

    this._handleTabPress = function (scene) {
      _this3._pendingIndex = scene.index;

      _this3.props.jumpTo(scene.route.key);

      if (_this3.props.onTabPress) {
        _this3.props.onTabPress(scene);
      }
    };

    this._normalizeScrollValue = function (props, value) {
      var layout = props.layout,
          navigationState = props.navigationState;

      var tabWidth = _this3._getTabWidth(props);

      var tabBarWidth = Math.max(tabWidth * navigationState.routes.length, layout.width);
      var maxDistance = tabBarWidth - layout.width;
      return Math.max(Math.min(value, maxDistance), 0);
    };

    this._getScrollAmount = function (props, i) {
      var layout = props.layout;

      var tabWidth = _this3._getTabWidth(props);

      var centerDistance = tabWidth * (i + 0.5);
      var scrollAmount = centerDistance - layout.width / 2;
      return _this3._normalizeScrollValue(props, scrollAmount);
    };

    this._adjustScroll = function (value) {
      if (_this3.props.scrollEnabled) {
        global.cancelAnimationFrame(_this3._scrollResetCallback);
        _this3._scrollView && _this3._scrollView.scrollTo({
          x: _this3._normalizeScrollValue(_this3.props, _this3._getScrollAmount(_this3.props, value)),
          animated: !_this3._isIntial
        });
        _this3._isIntial = false;
      }
    };

    this._resetScroll = function (value) {
      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (_this3.props.scrollEnabled) {
        global.cancelAnimationFrame(_this3._scrollResetCallback);
        _this3._scrollResetCallback = global.requestAnimationFrame(function () {
          _this3._scrollView && _this3._scrollView.scrollTo({
            x: _this3._getScrollAmount(_this3.props, value),
            animated: animated
          });
        });
      }
    };

    this._handleBeginDrag = function () {
      _this3._isManualScroll = true;
      _this3._isMomentumScroll = false;
    };

    this._handleEndDrag = function () {
      global.requestAnimationFrame(function () {
        if (_this3._isMomentumScroll) {
          return;
        }

        _this3._isManualScroll = false;
      });
    };

    this._handleMomentumScrollBegin = function () {
      _this3._isMomentumScroll = true;
    };

    this._handleMomentumScrollEnd = function () {
      _this3._isMomentumScroll = false;
      _this3._isManualScroll = false;
    };

    this._setRef = function (el) {
      return _this3._scrollView = el && el._component;
    };
  }, _temp);
  exports.default = TabBar;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    scroll: {
      overflow: 'scroll'
    },
    tabBar: {
      backgroundColor: '#2196f3',
      elevation: 4,
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      zIndex: 0
    },
    tabContent: {
      flexDirection: 'row',
      flexWrap: 'nowrap'
    },
    tabLabel: {
      backgroundColor: 'transparent',
      color: 'white',
      margin: 8
    },
    tabItem: {
      flex: 1,
      padding: 8,
      alignItems: 'center',
      justifyContent: 'center'
    },
    badge: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    indicatorContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    indicator: {
      backgroundColor: '#ffeb3b',
      position: 'absolute',
      left: 0,
      bottom: 0,
      right: 0,
      height: 2
    }
  });
},818,[103,121,14,819,813]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var LOLLIPOP = 21;
  var TouchableItem = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TouchableItem);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).call.apply(_ref, [this].concat(args))), _this), _this._handlePress = function () {
        global.requestAnimationFrame(_this.props.onPress);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            pressOpacity = _props.pressOpacity,
            pressColor = _props.pressColor,
            borderless = _props.borderless,
            rest = babelHelpers.objectWithoutProperties(_props, ["style", "pressOpacity", "pressColor", "borderless"]);

        if (_reactNative.Platform.Version >= LOLLIPOP) {
          return React.createElement(
            _reactNative.TouchableNativeFeedback,
            babelHelpers.extends({}, rest, {
              onPress: this._handlePress,
              background: _reactNative.TouchableNativeFeedback.Ripple(pressColor, borderless)
            }),
            React.createElement(
              _reactNative.View,
              {
                style: style
              },
              React.Children.only(this.props.children)
            )
          );
        } else {
          return React.createElement(
            _reactNative.TouchableOpacity,
            babelHelpers.extends({}, rest, {
              onPress: this._handlePress,
              style: style,
              activeOpacity: pressOpacity
            }),
            this.props.children
          );
        }
      }
    }]);
    return TouchableItem;
  }(React.Component), _class.propTypes = {
    onPress: _propTypes2.default.func.isRequired,
    delayPressIn: _propTypes2.default.number,
    borderless: _propTypes2.default.bool,
    pressColor: _propTypes2.default.string,
    pressOpacity: _propTypes2.default.number,
    children: _propTypes2.default.node.isRequired
  }, _class.defaultProps = {
    pressColor: 'rgba(255, 255, 255, .4)'
  }, _temp2);
  exports.default = TouchableItem;
},819,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = SceneMap;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  function SceneMap(scenes) {
    var SceneComponent = function (_React$PureComponent) {
      babelHelpers.inherits(SceneComponent, _React$PureComponent);

      function SceneComponent() {
        babelHelpers.classCallCheck(this, SceneComponent);
        return babelHelpers.possibleConstructorReturn(this, (SceneComponent.__proto__ || Object.getPrototypeOf(SceneComponent)).apply(this, arguments));
      }

      babelHelpers.createClass(SceneComponent, [{
        key: "render",
        value: function render() {
          return React.createElement(scenes[this.props.route.key], this.props);
        }
      }]);
      return SceneComponent;
    }(React.PureComponent);

    return function (_ref) {
      var route = _ref.route,
          jumpTo = _ref.jumpTo,
          jumpToIndex = _ref.jumpToIndex;
      return React.createElement(SceneComponent, {
        key: route.key,
        route: route,
        jumpTo: jumpTo,
        jumpToIndex: jumpToIndex
      });
    };
  }
},820,[103]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeTabView = _require(_dependencyMap[2]);

  var _TabBarIcon = _require(_dependencyMap[3]);

  var _TabBarIcon2 = babelHelpers.interopRequireDefault(_TabBarIcon);

  var TabBarTop = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarTop, _React$PureComponent);

    function TabBarTop() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabBarTop);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarTop.__proto__ || Object.getPrototypeOf(TabBarTop)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (scene) {
        var _this$props = _this.props,
            position = _this$props.position,
            tabBarPosition = _this$props.tabBarPosition,
            navigation = _this$props.navigation,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            showLabel = _this$props.showLabel,
            upperCaseLabel = _this$props.upperCaseLabel,
            labelStyle = _this$props.labelStyle,
            allowFontScaling = _this$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (inputIndex) {
          return inputIndex === index ? activeTintColor : inactiveTintColor;
        });
        var color = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var tintColor = scene.focused ? activeTintColor : inactiveTintColor;

        var label = _this.props.getLabel(babelHelpers.extends({}, scene, {
          tintColor: tintColor
        }));

        if (typeof label === 'string') {
          return _react2.default.createElement(
            _reactNative.Animated.Text,
            {
              style: [styles.label, {
                color: color
              }, labelStyle],
              allowFontScaling: allowFontScaling
            },
            upperCaseLabel ? label.toUpperCase() : label
          );
        }

        if (typeof label === 'function') {
          return label(babelHelpers.extends({}, scene, {
            tintColor: tintColor
          }));
        }

        return label;
      }, _this._renderIcon = function (scene) {
        var _this$props2 = _this.props,
            position = _this$props2.position,
            navigation = _this$props2.navigation,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            renderIcon = _this$props2.renderIcon,
            showIcon = _this$props2.showIcon,
            iconStyle = _this$props2.iconStyle;

        if (showIcon === false) {
          return null;
        }

        return _react2.default.createElement(_TabBarIcon2.default, {
          position: position,
          navigation: navigation,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          scene: scene,
          style: [styles.icon, iconStyle]
        });
      }, _this._handleOnPress = function (scene) {
        var _this$props3 = _this.props,
            getOnPress = _this$props3.getOnPress,
            jumpToIndex = _this$props3.jumpToIndex,
            navigation = _this$props3.navigation;
        var previousScene = navigation.state.routes[navigation.state.index];
        var onPress = getOnPress(previousScene, scene);

        if (onPress) {
          onPress({
            previousScene: previousScene,
            scene: scene,
            jumpToIndex: jumpToIndex,
            defaultHandler: jumpToIndex
          });
        } else {
          jumpToIndex(scene.index);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabBarTop, [{
      key: "render",
      value: function render() {
        var props = this.props;
        return _react2.default.createElement(_reactNativeTabView.TabBar, babelHelpers.extends({}, props, {
          onTabPress: this._handleOnPress,
          jumpToIndex: function jumpToIndex() {},
          renderIcon: this._renderIcon,
          renderLabel: this._renderLabel
        }));
      }
    }]);
    return TabBarTop;
  }(_react2.default.PureComponent), _class.defaultProps = {
    activeTintColor: '#fff',
    inactiveTintColor: '#fff',
    showIcon: false,
    showLabel: true,
    upperCaseLabel: true,
    allowFontScaling: true
  }, _temp2);
  exports.default = TabBarTop;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      height: 24,
      width: 24
    },
    label: {
      textAlign: 'center',
      fontSize: 13,
      margin: 8,
      backgroundColor: 'transparent'
    }
  });
},821,[103,14,811,822]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var TabBarIcon = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarIcon, _React$PureComponent);

    function TabBarIcon() {
      babelHelpers.classCallCheck(this, TabBarIcon);
      return babelHelpers.possibleConstructorReturn(this, (TabBarIcon.__proto__ || Object.getPrototypeOf(TabBarIcon)).apply(this, arguments));
    }

    babelHelpers.createClass(TabBarIcon, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            position = _props.position,
            scene = _props.scene,
            navigation = _props.navigation,
            activeTintColor = _props.activeTintColor,
            inactiveTintColor = _props.inactiveTintColor,
            style = _props.style;
        var route = scene.route,
            index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var activeOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 1 : 0;
          })
        });
        var inactiveOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 0 : 1;
          })
        });
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: style
          },
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.icon, {
                opacity: activeOpacity
              }]
            },
            this.props.renderIcon({
              route: route,
              index: index,
              focused: true,
              tintColor: activeTintColor
            })
          ),
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.icon, {
                opacity: inactiveOpacity
              }]
            },
            this.props.renderIcon({
              route: route,
              index: index,
              focused: false,
              tintColor: inactiveTintColor
            })
          )
        );
      }
    }]);
    return TabBarIcon;
  }(_react2.default.PureComponent);

  exports.default = TabBarIcon;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      position: 'absolute',
      alignSelf: 'center',
      alignItems: 'center',
      justifyContent: 'center',
      height: '100%',
      width: '100%',
      minWidth: 30
    }
  });
},822,[103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNavigation = _require(_dependencyMap[2]);

  var _TabBarIcon = _require(_dependencyMap[3]);

  var _TabBarIcon2 = babelHelpers.interopRequireDefault(_TabBarIcon);

  var majorVersion = parseInt(_reactNative.Platform.Version, 10);
  var isIos = false;
  var isIOS11 = majorVersion >= 11 && isIos;
  var defaultMaxTabBarItemWidth = 125;
  var TabBarBottom = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarBottom, _React$PureComponent);

    function TabBarBottom() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabBarBottom);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarBottom.__proto__ || Object.getPrototypeOf(TabBarBottom)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (scene) {
        var _this$props = _this.props,
            position = _this$props.position,
            navigation = _this$props.navigation,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            labelStyle = _this$props.labelStyle,
            showLabel = _this$props.showLabel,
            showIcon = _this$props.showIcon,
            isLandscape = _this$props.isLandscape,
            allowFontScaling = _this$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (inputIndex) {
          return inputIndex === index ? activeTintColor : inactiveTintColor;
        });
        var color = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var tintColor = scene.focused ? activeTintColor : inactiveTintColor;

        var label = _this.props.getLabel(babelHelpers.extends({}, scene, {
          tintColor: tintColor
        }));

        if (typeof label === 'string') {
          return _react2.default.createElement(
            _reactNative.Animated.Text,
            {
              numberOfLines: 1,
              style: [styles.label, {
                color: color
              }, showIcon && _this._shouldUseHorizontalTabs() ? styles.labelBeside : styles.labelBeneath, labelStyle],
              allowFontScaling: allowFontScaling
            },
            label
          );
        }

        if (typeof label === 'function') {
          return label(babelHelpers.extends({}, scene, {
            tintColor: tintColor
          }));
        }

        return label;
      }, _this._renderIcon = function (scene) {
        var _this$props2 = _this.props,
            position = _this$props2.position,
            navigation = _this$props2.navigation,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            renderIcon = _this$props2.renderIcon,
            showIcon = _this$props2.showIcon,
            showLabel = _this$props2.showLabel;

        if (showIcon === false) {
          return null;
        }

        var horizontal = _this._shouldUseHorizontalTabs();

        return _react2.default.createElement(_TabBarIcon2.default, {
          position: position,
          navigation: navigation,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          scene: scene,
          style: [styles.iconWithExplicitHeight, showLabel === false && !horizontal && styles.iconWithoutLabel, showLabel !== false && !horizontal && styles.iconWithLabel]
        });
      }, _this._renderTestIDProps = function (scene) {
        var testIDProps = _this.props.getTestIDProps && _this.props.getTestIDProps(scene);

        return testIDProps;
      }, _this._handleTabPress = function (index) {
        var _this$props3 = _this.props,
            jumpToIndex = _this$props3.jumpToIndex,
            navigation = _this$props3.navigation;
        var currentIndex = navigation.state.index;

        if (currentIndex === index) {
          var childRoute = navigation.state.routes[index];

          if (childRoute.hasOwnProperty('index') && childRoute.index > 0) {
            navigation.dispatch(_reactNavigation.StackActions.popToTop({
              key: childRoute.key
            }));
          } else {}
        } else {
          jumpToIndex(index);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabBarBottom, [{
      key: "_tabItemMaxWidth",
      value: function _tabItemMaxWidth() {
        var _props = this.props,
            tabStyle = _props.tabStyle,
            layout = _props.layout;
        var maxTabBarItemWidth = void 0;

        var flattenedTabStyle = _reactNative.StyleSheet.flatten(tabStyle);

        if (flattenedTabStyle) {
          if (typeof flattenedTabStyle.width === 'number') {
            maxTabBarItemWidth = flattenedTabStyle.width;
          } else if (typeof flattenedTabStyle.width === 'string' && flattenedTabStyle.width.endsWith('%')) {
            var width = parseFloat(flattenedTabStyle.width);

            if (Number.isFinite(width)) {
              maxTabBarItemWidth = layout.width * (width / 100);
            }
          } else if (typeof flattenedTabStyle.maxWidth === 'number') {
            maxTabBarItemWidth = flattenedTabStyle.maxWidth;
          } else if (typeof flattenedTabStyle.maxWidth === 'string' && flattenedTabStyle.width.endsWith('%')) {
            var _width = parseFloat(flattenedTabStyle.maxWidth);

            if (Number.isFinite(_width)) {
              maxTabBarItemWidth = layout.width * (_width / 100);
            }
          }
        }

        if (!maxTabBarItemWidth) {
          maxTabBarItemWidth = defaultMaxTabBarItemWidth;
        }

        return maxTabBarItemWidth;
      }
    }, {
      key: "_shouldUseHorizontalTabs",
      value: function _shouldUseHorizontalTabs() {
        var routes = this.props.navigation.state.routes;
        var _props2 = this.props,
            isLandscape = _props2.isLandscape,
            layout = _props2.layout,
            adaptive = _props2.adaptive,
            tabStyle = _props2.tabStyle;

        if (!adaptive) {
          return false;
        }

        var tabBarWidth = layout.width;

        if (tabBarWidth === 0) {
          return _reactNative.Platform.isPad;
        }

        if (!_reactNative.Platform.isPad) {
          return isLandscape;
        } else {
          var maxTabBarItemWidth = this._tabItemMaxWidth();

          return routes.length * maxTabBarItemWidth <= tabBarWidth;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props3 = this.props,
            position = _props3.position,
            navigation = _props3.navigation,
            jumpToIndex = _props3.jumpToIndex,
            getOnPress = _props3.getOnPress,
            getTestIDProps = _props3.getTestIDProps,
            activeBackgroundColor = _props3.activeBackgroundColor,
            inactiveBackgroundColor = _props3.inactiveBackgroundColor,
            style = _props3.style,
            animateStyle = _props3.animateStyle,
            tabStyle = _props3.tabStyle,
            isLandscape = _props3.isLandscape;
        var routes = navigation.state.routes;
        var previousScene = routes[navigation.state.index];
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var tabBarStyle = [styles.tabBar, this._shouldUseHorizontalTabs() && !_reactNative.Platform.isPad ? styles.tabBarCompact : styles.tabBarRegular, style];
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: animateStyle
          },
          _react2.default.createElement(
            _reactNavigation.SafeAreaView,
            {
              style: tabBarStyle,
              forceInset: {
                bottom: 'always',
                top: 'never'
              }
            },
            routes.map(function (route, index) {
              var focused = index === navigation.state.index;
              var scene = {
                route: route,
                index: index,
                focused: focused
              };

              var _onPress = getOnPress(previousScene, scene);

              var outputRange = inputRange.map(function (inputIndex) {
                return inputIndex === index ? activeBackgroundColor : inactiveBackgroundColor;
              });
              var backgroundColor = position.interpolate({
                inputRange: inputRange,
                outputRange: outputRange
              });
              var justifyContent = _this2.props.showIcon ? 'flex-end' : 'center';
              var extraProps = _this2._renderTestIDProps(scene) || {};
              var testID = extraProps.testID,
                  accessibilityLabel = extraProps.accessibilityLabel;
              return _react2.default.createElement(
                _reactNative.TouchableWithoutFeedback,
                {
                  key: route.key,
                  testID: testID,
                  accessibilityLabel: accessibilityLabel,
                  onPress: function onPress() {
                    return _onPress ? _onPress({
                      previousScene: previousScene,
                      scene: scene,
                      jumpToIndex: jumpToIndex,
                      defaultHandler: _this2._handleTabPress
                    }) : _this2._handleTabPress(index);
                  }
                },
                _react2.default.createElement(
                  _reactNative.Animated.View,
                  {
                    style: [styles.tab, {
                      backgroundColor: backgroundColor
                    }]
                  },
                  _react2.default.createElement(
                    _reactNative.View,
                    {
                      style: [styles.tab, _this2._shouldUseHorizontalTabs() ? styles.tabLandscape : styles.tabPortrait, tabStyle]
                    },
                    _this2._renderIcon(scene),
                    _this2._renderLabel(scene)
                  )
                )
              );
            })
          )
        );
      }
    }]);
    return TabBarBottom;
  }(_react2.default.PureComponent), _class.defaultProps = {
    activeTintColor: '#3478f6',
    activeBackgroundColor: 'transparent',
    inactiveTintColor: '#929292',
    inactiveBackgroundColor: 'transparent',
    showLabel: true,
    showIcon: true,
    allowFontScaling: true,
    adaptive: isIOS11
  }, _temp2);
  var DEFAULT_HEIGHT = 49;
  var COMPACT_HEIGHT = 29;

  var styles = _reactNative.StyleSheet.create({
    tabBar: {
      backgroundColor: '#F7F7F7',
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
      borderTopColor: 'rgba(0, 0, 0, .3)',
      flexDirection: 'row'
    },
    tabBarCompact: {
      height: COMPACT_HEIGHT
    },
    tabBarRegular: {
      height: DEFAULT_HEIGHT
    },
    tab: {
      flex: 1,
      alignItems: isIos ? 'center' : 'stretch'
    },
    tabPortrait: {
      justifyContent: 'flex-end',
      flexDirection: 'column'
    },
    tabLandscape: {
      justifyContent: 'center',
      flexDirection: 'row'
    },
    iconWithoutLabel: {
      flex: 1
    },
    iconWithLabel: {
      flex: 1
    },
    iconWithExplicitHeight: {
      height: _reactNative.Platform.isPad ? DEFAULT_HEIGHT : COMPACT_HEIGHT
    },
    label: {
      textAlign: 'center',
      backgroundColor: 'transparent'
    },
    labelBeneath: {
      fontSize: 10,
      marginBottom: 1.5
    },
    labelBeside: {
      fontSize: 13,
      marginLeft: 20
    }
  });

  exports.default = (0, _reactNavigation.withOrientation)(TabBarBottom);
},823,[103,14,735,822]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    get createBottomTabNavigator() {
      return _require(_dependencyMap[0]).default;
    },

    get createMaterialTopTabNavigator() {
      return _require(_dependencyMap[1]).default;
    },

    get BottomTabBar() {
      return _require(_dependencyMap[2]).default;
    },

    get MaterialTopTabBar() {
      return _require(_dependencyMap[3]).default;
    },

    get createTabNavigator() {
      return _require(_dependencyMap[4]).default;
    }

  };
},824,[825,832,827,844,826]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeScreens = _require(_dependencyMap[2]);

  var _reactLifecyclesCompat = _require(_dependencyMap[3]);

  var _createTabNavigator = _require(_dependencyMap[4]);

  var _createTabNavigator2 = babelHelpers.interopRequireDefault(_createTabNavigator);

  var _BottomTabBar = _require(_dependencyMap[5]);

  var _BottomTabBar2 = babelHelpers.interopRequireDefault(_BottomTabBar);

  var _ResourceSavingScene = _require(_dependencyMap[6]);

  var _ResourceSavingScene2 = babelHelpers.interopRequireDefault(_ResourceSavingScene);

  var TabNavigationView = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabNavigationView, _React$PureComponent);

    function TabNavigationView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabNavigationView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabNavigationView.__proto__ || Object.getPrototypeOf(TabNavigationView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        loaded: [_this.props.navigation.state.index]
      }, _this._renderTabBar = function () {
        var _this$props = _this.props,
            _this$props$tabBarCom = _this$props.tabBarComponent,
            TabBarComponent = _this$props$tabBarCom === undefined ? _BottomTabBar2.default : _this$props$tabBarCom,
            tabBarOptions = _this$props.tabBarOptions,
            navigation = _this$props.navigation,
            screenProps = _this$props.screenProps,
            getLabelText = _this$props.getLabelText,
            getAccessibilityLabel = _this$props.getAccessibilityLabel,
            getButtonComponent = _this$props.getButtonComponent,
            getTestID = _this$props.getTestID,
            renderIcon = _this$props.renderIcon,
            onTabPress = _this$props.onTabPress;
        var descriptors = _this.props.descriptors;
        var state = _this.props.navigation.state;
        var route = state.routes[state.index];
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarVisible === false) {
          return null;
        }

        return React.createElement(TabBarComponent, babelHelpers.extends({}, tabBarOptions, {
          jumpTo: _this._jumpTo,
          navigation: navigation,
          screenProps: screenProps,
          onTabPress: onTabPress,
          getLabelText: getLabelText,
          getButtonComponent: getButtonComponent,
          getAccessibilityLabel: getAccessibilityLabel,
          getTestID: getTestID,
          renderIcon: renderIcon
        }));
      }, _this._jumpTo = function (key) {
        var _this$props2 = _this.props,
            navigation = _this$props2.navigation,
            onIndexChange = _this$props2.onIndexChange;
        var index = navigation.state.routes.findIndex(function (route) {
          return route.key === key;
        });
        onIndexChange(index);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabNavigationView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            navigation = _props.navigation,
            renderScene = _props.renderScene,
            lazy = _props.lazy;
        var routes = navigation.state.routes;
        var loaded = this.state.loaded;
        return React.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          React.createElement(
            _reactNativeScreens.ScreenContainer,
            {
              style: styles.pages
            },
            routes.map(function (route, index) {
              if (lazy && !loaded.includes(index)) {
                return null;
              }

              var isFocused = navigation.state.index === index;
              return React.createElement(
                _ResourceSavingScene2.default,
                {
                  key: route.key,
                  style: [_reactNative.StyleSheet.absoluteFill, {
                    opacity: isFocused ? 1 : 0
                  }],
                  isVisible: isFocused
                },
                renderScene({
                  route: route
                })
              );
            })
          ),
          this._renderTabBar()
        );
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var index = nextProps.navigation.state.index;
        return {
          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(babelHelpers.toConsumableArray(prevState.loaded), [index])
        };
      }
    }]);
    return TabNavigationView;
  }(React.PureComponent), _class.defaultProps = {
    lazy: true
  }, _temp2);
  (0, _reactLifecyclesCompat.polyfill)(TabNavigationView);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    pages: {
      flex: 1
    }
  });

  exports.default = (0, _createTabNavigator2.default)(TabNavigationView);
},825,[103,14,765,737,826,827,831]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createTabNavigator;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNavigation = _require(_dependencyMap[1]);

  function createTabNavigator(TabView) {
    var NavigationView = function (_React$Component) {
      babelHelpers.inherits(NavigationView, _React$Component);

      function NavigationView() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, NavigationView);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NavigationView.__proto__ || Object.getPrototypeOf(NavigationView)).call.apply(_ref, [this].concat(args))), _this), _this._renderScene = function (_ref2) {
          var route = _ref2.route;
          var _this$props = _this.props,
              screenProps = _this$props.screenProps,
              descriptors = _this$props.descriptors;
          var descriptor = descriptors[route.key];
          var TabComponent = descriptor.getComponent();
          return React.createElement(_reactNavigation.SceneView, {
            screenProps: screenProps,
            navigation: descriptor.navigation,
            component: TabComponent
          });
        }, _this._renderIcon = function (_ref3) {
          var route = _ref3.route,
              _ref3$focused = _ref3.focused,
              focused = _ref3$focused === undefined ? true : _ref3$focused,
              tintColor = _ref3.tintColor,
              _ref3$horizontal = _ref3.horizontal,
              horizontal = _ref3$horizontal === undefined ? false : _ref3$horizontal;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var options = descriptor.options;

          if (options.tabBarIcon) {
            return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
              focused: focused,
              tintColor: tintColor,
              horizontal: horizontal
            }) : options.tabBarIcon;
          }

          return null;
        }, _this._getButtonComponent = function (_ref4) {
          var route = _ref4.route;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var options = descriptor.options;

          if (options.tabBarButtonComponent) {
            return options.tabBarButtonComponent;
          }

          return null;
        }, _this._getLabelText = function (_ref5) {
          var route = _ref5.route;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var options = descriptor.options;

          if (options.tabBarLabel) {
            return options.tabBarLabel;
          }

          if (typeof options.title === 'string') {
            return options.title;
          }

          return route.routeName;
        }, _this._getAccessibilityLabel = function (_ref6) {
          var route = _ref6.route;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var options = descriptor.options;

          if (typeof options.tabBarAccessibilityLabel !== 'undefined') {
            return options.tabBarAccessibilityLabel;
          }

          var label = _this._getLabelText({
            route: route
          });

          if (typeof label === 'string') {
            return label;
          }
        }, _this._getTestID = function (_ref7) {
          var route = _ref7.route;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var options = descriptor.options;
          return options.tabBarTestID;
        }, _this._handleTabPress = function (_ref8) {
          var route = _ref8.route;
          _this._isTabPress = true;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var navigation = descriptor.navigation,
              options = descriptor.options;

          var defaultHandler = function defaultHandler() {
            if (navigation.isFocused()) {
              if (route.hasOwnProperty('index') && route.index > 0) {
                navigation.dispatch(_reactNavigation.StackActions.popToTop({
                  key: route.key
                }));
              } else {}
            } else {
              _this._jumpTo(route.routeName);
            }
          };

          if (options.tabBarOnPress) {
            options.tabBarOnPress({
              navigation: navigation,
              defaultHandler: defaultHandler
            });
          } else {
            defaultHandler();
          }
        }, _this._handleIndexChange = function (index) {
          if (_this._isTabPress) {
            _this._isTabPress = false;
            return;
          }

          _this._jumpTo(_this.props.navigation.state.routes[index].routeName);
        }, _this._handleSwipeStart = function () {
          _this.setState({
            isSwiping: true
          });
        }, _this._handleSwipeEnd = function () {
          _this.setState({
            isSwiping: false
          });
        }, _this._jumpTo = function (routeName) {
          return _this.props.navigation.dispatch(_reactNavigation.NavigationActions.navigate({
            routeName: routeName
          }));
        }, _this._isTabPress = false, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(NavigationView, [{
        key: "render",
        value: function render() {
          var _props = this.props,
              descriptors = _props.descriptors,
              navigation = _props.navigation,
              screenProps = _props.screenProps;
          var state = navigation.state;
          var route = state.routes[state.index];
          var descriptor = descriptors[route.key];
          var options = babelHelpers.extends({}, this.props.navigationConfig, descriptor.options);
          return React.createElement(TabView, babelHelpers.extends({}, options, {
            getLabelText: this._getLabelText,
            getButtonComponent: this._getButtonComponent,
            getAccessibilityLabel: this._getAccessibilityLabel,
            getTestID: this._getTestID,
            renderIcon: this._renderIcon,
            renderScene: this._renderScene,
            onIndexChange: this._handleIndexChange,
            onTabPress: this._handleTabPress,
            navigation: navigation,
            descriptors: descriptors,
            screenProps: screenProps
          }));
        }
      }]);
      return NavigationView;
    }(React.Component);

    return function (routes) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var router = (0, _reactNavigation.TabRouter)(routes, config);
      var navigator = (0, _reactNavigation.createNavigator)(NavigationView, router, config);
      return (0, _reactNavigation.createNavigationContainer)(navigator);
    };
  }
},826,[103,735]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNavigation = _require(_dependencyMap[2]);

  var _CrossFadeIcon = _require(_dependencyMap[3]);

  var _CrossFadeIcon2 = babelHelpers.interopRequireDefault(_CrossFadeIcon);

  var _withDimensions = _require(_dependencyMap[4]);

  var _withDimensions2 = babelHelpers.interopRequireDefault(_withDimensions);

  var majorVersion = parseInt(_reactNative.Platform.Version, 10);
  var isIos = false;
  var isIOS11 = majorVersion >= 11 && isIos;
  var DEFAULT_MAX_TAB_ITEM_WIDTH = 125;

  var TouchableWithoutFeedbackWrapper = function (_React$Component) {
    babelHelpers.inherits(TouchableWithoutFeedbackWrapper, _React$Component);

    function TouchableWithoutFeedbackWrapper() {
      babelHelpers.classCallCheck(this, TouchableWithoutFeedbackWrapper);
      return babelHelpers.possibleConstructorReturn(this, (TouchableWithoutFeedbackWrapper.__proto__ || Object.getPrototypeOf(TouchableWithoutFeedbackWrapper)).apply(this, arguments));
    }

    babelHelpers.createClass(TouchableWithoutFeedbackWrapper, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            onPress = _props.onPress,
            testID = _props.testID,
            accessibilityLabel = _props.accessibilityLabel,
            props = babelHelpers.objectWithoutProperties(_props, ["onPress", "testID", "accessibilityLabel"]);
        return _react2.default.createElement(
          _reactNative.TouchableWithoutFeedback,
          {
            onPress: onPress,
            testID: testID,
            accessibilityLabel: accessibilityLabel
          },
          _react2.default.createElement(_reactNative.View, props)
        );
      }
    }]);
    return TouchableWithoutFeedbackWrapper;
  }(_react2.default.Component);

  var TabBarBottom = (_temp2 = _class = function (_React$Component2) {
    babelHelpers.inherits(TabBarBottom, _React$Component2);

    function TabBarBottom() {
      var _ref;

      var _temp, _this2, _ret;

      babelHelpers.classCallCheck(this, TabBarBottom);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this2 = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarBottom.__proto__ || Object.getPrototypeOf(TabBarBottom)).call.apply(_ref, [this].concat(args))), _this2), _this2._renderLabel = function (_ref2) {
        var route = _ref2.route,
            focused = _ref2.focused;
        var _this2$props = _this2.props,
            activeTintColor = _this2$props.activeTintColor,
            inactiveTintColor = _this2$props.inactiveTintColor,
            labelStyle = _this2$props.labelStyle,
            showLabel = _this2$props.showLabel,
            showIcon = _this2$props.showIcon,
            allowFontScaling = _this2$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var label = _this2.props.getLabelText({
          route: route
        });

        var tintColor = focused ? activeTintColor : inactiveTintColor;

        if (typeof label === 'string') {
          return _react2.default.createElement(
            _reactNative.Animated.Text,
            {
              numberOfLines: 1,
              style: [styles.label, {
                color: tintColor
              }, showIcon && _this2._shouldUseHorizontalLabels() ? styles.labelBeside : styles.labelBeneath, labelStyle],
              allowFontScaling: allowFontScaling
            },
            label
          );
        }

        if (typeof label === 'function') {
          return label({
            route: route,
            focused: focused,
            tintColor: tintColor
          });
        }

        return label;
      }, _this2._renderIcon = function (_ref3) {
        var route = _ref3.route,
            focused = _ref3.focused;
        var _this2$props2 = _this2.props,
            navigation = _this2$props2.navigation,
            activeTintColor = _this2$props2.activeTintColor,
            inactiveTintColor = _this2$props2.inactiveTintColor,
            renderIcon = _this2$props2.renderIcon,
            showIcon = _this2$props2.showIcon,
            showLabel = _this2$props2.showLabel;

        if (showIcon === false) {
          return null;
        }

        var horizontal = _this2._shouldUseHorizontalLabels();

        var activeOpacity = focused ? 1 : 0;
        var inactiveOpacity = focused ? 0 : 1;
        return _react2.default.createElement(_CrossFadeIcon2.default, {
          route: route,
          horizontal: horizontal,
          navigation: navigation,
          activeOpacity: activeOpacity,
          inactiveOpacity: inactiveOpacity,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          style: [styles.iconWithExplicitHeight, showLabel === false && !horizontal && styles.iconWithoutLabel, showLabel !== false && !horizontal && styles.iconWithLabel]
        });
      }, _this2._shouldUseHorizontalLabels = function () {
        var routes = _this2.props.navigation.state.routes;
        var _this2$props3 = _this2.props,
            isLandscape = _this2$props3.isLandscape,
            dimensions = _this2$props3.dimensions,
            adaptive = _this2$props3.adaptive,
            tabStyle = _this2$props3.tabStyle;

        if (!adaptive) {
          return false;
        }

        if (_reactNative.Platform.isPad) {
          var maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;

          var flattenedStyle = _reactNative.StyleSheet.flatten(tabStyle);

          if (flattenedStyle) {
            if (typeof flattenedStyle.width === 'number') {
              maxTabItemWidth = flattenedStyle.width;
            } else if (typeof flattenedStyle.maxWidth === 'number') {
              maxTabItemWidth = flattenedStyle.maxWidth;
            }
          }

          return routes.length * maxTabItemWidth <= dimensions.width;
        } else {
          return isLandscape;
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this2, _ret);
    }

    babelHelpers.createClass(TabBarBottom, [{
      key: "render",
      value: function render() {
        var _this3 = this;

        var _props2 = this.props,
            navigation = _props2.navigation,
            activeBackgroundColor = _props2.activeBackgroundColor,
            inactiveBackgroundColor = _props2.inactiveBackgroundColor,
            onTabPress = _props2.onTabPress,
            safeAreaInset = _props2.safeAreaInset,
            style = _props2.style,
            tabStyle = _props2.tabStyle;
        var routes = navigation.state.routes;
        var tabBarStyle = [styles.tabBar, this._shouldUseHorizontalLabels() && !_reactNative.Platform.isPad ? styles.tabBarCompact : styles.tabBarRegular, style];
        return _react2.default.createElement(
          _reactNavigation.SafeAreaView,
          {
            style: tabBarStyle,
            forceInset: safeAreaInset
          },
          routes.map(function (route, index) {
            var focused = index === navigation.state.index;
            var scene = {
              route: route,
              focused: focused
            };

            var accessibilityLabel = _this3.props.getAccessibilityLabel({
              route: route
            });

            var testID = _this3.props.getTestID({
              route: route
            });

            var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
            var ButtonComponent = _this3.props.getButtonComponent({
              route: route
            }) || TouchableWithoutFeedbackWrapper;
            return _react2.default.createElement(
              ButtonComponent,
              {
                key: route.key,
                onPress: function onPress() {
                  return onTabPress({
                    route: route
                  });
                },
                testID: testID,
                accessibilityLabel: accessibilityLabel,
                style: [styles.tab, {
                  backgroundColor: backgroundColor
                }, _this3._shouldUseHorizontalLabels() ? styles.tabLandscape : styles.tabPortrait, tabStyle]
              },
              _this3._renderIcon(scene),
              _this3._renderLabel(scene)
            );
          })
        );
      }
    }]);
    return TabBarBottom;
  }(_react2.default.Component), _class.defaultProps = {
    activeTintColor: '#3478f6',
    activeBackgroundColor: 'transparent',
    inactiveTintColor: '#929292',
    inactiveBackgroundColor: 'transparent',
    showLabel: true,
    showIcon: true,
    allowFontScaling: true,
    adaptive: isIOS11,
    safeAreaInset: {
      bottom: 'always',
      top: 'never'
    }
  }, _temp2);
  var DEFAULT_HEIGHT = 49;
  var COMPACT_HEIGHT = 29;

  var styles = _reactNative.StyleSheet.create({
    tabBar: {
      backgroundColor: '#fff',
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
      borderTopColor: 'rgba(0, 0, 0, .3)',
      flexDirection: 'row'
    },
    tabBarCompact: {
      height: COMPACT_HEIGHT
    },
    tabBarRegular: {
      height: DEFAULT_HEIGHT
    },
    tab: {
      flex: 1,
      alignItems: isIos ? 'center' : 'stretch'
    },
    tabPortrait: {
      justifyContent: 'flex-end',
      flexDirection: 'column'
    },
    tabLandscape: {
      justifyContent: 'center',
      flexDirection: 'row'
    },
    iconWithoutLabel: {
      flex: 1
    },
    iconWithLabel: {
      flex: 1
    },
    iconWithExplicitHeight: {
      height: _reactNative.Platform.isPad ? DEFAULT_HEIGHT : COMPACT_HEIGHT
    },
    label: {
      textAlign: 'center',
      backgroundColor: 'transparent'
    },
    labelBeneath: {
      fontSize: 11,
      marginBottom: 1.5
    },
    labelBeside: {
      fontSize: 12,
      marginLeft: 15
    }
  });

  exports.default = (0, _withDimensions2.default)(TabBarBottom);
},827,[103,14,735,828,829]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var TabBarIcon = function (_React$Component) {
    babelHelpers.inherits(TabBarIcon, _React$Component);

    function TabBarIcon() {
      babelHelpers.classCallCheck(this, TabBarIcon);
      return babelHelpers.possibleConstructorReturn(this, (TabBarIcon.__proto__ || Object.getPrototypeOf(TabBarIcon)).apply(this, arguments));
    }

    babelHelpers.createClass(TabBarIcon, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            route = _props.route,
            activeOpacity = _props.activeOpacity,
            inactiveOpacity = _props.inactiveOpacity,
            activeTintColor = _props.activeTintColor,
            inactiveTintColor = _props.inactiveTintColor,
            renderIcon = _props.renderIcon,
            horizontal = _props.horizontal,
            style = _props.style;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: style
          },
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.icon, {
                opacity: activeOpacity
              }]
            },
            renderIcon({
              route: route,
              focused: true,
              horizontal: horizontal,
              tintColor: activeTintColor
            })
          ),
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.icon, {
                opacity: inactiveOpacity
              }]
            },
            renderIcon({
              route: route,
              focused: false,
              horizontal: horizontal,
              tintColor: inactiveTintColor
            })
          )
        );
      }
    }]);
    return TabBarIcon;
  }(_react2.default.Component);

  exports.default = TabBarIcon;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      position: 'absolute',
      alignSelf: 'center',
      alignItems: 'center',
      justifyContent: 'center',
      height: '100%',
      width: '100%',
      minWidth: 25
    }
  });
},828,[103,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isOrientationLandscape = undefined;
  exports.default = withDimensions;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _hoistNonReactStatics = _require(_dependencyMap[2]);

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var isOrientationLandscape = exports.isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };

  function withDimensions(WrappedComponent) {
    var _class, _temp2;

    var _Dimensions$get = _reactNative.Dimensions.get('window'),
        width = _Dimensions$get.width,
        height = _Dimensions$get.height;

    var EnhancedComponent = (_temp2 = _class = function (_React$Component) {
      babelHelpers.inherits(EnhancedComponent, _React$Component);

      function EnhancedComponent() {
        var _ref2;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, EnhancedComponent);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref2 = EnhancedComponent.__proto__ || Object.getPrototypeOf(EnhancedComponent)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
          dimensions: {
            width: width,
            height: height
          },
          isLandscape: isOrientationLandscape({
            width: width,
            height: height
          })
        }, _this.handleOrientationChange = function (_ref3) {
          var window = _ref3.window;
          var isLandscape = isOrientationLandscape(window);

          _this.setState({
            isLandscape: isLandscape
          });
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(EnhancedComponent, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement(WrappedComponent, babelHelpers.extends({}, this.props, this.state));
        }
      }]);
      return EnhancedComponent;
    }(React.Component), _class.displayName = "withDimensions(" + WrappedComponent.displayName + ")", _temp2);
    return (0, _hoistNonReactStatics2.default)(EnhancedComponent, WrappedComponent);
  }
},829,[103,14,830]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeScreens = _require(_dependencyMap[2]);

  var FAR_FAR_AWAY = 3000;

  var ResourceSavingScene = function (_React$Component) {
    babelHelpers.inherits(ResourceSavingScene, _React$Component);

    function ResourceSavingScene() {
      babelHelpers.classCallCheck(this, ResourceSavingScene);
      return babelHelpers.possibleConstructorReturn(this, (ResourceSavingScene.__proto__ || Object.getPrototypeOf(ResourceSavingScene)).apply(this, arguments));
    }

    babelHelpers.createClass(ResourceSavingScene, [{
      key: "render",
      value: function render() {
        if (_reactNativeScreens.screensEnabled && (0, _reactNativeScreens.screensEnabled)()) {
          var _props = this.props,
              _isVisible = _props.isVisible,
              _rest = babelHelpers.objectWithoutProperties(_props, ["isVisible"]);

          return React.createElement(_reactNativeScreens.Screen, babelHelpers.extends({
            active: _isVisible ? 1 : 0
          }, _rest));
        }

        var _props2 = this.props,
            isVisible = _props2.isVisible,
            children = _props2.children,
            style = _props2.style,
            rest = babelHelpers.objectWithoutProperties(_props2, ["isVisible", "children", "style"]);
        return React.createElement(
          _reactNative.View,
          babelHelpers.extends({
            style: [styles.container, style],
            collapsable: false,
            removeClippedSubviews: true,
            pointerEvents: isVisible ? 'auto' : 'none'
          }, rest),
          React.createElement(
            _reactNative.View,
            {
              style: isVisible ? styles.attached : styles.detached
            },
            children
          )
        );
      }
    }]);
    return ResourceSavingScene;
  }(React.Component);

  exports.default = ResourceSavingScene;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    attached: {
      flex: 1
    },
    detached: {
      flex: 1,
      top: FAR_FAR_AWAY
    }
  });
},831,[103,14,765]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactLifecyclesCompat = _require(_dependencyMap[2]);

  var _reactNativeTabView = _require(_dependencyMap[3]);

  var _createTabNavigator = _require(_dependencyMap[4]);

  var _createTabNavigator2 = babelHelpers.interopRequireDefault(_createTabNavigator);

  var _MaterialTopTabBar = _require(_dependencyMap[5]);

  var _MaterialTopTabBar2 = babelHelpers.interopRequireDefault(_MaterialTopTabBar);

  var _ResourceSavingScene = _require(_dependencyMap[6]);

  var _ResourceSavingScene2 = babelHelpers.interopRequireDefault(_ResourceSavingScene);

  var MaterialTabView = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(MaterialTabView, _React$PureComponent);

    function MaterialTabView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, MaterialTabView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = MaterialTabView.__proto__ || Object.getPrototypeOf(MaterialTabView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        index: 0,
        isSwiping: false,
        loaded: [_this.props.navigation.state.index],
        transitioningFromIndex: null
      }, _this._renderIcon = function (_ref2) {
        var focused = _ref2.focused,
            route = _ref2.route,
            tintColor = _ref2.tintColor;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarIcon) {
          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarIcon;
        }

        return null;
      }, _this._renderTabBar = function (props) {
        var state = _this.props.navigation.state;
        var route = state.routes[state.index];
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;
        var _this$props = _this.props,
            _this$props$tabBarCom = _this$props.tabBarComponent,
            TabBarComponent = _this$props$tabBarCom === undefined ? _MaterialTopTabBar2.default : _this$props$tabBarCom,
            tabBarPosition = _this$props.tabBarPosition,
            tabBarOptions = _this$props.tabBarOptions;

        if (TabBarComponent === null || !tabBarVisible) {
          return null;
        }

        return React.createElement(TabBarComponent, babelHelpers.extends({}, tabBarOptions, props, {
          tabBarPosition: tabBarPosition,
          screenProps: _this.props.screenProps,
          navigation: _this.props.navigation,
          getLabelText: _this.props.getLabelText,
          getAccessibilityLabel: _this.props.getAccessibilityLabel,
          getTestID: _this.props.getTestID,
          renderIcon: _this._renderIcon,
          onTabPress: _this.props.onTabPress
        }));
      }, _this._renderPanPager = function (props) {
        return React.createElement(_reactNativeTabView.PagerPan, props);
      }, _this._handleAnimationEnd = function () {
        var lazy = _this.props.lazy;

        if (lazy) {
          _this.setState({
            transitioningFromIndex: null,
            isSwiping: false
          });
        }
      }, _this._handleSwipeStart = function () {
        var _this$props2 = _this.props,
            navigation = _this$props2.navigation,
            lazy = _this$props2.lazy;

        if (lazy) {
          _this.setState({
            isSwiping: true,
            loaded: [].concat(babelHelpers.toConsumableArray(new Set([].concat(babelHelpers.toConsumableArray(_this.state.loaded), [Math.max(navigation.state.index - 1, 0), Math.min(navigation.state.index + 1, navigation.state.routes.length - 1)]))))
          });
        }
      }, _this._handleIndexChange = function (index) {
        var _this$props3 = _this.props,
            animationEnabled = _this$props3.animationEnabled,
            navigation = _this$props3.navigation,
            onIndexChange = _this$props3.onIndexChange,
            lazy = _this$props3.lazy;

        if (lazy && animationEnabled) {
          _this.setState({
            transitioningFromIndex: navigation.state.index || 0
          });
        }

        onIndexChange(index);
      }, _this._mustBeVisible = function (_ref3) {
        var index = _ref3.index,
            focused = _ref3.focused;
        var _this$props4 = _this.props,
            animationEnabled = _this$props4.animationEnabled,
            navigation = _this$props4.navigation;
        var _this$state = _this.state,
            isSwiping = _this$state.isSwiping,
            transitioningFromIndex = _this$state.transitioningFromIndex;

        if (isSwiping) {
          var isSibling = navigation.state.index === index - 1 || navigation.state.index === index + 1;

          if (isSibling) {
            return true;
          }
        }

        if (animationEnabled && transitioningFromIndex === index) {
          return true;
        }

        return focused;
      }, _this._renderScene = function (_ref4) {
        var route = _ref4.route;
        var _this$props5 = _this.props,
            renderScene = _this$props5.renderScene,
            descriptors = _this$props5.descriptors,
            lazy = _this$props5.lazy,
            optimizationsEnabled = _this$props5.optimizationsEnabled;

        if (lazy) {
          var _loaded = _this.state.loaded;
          var routes = _this.props.navigation.state.routes;

          var _index = routes.findIndex(function (_ref5) {
            var key = _ref5.key;
            return key === route.key;
          });

          var navigation = descriptors[route.key].navigation;

          var mustBeVisible = _this._mustBeVisible({
            index: _index,
            focused: navigation.isFocused()
          });

          if (!_loaded.includes(_index) && !mustBeVisible) {
            return React.createElement(_reactNative.View, null);
          }

          if (optimizationsEnabled) {
            return React.createElement(
              _ResourceSavingScene2.default,
              {
                isVisible: mustBeVisible
              },
              renderScene({
                route: route
              })
            );
          }
        }

        return renderScene({
          route: route
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(MaterialTabView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            navigation = _props.navigation,
            animationEnabled = _props.animationEnabled,
            renderScene = _props.renderScene,
            onIndexChange = _props.onIndexChange,
            rest = babelHelpers.objectWithoutProperties(_props, ["navigation", "animationEnabled", "renderScene", "onIndexChange"]);
        var renderPager = void 0;
        var state = this.props.navigation.state;
        var route = state.routes[state.index];
        var descriptors = this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;

        if (typeof swipeEnabled === 'function') {
          swipeEnabled = swipeEnabled(state);
        }

        if (animationEnabled === false && swipeEnabled === false) {
          renderPager = this._renderPanPager;
        }

        return React.createElement(_reactNativeTabView.TabView, babelHelpers.extends({}, rest, {
          navigationState: navigation.state,
          animationEnabled: animationEnabled,
          swipeEnabled: swipeEnabled,
          onAnimationEnd: this._handleAnimationEnd,
          onIndexChange: this._handleIndexChange,
          onSwipeStart: this._handleSwipeStart,
          renderPager: renderPager,
          renderTabBar: this._renderTabBar,
          renderScene: this._renderScene
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var index = nextProps.navigation.state.index;

        if (prevState.index === index) {
          return null;
        }

        return {
          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(babelHelpers.toConsumableArray(prevState.loaded), [index]),
          index: index
        };
      }
    }]);
    return MaterialTabView;
  }(React.PureComponent), _class.defaultProps = {
    initialLayout: {
      width: 1,
      height: 0
    },
    animationEnabled: true,
    lazy: false,
    optimizationsEnabled: false
  }, _temp2);
  (0, _reactLifecyclesCompat.polyfill)(MaterialTabView);
  exports.default = (0, _createTabNavigator2.default)(MaterialTabView);
},832,[103,14,737,833,826,844,831]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _TabView = _require(_dependencyMap[0]);

  Object.defineProperty(exports, "TabView", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_TabView).default;
    }
  });

  var _TabBar = _require(_dependencyMap[1]);

  Object.defineProperty(exports, "TabBar", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_TabBar).default;
    }
  });

  var _PagerDefault = _require(_dependencyMap[2]);

  Object.defineProperty(exports, "PagerDefault", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_PagerDefault).default;
    }
  });

  var _PagerPan = _require(_dependencyMap[3]);

  Object.defineProperty(exports, "PagerPan", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_PagerPan).default;
    }
  });

  var _PagerScroll = _require(_dependencyMap[4]);

  Object.defineProperty(exports, "PagerScroll", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_PagerScroll).default;
    }
  });

  var _PagerAndroid = _require(_dependencyMap[5]);

  Object.defineProperty(exports, "PagerAndroid", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_PagerAndroid).default;
    }
  });

  var _PagerExperimental = _require(_dependencyMap[6]);

  Object.defineProperty(exports, "PagerExperimental", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_PagerExperimental).default;
    }
  });

  var _SceneMap = _require(_dependencyMap[7]);

  Object.defineProperty(exports, "SceneMap", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_SceneMap).default;
    }
  });
},833,[834,835,838,841,840,839,842,843]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _TabBar = _require(_dependencyMap[3]);

  var _TabBar2 = babelHelpers.interopRequireDefault(_TabBar);

  var _PagerDefault = _require(_dependencyMap[4]);

  var _PagerDefault2 = babelHelpers.interopRequireDefault(_PagerDefault);

  var _PropTypes = _require(_dependencyMap[5]);

  var TabView = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabView, _React$Component);

    function TabView(props) {
      babelHelpers.classCallCheck(this, TabView);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabView.__proto__ || Object.getPrototypeOf(TabView)).call(this, props));

      _initialiseProps.call(_this);

      var navigationState = _this.props.navigationState;
      var layout = babelHelpers.extends({}, _this.props.initialLayout, {
        measured: false
      });
      var panX = new _reactNative.Animated.Value(0);
      var offsetX = new _reactNative.Animated.Value(-navigationState.index * layout.width);
      var layoutXY = new _reactNative.Animated.ValueXY({
        x: layout.width || 0.001,
        y: layout.height || 0.001
      });

      var position = _reactNative.Animated.multiply(_reactNative.Animated.divide(_reactNative.Animated.add(panX, offsetX), layoutXY.x), -1);

      _this.state = {
        layout: layout,
        layoutXY: layoutXY,
        panX: panX,
        offsetX: offsetX,
        position: position
      };
      return _this;
    }

    babelHelpers.createClass(TabView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._mounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._mounted = false;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            navigationState = _props.navigationState,
            onIndexChange = _props.onIndexChange,
            initialLayout = _props.initialLayout,
            renderScene = _props.renderScene,
            renderPager = _props.renderPager,
            renderTabBar = _props.renderTabBar,
            tabBarPosition = _props.tabBarPosition,
            rest = babelHelpers.objectWithoutProperties(_props, ["navigationState", "onIndexChange", "initialLayout", "renderScene", "renderPager", "renderTabBar", "tabBarPosition"]);

        var props = this._buildSceneRendererProps();

        return React.createElement(
          _reactNative.View,
          {
            collapsable: false,
            style: [styles.container, this.props.style]
          },
          tabBarPosition === 'top' && renderTabBar(props),
          React.createElement(
            _reactNative.View,
            {
              onLayout: this._handleLayout,
              style: styles.pager
            },
            renderPager(babelHelpers.extends({}, props, rest, {
              panX: this.state.panX,
              offsetX: this.state.offsetX,
              children: navigationState.routes.map(function (route) {
                var scene = _this2._renderScene(babelHelpers.extends({}, props, {
                  route: route
                }));

                if (React.isValidElement(scene)) {
                  return React.cloneElement(scene, {
                    key: route.key
                  });
                }

                return scene;
              })
            }))
          ),
          tabBarPosition === 'bottom' && renderTabBar(props)
        );
      }
    }]);
    return TabView;
  }(React.Component), _class.propTypes = {
    navigationState: _PropTypes.NavigationStatePropType.isRequired,
    onIndexChange: _propTypes2.default.func.isRequired,
    initialLayout: _propTypes2.default.shape({
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }),
    canJumpToTab: _propTypes2.default.func.isRequired,
    renderPager: _propTypes2.default.func.isRequired,
    renderScene: _propTypes2.default.func.isRequired,
    renderTabBar: _propTypes2.default.func,
    tabBarPosition: _propTypes2.default.oneOf(['top', 'bottom'])
  }, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    tabBarPosition: 'top',
    renderTabBar: function renderTabBar(props) {
      return React.createElement(_TabBar2.default, props);
    },
    renderPager: function renderPager(props) {
      return React.createElement(_PagerDefault2.default, props);
    },
    getTestID: function getTestID(_ref) {
      var route = _ref.route;
      return typeof route.testID === 'string' ? route.testID : undefined;
    },
    initialLayout: {
      height: 0,
      width: 0
    },
    useNativeDriver: false
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._mounted = false;

    this._renderScene = function (props) {
      return _this3.props.renderScene(props);
    };

    this._handleLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          height = _e$nativeEvent$layout.height,
          width = _e$nativeEvent$layout.width;

      if (_this3.state.layout.width === width && _this3.state.layout.height === height) {
        return;
      }

      _this3.state.offsetX.setValue(-_this3.props.navigationState.index * width);

      _this3.state.layoutXY.setValue({
        x: width || 0.001,
        y: height || 0.001
      });

      _this3.setState({
        layout: {
          measured: true,
          height: height,
          width: width
        }
      });
    };

    this._buildSceneRendererProps = function () {
      return {
        panX: _this3.state.panX,
        offsetX: _this3.state.offsetX,
        position: _this3.state.position,
        layout: _this3.state.layout,
        navigationState: _this3.props.navigationState,
        jumpTo: _this3._jumpTo,
        useNativeDriver: _this3.props.useNativeDriver === true
      };
    };

    this._jumpTo = function (key) {
      if (!_this3._mounted) {
        return;
      }

      var _props2 = _this3.props,
          canJumpToTab = _props2.canJumpToTab,
          navigationState = _props2.navigationState;
      var index = navigationState.routes.findIndex(function (route) {
        return route.key === key;
      });

      if (!canJumpToTab(navigationState.routes[index])) {
        return;
      }

      if (index !== navigationState.index) {
        _this3.props.onIndexChange(index);
      }
    };
  }, _temp);
  exports.default = TabView;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    pager: {
      flex: 1
    }
  });
},834,[103,121,14,835,838,837]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _TouchableItem = _require(_dependencyMap[3]);

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var _PropTypes = _require(_dependencyMap[4]);

  var useNativeDriver = Boolean(_reactNative.NativeModules.NativeAnimatedModule);
  var TabBar = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabBar, _React$Component);

    function TabBar(props) {
      babelHelpers.classCallCheck(this, TabBar);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this, props));

      _initialiseProps.call(_this);

      var initialVisibility = 1;

      if (_this.props.scrollEnabled) {
        var tabWidth = _this._getTabWidth(_this.props);

        if (!tabWidth) {
          initialVisibility = 0;
        }
      }

      var initialOffset = _this.props.scrollEnabled && _this.props.layout.width ? {
        x: _this._getScrollAmount(_this.props, _this.props.navigationState.index),
        y: 0
      } : undefined;
      _this.state = {
        visibility: new _reactNative.Animated.Value(initialVisibility),
        scrollAmount: new _reactNative.Animated.Value(0),
        initialOffset: initialOffset
      };
      return _this;
    }

    babelHelpers.createClass(TabBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.props.scrollEnabled && this._startTrackingPosition();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevTabWidth = this._getTabWidth(prevProps);

        var currentTabWidth = this._getTabWidth(this.props);

        var pendingIndex = typeof this._pendingIndex === 'number' ? this._pendingIndex : this.props.navigationState.index;
        this._pendingIndex = null;

        if (prevTabWidth !== currentTabWidth && currentTabWidth) {
          this.state.visibility.setValue(1);
        }

        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._resetScroll(this.props.navigationState.index, false);
        } else if (prevProps.navigationState.index !== pendingIndex) {
          this._resetScroll(this.props.navigationState.index);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._stopTrackingPosition();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            position = _props.position,
            navigationState = _props.navigationState,
            scrollEnabled = _props.scrollEnabled,
            bounces = _props.bounces;
        var routes = navigationState.routes;

        var tabWidth = this._getTabWidth(this.props);

        var tabBarWidth = tabWidth * routes.length;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));

        var translateX = _reactNative.Animated.multiply(this.state.scrollAmount, -1);

        return React.createElement(
          _reactNative.Animated.View,
          {
            style: [styles.tabBar, this.props.style]
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              pointerEvents: "none",
              style: [styles.indicatorContainer, scrollEnabled ? {
                width: tabBarWidth,
                transform: [{
                  translateX: translateX
                }]
              } : null]
            },
            this._renderIndicator(babelHelpers.extends({}, this.props, {
              width: tabWidth
            }))
          ),
          React.createElement(
            _reactNative.View,
            {
              style: styles.scroll
            },
            React.createElement(
              _reactNative.Animated.ScrollView,
              {
                horizontal: true,
                keyboardShouldPersistTaps: "handled",
                scrollEnabled: scrollEnabled,
                bounces: bounces,
                alwaysBounceHorizontal: false,
                scrollsToTop: false,
                showsHorizontalScrollIndicator: false,
                automaticallyAdjustContentInsets: false,
                overScrollMode: "never",
                contentContainerStyle: [styles.tabContent, scrollEnabled ? null : styles.container],
                scrollEventThrottle: 1,
                onScroll: _reactNative.Animated.event([{
                  nativeEvent: {
                    contentOffset: {
                      x: this.state.scrollAmount
                    }
                  }
                }], {
                  useNativeDriver: useNativeDriver
                }),
                onScrollBeginDrag: this._handleBeginDrag,
                onScrollEndDrag: this._handleEndDrag,
                onMomentumScrollBegin: this._handleMomentumScrollBegin,
                onMomentumScrollEnd: this._handleMomentumScrollEnd,
                contentOffset: this.state.initialOffset,
                ref: function ref(el) {
                  return _this2._scrollView = el && el._component;
                }
              },
              routes.map(function (route, i) {
                var outputRange = inputRange.map(function (inputIndex) {
                  return inputIndex === i ? 1 : 0.7;
                });

                var opacity = _reactNative.Animated.multiply(_this2.state.visibility, position.interpolate({
                  inputRange: inputRange,
                  outputRange: outputRange
                }));

                var label = _this2._renderLabel({
                  route: route
                });

                var icon = _this2.props.renderIcon ? _this2.props.renderIcon({
                  route: route
                }) : null;
                var badge = _this2.props.renderBadge ? _this2.props.renderBadge({
                  route: route
                }) : null;
                var tabStyle = {};
                tabStyle.opacity = opacity;

                if (icon) {
                  if (label) {
                    tabStyle.paddingTop = 8;
                  } else {
                    tabStyle.padding = 12;
                  }
                }

                var passedTabStyle = _reactNative.StyleSheet.flatten(_this2.props.tabStyle);

                var isWidthSet = passedTabStyle && typeof passedTabStyle.width !== 'undefined' || scrollEnabled === true;
                var tabContainerStyle = {};

                if (isWidthSet) {
                  tabStyle.width = tabWidth;
                }

                if (passedTabStyle && typeof passedTabStyle.flex === 'number') {
                  tabContainerStyle.flex = passedTabStyle.flex;
                } else if (!isWidthSet) {
                  tabContainerStyle.flex = 1;
                }

                var accessibilityLabel = _this2.props.getAccessibilityLabel({
                  route: route
                });

                accessibilityLabel = typeof accessibilityLabel !== 'undefined' ? accessibilityLabel : _this2.props.getLabelText({
                  route: route
                });
                var isFocused = i === navigationState.index;
                return React.createElement(
                  _TouchableItem2.default,
                  {
                    borderless: true,
                    key: route.key,
                    testID: _this2.props.getTestID({
                      route: route
                    }),
                    accessible: _this2.props.getAccessible({
                      route: route
                    }),
                    accessibilityLabel: accessibilityLabel,
                    accessibilityTraits: isFocused ? ['button', 'selected'] : 'button',
                    accessibilityComponentType: "button",
                    pressColor: _this2.props.pressColor,
                    pressOpacity: _this2.props.pressOpacity,
                    delayPressIn: 0,
                    onPress: function onPress() {
                      return _this2._handleTabPress({
                        route: route
                      });
                    },
                    style: tabContainerStyle
                  },
                  React.createElement(
                    _reactNative.View,
                    {
                      pointerEvents: "none",
                      style: styles.container
                    },
                    React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.tabItem, tabStyle, passedTabStyle, styles.container]
                      },
                      icon,
                      label
                    ),
                    badge ? React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.badge, {
                          opacity: _this2.state.visibility
                        }]
                      },
                      badge
                    ) : null
                  )
                );
              })
            )
          )
        );
      }
    }]);
    return TabBar;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _PropTypes.SceneRendererPropType, {
    scrollEnabled: _propTypes2.default.bool,
    bounces: _propTypes2.default.bool,
    pressColor: _TouchableItem2.default.propTypes.pressColor,
    pressOpacity: _TouchableItem2.default.propTypes.pressOpacity,
    getLabelText: _propTypes2.default.func,
    getAccessible: _propTypes2.default.func,
    getAccessibilityLabel: _propTypes2.default.func,
    getTestID: _propTypes2.default.func,
    renderIcon: _propTypes2.default.func,
    renderLabel: _propTypes2.default.func,
    renderIndicator: _propTypes2.default.func,
    onTabPress: _propTypes2.default.func,
    labelStyle: _propTypes2.default.any,
    style: _propTypes2.default.any
  }), _class.defaultProps = {
    getLabelText: function getLabelText(_ref) {
      var route = _ref.route;
      return typeof route.title === 'string' ? route.title.toUpperCase() : route.title;
    },
    getAccessible: function getAccessible(_ref2) {
      var route = _ref2.route;
      return typeof route.accessible !== 'undefined' ? route.accessible : true;
    },
    getAccessibilityLabel: function getAccessibilityLabel(_ref3) {
      var route = _ref3.route;
      return route.accessibilityLabel;
    },
    getTestID: function getTestID(_ref4) {
      var route = _ref4.route;
      return route.testID;
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._isIntial = true;
    this._isManualScroll = false;
    this._isMomentumScroll = false;

    this._startTrackingPosition = function () {
      _this3._offsetXListener = _this3.props.offsetX.addListener(function (_ref5) {
        var value = _ref5.value;
        _this3._lastOffsetX = value;

        _this3._handlePosition();
      });
      _this3._panXListener = _this3.props.panX.addListener(function (_ref6) {
        var value = _ref6.value;
        _this3._lastPanX = value;

        _this3._handlePosition();
      });
    };

    this._stopTrackingPosition = function () {
      _this3.props.offsetX.removeListener(_this3._offsetXListener);

      _this3.props.panX.removeListener(_this3._panXListener);
    };

    this._handlePosition = function () {
      var _props2 = _this3.props,
          navigationState = _props2.navigationState,
          layout = _props2.layout;

      if (layout.width === 0) {
        return;
      }

      var panX = typeof _this3._lastPanX === 'number' ? _this3._lastPanX : 0;
      var offsetX = typeof _this3._lastOffsetX === 'number' ? _this3._lastOffsetX : -navigationState.index * layout.width;
      var value = (panX + offsetX) / -(layout.width || 0.001);

      _this3._adjustScroll(value);
    };

    this._renderLabel = function (scene) {
      if (typeof _this3.props.renderLabel !== 'undefined') {
        return _this3.props.renderLabel(scene);
      }

      var label = _this3.props.getLabelText(scene);

      if (typeof label !== 'string') {
        return null;
      }

      return React.createElement(
        _reactNative.Animated.Text,
        {
          style: [styles.tabLabel, _this3.props.labelStyle]
        },
        label
      );
    };

    this._renderIndicator = function (props) {
      if (typeof _this3.props.renderIndicator !== 'undefined') {
        return _this3.props.renderIndicator(props);
      }

      var width = props.width,
          position = props.position,
          navigationState = props.navigationState;

      var translateX = _reactNative.Animated.multiply(_reactNative.Animated.multiply(position.interpolate({
        inputRange: [0, navigationState.routes.length - 1],
        outputRange: [0, navigationState.routes.length - 1],
        extrapolate: 'clamp'
      }), width), _reactNative.I18nManager.isRTL ? -1 : 1);

      return React.createElement(_reactNative.Animated.View, {
        style: [styles.indicator, {
          width: width,
          transform: [{
            translateX: translateX
          }]
        }, _this3.props.indicatorStyle]
      });
    };

    this._getTabWidth = function (props) {
      var layout = props.layout,
          navigationState = props.navigationState,
          tabStyle = props.tabStyle;

      var flattened = _reactNative.StyleSheet.flatten(tabStyle);

      if (flattened) {
        switch (typeof flattened.width) {
          case 'number':
            return flattened.width;

          case 'string':
            if (flattened.width.endsWith('%')) {
              var _width = parseFloat(flattened.width);

              if (Number.isFinite(_width)) {
                return layout.width * (_width / 100);
              }
            }

        }
      }

      if (props.scrollEnabled) {
        return layout.width / 5 * 2;
      }

      return layout.width / navigationState.routes.length;
    };

    this._handleTabPress = function (_ref7) {
      var route = _ref7.route;
      _this3._pendingIndex = _this3.props.navigationState.routes.indexOf(route);

      if (_this3.props.onTabPress) {
        _this3.props.onTabPress({
          route: route
        });
      }

      _this3.props.jumpTo(route.key);
    };

    this._normalizeScrollValue = function (props, value) {
      var layout = props.layout,
          navigationState = props.navigationState;

      var tabWidth = _this3._getTabWidth(props);

      var tabBarWidth = Math.max(tabWidth * navigationState.routes.length, layout.width);
      var maxDistance = tabBarWidth - layout.width;
      return Math.max(Math.min(value, maxDistance), 0);
    };

    this._getScrollAmount = function (props, i) {
      var layout = props.layout;

      var tabWidth = _this3._getTabWidth(props);

      var centerDistance = tabWidth * (i + 0.5);
      var scrollAmount = centerDistance - layout.width / 2;
      return _this3._normalizeScrollValue(props, scrollAmount);
    };

    this._adjustScroll = function (value) {
      if (_this3.props.scrollEnabled) {
        global.cancelAnimationFrame(_this3._scrollResetCallback);
        _this3._scrollView && _this3._scrollView.scrollTo({
          x: _this3._normalizeScrollValue(_this3.props, _this3._getScrollAmount(_this3.props, value)),
          animated: !_this3._isIntial
        });
        _this3._isIntial = false;
      }
    };

    this._resetScroll = function (value) {
      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (_this3.props.scrollEnabled) {
        global.cancelAnimationFrame(_this3._scrollResetCallback);
        _this3._scrollResetCallback = global.requestAnimationFrame(function () {
          _this3._scrollView && _this3._scrollView.scrollTo({
            x: _this3._getScrollAmount(_this3.props, value),
            animated: animated
          });
        });
      }
    };

    this._handleBeginDrag = function () {
      _this3._isManualScroll = true;
      _this3._isMomentumScroll = false;
    };

    this._handleEndDrag = function () {
      global.requestAnimationFrame(function () {
        if (_this3._isMomentumScroll) {
          return;
        }

        _this3._isManualScroll = false;
      });
    };

    this._handleMomentumScrollBegin = function () {
      _this3._isMomentumScroll = true;
    };

    this._handleMomentumScrollEnd = function () {
      _this3._isMomentumScroll = false;
      _this3._isManualScroll = false;
    };
  }, _temp);
  exports.default = TabBar;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    scroll: {
      overflow: 'scroll'
    },
    tabBar: {
      backgroundColor: '#2196f3',
      elevation: 4,
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      zIndex: 0
    },
    tabContent: {
      flexDirection: 'row',
      flexWrap: 'nowrap'
    },
    tabLabel: {
      backgroundColor: 'transparent',
      color: 'white',
      margin: 8
    },
    tabItem: {
      flex: 1,
      padding: 8,
      alignItems: 'center',
      justifyContent: 'center'
    },
    badge: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    indicatorContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    indicator: {
      backgroundColor: '#ffeb3b',
      position: 'absolute',
      left: 0,
      bottom: 0,
      right: 0,
      height: 2
    }
  });
},835,[103,121,14,836,837]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var LOLLIPOP = 21;
  var TouchableItem = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      babelHelpers.classCallCheck(this, TouchableItem);
      return babelHelpers.possibleConstructorReturn(this, (TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).apply(this, arguments));
    }

    babelHelpers.createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            pressOpacity = _props.pressOpacity,
            pressColor = _props.pressColor,
            borderless = _props.borderless,
            rest = babelHelpers.objectWithoutProperties(_props, ["style", "pressOpacity", "pressColor", "borderless"]);

        if (_reactNative.Platform.Version >= LOLLIPOP) {
          return React.createElement(
            _reactNative.TouchableNativeFeedback,
            babelHelpers.extends({}, rest, {
              background: _reactNative.TouchableNativeFeedback.Ripple(pressColor, borderless)
            }),
            React.createElement(
              _reactNative.View,
              {
                style: style
              },
              React.Children.only(this.props.children)
            )
          );
        } else {
          return React.createElement(
            _reactNative.TouchableOpacity,
            babelHelpers.extends({}, rest, {
              style: style,
              activeOpacity: pressOpacity
            }),
            this.props.children
          );
        }
      }
    }]);
    return TouchableItem;
  }(React.Component), _class.propTypes = {
    onPress: _propTypes2.default.func.isRequired,
    delayPressIn: _propTypes2.default.number,
    borderless: _propTypes2.default.bool,
    pressColor: _propTypes2.default.string,
    pressOpacity: _propTypes2.default.number,
    children: _propTypes2.default.node.isRequired
  }, _class.defaultProps = {
    pressColor: 'rgba(255, 255, 255, .4)'
  }, _temp);
  exports.default = TouchableItem;
},836,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PagerRendererPropType = exports.SceneRendererPropType = exports.NavigationStatePropType = exports.NavigationRoutePropType = undefined;

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[1]);

  var NavigationRoutePropType = exports.NavigationRoutePropType = _propTypes2.default.shape({
    title: _propTypes2.default.string,
    key: _propTypes2.default.string.isRequired
  });

  var NavigationStatePropType = exports.NavigationStatePropType = _propTypes2.default.shape({
    routes: _propTypes2.default.arrayOf(NavigationRoutePropType).isRequired,
    index: _propTypes2.default.number.isRequired
  });

  var SceneRendererPropType = exports.SceneRendererPropType = {
    panX: _propTypes2.default.object.isRequired,
    offsetX: _propTypes2.default.object.isRequired,
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    position: _propTypes2.default.object.isRequired,
    jumpTo: _propTypes2.default.func.isRequired,
    useNativeDriver: _propTypes2.default.bool
  };
  var PagerRendererPropType = exports.PagerRendererPropType = {
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    panX: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    offsetX: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    canJumpToTab: _propTypes2.default.func.isRequired,
    jumpTo: _propTypes2.default.func.isRequired,
    animationEnabled: _propTypes2.default.bool,
    swipeEnabled: _propTypes2.default.bool,
    useNativeDriver: _propTypes2.default.bool,
    onSwipeStart: _propTypes2.default.func,
    onSwipeEnd: _propTypes2.default.func,
    onAnimationEnd: _propTypes2.default.func,
    children: _propTypes2.default.node.isRequired
  };
},837,[121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var Pager = void 0;

  switch ("android") {
    case 'android':
      Pager = _require(_dependencyMap[1]).default;
      break;

    case 'ios':
      Pager = _require(_dependencyMap[2]).default;
      break;

    default:
      Pager = _require(_dependencyMap[3]).default;
      break;
  }

  exports.default = Pager;
},838,[14,839,840,841]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _PropTypes = _require(_dependencyMap[2]);

  var PagerAndroid = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(PagerAndroid, _React$Component);

    function PagerAndroid(props) {
      babelHelpers.classCallCheck(this, PagerAndroid);

      var _this = babelHelpers.possibleConstructorReturn(this, (PagerAndroid.__proto__ || Object.getPrototypeOf(PagerAndroid)).call(this, props));

      _this._isIdle = true;
      _this._currentIndex = 0;

      _this._getPageIndex = function (index) {
        return _reactNative.I18nManager.isRTL ? _this.props.navigationState.routes.length - (index + 1) : index;
      };

      _this._setPage = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var pager = _this._viewPager;

        if (pager) {
          var page = _this._getPageIndex(index);

          if (_this.props.animationEnabled === false || animated === false) {
            pager.setPageWithoutAnimation(page);
          } else {
            pager.setPage(page);
          }
        }
      };

      _this._handlePageChange = function (index, animated) {
        if (_this._isIdle && _this._currentIndex !== index) {
          _this._setPage(index, animated);

          _this._currentIndex = index;
        }
      };

      _this._handlePageScroll = function (e) {
        _this.props.offsetX.setValue(e.nativeEvent.position * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));

        _this.props.panX.setValue(e.nativeEvent.offset * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));
      };

      _this._handlePageScrollStateChanged = function (e) {
        _this._isIdle = e === 'idle';
        var nextIndex = _this._currentIndex;
        var nextRoute = _this.props.navigationState.routes[nextIndex];

        if (_this.props.canJumpToTab({
          route: nextRoute
        })) {
          _this.props.jumpTo(nextRoute.key);
        } else {
          _this._setPage(_this.props.navigationState.index);

          _this._currentIndex = _this.props.navigationState.index;
        }

        switch (e) {
          case 'dragging':
            _this.props.onSwipeStart && _this.props.onSwipeStart();
            break;

          case 'settling':
            _this.props.onSwipeEnd && _this.props.onSwipeEnd();
            break;

          case 'idle':
            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            break;
        }
      };

      _this._handlePageSelected = function (e) {
        var index = _this._getPageIndex(e.nativeEvent.position);

        _this._currentIndex = index;
      };

      _this._currentIndex = _this.props.navigationState.index;
      return _this;
    }

    babelHelpers.createClass(PagerAndroid, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._handlePageChange(this.props.navigationState.index, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._handlePageChange(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            children = _props.children,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled,
            keyboardDismissMode = _props.keyboardDismissMode;
        var content = React.Children.map(children, function (child, i) {
          var route = navigationState.routes[i];
          var focused = i === navigationState.index;
          return React.createElement(
            _reactNative.View,
            {
              key: route.key,
              testID: _this2.props.getTestID({
                route: route
              }),
              accessibilityElementsHidden: !focused,
              importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
              style: styles.page
            },
            child
          );
        });

        if (_reactNative.I18nManager.isRTL) {
          content.reverse();
        }

        var initialPage = this._getPageIndex(navigationState.index);

        return React.createElement(
          _reactNative.ViewPagerAndroid,
          {
            key: navigationState.routes.length,
            keyboardDismissMode: keyboardDismissMode,
            initialPage: initialPage,
            scrollEnabled: swipeEnabled !== false,
            onPageScroll: this._handlePageScroll,
            onPageScrollStateChanged: this._handlePageScrollStateChanged,
            onPageSelected: this._handlePageSelected,
            style: styles.container,
            ref: function ref(el) {
              return _this2._viewPager = el;
            }
          },
          content
        );
      }
    }]);
    return PagerAndroid;
  }(React.Component), _class.propTypes = _PropTypes.PagerRendererPropType, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    keyboardDismissMode: 'on-drag'
  }, _temp);
  exports.default = PagerAndroid;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexGrow: 1
    },
    page: {
      overflow: 'hidden'
    }
  });
},839,[103,14,837]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _PropTypes = _require(_dependencyMap[2]);

  var PagerScroll = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(PagerScroll, _React$Component);

    function PagerScroll(props) {
      babelHelpers.classCallCheck(this, PagerScroll);

      var _this = babelHelpers.possibleConstructorReturn(this, (PagerScroll.__proto__ || Object.getPrototypeOf(PagerScroll)).call(this, props));

      _initialiseProps.call(_this);

      var _this$props = _this.props,
          navigationState = _this$props.navigationState,
          layout = _this$props.layout;
      _this.state = {
        initialOffset: {
          x: navigationState.index * layout.width,
          y: 0
        }
      };
      return _this;
    }

    babelHelpers.createClass(PagerScroll, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._setInitialPage();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var amount = this.props.navigationState.index * this.props.layout.width;

        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._scrollTo(amount, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._scrollTo(amount);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            children = _props.children,
            layout = _props.layout,
            navigationState = _props.navigationState,
            onSwipeStart = _props.onSwipeStart,
            onSwipeEnd = _props.onSwipeEnd;
        return React.createElement(
          _reactNative.ScrollView,
          {
            horizontal: true,
            pagingEnabled: true,
            directionalLockEnabled: true,
            keyboardDismissMode: "on-drag",
            keyboardShouldPersistTaps: "always",
            overScrollMode: "never",
            scrollEnabled: this.props.swipeEnabled,
            automaticallyAdjustContentInsets: false,
            bounces: false,
            alwaysBounceHorizontal: false,
            scrollsToTop: false,
            showsHorizontalScrollIndicator: false,
            scrollEventThrottle: 1,
            onScroll: this._handleScroll,
            onScrollBeginDrag: onSwipeStart,
            onScrollEndDrag: onSwipeEnd,
            onMomentumScrollEnd: this._handleMomentumScrollEnd,
            contentOffset: this.state.initialOffset,
            style: styles.container,
            contentContainerStyle: layout.width ? null : styles.container,
            ref: function ref(el) {
              return _this2._scrollView = el;
            }
          },
          React.Children.map(children, function (child, i) {
            var route = navigationState.routes[i];
            var focused = i === navigationState.index;
            return React.createElement(
              _reactNative.View,
              {
                key: route.key,
                testID: _this2.props.getTestID({
                  route: route
                }),
                accessibilityElementsHidden: !focused,
                importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
                style: layout.width ? {
                  width: layout.width,
                  overflow: 'hidden'
                } : focused ? styles.page : null
              },
              focused || layout.width ? child : null
            );
          })
        );
      }
    }]);
    return PagerScroll;
  }(React.Component), _class.propTypes = _PropTypes.PagerRendererPropType, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._isIdle = true;
    this._isInitial = true;

    this._setInitialPage = function () {
      if (_this3.props.layout.width) {
        _this3._isInitial = true;

        _this3._scrollTo(_this3.props.navigationState.index * _this3.props.layout.width, false);
      }

      setTimeout(function () {
        _this3._isInitial = false;
      }, 50);
    };

    this._scrollTo = function (x) {
      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (_this3._isIdle && _this3._scrollView) {
        _this3._scrollView.scrollTo({
          x: x,
          animated: animated && _this3.props.animationEnabled !== false
        });
      }
    };

    this._handleMomentumScrollEnd = function (e) {
      var nextIndex = Math.round(e.nativeEvent.contentOffset.x / _this3.props.layout.width);
      var nextRoute = _this3.props.navigationState.routes[nextIndex];

      if (_this3.props.canJumpToTab({
        route: nextRoute
      })) {
        _this3.props.jumpTo(nextRoute.key);

        _this3.props.onAnimationEnd && _this3.props.onAnimationEnd();
      } else {
        global.requestAnimationFrame(function () {
          _this3._scrollTo(_this3.props.navigationState.index * _this3.props.layout.width);
        });
      }
    };

    this._handleScroll = function (e) {
      if (_this3._isInitial || e.nativeEvent.contentSize.width === 0) {
        return;
      }

      var _props2 = _this3.props,
          navigationState = _props2.navigationState,
          layout = _props2.layout;
      var offset = navigationState.index * layout.width;

      _this3.props.offsetX.setValue(-offset);

      _this3.props.panX.setValue(offset - e.nativeEvent.contentOffset.x);

      global.cancelAnimationFrame(_this3._idleCallback);
      _this3._isIdle = false;
      _this3._idleCallback = global.requestAnimationFrame(function () {
        _this3._isIdle = true;
      });
    };
  }, _temp);
  exports.default = PagerScroll;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    page: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},840,[103,14,837]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _PropTypes = _require(_dependencyMap[3]);

  var DEAD_ZONE = 12;
  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 300,
    friction: 35
  };
  var PagerPan = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(PagerPan, _React$Component);

    function PagerPan() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, PagerPan);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = PagerPan.__proto__ || Object.getPrototypeOf(PagerPan)).call.apply(_ref, [this].concat(args))), _this), _this._currentIndex = _this.props.navigationState.index, _this._isMovingHorizontally = function (evt, gestureState) {
        return Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 2) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 2);
      }, _this._canMoveScreen = function (evt, gestureState) {
        if (_this.props.swipeEnabled === false) {
          return false;
        }

        var routes = _this.props.navigationState.routes;
        return _this._isMovingHorizontally(evt, gestureState) && (gestureState.dx >= DEAD_ZONE && _this._currentIndex > 0 || gestureState.dx <= -DEAD_ZONE && _this._currentIndex < routes.length - 1);
      }, _this._startGesture = function () {
        _this.props.onSwipeStart && _this.props.onSwipeStart();

        _this.props.panX.stopAnimation();
      }, _this._respondToGesture = function (evt, gestureState) {
        var _this$props$navigatio = _this.props.navigationState,
            routes = _this$props$navigatio.routes,
            index = _this$props$navigatio.index;

        if (gestureState.dx > 0 && index <= 0 || gestureState.dx < 0 && index >= routes.length - 1) {
          return;
        }

        _this.props.panX.setValue(gestureState.dx);
      }, _this._finishGesture = function (evt, gestureState) {
        var _this$props = _this.props,
            navigationState = _this$props.navigationState,
            layout = _this$props.layout,
            _this$props$swipeDist = _this$props.swipeDistanceThreshold,
            swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist;
        var _this$props$swipeVelo = _this.props.swipeVelocityThreshold,
            swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 0.15 : _this$props$swipeVelo;
        _this.props.onSwipeEnd && _this.props.onSwipeEnd();
        {
          swipeVelocityThreshold /= 1000000;
        }
        var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : _this._currentIndex;
        var nextIndex = currentIndex;

        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy) && (Math.abs(gestureState.dx) > swipeDistanceThreshold || Math.abs(gestureState.vx) > swipeVelocityThreshold)) {
          nextIndex = Math.round(Math.min(Math.max(0, currentIndex - gestureState.dx / Math.abs(gestureState.dx)), navigationState.routes.length - 1));
          _this._currentIndex = nextIndex;
        }

        if (!isFinite(nextIndex) || !_this.props.canJumpToTab({
          route: _this.props.navigationState.routes[nextIndex]
        })) {
          nextIndex = currentIndex;
        }

        _this._transitionTo(nextIndex);
      }, _this._transitionTo = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false || animated === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = babelHelpers.objectWithoutProperties(DefaultTransitionSpec, ["timing"]);

        _reactNative.Animated.parallel([timing(_this.props.panX, babelHelpers.extends({}, transitionConfig, {
          toValue: 0
        })), timing(_this.props.offsetX, babelHelpers.extends({}, transitionConfig, {
          toValue: offset
        }))]).start(function (_ref2) {
          var finished = _ref2.finished;

          if (finished) {
            var route = _this.props.navigationState.routes[index];

            _this.props.jumpTo(route.key);

            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      }, _this._panResponder = _reactNative.PanResponder.create({
        onMoveShouldSetPanResponder: _this._canMoveScreen,
        onMoveShouldSetPanResponderCapture: _this._canMoveScreen,
        onPanResponderGrant: _this._startGesture,
        onPanResponderMove: _this._respondToGesture,
        onPanResponderTerminate: _this._finishGesture,
        onPanResponderRelease: _this._finishGesture,
        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
          return true;
        }
      }), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(PagerPan, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        this._currentIndex = this.props.navigationState.index;

        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._transitionTo(this.props.navigationState.index, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            panX = _props.panX,
            offsetX = _props.offsetX,
            navigationState = _props.navigationState,
            layout = _props.layout,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.multiply(_reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        }), _reactNative.I18nManager.isRTL ? -1 : 1);

        return React.createElement(
          _reactNative.Animated.View,
          babelHelpers.extends({
            style: [styles.sheet, width ? {
              width: routes.length * width,
              transform: [{
                translateX: translateX
              }]
            } : null]
          }, this._panResponder.panHandlers),
          React.Children.map(children, function (child, i) {
            var route = navigationState.routes[i];
            var focused = i === navigationState.index;
            return React.createElement(
              _reactNative.View,
              {
                key: route.key,
                testID: _this2.props.getTestID({
                  route: route
                }),
                style: width ? {
                  width: width
                } : focused ? _reactNative.StyleSheet.absoluteFill : null
              },
              focused || width ? child : null
            );
          })
        );
      }
    }]);
    return PagerPan;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _PropTypes.PagerRendererPropType, {
    swipeDistanceThreshold: _propTypes2.default.number,
    swipeVelocityThreshold: _propTypes2.default.number
  }), _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    initialLayout: {
      height: 0,
      width: 0
    }
  }, _temp2);
  exports.default = PagerPan;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},841,[103,121,14,837]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _PropTypes = _require(_dependencyMap[3]);

  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 68,
    friction: 12
  };
  var PagerExperimental = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(PagerExperimental, _React$Component);

    function PagerExperimental() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, PagerExperimental);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = PagerExperimental.__proto__ || Object.getPrototypeOf(PagerExperimental)).call.apply(_ref, [this].concat(args))), _this), _this._handleHandlerStateChange = function (event) {
        var GestureHandler = _this.props.GestureHandler;

        if (event.nativeEvent.state === GestureHandler.State.BEGIN) {
          _this.props.onSwipeStart && _this.props.onSwipeStart();
        } else if (event.nativeEvent.state === GestureHandler.State.END) {
          _this.props.onSwipeEnd && _this.props.onSwipeEnd();

          var _this$props = _this.props,
              navigationState = _this$props.navigationState,
              layout = _this$props.layout,
              _this$props$swipeDist = _this$props.swipeDistanceThreshold,
              _swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist,
              _this$props$swipeVelo = _this$props.swipeVelocityThreshold,
              _swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 150 : _this$props$swipeVelo;

          var _event$nativeEvent = event.nativeEvent,
              translationX = _event$nativeEvent.translationX,
              translationY = _event$nativeEvent.translationY,
              velocityX = _event$nativeEvent.velocityX,
              velocityY = _event$nativeEvent.velocityY;
          var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : navigationState.index;
          var nextIndex = currentIndex;

          if (Math.abs(translationX) > Math.abs(translationY) && Math.abs(velocityX) > Math.abs(velocityY) && (Math.abs(translationX) > _swipeDistanceThreshold || Math.abs(velocityX) > _swipeVelocityThreshold)) {
            nextIndex = Math.round(Math.min(Math.max(0, currentIndex - translationX / Math.abs(translationX)), navigationState.routes.length - 1));
          }

          if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
            nextIndex = currentIndex;
          }

          _this._transitionTo(nextIndex, velocityX);
        }
      }, _this._transitionTo = function (index, velocity) {
        var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false || animated === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = babelHelpers.objectWithoutProperties(DefaultTransitionSpec, ["timing"]);
        var useNativeDriver = _this.props.useNativeDriver;

        _reactNative.Animated.parallel([timing(_this.props.panX, babelHelpers.extends({}, transitionConfig, {
          toValue: 0,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        })), timing(_this.props.offsetX, babelHelpers.extends({}, transitionConfig, {
          toValue: offset,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        }))]).start(function (_ref2) {
          var finished = _ref2.finished;

          if (finished) {
            var route = _this.props.navigationState.routes[index];

            _this.props.jumpTo(route.key);

            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(PagerExperimental, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._transitionTo(this.props.navigationState.index, undefined, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index && this.props.navigationState.index !== this._pendingIndex) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            GestureHandler = _props.GestureHandler,
            panX = _props.panX,
            offsetX = _props.offsetX,
            layout = _props.layout,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        });

        return React.createElement(
          GestureHandler.PanGestureHandler,
          {
            enabled: layout.width !== 0 && swipeEnabled !== false,
            minDeltaX: 10,
            onGestureEvent: _reactNative.Animated.event([{
              nativeEvent: {
                translationX: this.props.panX
              }
            }], {
              useNativeDriver: this.props.useNativeDriver
            }),
            onHandlerStateChange: this._handleHandlerStateChange
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.sheet, width ? {
                width: routes.length * width,
                transform: [{
                  translateX: translateX
                }]
              } : null]
            },
            React.Children.map(children, function (child, i) {
              var route = navigationState.routes[i];
              var focused = i === navigationState.index;
              return React.createElement(
                _reactNative.View,
                {
                  key: route.key,
                  testID: _this2.props.getTestID({
                    route: route
                  }),
                  accessibilityElementsHidden: !focused,
                  importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
                  style: width ? {
                    width: width
                  } : focused ? _reactNative.StyleSheet.absoluteFill : null
                },
                focused || width ? child : null
              );
            })
          )
        );
      }
    }]);
    return PagerExperimental;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _PropTypes.PagerRendererPropType, {
    swipeDistanceThreshold: _propTypes2.default.number,
    swipeVelocityThreshold: _propTypes2.default.number,
    GestureHandler: _propTypes2.default.object
  }), _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  }, _temp2);
  exports.default = PagerExperimental;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},842,[103,121,14,837]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = SceneMap;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var SceneComponent = function (_React$PureComponent) {
    babelHelpers.inherits(SceneComponent, _React$PureComponent);

    function SceneComponent() {
      babelHelpers.classCallCheck(this, SceneComponent);
      return babelHelpers.possibleConstructorReturn(this, (SceneComponent.__proto__ || Object.getPrototypeOf(SceneComponent)).apply(this, arguments));
    }

    babelHelpers.createClass(SceneComponent, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            component = _props.component,
            rest = babelHelpers.objectWithoutProperties(_props, ["component"]);
        return React.createElement(component, rest);
      }
    }]);
    return SceneComponent;
  }(React.PureComponent);

  function SceneMap(scenes) {
    return function (_ref) {
      var route = _ref.route,
          jumpTo = _ref.jumpTo;
      return React.createElement(SceneComponent, {
        key: route.key,
        component: scenes[route.key],
        route: route,
        jumpTo: jumpTo
      });
    };
  }
},843,[103]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeTabView = _require(_dependencyMap[2]);

  var _CrossFadeIcon = _require(_dependencyMap[3]);

  var _CrossFadeIcon2 = babelHelpers.interopRequireDefault(_CrossFadeIcon);

  var TabBarTop = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarTop, _React$PureComponent);

    function TabBarTop() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabBarTop);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarTop.__proto__ || Object.getPrototypeOf(TabBarTop)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (_ref2) {
        var route = _ref2.route;
        var _this$props = _this.props,
            position = _this$props.position,
            navigation = _this$props.navigation,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            showLabel = _this$props.showLabel,
            upperCaseLabel = _this$props.upperCaseLabel,
            labelStyle = _this$props.labelStyle,
            allowFontScaling = _this$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var routes = navigation.state.routes;
        var index = routes.indexOf(route);
        var focused = index === navigation.state.index;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (inputIndex) {
          return inputIndex === index ? activeTintColor : inactiveTintColor;
        });
        var color = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var tintColor = focused ? activeTintColor : inactiveTintColor;

        var label = _this.props.getLabelText({
          route: route
        });

        if (typeof label === 'string') {
          return React.createElement(
            _reactNative.Animated.Text,
            {
              style: [styles.label, {
                color: color
              }, labelStyle],
              allowFontScaling: allowFontScaling
            },
            upperCaseLabel ? label.toUpperCase() : label
          );
        }

        if (typeof label === 'function') {
          return label({
            focused: focused,
            tintColor: tintColor
          });
        }

        return label;
      }, _this._renderIcon = function (_ref3) {
        var route = _ref3.route;
        var _this$props2 = _this.props,
            position = _this$props2.position,
            navigation = _this$props2.navigation,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            renderIcon = _this$props2.renderIcon,
            showIcon = _this$props2.showIcon,
            iconStyle = _this$props2.iconStyle;

        if (showIcon === false) {
          return null;
        }

        var index = navigation.state.routes.indexOf(route);
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(navigation.state.routes.map(function (x, i) {
          return i;
        })));
        var activeOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 1 : 0;
          })
        });
        var inactiveOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 0 : 1;
          })
        });
        return React.createElement(_CrossFadeIcon2.default, {
          route: route,
          navigation: navigation,
          activeOpacity: activeOpacity,
          inactiveOpacity: inactiveOpacity,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          style: [styles.icon, iconStyle]
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabBarTop, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            navigation = _props.navigation,
            renderIcon = _props.renderIcon,
            getLabelText = _props.getLabelText,
            rest = babelHelpers.objectWithoutProperties(_props, ["navigation", "renderIcon", "getLabelText"]);
        return React.createElement(_reactNativeTabView.TabBar, babelHelpers.extends({}, rest, {
          navigationState: navigation.state,
          renderIcon: this._renderIcon,
          renderLabel: this._renderLabel
        }));
      }
    }]);
    return TabBarTop;
  }(React.PureComponent), _class.defaultProps = {
    activeTintColor: '#fff',
    inactiveTintColor: '#fff',
    showIcon: false,
    showLabel: true,
    upperCaseLabel: true,
    allowFontScaling: true
  }, _temp2);
  exports.default = TabBarTop;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      height: 24,
      width: 24
    },
    label: {
      textAlign: 'center',
      fontSize: 13,
      margin: 8,
      backgroundColor: 'transparent'
    }
  });
},844,[103,14,833,828]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _NavigationActions = _require(_dependencyMap[0]);

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _StackActions = _require(_dependencyMap[1]);

  var _StackActions2 = babelHelpers.interopRequireDefault(_StackActions);

  var _createConfigGetter = _require(_dependencyMap[2]);

  var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

  var _getScreenForRouteName = _require(_dependencyMap[3]);

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _StateUtils = _require(_dependencyMap[4]);

  var _StateUtils2 = babelHelpers.interopRequireDefault(_StateUtils);

  var _validateRouteConfigMap = _require(_dependencyMap[5]);

  var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

  var _invariant = _require(_dependencyMap[6]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _KeyGenerator = _require(_dependencyMap[7]);

  var _pathUtils = _require(_dependencyMap[8]);

  function behavesLikePushAction(action) {
    return action.type === _NavigationActions2.default.NAVIGATE || action.type === _StackActions2.default.PUSH;
  }

  var defaultActionCreators = function defaultActionCreators(route, navStateKey) {
    return {};
  };

  function isResetToRootStack(action) {
    return action.type === _StackActions2.default.RESET && action.key === null;
  }

  exports.default = function (routeConfigs) {
    var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap2.default)(routeConfigs);
    var childRouters = {};
    var routeNames = Object.keys(routeConfigs);
    routeNames.forEach(function (routeName) {
      var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);

      if (screen && screen.router) {
        childRouters[routeName] = screen.router;
      } else {
        childRouters[routeName] = null;
      }
    });
    var initialRouteParams = stackConfig.initialRouteParams;
    var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;
    var initialRouteName = stackConfig.initialRouteName || routeNames[0];
    var initialChildRouter = childRouters[initialRouteName];

    function getInitialState(action) {
      var route = {};
      var childRouter = childRouters[action.routeName];

      if (behavesLikePushAction(action) && childRouter !== undefined) {
        var childState = {};

        if (childRouter !== null) {
          var childAction = action.action || _NavigationActions2.default.init({
            params: action.params
          });

          childState = childRouter.getStateForAction(childAction);
        }

        return {
          key: 'StackRouterRoot',
          isTransitioning: false,
          index: 0,
          routes: [babelHelpers.extends({
            params: action.params
          }, childState, {
            key: action.key || (0, _KeyGenerator.generateKey)(),
            routeName: action.routeName
          })]
        };
      }

      if (initialChildRouter) {
        route = initialChildRouter.getStateForAction(_NavigationActions2.default.navigate({
          routeName: initialRouteName,
          params: initialRouteParams
        }));
      }

      var params = (route.params || action.params || initialRouteParams) && babelHelpers.extends({}, route.params || {}, action.params || {}, initialRouteParams || {});
      var initialRouteKey = stackConfig.initialRouteKey;
      route = babelHelpers.extends({}, route, params ? {
        params: params
      } : {}, {
        routeName: initialRouteName,
        key: action.key || initialRouteKey || (0, _KeyGenerator.generateKey)()
      });
      return {
        key: 'StackRouterRoot',
        isTransitioning: false,
        index: 0,
        routes: [route]
      };
    }

    var _createPathParser = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, stackConfig),
        getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,
        _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;

    return {
      childRouters: childRouters,
      getComponentForState: function getComponentForState(state) {
        var activeChildRoute = state.routes[state.index];
        var routeName = activeChildRoute.routeName;

        if (childRouters[routeName]) {
          return childRouters[routeName].getComponentForState(activeChildRoute);
        }

        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getActionCreators: function getActionCreators(route, navStateKey) {
        return babelHelpers.extends({}, getCustomActionCreators(route, navStateKey), {
          pop: function pop(n, params) {
            return _StackActions2.default.pop(babelHelpers.extends({
              n: n
            }, params));
          },
          popToTop: function popToTop(params) {
            return _StackActions2.default.popToTop(params);
          },
          push: function push(routeName, params, action) {
            return _StackActions2.default.push({
              routeName: routeName,
              params: params,
              action: action
            });
          },
          replace: function replace(replaceWith, params, action, newKey) {
            if (typeof replaceWith === 'string') {
              return _StackActions2.default.replace({
                routeName: replaceWith,
                params: params,
                action: action,
                key: route.key,
                newKey: newKey
              });
            }

            (0, _invariant2.default)(typeof replaceWith === 'object', 'Must replaceWith an object or a string');
            (0, _invariant2.default)(params == null, 'Params must not be provided to .replace() when specifying an object');
            (0, _invariant2.default)(action == null, 'Child action must not be provided to .replace() when specifying an object');
            (0, _invariant2.default)(newKey == null, 'Child action must not be provided to .replace() when specifying an object');
            return _StackActions2.default.replace(replaceWith);
          },
          reset: function reset(actions, index) {
            return _StackActions2.default.reset({
              actions: actions,
              index: index == null ? actions.length - 1 : index,
              key: navStateKey
            });
          },
          dismiss: function dismiss() {
            return _NavigationActions2.default.back({
              key: navStateKey
            });
          }
        });
      },
      getStateForAction: function getStateForAction(action, state) {
        if (!state) {
          return getInitialState(action);
        }

        var activeChildRoute = state.routes[state.index];

        if (!isResetToRootStack(action) && action.type !== _NavigationActions2.default.NAVIGATE) {
          var activeChildRouter = childRouters[activeChildRoute.routeName];

          if (activeChildRouter) {
            var route = activeChildRouter.getStateForAction(action, activeChildRoute);

            if (route !== null && route !== activeChildRoute) {
              return _StateUtils2.default.replaceAt(state, activeChildRoute.key, route, action.type === _NavigationActions2.default.SET_PARAMS);
            }
          }
        } else if (action.type === _NavigationActions2.default.NAVIGATE) {
          for (var _iterator = state.routes.slice().reverse(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var childRoute = _ref;
            var childRouter = childRouters[childRoute.routeName];
            var childAction = action.routeName === childRoute.routeName && action.action ? action.action : action;

            if (childRouter) {
              var nextRouteState = childRouter.getStateForAction(childAction, childRoute);

              if (nextRouteState === null || nextRouteState !== childRoute) {
                var newState = _StateUtils2.default.replaceAndPrune(state, nextRouteState ? nextRouteState.key : childRoute.key, nextRouteState ? nextRouteState : childRoute);

                return babelHelpers.extends({}, newState, {
                  isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning
                });
              }
            }
          }
        }

        if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {
          var _childRouter = childRouters[action.routeName];

          var _route = void 0;

          (0, _invariant2.default)(action.type !== _StackActions2.default.PUSH || action.key == null, 'StackRouter does not support key on the push action');
          var lastRouteIndex = state.routes.findIndex(function (r) {
            if (action.key) {
              return r.key === action.key;
            } else {
              return r.routeName === action.routeName;
            }
          });

          if (action.type !== _StackActions2.default.PUSH && lastRouteIndex !== -1) {
            if (state.index === lastRouteIndex && !action.params) {
              return null;
            }

            var routes = state.routes.slice(0, lastRouteIndex + 1);

            if (action.params) {
              var _route2 = state.routes[lastRouteIndex];
              routes[lastRouteIndex] = babelHelpers.extends({}, _route2, {
                params: babelHelpers.extends({}, _route2.params, action.params)
              });
            }

            return babelHelpers.extends({}, state, {
              isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,
              index: lastRouteIndex,
              routes: routes
            });
          }

          if (_childRouter) {
            var _childAction = action.action || _NavigationActions2.default.init({
              params: action.params
            });

            _route = babelHelpers.extends({
              params: action.params
            }, _childRouter.getStateForAction(_childAction), {
              routeName: action.routeName,
              key: action.key || (0, _KeyGenerator.generateKey)()
            });
          } else {
            _route = {
              params: action.params,
              routeName: action.routeName,
              key: action.key || (0, _KeyGenerator.generateKey)()
            };
          }

          return babelHelpers.extends({}, _StateUtils2.default.push(state, _route), {
            isTransitioning: action.immediate !== true
          });
        } else if (action.type === _StackActions2.default.PUSH && childRouters[action.routeName] === undefined) {
          return state;
        }

        if (behavesLikePushAction(action)) {
          var childRouterNames = Object.keys(childRouters);

          for (var i = 0; i < childRouterNames.length; i++) {
            var childRouterName = childRouterNames[i];
            var _childRouter2 = childRouters[childRouterName];

            if (_childRouter2) {
              var initChildRoute = _childRouter2.getStateForAction(_NavigationActions2.default.init());

              var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);

              var routeToPush = null;

              if (navigatedChildRoute === null) {
                routeToPush = initChildRoute;
              } else if (navigatedChildRoute !== initChildRoute) {
                routeToPush = navigatedChildRoute;
              }

              if (routeToPush) {
                var _route3 = babelHelpers.extends({}, routeToPush, {
                  routeName: childRouterName,
                  key: action.key || (0, _KeyGenerator.generateKey)()
                });

                return babelHelpers.extends({}, _StateUtils2.default.push(state, _route3), {
                  isTransitioning: action.immediate !== true
                });
              }
            }
          }
        }

        if (action.type === _StackActions2.default.POP_TO_TOP) {
          if (action.key && state.key !== action.key) {
            return state;
          }

          if (state.index > 0) {
            return babelHelpers.extends({}, state, {
              isTransitioning: action.immediate !== true,
              index: 0,
              routes: [state.routes[0]]
            });
          }

          return state;
        }

        if (action.type === _StackActions2.default.REPLACE) {
          var routeIndex = void 0;

          if (action.key === undefined && state.routes.length) {
            routeIndex = state.routes.length - 1;
          } else {
            routeIndex = state.routes.findIndex(function (r) {
              return r.key === action.key;
            });
          }

          if (routeIndex !== -1) {
            var _childRouter3 = childRouters[action.routeName];
            var childState = {};

            if (_childRouter3) {
              var _childAction2 = action.action || _NavigationActions2.default.init({
                params: action.params
              });

              childState = _childRouter3.getStateForAction(_childAction2);
            }

            var _routes = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes[routeIndex] = babelHelpers.extends({
              params: action.params
            }, childState, {
              routeName: action.routeName,
              key: action.newKey || (0, _KeyGenerator.generateKey)()
            });
            return babelHelpers.extends({}, state, {
              routes: _routes
            });
          }
        }

        if (action.type === _StackActions2.default.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && state.isTransitioning) {
          return babelHelpers.extends({}, state, {
            isTransitioning: false
          });
        }

        if (action.type === _NavigationActions2.default.SET_PARAMS) {
          var key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === key;
          });

          if (lastRoute) {
            var params = babelHelpers.extends({}, lastRoute.params, action.params);

            var _routes2 = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes2[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
              params: params
            });
            return babelHelpers.extends({}, state, {
              routes: _routes2
            });
          }
        }

        if (action.type === _StackActions2.default.RESET) {
          if (action.key != null && action.key != state.key) {
            return state;
          }

          var newStackActions = action.actions;
          return babelHelpers.extends({}, state, {
            routes: newStackActions.map(function (newStackAction) {
              var router = childRouters[newStackAction.routeName];
              var childState = {};

              if (router) {
                var _childAction3 = newStackAction.action || _NavigationActions2.default.init({
                  params: newStackAction.params
                });

                childState = router.getStateForAction(_childAction3);
              }

              return babelHelpers.extends({
                params: newStackAction.params
              }, childState, {
                routeName: newStackAction.routeName,
                key: newStackAction.key || (0, _KeyGenerator.generateKey)()
              });
            }),
            index: action.index
          });
        }

        if (action.type === _NavigationActions2.default.BACK || action.type === _StackActions2.default.POP) {
          var _key = action.key,
              n = action.n,
              immediate = action.immediate;
          var backRouteIndex = state.index;

          if (action.type === _StackActions2.default.POP && n != null) {
            backRouteIndex = Math.max(1, state.index - n + 1);
          } else if (_key) {
            var backRoute = state.routes.find(function (route) {
              return route.key === _key;
            });
            backRouteIndex = state.routes.indexOf(backRoute);
          }

          if (backRouteIndex > 0) {
            return babelHelpers.extends({}, state, {
              routes: state.routes.slice(0, backRouteIndex),
              index: backRouteIndex - 1,
              isTransitioning: immediate !== true
            });
          }
        }

        var keyIndex = action.key ? _StateUtils2.default.indexOf(state, action.key) : -1;

        for (var _iterator2 = state.routes.slice().reverse(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var _childRoute = _ref2;

          if (_childRoute.key === activeChildRoute.key) {
            continue;
          }

          if (keyIndex >= 0 && _childRoute.key !== action.key) {
            continue;
          }

          var _childRouter4 = childRouters[_childRoute.routeName];

          if (_childRouter4) {
            var _route4 = _childRouter4.getStateForAction(action, _childRoute);

            if (_route4 === null) {
              return state;
            } else if (_route4 && _route4 !== _childRoute) {
              return _StateUtils2.default.replaceAt(state, _childRoute.key, _route4, action.type === _NavigationActions2.default.SET_PARAMS || action.type === _StackActions2.default.COMPLETE_TRANSITION);
            }
          }
        }

        return state;
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        return getPathAndParamsForRoute(route);
      },
      getActionForPathAndParams: function getActionForPathAndParams(path, params) {
        return _getActionForPathAndParams(path, params);
      },
      getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, stackConfig.navigationOptions)
    };
  };
},845,[738,792,790,787,752,793,741,846,746]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._TESTING_ONLY_normalize_keys = _TESTING_ONLY_normalize_keys;
  exports.generateKey = generateKey;
  var uniqueBaseId = "id-" + Date.now();
  var uuidCount = 0;

  function _TESTING_ONLY_normalize_keys() {
    uniqueBaseId = 'id';
    uuidCount = 0;
  }

  function generateKey() {
    return uniqueBaseId + "-" + uuidCount++;
  }
},846,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _SwitchRouter = _require(_dependencyMap[0]);

  var _SwitchRouter2 = babelHelpers.interopRequireDefault(_SwitchRouter);

  var _withDefaultValue = _require(_dependencyMap[1]);

  var _withDefaultValue2 = babelHelpers.interopRequireDefault(_withDefaultValue);

  exports.default = function (routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    config = babelHelpers.extends({}, config);
    config = (0, _withDefaultValue2.default)(config, 'resetOnBlur', false);
    config = (0, _withDefaultValue2.default)(config, 'backBehavior', 'initialRoute');
    var switchRouter = (0, _SwitchRouter2.default)(routeConfigs, config);
    return switchRouter;
  };
},847,[786,848]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (obj, key, defaultValue) {
    if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {
      return obj;
    }

    obj[key] = defaultValue;
    return obj;
  };
},848,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var getActiveChildNavigationOptions = function getActiveChildNavigationOptions(navigation, screenProps) {
    var state = navigation.state,
        router = navigation.router,
        getChildNavigation = navigation.getChildNavigation;
    var activeRoute = state.routes[state.index];
    var activeNavigation = getChildNavigation(activeRoute.key);
    var options = router.getScreenOptions(activeNavigation, screenProps);
    return options;
  };

  exports.default = getActiveChildNavigationOptions;
},849,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.withSafeArea = undefined;

  var _class, _temp2, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _hoistNonReactStatics = _require(_dependencyMap[2]);

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var _withOrientation = _require(_dependencyMap[3]);

  var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

  var X_WIDTH = 375;
  var X_HEIGHT = 812;
  var XSMAX_WIDTH = 414;
  var XSMAX_HEIGHT = 896;
  var PAD_WIDTH = 768;
  var PAD_HEIGHT = 1024;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      D_HEIGHT = _Dimensions$get.height,
      D_WIDTH = _Dimensions$get.width;

  var _NativeModules$Platfo = _reactNative.NativeModules.PlatformConstants,
      PlatformConstants = _NativeModules$Platfo === undefined ? {} : _NativeModules$Platfo;

  var _ref = PlatformConstants.reactNativeVersion || {},
      _ref$minor = _ref.minor,
      minor = _ref$minor === undefined ? 0 : _ref$minor;

  var isIPhoneX = function () {
    return D_HEIGHT === XSMAX_HEIGHT && D_WIDTH === XSMAX_WIDTH || D_HEIGHT === XSMAX_WIDTH && D_WIDTH === XSMAX_HEIGHT;
  }();

  var isIPad = function () {
    return false;

    if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {
      return false;
    }

    if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {
      return false;
    }

    return true;
  }();

  var _customStatusBarHeight = null;

  var statusBarHeight = function statusBarHeight(isLandscape) {
    if (_customStatusBarHeight !== null) {
      return _customStatusBarHeight;
    }

    {
      if (global.Expo) {
        return global.Expo.Constants.statusBarHeight;
      } else {
        return 0;
      }
    }

    if (isIPhoneX) {
      return isLandscape ? 0 : 44;
    }

    if (isIPad) {
      return 20;
    }

    return isLandscape ? 0 : 20;
  };

  var doubleFromPercentString = function doubleFromPercentString(percent) {
    if (!percent.includes('%')) {
      return 0;
    }

    var dbl = parseFloat(percent) / 100;
    if (isNaN(dbl)) return 0;
    return dbl;
  };

  var SafeView = (_temp2 = _class = function (_Component) {
    babelHelpers.inherits(SafeView, _Component);

    function SafeView() {
      var _ref2;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, SafeView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref2 = SafeView.__proto__ || Object.getPrototypeOf(SafeView)).call.apply(_ref2, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(SafeView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this._isMounted = true;

        _reactNative.InteractionManager.runAfterInteractions(function () {
          _this2._onLayout();
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps() {
        this._onLayout();
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _props = this.props,
            _props$forceInset = _props.forceInset,
            forceInset = _props$forceInset === undefined ? false : _props$forceInset,
            isLandscape = _props.isLandscape,
            style = _props.style,
            props = babelHelpers.objectWithoutProperties(_props, ["forceInset", "isLandscape", "style"]);

        var safeAreaStyle = this._getSafeAreaStyle();

        return _react2.default.createElement(_reactNative.Animated.View, babelHelpers.extends({
          ref: function ref(c) {
            return _this3.view = c;
          },
          pointerEvents: "box-none"
        }, props, {
          onLayout: this._onLayout,
          style: safeAreaStyle
        }));
      }
    }]);
    return SafeView;
  }(_react.Component), _class.setStatusBarHeight = function (height) {
    _customStatusBarHeight = height;
  }, _initialiseProps = function _initialiseProps() {
    var _this4 = this;

    this.state = {
      touchesTop: true,
      touchesBottom: true,
      touchesLeft: true,
      touchesRight: true,
      orientation: null,
      viewWidth: 0,
      viewHeight: 0
    };

    this._onLayout = function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (!_this4._isMounted) return;
      if (!_this4.view) return;
      var isLandscape = _this4.props.isLandscape;
      var orientation = _this4.state.orientation;
      var newOrientation = isLandscape ? 'landscape' : 'portrait';

      if (orientation && orientation === newOrientation) {
        return;
      }

      var WIDTH = isLandscape ? X_HEIGHT : X_WIDTH;
      var HEIGHT = isLandscape ? X_WIDTH : X_HEIGHT;

      _this4.view._component.measureInWindow(function (winX, winY, winWidth, winHeight) {
        var _props2;

        if (!_this4.view) {
          return;
        }

        var realY = winY;
        var realX = winX;

        if (realY >= HEIGHT) {
          realY = realY % HEIGHT;
        } else if (realY < 0) {
          realY = realY % HEIGHT + HEIGHT;
        }

        if (realX >= WIDTH) {
          realX = realX % WIDTH;
        } else if (realX < 0) {
          realX = realX % WIDTH + WIDTH;
        }

        var touchesTop = realY === 0;
        var touchesBottom = realY + winHeight >= HEIGHT;
        var touchesLeft = realX === 0;
        var touchesRight = realX + winWidth >= WIDTH;

        _this4.setState({
          touchesTop: touchesTop,
          touchesBottom: touchesBottom,
          touchesLeft: touchesLeft,
          touchesRight: touchesRight,
          orientation: newOrientation,
          viewWidth: winWidth,
          viewHeight: winHeight
        });

        if (_this4.props.onLayout) (_props2 = _this4.props).onLayout.apply(_props2, args);
      });
    };

    this._getSafeAreaStyle = function () {
      var _state = _this4.state,
          touchesTop = _state.touchesTop,
          touchesBottom = _state.touchesBottom,
          touchesLeft = _state.touchesLeft,
          touchesRight = _state.touchesRight;
      var _props3 = _this4.props,
          forceInset = _props3.forceInset,
          isLandscape = _props3.isLandscape;

      var _getViewStyles = _this4._getViewStyles(),
          paddingTop = _getViewStyles.paddingTop,
          paddingBottom = _getViewStyles.paddingBottom,
          paddingLeft = _getViewStyles.paddingLeft,
          paddingRight = _getViewStyles.paddingRight,
          viewStyle = _getViewStyles.viewStyle;

      var style = babelHelpers.extends({}, viewStyle, {
        paddingTop: touchesTop ? _this4._getInset('top') : 0,
        paddingBottom: touchesBottom ? _this4._getInset('bottom') : 0,
        paddingLeft: touchesLeft ? _this4._getInset('left') : 0,
        paddingRight: touchesRight ? _this4._getInset('right') : 0
      });

      if (forceInset) {
        Object.keys(forceInset).forEach(function (key) {
          var inset = forceInset[key];

          if (inset === 'always') {
            inset = _this4._getInset(key);
          }

          if (inset === 'never') {
            inset = 0;
          }

          switch (key) {
            case 'horizontal':
              {
                style.paddingLeft = inset;
                style.paddingRight = inset;
                break;
              }

            case 'vertical':
              {
                style.paddingTop = inset;
                style.paddingBottom = inset;
                break;
              }

            case 'left':
            case 'right':
            case 'top':
            case 'bottom':
              {
                var padding = "padding" + key[0].toUpperCase() + key.slice(1);
                style[padding] = inset;
                break;
              }
          }
        });
      }

      if (style.height && typeof style.height === 'number') {
        style.height += style.paddingTop + style.paddingBottom;
      }

      if (style.width && typeof style.width === 'number') {
        style.width += style.paddingLeft + style.paddingRight;
      }

      style.paddingTop = Math.max(style.paddingTop, paddingTop);
      style.paddingBottom = Math.max(style.paddingBottom, paddingBottom);
      style.paddingLeft = Math.max(style.paddingLeft, paddingLeft);
      style.paddingRight = Math.max(style.paddingRight, paddingRight);
      return style;
    };

    this._getViewStyles = function () {
      var viewWidth = _this4.state.viewWidth;

      var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(_this4.props.style || {}),
          _StyleSheet$flatten$p = _StyleSheet$flatten.padding,
          padding = _StyleSheet$flatten$p === undefined ? 0 : _StyleSheet$flatten$p,
          _StyleSheet$flatten$p2 = _StyleSheet$flatten.paddingVertical,
          paddingVertical = _StyleSheet$flatten$p2 === undefined ? padding : _StyleSheet$flatten$p2,
          _StyleSheet$flatten$p3 = _StyleSheet$flatten.paddingHorizontal,
          paddingHorizontal = _StyleSheet$flatten$p3 === undefined ? padding : _StyleSheet$flatten$p3,
          _StyleSheet$flatten$p4 = _StyleSheet$flatten.paddingTop,
          paddingTop = _StyleSheet$flatten$p4 === undefined ? paddingVertical : _StyleSheet$flatten$p4,
          _StyleSheet$flatten$p5 = _StyleSheet$flatten.paddingBottom,
          paddingBottom = _StyleSheet$flatten$p5 === undefined ? paddingVertical : _StyleSheet$flatten$p5,
          _StyleSheet$flatten$p6 = _StyleSheet$flatten.paddingLeft,
          paddingLeft = _StyleSheet$flatten$p6 === undefined ? paddingHorizontal : _StyleSheet$flatten$p6,
          _StyleSheet$flatten$p7 = _StyleSheet$flatten.paddingRight,
          paddingRight = _StyleSheet$flatten$p7 === undefined ? paddingHorizontal : _StyleSheet$flatten$p7,
          viewStyle = babelHelpers.objectWithoutProperties(_StyleSheet$flatten, ["padding", "paddingVertical", "paddingHorizontal", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight"]);

      if (typeof paddingTop !== 'number') {
        paddingTop = doubleFromPercentString(paddingTop) * viewWidth;
      }

      if (typeof paddingBottom !== 'number') {
        paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;
      }

      if (typeof paddingLeft !== 'number') {
        paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;
      }

      if (typeof paddingRight !== 'number') {
        paddingRight = doubleFromPercentString(paddingRight) * viewWidth;
      }

      return {
        paddingTop: paddingTop,
        paddingBottom: paddingBottom,
        paddingLeft: paddingLeft,
        paddingRight: paddingRight,
        viewStyle: viewStyle
      };
    };

    this._getInset = function (key) {
      var isLandscape = _this4.props.isLandscape;

      switch (key) {
        case 'horizontal':
        case 'right':
        case 'left':
          {
            return isLandscape ? isIPhoneX ? 44 : 0 : 0;
          }

        case 'vertical':
        case 'top':
          {
            return statusBarHeight(isLandscape);
          }

        case 'bottom':
          {
            return isIPhoneX ? isLandscape ? 24 : 34 : 0;
          }
      }
    };
  }, _temp2);
  var SafeAreaView = (0, _withOrientation2.default)(SafeView);
  exports.default = SafeAreaView;

  var withSafeArea = function withSafeArea() {
    var forceInset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return function (WrappedComponent) {
      var withSafeArea = function (_Component2) {
        babelHelpers.inherits(withSafeArea, _Component2);

        function withSafeArea() {
          babelHelpers.classCallCheck(this, withSafeArea);
          return babelHelpers.possibleConstructorReturn(this, (withSafeArea.__proto__ || Object.getPrototypeOf(withSafeArea)).apply(this, arguments));
        }

        babelHelpers.createClass(withSafeArea, [{
          key: "render",
          value: function render() {
            return _react2.default.createElement(
              SafeAreaView,
              {
                style: {
                  flex: 1
                },
                forceInset: forceInset
              },
              _react2.default.createElement(WrappedComponent, this.props)
            );
          }
        }]);
        return withSafeArea;
      }(_react.Component);

      return (0, _hoistNonReactStatics2.default)(withSafeArea, WrappedComponent);
    };
  };

  exports.withSafeArea = withSafeArea;
},850,[103,14,830,851]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isOrientationLandscape = undefined;

  exports.default = function (WrappedComponent) {
    var _class, _temp, _initialiseProps;

    var withOrientation = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(withOrientation, _React$Component);

      function withOrientation() {
        babelHelpers.classCallCheck(this, withOrientation);

        var _this = babelHelpers.possibleConstructorReturn(this, (withOrientation.__proto__ || Object.getPrototypeOf(withOrientation)).call(this));

        _initialiseProps.call(_this);

        var isLandscape = isOrientationLandscape(_reactNative.Dimensions.get('window'));
        _this.state = {
          isLandscape: isLandscape
        };
        return _this;
      }

      babelHelpers.createClass(withOrientation, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (typeof _reactNative.Dimensions.addEventListener === 'function') {
            _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (typeof _reactNative.Dimensions.removeEventListener === 'function') {
            _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
          }
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement(WrappedComponent, babelHelpers.extends({}, this.props, this.state));
        }
      }]);
      return withOrientation;
    }(React.Component), _initialiseProps = function _initialiseProps() {
      var _this2 = this;

      this.handleOrientationChange = function (_ref2) {
        var window = _ref2.window;
        var isLandscape = isOrientationLandscape(window);

        _this2.setState({
          isLandscape: isLandscape
        });
      };
    }, _temp);
    return (0, _hoistNonReactStatics2.default)(withOrientation, WrappedComponent);
  };

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _hoistNonReactStatics = _require(_dependencyMap[2]);

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var isOrientationLandscape = exports.isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };
},851,[103,14,830]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactLifecyclesCompat = _require(_dependencyMap[2]);

  var _SceneView = _require(_dependencyMap[3]);

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var FAR_FAR_AWAY = 3000;

  var ResourceSavingSceneView = function (_React$PureComponent) {
    babelHelpers.inherits(ResourceSavingSceneView, _React$PureComponent);
    babelHelpers.createClass(ResourceSavingSceneView, null, [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.isFocused && !prevState.awake) {
          return {
            awake: true
          };
        } else {
          return null;
        }
      }
    }]);

    function ResourceSavingSceneView(props) {
      babelHelpers.classCallCheck(this, ResourceSavingSceneView);

      var _this = babelHelpers.possibleConstructorReturn(this, (ResourceSavingSceneView.__proto__ || Object.getPrototypeOf(ResourceSavingSceneView)).call(this));

      _this._mustAlwaysBeVisible = function () {
        return _this.props.animationEnabled || _this.props.swipeEnabled;
      };

      _this.state = {
        awake: props.lazy ? props.isFocused : true
      };
      return _this;
    }

    babelHelpers.createClass(ResourceSavingSceneView, [{
      key: "render",
      value: function render() {
        var awake = this.state.awake;
        var _props = this.props,
            isFocused = _props.isFocused,
            childNavigation = _props.childNavigation,
            navigation = _props.navigation,
            removeClippedSubviews = _props.removeClippedSubviews,
            lazy = _props.lazy,
            rest = babelHelpers.objectWithoutProperties(_props, ["isFocused", "childNavigation", "navigation", "removeClippedSubviews", "lazy"]);
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            collapsable: false,
            removeClippedSubviews: removeClippedSubviews
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: this._mustAlwaysBeVisible() || isFocused ? styles.innerAttached : styles.innerDetached
            },
            awake ? _react2.default.createElement(_SceneView2.default, babelHelpers.extends({}, rest, {
              navigation: childNavigation
            })) : null
          )
        );
      }
    }]);
    return ResourceSavingSceneView;
  }(_react2.default.PureComponent);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    innerAttached: {
      flex: 1
    },
    innerDetached: {
      flex: 1,
      top: FAR_FAR_AWAY
    }
  });

  exports.default = (0, _reactLifecyclesCompat.polyfill)(ResourceSavingSceneView);
},852,[103,14,737,795]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _withNavigation = _require(_dependencyMap[1]);

  var _withNavigation2 = babelHelpers.interopRequireDefault(_withNavigation);

  var EventNameToPropName = {
    willFocus: 'onWillFocus',
    didFocus: 'onDidFocus',
    willBlur: 'onWillBlur',
    didBlur: 'onDidBlur'
  };
  var EventNames = Object.keys(EventNameToPropName);

  var NavigationEvents = function (_React$Component) {
    babelHelpers.inherits(NavigationEvents, _React$Component);

    function NavigationEvents() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, NavigationEvents);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NavigationEvents.__proto__ || Object.getPrototypeOf(NavigationEvents)).call.apply(_ref, [this].concat(args))), _this), _this.addListener = function (eventName) {
        var listener = _this.props[EventNameToPropName[eventName]];

        if (listener) {
          _this.subscriptions[eventName] = _this.props.navigation.addListener(eventName, listener);
        }
      }, _this.removeListener = function (eventName) {
        if (_this.subscriptions[eventName]) {
          _this.subscriptions[eventName].remove();

          _this.subscriptions[eventName] = undefined;
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(NavigationEvents, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.subscriptions = {};
        EventNames.forEach(this.addListener);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this2 = this;

        EventNames.forEach(function (eventName) {
          var listenerHasChanged = _this2.props[EventNameToPropName[eventName]] !== prevProps[EventNameToPropName[eventName]];

          if (listenerHasChanged) {
            _this2.removeListener(eventName);

            _this2.addListener(eventName);
          }
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        EventNames.forEach(this.removeListener);
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return NavigationEvents;
  }(_react2.default.Component);

  exports.default = (0, _withNavigation2.default)(NavigationEvents);
},853,[103,854]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = withNavigation;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _hoistNonReactStatics = _require(_dependencyMap[1]);

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var _invariant = _require(_dependencyMap[2]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _NavigationContext = _require(_dependencyMap[3]);

  function withNavigation(Component) {
    var _class, _temp;

    var ComponentWithNavigation = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(ComponentWithNavigation, _React$Component);

      function ComponentWithNavigation() {
        babelHelpers.classCallCheck(this, ComponentWithNavigation);
        return babelHelpers.possibleConstructorReturn(this, (ComponentWithNavigation.__proto__ || Object.getPrototypeOf(ComponentWithNavigation)).apply(this, arguments));
      }

      babelHelpers.createClass(ComponentWithNavigation, [{
        key: "render",
        value: function render() {
          var _this2 = this;

          var navigationProp = this.props.navigation;
          return _react2.default.createElement(
            _NavigationContext.NavigationConsumer,
            null,
            function (navigationContext) {
              var navigation = navigationProp || navigationContext;
              (0, _invariant2.default)(!!navigation, 'withNavigation can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.');
              return _react2.default.createElement(Component, babelHelpers.extends({}, _this2.props, {
                navigation: navigation,
                ref: _this2.props.onRef
              }));
            }
          );
        }
      }]);
      return ComponentWithNavigation;
    }(_react2.default.Component), _class.displayName = "withNavigation(" + (Component.displayName || Component.name) + ")", _temp);
    return (0, _hoistNonReactStatics2.default)(ComponentWithNavigation, Component);
  }
},854,[103,830,741,755]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = withNavigationFocus;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _hoistNonReactStatics = _require(_dependencyMap[1]);

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var _invariant = _require(_dependencyMap[2]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _withNavigation = _require(_dependencyMap[3]);

  var _withNavigation2 = babelHelpers.interopRequireDefault(_withNavigation);

  function withNavigationFocus(Component) {
    var _class, _temp;

    var ComponentWithNavigationFocus = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(ComponentWithNavigationFocus, _React$Component);

      function ComponentWithNavigationFocus(props) {
        babelHelpers.classCallCheck(this, ComponentWithNavigationFocus);

        var _this = babelHelpers.possibleConstructorReturn(this, (ComponentWithNavigationFocus.__proto__ || Object.getPrototypeOf(ComponentWithNavigationFocus)).call(this, props));

        _this.state = {
          isFocused: props.navigation ? props.navigation.isFocused() : false
        };
        return _this;
      }

      babelHelpers.createClass(ComponentWithNavigationFocus, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          var navigation = this.props.navigation;
          (0, _invariant2.default)(!!navigation, 'withNavigationFocus can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.');
          this.subscriptions = [navigation.addListener('didFocus', function () {
            return _this2.setState({
              isFocused: true
            });
          }), navigation.addListener('willBlur', function () {
            return _this2.setState({
              isFocused: false
            });
          })];
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.subscriptions.forEach(function (sub) {
            return sub.remove();
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
            isFocused: this.state.isFocused,
            ref: this.props.onRef
          }));
        }
      }]);
      return ComponentWithNavigationFocus;
    }(_react2.default.Component), _class.displayName = "withNavigationFocus(" + (Component.displayName || Component.name) + ")", _temp);
    return (0, _hoistNonReactStatics2.default)((0, _withNavigation2.default)(ComponentWithNavigationFocus), Component);
  }
},855,[103,830,741,854]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isOrientationLandscape = undefined;

  exports.default = function (WrappedComponent) {
    var _class, _temp, _initialiseProps;

    var withOrientation = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(withOrientation, _React$Component);

      function withOrientation() {
        babelHelpers.classCallCheck(this, withOrientation);

        var _this = babelHelpers.possibleConstructorReturn(this, (withOrientation.__proto__ || Object.getPrototypeOf(withOrientation)).call(this));

        _initialiseProps.call(_this);

        var isLandscape = isOrientationLandscape(_reactNative.Dimensions.get('window'));
        _this.state = {
          isLandscape: isLandscape
        };
        return _this;
      }

      babelHelpers.createClass(withOrientation, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(WrappedComponent, babelHelpers.extends({}, this.props, this.state));
        }
      }]);
      return withOrientation;
    }(_react2.default.Component), _initialiseProps = function _initialiseProps() {
      var _this2 = this;

      this.handleOrientationChange = function (_ref2) {
        var window = _ref2.window;
        var isLandscape = isOrientationLandscape(window);

        _this2.setState({
          isLandscape: isLandscape
        });
      };
    }, _temp);
    return (0, _hoistNonReactStatics2.default)(withOrientation, WrappedComponent);
  };

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _hoistNonReactStatics = _require(_dependencyMap[2]);

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var isOrientationLandscape = exports.isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };
},856,[103,14,830]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _Styles = _require(_dependencyMap[3]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var Login = (0, _reactNativeMeteor.connectMeteor)(_class = function (_React$Component) {
    babelHelpers.inherits(Login, _React$Component);

    function Login(props) {
      var _this2 = this;

      babelHelpers.classCallCheck(this, Login);

      var _this = babelHelpers.possibleConstructorReturn(this, (Login.__proto__ || Object.getPrototypeOf(Login)).call(this, props));

      _this._signInAsync = function _callee() {
        var user;
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                user = Login.getMeteorData().user;
                _context.prev = 1;
                _context.next = 4;
                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem('user', user));

              case 4:
                _context.next = 8;
                break;

              case 6:
                _context.prev = 6;
                _context.t0 = _context["catch"](1);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this2, [[1, 6]]);
      };

      _this.state = {
        email: '',
        password: '',
        error: ''
      };
      return _this;
    }

    babelHelpers.createClass(Login, [{
      key: "isValid",
      value: function isValid() {
        var _state = this.state,
            email = _state.email,
            password = _state.password;
        var valid = false;

        if (email.length > 0 && password.length > 0) {
          valid = true;
        }

        if (email.length === 0) {
          this.setState({
            error: 'You must enter an email address'
          });
        } else if (password.length === 0) {
          this.setState({
            error: 'You must enter a password'
          });
        }

        return valid;
      }
    }, {
      key: "signIn",
      value: function signIn() {
        var _this3 = this;

        var _state2 = this.state,
            email = _state2.email,
            password = _state2.password;
        var navigate = this.props.navigation.navigate;

        if (this.isValid()) {
          _reactNativeMeteor2.default.loginWithPassword(email, password, function (error) {
            if (error) {
              _this3.setState({
                error: error.reason
              });
            } else {
              _this3._signInAsync();

              navigate('Home');
            }
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var navigate = this.props.navigation.navigate;
        var _state3 = this.state,
            email = _state3.email,
            password = _state3.password,
            error = _state3.error;
        return _react2.default.createElement(
          _reactNative.KeyboardAvoidingView,
          {
            behavior: "position",
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.logo
            },
            _react2.default.createElement(_reactNative.Image, {
              source: _require(_dependencyMap[4])
            }),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.intro
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.introText
                },
                "We missed shopping with you! Please login again."
              )
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.bottom
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.instructions
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.instructionsText
                },
                "Login with your email address:"
              )
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.inputs
              },
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.inputGroup
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.label
                  },
                  "Email Address"
                ),
                _react2.default.createElement(_reactNative.TextInput, {
                  style: styles.input,
                  label: 'Email Address',
                  underlineColorAndroid: 'rgba(0,0,0,0)',
                  onChangeText: function onChangeText(email) {
                    return _this4.setState({
                      email: email
                    });
                  },
                  value: email
                })
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.inputGroup
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.label
                  },
                  "Password"
                ),
                _react2.default.createElement(_reactNative.TextInput, {
                  style: styles.input,
                  underlineColorAndroid: 'rgba(0,0,0,0)',
                  onChangeText: function onChangeText(password) {
                    return _this4.setState({
                      password: password
                    });
                  },
                  secureTextEntry: true,
                  value: password
                })
              )
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.buttons
              },
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  style: [styles.button],
                  onPress: this.signIn.bind(this)
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.buttonText
                  },
                  "Sign In With Email"
                )
              ),
              _react2.default.createElement(
                _reactNative.Text,
                null,
                error
              )
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.login
            },
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.loginText
              },
              "New to Clutch?"
            ),
            _react2.default.createElement(
              _reactNative.TouchableOpacity,
              {
                onPress: function onPress() {
                  navigate('Register');
                }
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.loginLinkText
                },
                "Register"
              )
            )
          )
        );
      }
    }], [{
      key: "getMeteorData",
      value: function getMeteorData() {
        return {
          user: _reactNativeMeteor2.default.user()
        };
      }
    }]);
    return Login;
  }(_react2.default.Component)) || _class;

  exports.default = Login;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'center',
      backgroundColor: _Styles2.default.colors.white
    },
    logo: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'flex-end'
    },
    bottom: {
      borderBottomWidth: 1,
      borderBottomColor: _Styles2.default.colors.gray,
      flex: 1,
      alignItems: 'center',
      marginHorizontal: 32
    },
    intro: {
      borderBottomWidth: 1,
      borderBottomColor: _Styles2.default.colors.gray,
      padding: 32,
      marginHorizontal: 32
    },
    introText: {
      textAlign: 'center',
      fontWeight: "200",
      fontSize: 20
    },
    inputs: {
      maxWidth: 480
    },
    inputGroup: {
      borderColor: _Styles2.default.colors.salmon,
      borderWidth: 2,
      borderRadius: 10,
      padding: 8,
      marginBottom: 16,
      minWidth: '100%',
      marginLeft: 'auto',
      marginRight: 'auto'
    },
    label: {
      fontSize: 10
    },
    input: {
      borderWidth: 0
    },
    instructions: {
      padding: 16
    },
    instructionsText: {
      fontSize: 16,
      textAlign: 'center'
    },
    buttons: {
      minWidth: '100%',
      paddingHorizontal: 20
    },
    button: {
      alignSelf: 'center',
      minWidth: 260,
      marginBottom: 26,
      paddingVertical: 16,
      justifyContent: 'center',
      alignItems: 'center',
      marginHorizontal: 8,
      backgroundColor: _Styles2.default.colors.salmon,
      borderRadius: 10
    },
    buttonText: {
      textAlign: 'center',
      color: _Styles2.default.colors.white,
      fontWeight: 'bold',
      fontSize: 20
    },
    login: {
      alignSelf: 'flex-end',
      marginHorizontal: 32,
      paddingVertical: 8,
      flexDirection: 'row',
      justifyContent: 'flex-end'
    },
    loginText: {
      textAlign: 'right',
      fontStyle: 'italic'
    },
    loginLinkText: {
      marginLeft: 4,
      fontWeight: 'bold',
      fontStyle: 'italic'
    }
  });
},857,[103,14,858,1015,1016]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _reactNative = _require(_dependencyMap[0]);

  var _reactMixin = _require(_dependencyMap[1]);

  var _reactMixin2 = babelHelpers.interopRequireDefault(_reactMixin);

  var _trackr = _require(_dependencyMap[2]);

  var _trackr2 = babelHelpers.interopRequireDefault(_trackr);

  var _ejson = _require(_dependencyMap[3]);

  var _ejson2 = babelHelpers.interopRequireDefault(_ejson);

  var _ddp = _require(_dependencyMap[4]);

  var _ddp2 = babelHelpers.interopRequireDefault(_ddp);

  var _Random = _require(_dependencyMap[5]);

  var _Random2 = babelHelpers.interopRequireDefault(_Random);

  var _Data = _require(_dependencyMap[6]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var _Collection = _require(_dependencyMap[7]);

  var _Call = _require(_dependencyMap[8]);

  var _Call2 = babelHelpers.interopRequireDefault(_Call);

  var _Mixin = _require(_dependencyMap[9]);

  var _Mixin2 = babelHelpers.interopRequireDefault(_Mixin);

  var _ListView = _require(_dependencyMap[10]);

  var _ListView2 = babelHelpers.interopRequireDefault(_ListView);

  var _ComplexListView = _require(_dependencyMap[11]);

  var _ComplexListView2 = babelHelpers.interopRequireDefault(_ComplexListView);

  var _createContainer = _require(_dependencyMap[12]);

  var _createContainer2 = babelHelpers.interopRequireDefault(_createContainer);

  var _ReactMeteorData = _require(_dependencyMap[13]);

  var _ReactMeteorData2 = babelHelpers.interopRequireDefault(_ReactMeteorData);

  var _composeWithTracker = _require(_dependencyMap[14]);

  var _composeWithTracker2 = babelHelpers.interopRequireDefault(_composeWithTracker);

  var _FSCollection = _require(_dependencyMap[15]);

  var _FSCollection2 = babelHelpers.interopRequireDefault(_FSCollection);

  var _FSCollectionImagesPreloader = _require(_dependencyMap[16]);

  var _FSCollectionImagesPreloader2 = babelHelpers.interopRequireDefault(_FSCollectionImagesPreloader);

  var _ReactiveDict = _require(_dependencyMap[17]);

  var _ReactiveDict2 = babelHelpers.interopRequireDefault(_ReactiveDict);

  var _User = _require(_dependencyMap[18]);

  var _User2 = babelHelpers.interopRequireDefault(_User);

  var _Accounts = _require(_dependencyMap[19]);

  var _Accounts2 = babelHelpers.interopRequireDefault(_Accounts);

  module.exports = babelHelpers.extends({
    composeWithTracker: _composeWithTracker2.default,
    Accounts: _Accounts2.default,
    Tracker: _trackr2.default,
    EJSON: _ejson2.default,
    MeteorListView: _ListView2.default,
    MeteorComplexListView: _ComplexListView2.default,
    ReactiveDict: _ReactiveDict2.default,
    Collection: _Collection.Collection,
    FSCollectionImagesPreloader: _reactNative.View,
    collection: function collection(name, options) {
      return new _Collection.Collection(name, options);
    },
    FSCollection: _FSCollection2.default,
    createContainer: _createContainer2.default,
    withTracker: _ReactMeteorData2.default,
    getData: function getData() {
      return _Data2.default;
    },
    connectMeteor: function connectMeteor(reactClass) {
      return _reactMixin2.default.onClass(reactClass, _Mixin2.default);
    }
  }, _User2.default, {
    status: function status() {
      return {
        connected: _Data2.default.ddp ? _Data2.default.ddp.status == 'connected' : false,
        status: _Data2.default.ddp ? _Data2.default.ddp.status : 'disconnected'
      };
    },
    call: _Call2.default,
    disconnect: function disconnect() {
      if (_Data2.default.ddp) {
        _Data2.default.ddp.disconnect();
      }
    },
    _subscriptionsRestart: function _subscriptionsRestart() {
      for (var i in _Data2.default.subscriptions) {
        var sub = _Data2.default.subscriptions[i];

        _Data2.default.ddp.unsub(sub.subIdRemember);

        sub.subIdRemember = _Data2.default.ddp.sub(sub.name, sub.params);
      }
    },
    waitDdpConnected: _Data2.default.waitDdpConnected.bind(_Data2.default),
    reconnect: function reconnect() {
      _Data2.default.ddp && _Data2.default.ddp.connect();
    },
    connect: function connect(endpoint, options) {
      var _this = this;

      if (!endpoint) endpoint = _Data2.default._endpoint;
      if (!options) options = _Data2.default._options;
      _Data2.default._endpoint = endpoint;
      _Data2.default._options = options;
      this.ddp = _Data2.default.ddp = new _ddp2.default(babelHelpers.extends({
        endpoint: endpoint,
        SocketConstructor: WebSocket
      }, options));

      _reactNative.NetInfo.isConnected.addEventListener('connectionChange', function (isConnected) {
        if (isConnected && _Data2.default.ddp.autoReconnect) {
          _Data2.default.ddp.connect();
        }
      });

      _Data2.default.ddp.on('connected', function () {
        if (_Data2.default.db && _Data2.default.db.collections) {
          for (var collection in _Data2.default.db.collections) {
            _Data2.default.db[collection].remove({});
          }
        }

        _Data2.default.notify('change');

        console.info('Connected to DDP server.');

        _this._loadInitialUser().then(function () {
          _this._subscriptionsRestart();
        });
      });

      var lastDisconnect = null;

      _Data2.default.ddp.on('disconnected', function () {
        _Data2.default.notify('change');

        console.info('Disconnected from DDP server.');
        if (!_Data2.default.ddp.autoReconnect) return;

        if (!lastDisconnect || new Date() - lastDisconnect > 3000) {
          _Data2.default.ddp.connect();
        }

        lastDisconnect = new Date();
      });

      _Data2.default.ddp.on('added', function (message) {
        if (!_Data2.default.db[message.collection]) {
          _Data2.default.db.addCollection(message.collection);
        }

        _Data2.default.db[message.collection].upsert(babelHelpers.extends({
          _id: message.id
        }, message.fields));
      });

      _Data2.default.ddp.on('ready', function (message) {
        var idsMap = new Map();

        for (var i in _Data2.default.subscriptions) {
          var sub = _Data2.default.subscriptions[i];
          idsMap.set(sub.subIdRemember, sub.id);
        }

        for (var i in message.subs) {
          var subId = idsMap.get(message.subs[i]);

          if (subId) {
            var _sub = _Data2.default.subscriptions[subId];
            _sub.ready = true;

            _sub.readyDeps.changed();

            _sub.readyCallback && _sub.readyCallback();
          }
        }
      });

      _Data2.default.ddp.on('changed', function (message) {
        var unset = {};

        if (message.cleared) {
          message.cleared.forEach(function (field) {
            unset[field] = null;
          });
        }

        _Data2.default.db[message.collection] && _Data2.default.db[message.collection].upsert(babelHelpers.extends({
          _id: message.id
        }, message.fields, unset));
      });

      _Data2.default.ddp.on('removed', function (message) {
        _Data2.default.db[message.collection] && _Data2.default.db[message.collection].del(message.id);
      });

      _Data2.default.ddp.on('result', function (message) {
        var call = _Data2.default.calls.find(function (call) {
          return call.id == message.id;
        });

        if (typeof call.callback == 'function') call.callback(message.error, message.result);

        _Data2.default.calls.splice(_Data2.default.calls.findIndex(function (call) {
          return call.id == message.id;
        }), 1);
      });

      _Data2.default.ddp.on('nosub', function (message) {
        for (var i in _Data2.default.subscriptions) {
          var sub = _Data2.default.subscriptions[i];

          if (sub.subIdRemember == message.id) {
            console.warn('No subscription existing for', sub.name);
          }
        }
      });
    },
    subscribe: function subscribe(name) {
      var params = Array.prototype.slice.call(arguments, 1);
      var callbacks = {};

      if (params.length) {
        var lastParam = params[params.length - 1];

        if (typeof lastParam == 'function') {
          callbacks.onReady = params.pop();
        } else if (lastParam && (typeof lastParam.onReady == 'function' || typeof lastParam.onError == 'function' || typeof lastParam.onStop == 'function')) {
          callbacks = params.pop();
        }
      }

      var existing = false;

      for (var i in _Data2.default.subscriptions) {
        var sub = _Data2.default.subscriptions[i];
        if (sub.inactive && sub.name === name && _ejson2.default.equals(sub.params, params)) existing = sub;
      }

      var id = void 0;

      if (existing) {
        id = existing.id;
        existing.inactive = false;

        if (callbacks.onReady) {
          if (!existing.ready) existing.readyCallback = callbacks.onReady;
        }

        if (callbacks.onStop) {
          existing.stopCallback = callbacks.onStop;
        }
      } else {
        id = _Random2.default.id();

        var subIdRemember = _Data2.default.ddp.sub(name, params);

        _Data2.default.subscriptions[id] = {
          id: id,
          subIdRemember: subIdRemember,
          name: name,
          params: _ejson2.default.clone(params),
          inactive: false,
          ready: false,
          readyDeps: new _trackr2.default.Dependency(),
          readyCallback: callbacks.onReady,
          stopCallback: callbacks.onStop,
          stop: function stop() {
            _Data2.default.ddp.unsub(this.subIdRemember);

            delete _Data2.default.subscriptions[this.id];
            this.ready && this.readyDeps.changed();

            if (callbacks.onStop) {
              callbacks.onStop();
            }
          }
        };
      }

      var handle = {
        stop: function stop() {
          if (_Data2.default.subscriptions[id]) _Data2.default.subscriptions[id].stop();
        },
        ready: function ready() {
          if (!_Data2.default.subscriptions[id]) return false;
          var record = _Data2.default.subscriptions[id];
          record.readyDeps.depend();
          return record.ready;
        },
        subscriptionId: id
      };

      if (_trackr2.default.active) {
        _trackr2.default.onInvalidate(function (c) {
          if (_Data2.default.subscriptions[id]) {
            _Data2.default.subscriptions[id].inactive = true;
          }

          _trackr2.default.afterFlush(function () {
            if (_Data2.default.subscriptions[id] && _Data2.default.subscriptions[id].inactive) {
              handle.stop();
            }
          });
        });
      }

      return handle;
    }
  });
},858,[14,859,861,864,866,875,876,893,894,895,898,899,900,896,901,1008,1011,1012,1013,1014]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var mixin = _require(_dependencyMap[0]);

  var assign = _require(_dependencyMap[1]);

  var mixinProto = mixin({
    componentDidMount: mixin.MANY,
    componentWillMount: mixin.MANY,
    componentWillReceiveProps: mixin.MANY,
    shouldComponentUpdate: mixin.ONCE,
    componentWillUpdate: mixin.MANY,
    componentDidUpdate: mixin.MANY,
    componentWillUnmount: mixin.MANY,
    getChildContext: mixin.MANY_MERGED
  });

  function setDefaultProps(reactMixin) {
    var getDefaultProps = reactMixin.getDefaultProps;

    if (getDefaultProps) {
      reactMixin.defaultProps = getDefaultProps();
      delete reactMixin.getDefaultProps;
    }
  }

  function setInitialState(reactMixin) {
    var getInitialState = reactMixin.getInitialState;
    var componentWillMount = reactMixin.componentWillMount;

    function applyInitialState(instance) {
      var state = instance.state || {};
      assign(state, getInitialState.call(instance));
      instance.setState(state);
    }

    if (getInitialState) {
      if (!componentWillMount) {
        reactMixin.componentWillMount = function () {
          applyInitialState(this);
        };
      } else {
        reactMixin.componentWillMount = function () {
          applyInitialState(this);
          componentWillMount.call(this);
        };
      }

      delete reactMixin.getInitialState;
    }
  }

  function mixinClass(reactClass, reactMixin) {
    setDefaultProps(reactMixin);
    setInitialState(reactMixin);
    var prototypeMethods = {};
    var staticProps = {};
    Object.keys(reactMixin).forEach(function (key) {
      if (key === 'mixins') {
        return;
      }

      if (key === 'statics') {
        return;
      } else if (typeof reactMixin[key] === 'function') {
        prototypeMethods[key] = reactMixin[key];
      } else {
        staticProps[key] = reactMixin[key];
      }
    });
    mixinProto(reactClass.prototype, prototypeMethods);

    var mergePropTypes = function mergePropTypes(left, right, key) {
      if (!left) return right;
      if (!right) return left;
      var result = {};
      Object.keys(left).forEach(function (leftKey) {
        if (!right[leftKey]) {
          result[leftKey] = left[leftKey];
        }
      });
      Object.keys(right).forEach(function (rightKey) {
        if (left[rightKey]) {
          result[rightKey] = function checkBothContextTypes() {
            return right[rightKey].apply(this, arguments) && left[rightKey].apply(this, arguments);
          };
        } else {
          result[rightKey] = right[rightKey];
        }
      });
      return result;
    };

    mixin({
      childContextTypes: mergePropTypes,
      contextTypes: mergePropTypes,
      propTypes: mixin.MANY_MERGED_LOOSE,
      defaultProps: mixin.MANY_MERGED_LOOSE
    })(reactClass, staticProps);

    if (reactMixin.statics) {
      Object.getOwnPropertyNames(reactMixin.statics).forEach(function (key) {
        var left = reactClass[key];
        var right = reactMixin.statics[key];

        if (left !== undefined && right !== undefined) {
          throw new TypeError('Cannot mixin statics because statics.' + key + ' and Component.' + key + ' are defined.');
        }

        reactClass[key] = left !== undefined ? left : right;
      });
    }

    if (reactMixin.mixins) {
      reactMixin.mixins.reverse().forEach(mixinClass.bind(null, reactClass));
    }

    return reactClass;
  }

  module.exports = function () {
    var reactMixin = mixinProto;

    reactMixin.onClass = function (reactClass, mixin) {
      mixin = assign({}, mixin);
      return mixinClass(reactClass, mixin);
    };

    reactMixin.decorate = function (mixin) {
      return function (reactClass) {
        return reactMixin.onClass(reactClass, mixin);
      };
    };

    return reactMixin;
  }();
},859,[860,105]);
__d(function (global, _require, module, exports, _dependencyMap) {
    function objToStr(x) {
        return Object.prototype.toString.call(x);
    }

    ;

    function returner(x) {
        return x;
    }

    function wrapIfFunction(thing) {
        return typeof thing !== "function" ? thing : function () {
            return thing.apply(this, arguments);
        };
    }

    function setNonEnumerable(target, key, value) {
        if (key in target) {
            target[key] = value;
        } else {
            Object.defineProperty(target, key, {
                value: value,
                writable: true,
                configurable: true
            });
        }
    }

    function defaultNonFunctionProperty(left, right, key) {
        if (left !== undefined && right !== undefined) {
            var getTypeName = function getTypeName(obj) {
                if (obj && obj.constructor && obj.constructor.name) {
                    return obj.constructor.name;
                } else {
                    return objToStr(obj).slice(8, -1);
                }
            };

            throw new TypeError('Cannot mixin key ' + key + ' because it is provided by multiple sources, ' + 'and the types are ' + getTypeName(left) + ' and ' + getTypeName(right));
        }

        return left === undefined ? right : left;
    }

    ;

    function assertObject(obj, obj2) {
        var type = objToStr(obj);

        if (type !== '[object Object]') {
            var displayType = obj.constructor ? obj.constructor.name : 'Unknown';
            var displayType2 = obj2.constructor ? obj2.constructor.name : 'Unknown';
            throw new Error('cannot merge returned value of type ' + displayType + ' with an ' + displayType2);
        }
    }

    ;

    var mixins = module.exports = function makeMixinFunction(rules, _opts) {
        var opts = _opts || {};

        if (!opts.unknownFunction) {
            opts.unknownFunction = mixins.ONCE;
        }

        if (!opts.nonFunctionProperty) {
            opts.nonFunctionProperty = defaultNonFunctionProperty;
        }

        return function applyMixin(source, mixin) {
            Object.keys(mixin).forEach(function (key) {
                var left = source[key],
                    right = mixin[key],
                    rule = rules[key];
                if (left === undefined && right === undefined) return;

                if (rule) {
                    var fn = rule(left, right, key);
                    setNonEnumerable(source, key, wrapIfFunction(fn));
                    return;
                }

                var leftIsFn = typeof left === "function";
                var rightIsFn = typeof right === "function";

                if (leftIsFn && right === undefined || rightIsFn && left === undefined || leftIsFn && rightIsFn) {
                    setNonEnumerable(source, key, wrapIfFunction(opts.unknownFunction(left, right, key)));
                    return;
                }

                source[key] = opts.nonFunctionProperty(left, right, key);
            });
        };
    };

    mixins._mergeObjects = function (obj1, obj2) {
        if (Array.isArray(obj1) && Array.isArray(obj2)) {
            return obj1.concat(obj2);
        }

        assertObject(obj1, obj2);
        assertObject(obj2, obj1);
        var result = {};
        Object.keys(obj1).forEach(function (k) {
            if (Object.prototype.hasOwnProperty.call(obj2, k)) {
                throw new Error('cannot merge returns because both have the ' + JSON.stringify(k) + ' key');
            }

            result[k] = obj1[k];
        });
        Object.keys(obj2).forEach(function (k) {
            result[k] = obj2[k];
        });
        return result;
    };

    mixins.ONCE = function (left, right, key) {
        if (left && right) {
            throw new TypeError('Cannot mixin ' + key + ' because it has a unique constraint.');
        }

        return left || right;
    };

    mixins.MANY = function (left, right, key) {
        return function () {
            if (right) right.apply(this, arguments);
            return left ? left.apply(this, arguments) : undefined;
        };
    };

    mixins.MANY_MERGED_LOOSE = function (left, right, key) {
        if (left && right) {
            return mixins._mergeObjects(left, right);
        }

        return left || right;
    };

    mixins.MANY_MERGED = function (left, right, key) {
        return function () {
            var res1 = right && right.apply(this, arguments);
            var res2 = left && left.apply(this, arguments);

            if (res1 && res2) {
                return mixins._mergeObjects(res1, res2);
            }

            return res2 || res1;
        };
    };

    mixins.REDUCE_LEFT = function (_left, _right, key) {
        var left = _left || returner;
        var right = _right || returner;
        return function () {
            return right.call(this, left.apply(this, arguments));
        };
    };

    mixins.REDUCE_RIGHT = function (_left, _right, key) {
        var left = _left || returner;
        var right = _right || returner;
        return function () {
            return left.call(this, right.apply(this, arguments));
        };
    };
},860,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = function () {
		if (typeof global.Trackr !== "undefined") {
			return global.Trackr;
		}

		var Trackr = global.Trackr = {};
		Trackr.active = false;
		Trackr.currentComputation = null;
		Trackr._computations = {};

		var setCurrentComputation = function setCurrentComputation(c) {
			Trackr.currentComputation = c;
			Trackr.active = !!c;
		};

		var _debugFunc = function _debugFunc() {
			return typeof console !== "undefined" && console.error ? function () {
				console.error.apply(console, arguments);
			} : function () {};
		};

		var _throwOrLog = function _throwOrLog(from, e) {
			if (throwFirstError) {
				throw e;
			} else {
				var printArgs = ["Exception from Trackr " + from + " function:"];

				if (e.stack && e.message && e.name) {
					var idx = e.stack.indexOf(e.message);

					if (idx < 0 || idx > e.name.length + 2) {
						var message = e.name + ": " + e.message;
						printArgs.push(message);
					}
				}

				printArgs.push(e.stack);

				for (var i = 0; i < printArgs.length; i++) {
					_debugFunc()(printArgs[i]);
				}
			}
		};

		var withNoYieldsAllowed = function withNoYieldsAllowed(f) {
			return f;
		};

		var nextId = 1;
		var pendingComputations = [];
		var willFlush = false;
		var inFlush = false;
		var inCompute = false;
		var throwFirstError = false;
		var afterFlushCallbacks = [];

		var requestAnimationFrame = _require(_dependencyMap[0]);

		var requireFlush = function requireFlush() {
			if (!willFlush) {
				requestAnimationFrame(Trackr._runFlush);
				willFlush = true;
			}
		};

		var constructingComputation = false;

		Trackr.Computation = function (f, parent, options) {
			if (!constructingComputation) throw new Error("Trackr.Computation constructor is private; use Trackr.autorun");
			constructingComputation = false;
			var self = this;
			options = options || {};
			self.stopped = false;
			self.invalidated = false;
			self.firstRun = true;
			self._id = nextId++;
			self._onInvalidateCallbacks = [];
			self._onStopCallbacks = [];
			self._parent = parent;
			self._func = f;
			self._onError = options.onError;
			self._recomputing = false;
			self._context = options.context || null;
			Trackr._computations[self._id] = self;
			var errored = true;

			try {
				self._compute();

				errored = false;
			} finally {
				self.firstRun = false;
				if (errored) self.stop();
			}
		};

		Trackr.Computation.prototype.onInvalidate = function (f, ctx) {
			var self = this;
			if (typeof f !== 'function') throw new Error("onInvalidate requires a function");

			if (self.invalidated) {
				Trackr.nonreactive(function () {
					withNoYieldsAllowed(f).call(ctx || self._context, self);
				});
			} else {
				self._onInvalidateCallbacks.push({
					fn: f,
					ctx: ctx
				});
			}
		};

		Trackr.Computation.prototype.onStop = function (f, ctx) {
			var self = this;
			if (typeof f !== 'function') throw new Error("onStop requires a function");

			if (self.stopped) {
				Trackr.nonreactive(function () {
					withNoYieldsAllowed(f).call(ctx || self._context, self);
				});
			} else {
				self._onStopCallbacks.push({
					fn: f,
					ctx: ctx
				});
			}
		};

		Trackr.Computation.prototype.invalidate = function () {
			var self = this;

			if (!self.invalidated) {
				if (!self._recomputing && !self.stopped) {
					requireFlush();
					pendingComputations.push(this);
				}

				self.invalidated = true;

				for (var i = 0, f; f = self._onInvalidateCallbacks[i]; i++) {
					Trackr.nonreactive(function () {
						withNoYieldsAllowed(f.fn).call(f.ctx || self._context, self);
					});
				}

				self._onInvalidateCallbacks = [];
			}
		};

		Trackr.Computation.prototype.stop = function () {
			var self = this;

			if (!self.stopped) {
				self.stopped = true;
				self.invalidate();
				delete Trackr._computations[self._id];

				for (var i = 0, f; f = self._onStopCallbacks[i]; i++) {
					Trackr.nonreactive(function () {
						withNoYieldsAllowed(f.fn).call(f.ctx || self._context, self);
					});
				}

				self._onStopCallbacks = [];
			}
		};

		Trackr.Computation.prototype._compute = function () {
			var self = this;
			self.invalidated = false;
			var previous = Trackr.currentComputation;
			setCurrentComputation(self);
			var previousInCompute = inCompute;
			inCompute = true;

			try {
				withNoYieldsAllowed(self._func).call(self._context, self);
			} finally {
				setCurrentComputation(previous);
				inCompute = previousInCompute;
			}
		};

		Trackr.Computation.prototype._needsRecompute = function () {
			var self = this;
			return self.invalidated && !self.stopped;
		};

		Trackr.Computation.prototype._recompute = function () {
			var self = this;
			self._recomputing = true;

			try {
				if (self._needsRecompute()) {
					try {
						self._compute();
					} catch (e) {
						if (self._onError) {
							self._onError(e);
						} else {
							_throwOrLog("recompute", e);
						}
					}
				}
			} finally {
				self._recomputing = false;
			}
		};

		Trackr.Dependency = function () {
			this._dependentsById = {};
		};

		Trackr.Dependency.prototype.depend = function (computation) {
			if (!computation) {
				if (!Trackr.active) return false;
				computation = Trackr.currentComputation;
			}

			var self = this;
			var id = computation._id;

			if (!(id in self._dependentsById)) {
				self._dependentsById[id] = computation;
				computation.onInvalidate(function () {
					delete self._dependentsById[id];
				});
				return true;
			}

			return false;
		};

		Trackr.Dependency.prototype.changed = function () {
			var self = this;

			for (var id in self._dependentsById) {
				self._dependentsById[id].invalidate();
			}
		};

		Trackr.Dependency.prototype.hasDependents = function () {
			var self = this;

			for (var id in self._dependentsById) {
				return true;
			}

			return false;
		};

		Trackr.flush = function (options) {
			Trackr._runFlush({
				finishSynchronously: true,
				throwFirstError: options && options._throwFirstError
			});
		};

		Trackr._runFlush = function (options) {
			if (inFlush) throw new Error("Can't call Trackr.flush while flushing");
			if (inCompute) throw new Error("Can't flush inside Trackr.autorun");
			options = options || {};
			inFlush = true;
			willFlush = true;
			throwFirstError = !!options.throwFirstError;
			var recomputedCount = 0;
			var finishedTry = false;

			try {
				while (pendingComputations.length || afterFlushCallbacks.length) {
					while (pendingComputations.length) {
						var comp = pendingComputations.shift();

						comp._recompute();

						if (comp._needsRecompute()) {
							pendingComputations.unshift(comp);
						}

						if (!options.finishSynchronously && ++recomputedCount > 1000) {
							finishedTry = true;
							return;
						}
					}

					if (afterFlushCallbacks.length) {
						var cb = afterFlushCallbacks.shift();

						try {
							cb.fn.call(cb.ctx);
						} catch (e) {
							_throwOrLog("afterFlush", e);
						}
					}
				}

				finishedTry = true;
			} finally {
				if (!finishedTry) {
					inFlush = false;

					Trackr._runFlush({
						finishSynchronously: options.finishSynchronously,
						throwFirstError: false
					});
				}

				willFlush = false;
				inFlush = false;

				if (pendingComputations.length || afterFlushCallbacks.length) {
					if (options.finishSynchronously) {
						throw new Error("still have more to do?");
					}

					setTimeout(requireFlush, 10);
				}
			}
		};

		Trackr.autorun = function (f, options, ctx) {
			if (typeof f !== 'function') throw new Error('Trackr.autorun requires a function argument');
			options = options || {};
			if (ctx) options.context = ctx;
			constructingComputation = true;
			var c = new Trackr.Computation(f, Trackr.currentComputation, options);
			if (Trackr.active) Trackr.onInvalidate(function () {
				c.stop();
			});
			return c;
		};

		Trackr.nonReactive = Trackr.nonreactive = function (f, ctx) {
			var previous = Trackr.currentComputation;
			setCurrentComputation(null);

			try {
				return f.call(ctx);
			} finally {
				setCurrentComputation(previous);
			}
		};

		Trackr.nonReactable = Trackr.nonreactable = function (f, ctx) {
			return function () {
				var args = arguments;
				var self = this;
				return Trackr.nonreactive(function () {
					return f.apply(ctx || self, args);
				});
			};
		};

		Trackr.onInvalidate = function (f, ctx) {
			if (!Trackr.active) throw new Error("Trackr.onInvalidate requires a currentComputation");
			Trackr.currentComputation.onInvalidate(f, ctx);
		};

		Trackr.afterFlush = function (f, ctx) {
			afterFlushCallbacks.push({
				fn: f,
				ctx: ctx
			});
			requireFlush();
		};

		return Trackr;
	}();
},861,[862]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var now = _require(_dependencyMap[0]),
      global = typeof window === 'undefined' ? {} : window,
      vendors = ['moz', 'webkit'],
      suffix = 'AnimationFrame',
      raf = global['request' + suffix],
      caf = global['cancel' + suffix] || global['cancelRequest' + suffix];

  for (var i = 0; i < vendors.length && !raf; i++) {
    raf = global[vendors[i] + 'Request' + suffix];
    caf = global[vendors[i] + 'Cancel' + suffix] || global[vendors[i] + 'CancelRequest' + suffix];
  }

  if (!raf || !caf) {
    var last = 0,
        id = 0,
        queue = [],
        frameDuration = 16.666666666666668;

    raf = function raf(callback) {
      if (queue.length === 0) {
        var _now = now(),
            next = Math.max(0, frameDuration - (_now - last));

        last = next + _now;
        setTimeout(function () {
          var cp = queue.slice(0);
          queue.length = 0;

          for (var i = 0; i < cp.length; i++) {
            if (!cp[i].cancelled) {
              try {
                cp[i].callback(last);
              } catch (e) {
                setTimeout(function () {
                  throw e;
                }, 0);
              }
            }
          }
        }, Math.round(next));
      }

      queue.push({
        handle: ++id,
        callback: callback,
        cancelled: false
      });
      return id;
    };

    caf = function caf(handle) {
      for (var i = 0; i < queue.length; i++) {
        if (queue[i].handle === handle) {
          queue[i].cancelled = true;
        }
      }
    };
  }

  module.exports = function (fn) {
    return raf.call(global, fn);
  };

  module.exports.cancel = function () {
    caf.apply(global, arguments);
  };
},862,[863]);
__d(function (global, _require, module, exports, _dependencyMap) {
  (function () {
    var getNanoSeconds, hrtime, loadTime;

    if (typeof performance !== "undefined" && performance !== null && performance.now) {
      module.exports = function () {
        return performance.now();
      };
    } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
      module.exports = function () {
        return (getNanoSeconds() - loadTime) / 1e6;
      };

      hrtime = process.hrtime;

      getNanoSeconds = function getNanoSeconds() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };

      loadTime = getNanoSeconds();
    } else if (Date.now) {
      module.exports = function () {
        return Date.now() - loadTime;
      };

      loadTime = Date.now();
    } else {
      module.exports = function () {
        return new Date().getTime() - loadTime;
      };

      loadTime = new Date().getTime();
    }
  }).call(this);
},863,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = function () {
    "use strict";

    var Meteor = {
      _noYieldsAllowed: function nope(f) {
        return f();
      }
    };
    var EJSON,
        EJSONTest,
        i,
        Base64,
        root = {};

    var _ = _require(_dependencyMap[0]);

    var BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var BASE_64_VALS = {};

    for (var i = 0; i < BASE_64_CHARS.length; i++) {
      BASE_64_VALS[BASE_64_CHARS.charAt(i)] = i;
    }

    ;
    Base64 = {};

    Base64.encode = function (array) {
      if (typeof array === "string") {
        var str = array;
        array = Base64.newBinary(str.length);

        for (var i = 0; i < str.length; i++) {
          var ch = str.charCodeAt(i);

          if (ch > 0xFF) {
            throw new Error("Not ascii. Base64.encode can only take ascii strings.");
          }

          array[i] = ch;
        }
      }

      var answer = [];
      var a = null;
      var b = null;
      var c = null;
      var d = null;

      for (var i = 0; i < array.length; i++) {
        switch (i % 3) {
          case 0:
            a = array[i] >> 2 & 0x3F;
            b = (array[i] & 0x03) << 4;
            break;

          case 1:
            b = b | array[i] >> 4 & 0xF;
            c = (array[i] & 0xF) << 2;
            break;

          case 2:
            c = c | array[i] >> 6 & 0x03;
            d = array[i] & 0x3F;
            answer.push(getChar(a));
            answer.push(getChar(b));
            answer.push(getChar(c));
            answer.push(getChar(d));
            a = null;
            b = null;
            c = null;
            d = null;
            break;
        }
      }

      if (a != null) {
        answer.push(getChar(a));
        answer.push(getChar(b));
        if (c == null) answer.push('=');else answer.push(getChar(c));
        if (d == null) answer.push('=');
      }

      return answer.join("");
    };

    var getChar = function getChar(val) {
      return BASE_64_CHARS.charAt(val);
    };

    var getVal = function getVal(ch) {
      if (ch === '=') {
        return -1;
      }

      return BASE_64_VALS[ch];
    };

    Base64.newBinary = function (len) {
      if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {
        var ret = [];

        for (var i = 0; i < len; i++) {
          ret.push(0);
        }

        ret.$Uint8ArrayPolyfill = true;
        return ret;
      }

      return new Uint8Array(new ArrayBuffer(len));
    };

    Base64.decode = function (str) {
      var len = Math.floor(str.length * 3 / 4);

      if (str.charAt(str.length - 1) == '=') {
        len--;
        if (str.charAt(str.length - 2) == '=') len--;
      }

      var arr = Base64.newBinary(len);
      var one = null;
      var two = null;
      var three = null;
      var j = 0;

      for (var i = 0; i < str.length; i++) {
        var c = str.charAt(i);
        var v = getVal(c);

        switch (i % 4) {
          case 0:
            if (v < 0) throw new Error('invalid base64 string');
            one = v << 2;
            break;

          case 1:
            if (v < 0) throw new Error('invalid base64 string');
            one = one | v >> 4;
            arr[j++] = one;
            two = (v & 0x0F) << 4;
            break;

          case 2:
            if (v >= 0) {
              two = two | v >> 2;
              arr[j++] = two;
              three = (v & 0x03) << 6;
            }

            break;

          case 3:
            if (v >= 0) {
              arr[j++] = three | v;
            }

            break;
        }
      }

      return arr;
    };

    EJSON = {};
    EJSONTest = {};
    var customTypes = {};

    EJSON.addType = function (name, factory) {
      if (_.has(customTypes, name)) throw new Error("Type " + name + " already present");
      customTypes[name] = factory;
    };

    var isInfOrNan = function isInfOrNan(obj) {
      return _.isNaN(obj) || obj === Infinity || obj === -Infinity;
    };

    var builtinConverters = [{
      matchJSONValue: function matchJSONValue(obj) {
        return _.has(obj, '$date') && _.size(obj) === 1;
      },
      matchObject: function matchObject(obj) {
        return obj instanceof Date;
      },
      toJSONValue: function toJSONValue(obj) {
        return {
          $date: obj.getTime()
        };
      },
      fromJSONValue: function fromJSONValue(obj) {
        return new Date(obj.$date);
      }
    }, {
      matchJSONValue: function matchJSONValue(obj) {
        return _.has(obj, '$InfNaN') && _.size(obj) === 1;
      },
      matchObject: isInfOrNan,
      toJSONValue: function toJSONValue(obj) {
        var sign;
        if (_.isNaN(obj)) sign = 0;else if (obj === Infinity) sign = 1;else sign = -1;
        return {
          $InfNaN: sign
        };
      },
      fromJSONValue: function fromJSONValue(obj) {
        return obj.$InfNaN / 0;
      }
    }, {
      matchJSONValue: function matchJSONValue(obj) {
        return _.has(obj, '$binary') && _.size(obj) === 1;
      },
      matchObject: function matchObject(obj) {
        return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && _.has(obj, '$Uint8ArrayPolyfill');
      },
      toJSONValue: function toJSONValue(obj) {
        return {
          $binary: Base64.encode(obj)
        };
      },
      fromJSONValue: function fromJSONValue(obj) {
        return Base64.decode(obj.$binary);
      }
    }, {
      matchJSONValue: function matchJSONValue(obj) {
        return _.has(obj, '$escape') && _.size(obj) === 1;
      },
      matchObject: function matchObject(obj) {
        if (_.isEmpty(obj) || _.size(obj) > 2) {
          return false;
        }

        return _.any(builtinConverters, function (converter) {
          return converter.matchJSONValue(obj);
        });
      },
      toJSONValue: function toJSONValue(obj) {
        var newObj = {};

        _.each(obj, function (value, key) {
          newObj[key] = EJSON.toJSONValue(value);
        });

        return {
          $escape: newObj
        };
      },
      fromJSONValue: function fromJSONValue(obj) {
        var newObj = {};

        _.each(obj.$escape, function (value, key) {
          newObj[key] = EJSON.fromJSONValue(value);
        });

        return newObj;
      }
    }, {
      matchJSONValue: function matchJSONValue(obj) {
        return _.has(obj, '$type') && _.has(obj, '$value') && _.size(obj) === 2;
      },
      matchObject: function matchObject(obj) {
        return EJSON._isCustomType(obj);
      },
      toJSONValue: function toJSONValue(obj) {
        var jsonValue = Meteor._noYieldsAllowed(function () {
          return obj.toJSONValue();
        });

        return {
          $type: obj.typeName(),
          $value: jsonValue
        };
      },
      fromJSONValue: function fromJSONValue(obj) {
        var typeName = obj.$type;
        if (!_.has(customTypes, typeName)) throw new Error("Custom EJSON type " + typeName + " is not defined");
        var converter = customTypes[typeName];
        return Meteor._noYieldsAllowed(function () {
          return converter(obj.$value);
        });
      }
    }];

    EJSON._isCustomType = function (obj) {
      return obj && typeof obj.toJSONValue === 'function' && typeof obj.typeName === 'function' && _.has(customTypes, obj.typeName());
    };

    EJSON._getTypes = function () {
      return customTypes;
    };

    EJSON._getConverters = function () {
      return builtinConverters;
    };

    var adjustTypesToJSONValue = EJSON._adjustTypesToJSONValue = function (obj) {
      if (obj === null) return null;
      var maybeChanged = toJSONValueHelper(obj);
      if (maybeChanged !== undefined) return maybeChanged;
      if (typeof obj !== 'object') return obj;

      _.each(obj, function (value, key) {
        if (typeof value !== 'object' && value !== undefined && !isInfOrNan(value)) return;
        var changed = toJSONValueHelper(value);

        if (changed) {
          obj[key] = changed;
          return;
        }

        adjustTypesToJSONValue(value);
      });

      return obj;
    };

    var toJSONValueHelper = function toJSONValueHelper(item) {
      for (var i = 0; i < builtinConverters.length; i++) {
        var converter = builtinConverters[i];

        if (converter.matchObject(item)) {
          return converter.toJSONValue(item);
        }
      }

      return undefined;
    };

    EJSON.toJSONValue = function (item) {
      var changed = toJSONValueHelper(item);
      if (changed !== undefined) return changed;

      if (typeof item === 'object') {
        item = EJSON.clone(item);
        adjustTypesToJSONValue(item);
      }

      return item;
    };

    var adjustTypesFromJSONValue = EJSON._adjustTypesFromJSONValue = function (obj) {
      if (obj === null) return null;
      var maybeChanged = fromJSONValueHelper(obj);
      if (maybeChanged !== obj) return maybeChanged;
      if (typeof obj !== 'object') return obj;

      _.each(obj, function (value, key) {
        if (typeof value === 'object') {
          var changed = fromJSONValueHelper(value);

          if (value !== changed) {
            obj[key] = changed;
            return;
          }

          adjustTypesFromJSONValue(value);
        }
      });

      return obj;
    };

    var fromJSONValueHelper = function fromJSONValueHelper(value) {
      if (typeof value === 'object' && value !== null) {
        if (_.size(value) <= 2 && _.all(value, function (v, k) {
          return typeof k === 'string' && k.substr(0, 1) === '$';
        })) {
          for (var i = 0; i < builtinConverters.length; i++) {
            var converter = builtinConverters[i];

            if (converter.matchJSONValue(value)) {
              return converter.fromJSONValue(value);
            }
          }
        }
      }

      return value;
    };

    EJSON.fromJSONValue = function (item) {
      var changed = fromJSONValueHelper(item);

      if (changed === item && typeof item === 'object') {
        item = EJSON.clone(item);
        adjustTypesFromJSONValue(item);
        return item;
      } else {
        return changed;
      }
    };

    EJSON.stringify = function (item, options) {
      var json = EJSON.toJSONValue(item);

      if (options && (options.canonical || options.indent)) {
        return EJSON._canonicalStringify(json, options);
      } else {
        return JSON.stringify(json);
      }
    };

    EJSON.parse = function (item) {
      if (typeof item !== 'string') throw new Error("EJSON.parse argument should be a string");
      return EJSON.fromJSONValue(JSON.parse(item));
    };

    EJSON.isBinary = function (obj) {
      return !!(typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && obj.$Uint8ArrayPolyfill);
    };

    EJSON.equals = function (a, b, options) {
      var i;
      var keyOrderSensitive = !!(options && options.keyOrderSensitive);
      if (a === b) return true;
      if (_.isNaN(a) && _.isNaN(b)) return true;
      if (!a || !b) return false;
      if (!(typeof a === 'object' && typeof b === 'object')) return false;
      if (a instanceof Date && b instanceof Date) return a.valueOf() === b.valueOf();

      if (EJSON.isBinary(a) && EJSON.isBinary(b)) {
        if (a.length !== b.length) return false;

        for (i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) return false;
        }

        return true;
      }

      if (typeof a.equals === 'function') return a.equals(b, options);
      if (typeof b.equals === 'function') return b.equals(a, options);

      if (a instanceof Array) {
        if (!(b instanceof Array)) return false;
        if (a.length !== b.length) return false;

        for (i = 0; i < a.length; i++) {
          if (!EJSON.equals(a[i], b[i], options)) return false;
        }

        return true;
      }

      switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {
        case 1:
          return false;

        case 2:
          return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));
      }

      var ret;

      if (keyOrderSensitive) {
        var bKeys = [];

        _.each(b, function (val, x) {
          bKeys.push(x);
        });

        i = 0;
        ret = _.all(a, function (val, x) {
          if (i >= bKeys.length) {
            return false;
          }

          if (x !== bKeys[i]) {
            return false;
          }

          if (!EJSON.equals(val, b[bKeys[i]], options)) {
            return false;
          }

          i++;
          return true;
        });
        return ret && i === bKeys.length;
      } else {
        i = 0;
        ret = _.all(a, function (val, key) {
          if (!_.has(b, key)) {
            return false;
          }

          if (!EJSON.equals(val, b[key], options)) {
            return false;
          }

          i++;
          return true;
        });
        return ret && _.size(b) === i;
      }
    };

    EJSON.clone = function (v) {
      var ret;
      if (typeof v !== "object") return v;
      if (v === null) return null;
      if (v instanceof Date) return new Date(v.getTime());
      if (v instanceof RegExp) return v;

      if (EJSON.isBinary(v)) {
        ret = EJSON.newBinary(v.length);

        for (var i = 0; i < v.length; i++) {
          ret[i] = v[i];
        }

        return ret;
      }

      if (_.isArray(v) || _.isArguments(v)) {
        ret = [];

        for (i = 0; i < v.length; i++) {
          ret[i] = EJSON.clone(v[i]);
        }

        return ret;
      }

      if (typeof v.clone === 'function') {
        return v.clone();
      }

      if (EJSON._isCustomType(v)) {
        return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);
      }

      ret = {};

      _.each(v, function (value, key) {
        ret[key] = EJSON.clone(value);
      });

      return ret;
    };

    EJSON.newBinary = Base64.newBinary;

    function quote(string) {
      return JSON.stringify(string);
    }

    var str = function str(key, holder, singleIndent, outerIndent, canonical) {
      var i;
      var k;
      var v;
      var length;
      var innerIndent = outerIndent;
      var partial;
      var value = holder[key];

      switch (typeof value) {
        case 'string':
          return quote(value);

        case 'number':
          return isFinite(value) ? String(value) : 'null';

        case 'boolean':
          return String(value);

        case 'object':
          if (!value) {
            return 'null';
          }

          innerIndent = outerIndent + singleIndent;
          partial = [];

          if (_.isArray(value) || _.isArguments(value)) {
            length = value.length;

            for (i = 0; i < length; i += 1) {
              partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';
            }

            if (partial.length === 0) {
              v = '[]';
            } else if (innerIndent) {
              v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']';
            } else {
              v = '[' + partial.join(',') + ']';
            }

            return v;
          }

          var keys = _.keys(value);

          if (canonical) keys = keys.sort();

          _.each(keys, function (k) {
            v = str(k, value, singleIndent, innerIndent, canonical);

            if (v) {
              partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);
            }
          });

          if (partial.length === 0) {
            v = '{}';
          } else if (innerIndent) {
            v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}';
          } else {
            v = '{' + partial.join(',') + '}';
          }

          return v;
      }
    };

    EJSON._canonicalStringify = function (value, options) {
      options = _.extend({
        indent: "",
        canonical: false
      }, options);

      if (options.indent === true) {
        options.indent = "  ";
      } else if (typeof options.indent === 'number') {
        var newIndent = "";

        for (var i = 0; i < options.indent; i++) {
          newIndent += ' ';
        }

        options.indent = newIndent;
      }

      return str('', {
        '': value
      }, options.indent, "", options.canonical);
    };

    return EJSON;
  }.call(this);
},864,[865]);
__d(function (global, _require, module, exports, _dependencyMap) {
  (function () {
    var root = this;
    var previousUnderscore = root._;
    var ArrayProto = Array.prototype,
        ObjProto = Object.prototype,
        FuncProto = Function.prototype;
    var push = ArrayProto.push,
        slice = ArrayProto.slice,
        toString = ObjProto.toString,
        hasOwnProperty = ObjProto.hasOwnProperty;
    var nativeIsArray = Array.isArray,
        nativeKeys = Object.keys,
        nativeBind = FuncProto.bind,
        nativeCreate = Object.create;

    var Ctor = function Ctor() {};

    var _ = function _(obj) {
      if (obj instanceof _) return obj;
      if (!(this instanceof _)) return new _(obj);
      this._wrapped = obj;
    };

    if (typeof exports !== 'undefined') {
      if (typeof module !== 'undefined' && module.exports) {
        exports = module.exports = _;
      }

      exports._ = _;
    } else {
      root._ = _;
    }

    _.VERSION = '1.8.3';

    var optimizeCb = function optimizeCb(func, context, argCount) {
      if (context === void 0) return func;

      switch (argCount == null ? 3 : argCount) {
        case 1:
          return function (value) {
            return func.call(context, value);
          };

        case 2:
          return function (value, other) {
            return func.call(context, value, other);
          };

        case 3:
          return function (value, index, collection) {
            return func.call(context, value, index, collection);
          };

        case 4:
          return function (accumulator, value, index, collection) {
            return func.call(context, accumulator, value, index, collection);
          };
      }

      return function () {
        return func.apply(context, arguments);
      };
    };

    var cb = function cb(value, context, argCount) {
      if (value == null) return _.identity;
      if (_.isFunction(value)) return optimizeCb(value, context, argCount);
      if (_.isObject(value)) return _.matcher(value);
      return _.property(value);
    };

    _.iteratee = function (value, context) {
      return cb(value, context, Infinity);
    };

    var createAssigner = function createAssigner(keysFunc, undefinedOnly) {
      return function (obj) {
        var length = arguments.length;
        if (length < 2 || obj == null) return obj;

        for (var index = 1; index < length; index++) {
          var source = arguments[index],
              keys = keysFunc(source),
              l = keys.length;

          for (var i = 0; i < l; i++) {
            var key = keys[i];
            if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
          }
        }

        return obj;
      };
    };

    var baseCreate = function baseCreate(prototype) {
      if (!_.isObject(prototype)) return {};
      if (nativeCreate) return nativeCreate(prototype);
      Ctor.prototype = prototype;
      var result = new Ctor();
      Ctor.prototype = null;
      return result;
    };

    var property = function property(key) {
      return function (obj) {
        return obj == null ? void 0 : obj[key];
      };
    };

    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
    var getLength = property('length');

    var isArrayLike = function isArrayLike(collection) {
      var length = getLength(collection);
      return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
    };

    _.each = _.forEach = function (obj, iteratee, context) {
      iteratee = optimizeCb(iteratee, context);
      var i, length;

      if (isArrayLike(obj)) {
        for (i = 0, length = obj.length; i < length; i++) {
          iteratee(obj[i], i, obj);
        }
      } else {
        var keys = _.keys(obj);

        for (i = 0, length = keys.length; i < length; i++) {
          iteratee(obj[keys[i]], keys[i], obj);
        }
      }

      return obj;
    };

    _.map = _.collect = function (obj, iteratee, context) {
      iteratee = cb(iteratee, context);

      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          results = Array(length);

      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        results[index] = iteratee(obj[currentKey], currentKey, obj);
      }

      return results;
    };

    function createReduce(dir) {
      function iterator(obj, iteratee, memo, keys, index, length) {
        for (; index >= 0 && index < length; index += dir) {
          var currentKey = keys ? keys[index] : index;
          memo = iteratee(memo, obj[currentKey], currentKey, obj);
        }

        return memo;
      }

      return function (obj, iteratee, memo, context) {
        iteratee = optimizeCb(iteratee, context, 4);

        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length,
            index = dir > 0 ? 0 : length - 1;

        if (arguments.length < 3) {
          memo = obj[keys ? keys[index] : index];
          index += dir;
        }

        return iterator(obj, iteratee, memo, keys, index, length);
      };
    }

    _.reduce = _.foldl = _.inject = createReduce(1);
    _.reduceRight = _.foldr = createReduce(-1);

    _.find = _.detect = function (obj, predicate, context) {
      var key;

      if (isArrayLike(obj)) {
        key = _.findIndex(obj, predicate, context);
      } else {
        key = _.findKey(obj, predicate, context);
      }

      if (key !== void 0 && key !== -1) return obj[key];
    };

    _.filter = _.select = function (obj, predicate, context) {
      var results = [];
      predicate = cb(predicate, context);

      _.each(obj, function (value, index, list) {
        if (predicate(value, index, list)) results.push(value);
      });

      return results;
    };

    _.reject = function (obj, predicate, context) {
      return _.filter(obj, _.negate(cb(predicate)), context);
    };

    _.every = _.all = function (obj, predicate, context) {
      predicate = cb(predicate, context);

      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length;

      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        if (!predicate(obj[currentKey], currentKey, obj)) return false;
      }

      return true;
    };

    _.some = _.any = function (obj, predicate, context) {
      predicate = cb(predicate, context);

      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length;

      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        if (predicate(obj[currentKey], currentKey, obj)) return true;
      }

      return false;
    };

    _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      if (typeof fromIndex != 'number' || guard) fromIndex = 0;
      return _.indexOf(obj, item, fromIndex) >= 0;
    };

    _.invoke = function (obj, method) {
      var args = slice.call(arguments, 2);

      var isFunc = _.isFunction(method);

      return _.map(obj, function (value) {
        var func = isFunc ? method : value[method];
        return func == null ? func : func.apply(value, args);
      });
    };

    _.pluck = function (obj, key) {
      return _.map(obj, _.property(key));
    };

    _.where = function (obj, attrs) {
      return _.filter(obj, _.matcher(attrs));
    };

    _.findWhere = function (obj, attrs) {
      return _.find(obj, _.matcher(attrs));
    };

    _.max = function (obj, iteratee, context) {
      var result = -Infinity,
          lastComputed = -Infinity,
          value,
          computed;

      if (iteratee == null && obj != null) {
        obj = isArrayLike(obj) ? obj : _.values(obj);

        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];

          if (value > result) {
            result = value;
          }
        }
      } else {
        iteratee = cb(iteratee, context);

        _.each(obj, function (value, index, list) {
          computed = iteratee(value, index, list);

          if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
            result = value;
            lastComputed = computed;
          }
        });
      }

      return result;
    };

    _.min = function (obj, iteratee, context) {
      var result = Infinity,
          lastComputed = Infinity,
          value,
          computed;

      if (iteratee == null && obj != null) {
        obj = isArrayLike(obj) ? obj : _.values(obj);

        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];

          if (value < result) {
            result = value;
          }
        }
      } else {
        iteratee = cb(iteratee, context);

        _.each(obj, function (value, index, list) {
          computed = iteratee(value, index, list);

          if (computed < lastComputed || computed === Infinity && result === Infinity) {
            result = value;
            lastComputed = computed;
          }
        });
      }

      return result;
    };

    _.shuffle = function (obj) {
      var set = isArrayLike(obj) ? obj : _.values(obj);
      var length = set.length;
      var shuffled = Array(length);

      for (var index = 0, rand; index < length; index++) {
        rand = _.random(0, index);
        if (rand !== index) shuffled[index] = shuffled[rand];
        shuffled[rand] = set[index];
      }

      return shuffled;
    };

    _.sample = function (obj, n, guard) {
      if (n == null || guard) {
        if (!isArrayLike(obj)) obj = _.values(obj);
        return obj[_.random(obj.length - 1)];
      }

      return _.shuffle(obj).slice(0, Math.max(0, n));
    };

    _.sortBy = function (obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      return _.pluck(_.map(obj, function (value, index, list) {
        return {
          value: value,
          index: index,
          criteria: iteratee(value, index, list)
        };
      }).sort(function (left, right) {
        var a = left.criteria;
        var b = right.criteria;

        if (a !== b) {
          if (a > b || a === void 0) return 1;
          if (a < b || b === void 0) return -1;
        }

        return left.index - right.index;
      }), 'value');
    };

    var group = function group(behavior) {
      return function (obj, iteratee, context) {
        var result = {};
        iteratee = cb(iteratee, context);

        _.each(obj, function (value, index) {
          var key = iteratee(value, index, obj);
          behavior(result, value, key);
        });

        return result;
      };
    };

    _.groupBy = group(function (result, value, key) {
      if (_.has(result, key)) result[key].push(value);else result[key] = [value];
    });
    _.indexBy = group(function (result, value, key) {
      result[key] = value;
    });
    _.countBy = group(function (result, value, key) {
      if (_.has(result, key)) result[key]++;else result[key] = 1;
    });

    _.toArray = function (obj) {
      if (!obj) return [];
      if (_.isArray(obj)) return slice.call(obj);
      if (isArrayLike(obj)) return _.map(obj, _.identity);
      return _.values(obj);
    };

    _.size = function (obj) {
      if (obj == null) return 0;
      return isArrayLike(obj) ? obj.length : _.keys(obj).length;
    };

    _.partition = function (obj, predicate, context) {
      predicate = cb(predicate, context);
      var pass = [],
          fail = [];

      _.each(obj, function (value, key, obj) {
        (predicate(value, key, obj) ? pass : fail).push(value);
      });

      return [pass, fail];
    };

    _.first = _.head = _.take = function (array, n, guard) {
      if (array == null) return void 0;
      if (n == null || guard) return array[0];
      return _.initial(array, array.length - n);
    };

    _.initial = function (array, n, guard) {
      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
    };

    _.last = function (array, n, guard) {
      if (array == null) return void 0;
      if (n == null || guard) return array[array.length - 1];
      return _.rest(array, Math.max(0, array.length - n));
    };

    _.rest = _.tail = _.drop = function (array, n, guard) {
      return slice.call(array, n == null || guard ? 1 : n);
    };

    _.compact = function (array) {
      return _.filter(array, _.identity);
    };

    var flatten = function flatten(input, shallow, strict, startIndex) {
      var output = [],
          idx = 0;

      for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
        var value = input[i];

        if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
          if (!shallow) value = flatten(value, shallow, strict);
          var j = 0,
              len = value.length;
          output.length += len;

          while (j < len) {
            output[idx++] = value[j++];
          }
        } else if (!strict) {
          output[idx++] = value;
        }
      }

      return output;
    };

    _.flatten = function (array, shallow) {
      return flatten(array, shallow, false);
    };

    _.without = function (array) {
      return _.difference(array, slice.call(arguments, 1));
    };

    _.uniq = _.unique = function (array, isSorted, iteratee, context) {
      if (!_.isBoolean(isSorted)) {
        context = iteratee;
        iteratee = isSorted;
        isSorted = false;
      }

      if (iteratee != null) iteratee = cb(iteratee, context);
      var result = [];
      var seen = [];

      for (var i = 0, length = getLength(array); i < length; i++) {
        var value = array[i],
            computed = iteratee ? iteratee(value, i, array) : value;

        if (isSorted) {
          if (!i || seen !== computed) result.push(value);
          seen = computed;
        } else if (iteratee) {
          if (!_.contains(seen, computed)) {
            seen.push(computed);
            result.push(value);
          }
        } else if (!_.contains(result, value)) {
          result.push(value);
        }
      }

      return result;
    };

    _.union = function () {
      return _.uniq(flatten(arguments, true, true));
    };

    _.intersection = function (array) {
      var result = [];
      var argsLength = arguments.length;

      for (var i = 0, length = getLength(array); i < length; i++) {
        var item = array[i];
        if (_.contains(result, item)) continue;

        for (var j = 1; j < argsLength; j++) {
          if (!_.contains(arguments[j], item)) break;
        }

        if (j === argsLength) result.push(item);
      }

      return result;
    };

    _.difference = function (array) {
      var rest = flatten(arguments, true, true, 1);
      return _.filter(array, function (value) {
        return !_.contains(rest, value);
      });
    };

    _.zip = function () {
      return _.unzip(arguments);
    };

    _.unzip = function (array) {
      var length = array && _.max(array, getLength).length || 0;
      var result = Array(length);

      for (var index = 0; index < length; index++) {
        result[index] = _.pluck(array, index);
      }

      return result;
    };

    _.object = function (list, values) {
      var result = {};

      for (var i = 0, length = getLength(list); i < length; i++) {
        if (values) {
          result[list[i]] = values[i];
        } else {
          result[list[i][0]] = list[i][1];
        }
      }

      return result;
    };

    function createPredicateIndexFinder(dir) {
      return function (array, predicate, context) {
        predicate = cb(predicate, context);
        var length = getLength(array);
        var index = dir > 0 ? 0 : length - 1;

        for (; index >= 0 && index < length; index += dir) {
          if (predicate(array[index], index, array)) return index;
        }

        return -1;
      };
    }

    _.findIndex = createPredicateIndexFinder(1);
    _.findLastIndex = createPredicateIndexFinder(-1);

    _.sortedIndex = function (array, obj, iteratee, context) {
      iteratee = cb(iteratee, context, 1);
      var value = iteratee(obj);
      var low = 0,
          high = getLength(array);

      while (low < high) {
        var mid = Math.floor((low + high) / 2);
        if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;
      }

      return low;
    };

    function createIndexFinder(dir, predicateFind, sortedIndex) {
      return function (array, item, idx) {
        var i = 0,
            length = getLength(array);

        if (typeof idx == 'number') {
          if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
          } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
          }
        } else if (sortedIndex && idx && length) {
          idx = sortedIndex(array, item);
          return array[idx] === item ? idx : -1;
        }

        if (item !== item) {
          idx = predicateFind(slice.call(array, i, length), _.isNaN);
          return idx >= 0 ? idx + i : -1;
        }

        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
          if (array[idx] === item) return idx;
        }

        return -1;
      };
    }

    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

    _.range = function (start, stop, step) {
      if (stop == null) {
        stop = start || 0;
        start = 0;
      }

      step = step || 1;
      var length = Math.max(Math.ceil((stop - start) / step), 0);
      var range = Array(length);

      for (var idx = 0; idx < length; idx++, start += step) {
        range[idx] = start;
      }

      return range;
    };

    var executeBound = function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
      if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
      var self = baseCreate(sourceFunc.prototype);
      var result = sourceFunc.apply(self, args);
      if (_.isObject(result)) return result;
      return self;
    };

    _.bind = function (func, context) {
      if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
      if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
      var args = slice.call(arguments, 2);

      var bound = function bound() {
        return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
      };

      return bound;
    };

    _.partial = function (func) {
      var boundArgs = slice.call(arguments, 1);

      var bound = function bound() {
        var position = 0,
            length = boundArgs.length;
        var args = Array(length);

        for (var i = 0; i < length; i++) {
          args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
        }

        while (position < arguments.length) {
          args.push(arguments[position++]);
        }

        return executeBound(func, bound, this, this, args);
      };

      return bound;
    };

    _.bindAll = function (obj) {
      var i,
          length = arguments.length,
          key;
      if (length <= 1) throw new Error('bindAll must be passed function names');

      for (i = 1; i < length; i++) {
        key = arguments[i];
        obj[key] = _.bind(obj[key], obj);
      }

      return obj;
    };

    _.memoize = function (func, hasher) {
      var memoize = function memoize(key) {
        var cache = memoize.cache;
        var address = '' + (hasher ? hasher.apply(this, arguments) : key);
        if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
        return cache[address];
      };

      memoize.cache = {};
      return memoize;
    };

    _.delay = function (func, wait) {
      var args = slice.call(arguments, 2);
      return setTimeout(function () {
        return func.apply(null, args);
      }, wait);
    };

    _.defer = _.partial(_.delay, _, 1);

    _.throttle = function (func, wait, options) {
      var context, args, result;
      var timeout = null;
      var previous = 0;
      if (!options) options = {};

      var later = function later() {
        previous = options.leading === false ? 0 : _.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      };

      return function () {
        var now = _.now();

        if (!previous && options.leading === false) previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;

        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }

          previous = now;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }

        return result;
      };
    };

    _.debounce = function (func, wait, immediate) {
      var timeout, args, context, timestamp, result;

      var later = function later() {
        var last = _.now() - timestamp;

        if (last < wait && last >= 0) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;

          if (!immediate) {
            result = func.apply(context, args);
            if (!timeout) context = args = null;
          }
        }
      };

      return function () {
        context = this;
        args = arguments;
        timestamp = _.now();
        var callNow = immediate && !timeout;
        if (!timeout) timeout = setTimeout(later, wait);

        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }

        return result;
      };
    };

    _.wrap = function (func, wrapper) {
      return _.partial(wrapper, func);
    };

    _.negate = function (predicate) {
      return function () {
        return !predicate.apply(this, arguments);
      };
    };

    _.compose = function () {
      var args = arguments;
      var start = args.length - 1;
      return function () {
        var i = start;
        var result = args[start].apply(this, arguments);

        while (i--) {
          result = args[i].call(this, result);
        }

        return result;
      };
    };

    _.after = function (times, func) {
      return function () {
        if (--times < 1) {
          return func.apply(this, arguments);
        }
      };
    };

    _.before = function (times, func) {
      var memo;
      return function () {
        if (--times > 0) {
          memo = func.apply(this, arguments);
        }

        if (times <= 1) func = null;
        return memo;
      };
    };

    _.once = _.partial(_.before, 2);
    var hasEnumBug = !{
      toString: null
    }.propertyIsEnumerable('toString');
    var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

    function collectNonEnumProps(obj, keys) {
      var nonEnumIdx = nonEnumerableProps.length;
      var constructor = obj.constructor;
      var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;
      var prop = 'constructor';
      if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

      while (nonEnumIdx--) {
        prop = nonEnumerableProps[nonEnumIdx];

        if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
          keys.push(prop);
        }
      }
    }

    _.keys = function (obj) {
      if (!_.isObject(obj)) return [];
      if (nativeKeys) return nativeKeys(obj);
      var keys = [];

      for (var key in obj) {
        if (_.has(obj, key)) keys.push(key);
      }

      if (hasEnumBug) collectNonEnumProps(obj, keys);
      return keys;
    };

    _.allKeys = function (obj) {
      if (!_.isObject(obj)) return [];
      var keys = [];

      for (var key in obj) {
        keys.push(key);
      }

      if (hasEnumBug) collectNonEnumProps(obj, keys);
      return keys;
    };

    _.values = function (obj) {
      var keys = _.keys(obj);

      var length = keys.length;
      var values = Array(length);

      for (var i = 0; i < length; i++) {
        values[i] = obj[keys[i]];
      }

      return values;
    };

    _.mapObject = function (obj, iteratee, context) {
      iteratee = cb(iteratee, context);

      var keys = _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;

      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }

      return results;
    };

    _.pairs = function (obj) {
      var keys = _.keys(obj);

      var length = keys.length;
      var pairs = Array(length);

      for (var i = 0; i < length; i++) {
        pairs[i] = [keys[i], obj[keys[i]]];
      }

      return pairs;
    };

    _.invert = function (obj) {
      var result = {};

      var keys = _.keys(obj);

      for (var i = 0, length = keys.length; i < length; i++) {
        result[obj[keys[i]]] = keys[i];
      }

      return result;
    };

    _.functions = _.methods = function (obj) {
      var names = [];

      for (var key in obj) {
        if (_.isFunction(obj[key])) names.push(key);
      }

      return names.sort();
    };

    _.extend = createAssigner(_.allKeys);
    _.extendOwn = _.assign = createAssigner(_.keys);

    _.findKey = function (obj, predicate, context) {
      predicate = cb(predicate, context);

      var keys = _.keys(obj),
          key;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (predicate(obj[key], key, obj)) return key;
      }
    };

    _.pick = function (object, oiteratee, context) {
      var result = {},
          obj = object,
          iteratee,
          keys;
      if (obj == null) return result;

      if (_.isFunction(oiteratee)) {
        keys = _.allKeys(obj);
        iteratee = optimizeCb(oiteratee, context);
      } else {
        keys = flatten(arguments, false, false, 1);

        iteratee = function iteratee(value, key, obj) {
          return key in obj;
        };

        obj = Object(obj);
      }

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }

      return result;
    };

    _.omit = function (obj, iteratee, context) {
      if (_.isFunction(iteratee)) {
        iteratee = _.negate(iteratee);
      } else {
        var keys = _.map(flatten(arguments, false, false, 1), String);

        iteratee = function iteratee(value, key) {
          return !_.contains(keys, key);
        };
      }

      return _.pick(obj, iteratee, context);
    };

    _.defaults = createAssigner(_.allKeys, true);

    _.create = function (prototype, props) {
      var result = baseCreate(prototype);
      if (props) _.extendOwn(result, props);
      return result;
    };

    _.clone = function (obj) {
      if (!_.isObject(obj)) return obj;
      return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };

    _.tap = function (obj, interceptor) {
      interceptor(obj);
      return obj;
    };

    _.isMatch = function (object, attrs) {
      var keys = _.keys(attrs),
          length = keys.length;

      if (object == null) return !length;
      var obj = Object(object);

      for (var i = 0; i < length; i++) {
        var key = keys[i];
        if (attrs[key] !== obj[key] || !(key in obj)) return false;
      }

      return true;
    };

    var eq = function eq(a, b, aStack, bStack) {
      if (a === b) return a !== 0 || 1 / a === 1 / b;
      if (a == null || b == null) return a === b;
      if (a instanceof _) a = a._wrapped;
      if (b instanceof _) b = b._wrapped;
      var className = toString.call(a);
      if (className !== toString.call(b)) return false;

      switch (className) {
        case '[object RegExp]':
        case '[object String]':
          return '' + a === '' + b;

        case '[object Number]':
          if (+a !== +a) return +b !== +b;
          return +a === 0 ? 1 / +a === 1 / b : +a === +b;

        case '[object Date]':
        case '[object Boolean]':
          return +a === +b;
      }

      var areArrays = className === '[object Array]';

      if (!areArrays) {
        if (typeof a != 'object' || typeof b != 'object') return false;
        var aCtor = a.constructor,
            bCtor = b.constructor;

        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {
          return false;
        }
      }

      aStack = aStack || [];
      bStack = bStack || [];
      var length = aStack.length;

      while (length--) {
        if (aStack[length] === a) return bStack[length] === b;
      }

      aStack.push(a);
      bStack.push(b);

      if (areArrays) {
        length = a.length;
        if (length !== b.length) return false;

        while (length--) {
          if (!eq(a[length], b[length], aStack, bStack)) return false;
        }
      } else {
        var keys = _.keys(a),
            key;

        length = keys.length;
        if (_.keys(b).length !== length) return false;

        while (length--) {
          key = keys[length];
          if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
        }
      }

      aStack.pop();
      bStack.pop();
      return true;
    };

    _.isEqual = function (a, b) {
      return eq(a, b);
    };

    _.isEmpty = function (obj) {
      if (obj == null) return true;
      if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
      return _.keys(obj).length === 0;
    };

    _.isElement = function (obj) {
      return !!(obj && obj.nodeType === 1);
    };

    _.isArray = nativeIsArray || function (obj) {
      return toString.call(obj) === '[object Array]';
    };

    _.isObject = function (obj) {
      var type = typeof obj;
      return type === 'function' || type === 'object' && !!obj;
    };

    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function (name) {
      _['is' + name] = function (obj) {
        return toString.call(obj) === '[object ' + name + ']';
      };
    });

    if (!_.isArguments(arguments)) {
      _.isArguments = function (obj) {
        return _.has(obj, 'callee');
      };
    }

    if (typeof /./ != 'function' && typeof Int8Array != 'object') {
      _.isFunction = function (obj) {
        return typeof obj == 'function' || false;
      };
    }

    _.isFinite = function (obj) {
      return isFinite(obj) && !isNaN(parseFloat(obj));
    };

    _.isNaN = function (obj) {
      return _.isNumber(obj) && obj !== +obj;
    };

    _.isBoolean = function (obj) {
      return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
    };

    _.isNull = function (obj) {
      return obj === null;
    };

    _.isUndefined = function (obj) {
      return obj === void 0;
    };

    _.has = function (obj, key) {
      return obj != null && hasOwnProperty.call(obj, key);
    };

    _.noConflict = function () {
      root._ = previousUnderscore;
      return this;
    };

    _.identity = function (value) {
      return value;
    };

    _.constant = function (value) {
      return function () {
        return value;
      };
    };

    _.noop = function () {};

    _.property = property;

    _.propertyOf = function (obj) {
      return obj == null ? function () {} : function (key) {
        return obj[key];
      };
    };

    _.matcher = _.matches = function (attrs) {
      attrs = _.extendOwn({}, attrs);
      return function (obj) {
        return _.isMatch(obj, attrs);
      };
    };

    _.times = function (n, iteratee, context) {
      var accum = Array(Math.max(0, n));
      iteratee = optimizeCb(iteratee, context, 1);

      for (var i = 0; i < n; i++) {
        accum[i] = iteratee(i);
      }

      return accum;
    };

    _.random = function (min, max) {
      if (max == null) {
        max = min;
        min = 0;
      }

      return min + Math.floor(Math.random() * (max - min + 1));
    };

    _.now = Date.now || function () {
      return new Date().getTime();
    };

    var escapeMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '`': '&#x60;'
    };

    var unescapeMap = _.invert(escapeMap);

    var createEscaper = function createEscaper(map) {
      var escaper = function escaper(match) {
        return map[match];
      };

      var source = '(?:' + _.keys(map).join('|') + ')';
      var testRegexp = RegExp(source);
      var replaceRegexp = RegExp(source, 'g');
      return function (string) {
        string = string == null ? '' : '' + string;
        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
      };
    };

    _.escape = createEscaper(escapeMap);
    _.unescape = createEscaper(unescapeMap);

    _.result = function (object, property, fallback) {
      var value = object == null ? void 0 : object[property];

      if (value === void 0) {
        value = fallback;
      }

      return _.isFunction(value) ? value.call(object) : value;
    };

    var idCounter = 0;

    _.uniqueId = function (prefix) {
      var id = ++idCounter + '';
      return prefix ? prefix + id : id;
    };

    _.templateSettings = {
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/;
    var escapes = {
      "'": "'",
      '\\': '\\',
      '\r': 'r',
      '\n': 'n',
      "\u2028": 'u2028',
      "\u2029": 'u2029'
    };
    var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

    var escapeChar = function escapeChar(match) {
      return '\\' + escapes[match];
    };

    _.template = function (text, settings, oldSettings) {
      if (!settings && oldSettings) settings = oldSettings;
      settings = _.defaults({}, settings, _.templateSettings);
      var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g');
      var index = 0;
      var source = "__p+='";
      text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
        source += text.slice(index, offset).replace(escaper, escapeChar);
        index = offset + match.length;

        if (escape) {
          source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
        } else if (interpolate) {
          source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
        } else if (evaluate) {
          source += "';\n" + evaluate + "\n__p+='";
        }

        return match;
      });
      source += "';\n";
      if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
      source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + 'return __p;\n';

      try {
        var render = new Function(settings.variable || 'obj', '_', source);
      } catch (e) {
        e.source = source;
        throw e;
      }

      var template = function template(data) {
        return render.call(this, data, _);
      };

      var argument = settings.variable || 'obj';
      template.source = 'function(' + argument + '){\n' + source + '}';
      return template;
    };

    _.chain = function (obj) {
      var instance = _(obj);

      instance._chain = true;
      return instance;
    };

    var result = function result(instance, obj) {
      return instance._chain ? _(obj).chain() : obj;
    };

    _.mixin = function (obj) {
      _.each(_.functions(obj), function (name) {
        var func = _[name] = obj[name];

        _.prototype[name] = function () {
          var args = [this._wrapped];
          push.apply(args, arguments);
          return result(this, func.apply(_, args));
        };
      });
    };

    _.mixin(_);

    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
      var method = ArrayProto[name];

      _.prototype[name] = function () {
        var obj = this._wrapped;
        method.apply(obj, arguments);
        if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
        return result(this, obj);
      };
    });

    _.each(['concat', 'join', 'slice'], function (name) {
      var method = ArrayProto[name];

      _.prototype[name] = function () {
        return result(this, method.apply(this._wrapped, arguments));
      };
    });

    _.prototype.value = function () {
      return this._wrapped;
    };

    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

    _.prototype.toString = function () {
      return '' + this._wrapped;
    };

    if (typeof define === 'function' && define.amd) {
      define('underscore', [], function () {
        return _;
      });
    }
  }).call(this);
},865,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _wolfy87Eventemitter = _require(_dependencyMap[0]);

  var _wolfy87Eventemitter2 = babelHelpers.interopRequireDefault(_wolfy87Eventemitter);

  var _queue = _require(_dependencyMap[1]);

  var _queue2 = babelHelpers.interopRequireDefault(_queue);

  var _socket = _require(_dependencyMap[2]);

  var _socket2 = babelHelpers.interopRequireDefault(_socket);

  var _utils = _require(_dependencyMap[3]);

  var DDP_VERSION = '1';
  var PUBLIC_EVENTS = ['ready', 'nosub', 'added', 'changed', 'removed', 'result', 'updated', 'error'];
  var DEFAULT_RECONNECT_INTERVAL = 10000;

  var DDP = function (_EventEmitter) {
    babelHelpers.inherits(DDP, _EventEmitter);
    babelHelpers.createClass(DDP, [{
      key: "emit",
      value: function emit() {
        var _babelHelpers$get;

        setTimeout((_babelHelpers$get = babelHelpers.get(DDP.prototype.__proto__ || Object.getPrototypeOf(DDP.prototype), "emit", this)).bind.apply(_babelHelpers$get, [this].concat(Array.prototype.slice.call(arguments))), 0);
      }
    }]);

    function DDP(options) {
      babelHelpers.classCallCheck(this, DDP);

      var _this = babelHelpers.possibleConstructorReturn(this, (DDP.__proto__ || Object.getPrototypeOf(DDP)).call(this));

      _this.status = 'disconnected';
      _this.autoConnect = options.autoConnect !== false;
      _this.autoReconnect = options.autoReconnect !== false;
      _this.reconnectInterval = options.reconnectInterval || DEFAULT_RECONNECT_INTERVAL;
      _this.messageQueue = new _queue2.default(function (message) {
        if (_this.status === 'connected') {
          _this.socket.send(message);

          return true;
        } else {
          return false;
        }
      });
      _this.socket = new _socket2.default(options.SocketConstructor, options.endpoint);

      _this.socket.on('open', function () {
        _this.socket.send({
          msg: 'connect',
          version: DDP_VERSION,
          support: [DDP_VERSION]
        });
      });

      _this.socket.on('close', function () {
        _this.status = 'disconnected';

        _this.messageQueue.empty();

        _this.emit('disconnected');

        if (_this.autoReconnect) {
          setTimeout(_this.socket.open.bind(_this.socket), _this.reconnectInterval);
        }
      });

      _this.socket.on('message:in', function (message) {
        if (message.msg === 'connected') {
          _this.status = 'connected';

          _this.messageQueue.process();

          _this.emit('connected');
        } else if (message.msg === 'ping') {
          _this.socket.send({
            msg: 'pong',
            id: message.id
          });
        } else if ((0, _utils.contains)(PUBLIC_EVENTS, message.msg)) {
          _this.emit(message.msg, message);
        }
      });

      if (_this.autoConnect) {
        _this.connect();
      }

      return _this;
    }

    babelHelpers.createClass(DDP, [{
      key: "connect",
      value: function connect() {
        this.socket.open();
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        this.autoReconnect = false;
        this.socket.close();
      }
    }, {
      key: "method",
      value: function method(name, params) {
        var id = (0, _utils.uniqueId)();
        this.messageQueue.push({
          msg: 'method',
          id: id,
          method: name,
          params: params
        });
        return id;
      }
    }, {
      key: "sub",
      value: function sub(name, params) {
        var id = (0, _utils.uniqueId)();
        this.messageQueue.push({
          msg: 'sub',
          id: id,
          name: name,
          params: params
        });
        return id;
      }
    }, {
      key: "unsub",
      value: function unsub(id) {
        this.messageQueue.push({
          msg: 'unsub',
          id: id
        });
        return id;
      }
    }]);
    return DDP;
  }(_wolfy87Eventemitter2.default);

  exports.default = DDP;
},866,[867,868,869,871]);
__d(function (global, _require, module, exports, _dependencyMap) {
    /*!
     * EventEmitter v4.2.11 - git.io/ee
     * Unlicense - http://unlicense.org/
     * Oliver Caldwell - http://oli.me.uk/
     * @preserve
     */;
    (function () {
        'use strict';

        function EventEmitter() {}

        var proto = EventEmitter.prototype;
        var exports = this;
        var originalGlobalValue = exports.EventEmitter;

        function indexOfListener(listeners, listener) {
            var i = listeners.length;

            while (i--) {
                if (listeners[i].listener === listener) {
                    return i;
                }
            }

            return -1;
        }

        function alias(name) {
            return function aliasClosure() {
                return this[name].apply(this, arguments);
            };
        }

        proto.getListeners = function getListeners(evt) {
            var events = this._getEvents();

            var response;
            var key;

            if (evt instanceof RegExp) {
                response = {};

                for (key in events) {
                    if (events.hasOwnProperty(key) && evt.test(key)) {
                        response[key] = events[key];
                    }
                }
            } else {
                response = events[evt] || (events[evt] = []);
            }

            return response;
        };

        proto.flattenListeners = function flattenListeners(listeners) {
            var flatListeners = [];
            var i;

            for (i = 0; i < listeners.length; i += 1) {
                flatListeners.push(listeners[i].listener);
            }

            return flatListeners;
        };

        proto.getListenersAsObject = function getListenersAsObject(evt) {
            var listeners = this.getListeners(evt);
            var response;

            if (listeners instanceof Array) {
                response = {};
                response[evt] = listeners;
            }

            return response || listeners;
        };

        proto.addListener = function addListener(evt, listener) {
            var listeners = this.getListenersAsObject(evt);
            var listenerIsWrapped = typeof listener === 'object';
            var key;

            for (key in listeners) {
                if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                    listeners[key].push(listenerIsWrapped ? listener : {
                        listener: listener,
                        once: false
                    });
                }
            }

            return this;
        };

        proto.on = alias('addListener');

        proto.addOnceListener = function addOnceListener(evt, listener) {
            return this.addListener(evt, {
                listener: listener,
                once: true
            });
        };

        proto.once = alias('addOnceListener');

        proto.defineEvent = function defineEvent(evt) {
            this.getListeners(evt);
            return this;
        };

        proto.defineEvents = function defineEvents(evts) {
            for (var i = 0; i < evts.length; i += 1) {
                this.defineEvent(evts[i]);
            }

            return this;
        };

        proto.removeListener = function removeListener(evt, listener) {
            var listeners = this.getListenersAsObject(evt);
            var index;
            var key;

            for (key in listeners) {
                if (listeners.hasOwnProperty(key)) {
                    index = indexOfListener(listeners[key], listener);

                    if (index !== -1) {
                        listeners[key].splice(index, 1);
                    }
                }
            }

            return this;
        };

        proto.off = alias('removeListener');

        proto.addListeners = function addListeners(evt, listeners) {
            return this.manipulateListeners(false, evt, listeners);
        };

        proto.removeListeners = function removeListeners(evt, listeners) {
            return this.manipulateListeners(true, evt, listeners);
        };

        proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
            var i;
            var value;
            var single = remove ? this.removeListener : this.addListener;
            var multiple = remove ? this.removeListeners : this.addListeners;

            if (typeof evt === 'object' && !(evt instanceof RegExp)) {
                for (i in evt) {
                    if (evt.hasOwnProperty(i) && (value = evt[i])) {
                        if (typeof value === 'function') {
                            single.call(this, i, value);
                        } else {
                            multiple.call(this, i, value);
                        }
                    }
                }
            } else {
                i = listeners.length;

                while (i--) {
                    single.call(this, evt, listeners[i]);
                }
            }

            return this;
        };

        proto.removeEvent = function removeEvent(evt) {
            var type = typeof evt;

            var events = this._getEvents();

            var key;

            if (type === 'string') {
                delete events[evt];
            } else if (evt instanceof RegExp) {
                for (key in events) {
                    if (events.hasOwnProperty(key) && evt.test(key)) {
                        delete events[key];
                    }
                }
            } else {
                delete this._events;
            }

            return this;
        };

        proto.removeAllListeners = alias('removeEvent');

        proto.emitEvent = function emitEvent(evt, args) {
            var listenersMap = this.getListenersAsObject(evt);
            var listeners;
            var listener;
            var i;
            var key;
            var response;

            for (key in listenersMap) {
                if (listenersMap.hasOwnProperty(key)) {
                    listeners = listenersMap[key].slice(0);
                    i = listeners.length;

                    while (i--) {
                        listener = listeners[i];

                        if (listener.once === true) {
                            this.removeListener(evt, listener.listener);
                        }

                        response = listener.listener.apply(this, args || []);

                        if (response === this._getOnceReturnValue()) {
                            this.removeListener(evt, listener.listener);
                        }
                    }
                }
            }

            return this;
        };

        proto.trigger = alias('emitEvent');

        proto.emit = function emit(evt) {
            var args = Array.prototype.slice.call(arguments, 1);
            return this.emitEvent(evt, args);
        };

        proto.setOnceReturnValue = function setOnceReturnValue(value) {
            this._onceReturnValue = value;
            return this;
        };

        proto._getOnceReturnValue = function _getOnceReturnValue() {
            if (this.hasOwnProperty('_onceReturnValue')) {
                return this._onceReturnValue;
            } else {
                return true;
            }
        };

        proto._getEvents = function _getEvents() {
            return this._events || (this._events = {});
        };

        EventEmitter.noConflict = function noConflict() {
            exports.EventEmitter = originalGlobalValue;
            return EventEmitter;
        };

        if (typeof define === 'function' && define.amd) {
            define(function () {
                return EventEmitter;
            });
        } else if (typeof module === 'object' && module.exports) {
            module.exports = EventEmitter;
        } else {
            exports.EventEmitter = EventEmitter;
        }
    }).call(this);
},867,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var Queue = function () {
    function Queue(consumer) {
      babelHelpers.classCallCheck(this, Queue);
      this.consumer = consumer;
      this.queue = [];
    }

    babelHelpers.createClass(Queue, [{
      key: "push",
      value: function push(element) {
        this.queue.push(element);
        this.process();
      }
    }, {
      key: "process",
      value: function process() {
        if (this.queue.length !== 0) {
          var ack = this.consumer(this.queue[0]);

          if (ack) {
            this.queue.shift();
            this.process();
          }
        }
      }
    }, {
      key: "empty",
      value: function empty() {
        this.queue = [];
      }
    }]);
    return Queue;
  }();

  exports.default = Queue;
},868,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _wolfy87Eventemitter = _require(_dependencyMap[0]);

  var _wolfy87Eventemitter2 = babelHelpers.interopRequireDefault(_wolfy87Eventemitter);

  var _ejson = _require(_dependencyMap[1]);

  var _ejson2 = babelHelpers.interopRequireDefault(_ejson);

  _require(_dependencyMap[2]);

  var Socket = function (_EventEmitter) {
    babelHelpers.inherits(Socket, _EventEmitter);

    function Socket(SocketConstructor, endpoint) {
      babelHelpers.classCallCheck(this, Socket);

      var _this = babelHelpers.possibleConstructorReturn(this, (Socket.__proto__ || Object.getPrototypeOf(Socket)).call(this));

      _this.SocketConstructor = SocketConstructor;
      _this.endpoint = endpoint;
      _this.rawSocket = null;
      return _this;
    }

    babelHelpers.createClass(Socket, [{
      key: "send",
      value: function send(object) {
        if (!this.closing) {
          var message = _ejson2.default.stringify(object);

          this.rawSocket.send(message);
          this.emit('message:out', _ejson2.default.parse(message));
        }
      }
    }, {
      key: "open",
      value: function open() {
        var _this2 = this;

        if (this.rawSocket) {
          return;
        }

        this.closing = false;
        this.rawSocket = new this.SocketConstructor(this.endpoint);

        this.rawSocket.onopen = function () {
          return _this2.emit('open');
        };

        this.rawSocket.onclose = function () {
          _this2.rawSocket = null;

          _this2.emit('close');

          _this2.closing = false;
        };

        this.rawSocket.onmessage = function (message) {
          var object;

          try {
            object = _ejson2.default.parse(message.data);
          } catch (ignore) {
            return;
          }

          _this2.emit('message:in', object);
        };
      }
    }, {
      key: "close",
      value: function close() {
        if (this.rawSocket) {
          this.closing = true;
          this.rawSocket.close();
        }
      }
    }]);
    return Socket;
  }(_wolfy87Eventemitter2.default);

  exports.default = Socket;
},869,[867,864,870]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _ejson = _require(_dependencyMap[0]);

  var _ejson2 = babelHelpers.interopRequireDefault(_ejson);

  var MongoID = {};

  MongoID._looksLikeObjectID = function (str) {
    return str.length === 24 && str.match(/^[0-9a-f]*$/);
  };

  MongoID.ObjectID = function (hexString) {
    var self = this;

    if (hexString) {
      hexString = hexString.toLowerCase();

      if (!MongoID._looksLikeObjectID(hexString)) {
        throw new Error('Invalid hexadecimal string for creating an ObjectID');
      }

      self._str = hexString;
    } else {
      self._str = Random.hexString(24);
    }
  };

  MongoID.ObjectID.prototype.toString = function () {
    var self = this;
    return 'ObjectID("' + self._str + '")';
  };

  MongoID.ObjectID.prototype.equals = function (other) {
    var self = this;
    return other instanceof MongoID.ObjectID && self.valueOf() === other.valueOf();
  };

  MongoID.ObjectID.prototype.clone = function () {
    var self = this;
    return new MongoID.ObjectID(self._str);
  };

  MongoID.ObjectID.prototype.typeName = function () {
    return 'oid';
  };

  MongoID.ObjectID.prototype.getTimestamp = function () {
    var self = this;
    return parseInt(self._str.substr(0, 8), 16);
  };

  MongoID.ObjectID.prototype.valueOf = MongoID.ObjectID.prototype.toJSONValue = MongoID.ObjectID.prototype.toHexString = function () {
    return this._str;
  };

  _ejson2.default.addType('oid', function (str) {
    return new MongoID.ObjectID(str);
  });

  MongoID.idStringify = function (id) {
    if (id instanceof MongoID.ObjectID) {
      return id.valueOf();
    } else if (typeof id === 'string') {
      if (id === '') {
        return id;
      } else if (id.substr(0, 1) === '-' || id.substr(0, 1) === '~' || MongoID._looksLikeObjectID(id) || id.substr(0, 1) === '{') {
        return '-' + id;
      } else {
        return id;
      }
    } else if (id === undefined) {
      return '-';
    } else if (typeof id === 'object' && id !== null) {
      throw new Error('Meteor does not currently support objects other than ObjectID as ids');
    } else {
      return '~' + JSON.stringify(id);
    }
  };

  MongoID.idParse = function (id) {
    if (id === '') {
      return id;
    } else if (id === '-') {
      return undefined;
    } else if (id.substr(0, 1) === '-') {
      return id.substr(1);
    } else if (id.substr(0, 1) === '~') {
      return JSON.parse(id.substr(1));
    } else if (MongoID._looksLikeObjectID(id)) {
      return new MongoID.ObjectID(id);
    } else {
      return id;
    }
  };
},870,[864]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.uniqueId = uniqueId;
  exports.contains = contains;
  exports.hashPassword = hashPassword;
  exports.isPlainObject = isPlainObject;

  var _sha = _require(_dependencyMap[0]);

  var _sha2 = babelHelpers.interopRequireDefault(_sha);

  var _underscore = _require(_dependencyMap[1]);

  var _underscore2 = babelHelpers.interopRequireDefault(_underscore);

  var i = 0;

  function uniqueId() {
    return (i++).toString();
  }

  function contains(array, element) {
    return array.indexOf(element) !== -1;
  }

  function hashPassword(password) {
    return {
      digest: (0, _sha2.default)(password).toString(),
      algorithm: 'sha-256'
    };
  }

  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var support = {};

  _underscore2.default.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (name, i) {
    class2type['[object ' + name + ']'] = name.toLowerCase();
  });

  function type(obj) {
    if (obj == null) {
      return obj + '';
    }

    return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
  }

  function isWindow(obj) {
    return obj != null && obj == obj.window;
  }

  function isPlainObject(obj) {
    var key;

    if (!obj || type(obj) !== 'object' || obj.nodeType || isWindow(obj)) {
      return false;
    }

    try {
      if (obj.constructor && !hasOwn.call(obj, 'constructor') && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
        return false;
      }
    } catch (e) {
      return false;
    }

    if (support.ownLast) {
      for (key in obj) {
        return hasOwn.call(obj, key);
      }
    }

    for (key in obj) {}

    return key === undefined || hasOwn.call(obj, key);
  }
},871,[872,874]);
__d(function (global, _require, module, exports, _dependencyMap) {
	;

	(function (root, factory) {
		if (typeof exports === "object") {
			module.exports = exports = factory(_require(_dependencyMap[0]));
		} else if (typeof define === "function" && define.amd) {
			define(["./core"], factory);
		} else {
			factory(root.CryptoJS);
		}
	})(this, function (CryptoJS) {
		(function (Math) {
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_algo = C.algo;
			var H = [];
			var K = [];

			(function () {
				function isPrime(n) {
					var sqrtN = Math.sqrt(n);

					for (var factor = 2; factor <= sqrtN; factor++) {
						if (!(n % factor)) {
							return false;
						}
					}

					return true;
				}

				function getFractionalBits(n) {
					return (n - (n | 0)) * 0x100000000 | 0;
				}

				var n = 2;
				var nPrime = 0;

				while (nPrime < 64) {
					if (isPrime(n)) {
						if (nPrime < 8) {
							H[nPrime] = getFractionalBits(Math.pow(n, 0.5));
						}

						K[nPrime] = getFractionalBits(Math.pow(n, 0.3333333333333333));
						nPrime++;
					}

					n++;
				}
			})();

			var W = [];
			var SHA256 = C_algo.SHA256 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new WordArray.init(H.slice(0));
				},
				_doProcessBlock: function _doProcessBlock(M, offset) {
					var H = this._hash.words;
					var a = H[0];
					var b = H[1];
					var c = H[2];
					var d = H[3];
					var e = H[4];
					var f = H[5];
					var g = H[6];
					var h = H[7];

					for (var i = 0; i < 64; i++) {
						if (i < 16) {
							W[i] = M[offset + i] | 0;
						} else {
							var gamma0x = W[i - 15];
							var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
							var gamma1x = W[i - 2];
							var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
							W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
						}

						var ch = e & f ^ ~e & g;
						var maj = a & b ^ a & c ^ b & c;
						var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
						var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
						var t1 = h + sigma1 + ch + K[i] + W[i];
						var t2 = sigma0 + maj;
						h = g;
						g = f;
						f = e;
						e = d + t1 | 0;
						d = c;
						c = b;
						b = a;
						a = t1 + t2 | 0;
					}

					H[0] = H[0] + a | 0;
					H[1] = H[1] + b | 0;
					H[2] = H[2] + c | 0;
					H[3] = H[3] + d | 0;
					H[4] = H[4] + e | 0;
					H[5] = H[5] + f | 0;
					H[6] = H[6] + g | 0;
					H[7] = H[7] + h | 0;
				},
				_doFinalize: function _doFinalize() {
					var data = this._data;
					var dataWords = data.words;
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
					data.sigBytes = dataWords.length * 4;

					this._process();

					return this._hash;
				},
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
					return clone;
				}
			});
			C.SHA256 = Hasher._createHelper(SHA256);
			C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
		})(Math);

		return CryptoJS.SHA256;
	});
},872,[873]);
__d(function (global, _require, module, exports, _dependencyMap) {
	;

	(function (root, factory) {
		if (typeof exports === "object") {
			module.exports = exports = factory();
		} else if (typeof define === "function" && define.amd) {
			define([], factory);
		} else {
			root.CryptoJS = factory();
		}
	})(this, function () {
		var CryptoJS = CryptoJS || function (Math, undefined) {
			var create = Object.create || function () {
				function F() {}

				;
				return function (obj) {
					var subtype;
					F.prototype = obj;
					subtype = new F();
					F.prototype = null;
					return subtype;
				};
			}();

			var C = {};
			var C_lib = C.lib = {};

			var Base = C_lib.Base = function () {
				return {
					extend: function extend(overrides) {
						var subtype = create(this);

						if (overrides) {
							subtype.mixIn(overrides);
						}

						if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
							subtype.init = function () {
								subtype.$super.init.apply(this, arguments);
							};
						}

						subtype.init.prototype = subtype;
						subtype.$super = this;
						return subtype;
					},
					create: function create() {
						var instance = this.extend();
						instance.init.apply(instance, arguments);
						return instance;
					},
					init: function init() {},
					mixIn: function mixIn(properties) {
						for (var propertyName in properties) {
							if (properties.hasOwnProperty(propertyName)) {
								this[propertyName] = properties[propertyName];
							}
						}

						if (properties.hasOwnProperty('toString')) {
							this.toString = properties.toString;
						}
					},
					clone: function clone() {
						return this.init.prototype.extend(this);
					}
				};
			}();

			var WordArray = C_lib.WordArray = Base.extend({
				init: function init(words, sigBytes) {
					words = this.words = words || [];

					if (sigBytes != undefined) {
						this.sigBytes = sigBytes;
					} else {
						this.sigBytes = words.length * 4;
					}
				},
				toString: function toString(encoder) {
					return (encoder || Hex).stringify(this);
				},
				concat: function concat(wordArray) {
					var thisWords = this.words;
					var thatWords = wordArray.words;
					var thisSigBytes = this.sigBytes;
					var thatSigBytes = wordArray.sigBytes;
					this.clamp();

					if (thisSigBytes % 4) {
						for (var i = 0; i < thatSigBytes; i++) {
							var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
							thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
						}
					} else {
						for (var i = 0; i < thatSigBytes; i += 4) {
							thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
						}
					}

					this.sigBytes += thatSigBytes;
					return this;
				},
				clamp: function clamp() {
					var words = this.words;
					var sigBytes = this.sigBytes;
					words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
					words.length = Math.ceil(sigBytes / 4);
				},
				clone: function clone() {
					var clone = Base.clone.call(this);
					clone.words = this.words.slice(0);
					return clone;
				},
				random: function random(nBytes) {
					var words = [];

					var r = function r(m_w) {
						var m_w = m_w;
						var m_z = 0x3ade68b1;
						var mask = 0xffffffff;
						return function () {
							m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;
							m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;
							var result = (m_z << 0x10) + m_w & mask;
							result /= 0x100000000;
							result += 0.5;
							return result * (Math.random() > .5 ? 1 : -1);
						};
					};

					for (var i = 0, rcache; i < nBytes; i += 4) {
						var _r = r((rcache || Math.random()) * 0x100000000);

						rcache = _r() * 0x3ade67b7;
						words.push(_r() * 0x100000000 | 0);
					}

					return new WordArray.init(words, nBytes);
				}
			});
			var C_enc = C.enc = {};
			var Hex = C_enc.Hex = {
				stringify: function stringify(wordArray) {
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
					var hexChars = [];

					for (var i = 0; i < sigBytes; i++) {
						var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						hexChars.push((bite >>> 4).toString(16));
						hexChars.push((bite & 0x0f).toString(16));
					}

					return hexChars.join('');
				},
				parse: function parse(hexStr) {
					var hexStrLength = hexStr.length;
					var words = [];

					for (var i = 0; i < hexStrLength; i += 2) {
						words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
					}

					return new WordArray.init(words, hexStrLength / 2);
				}
			};
			var Latin1 = C_enc.Latin1 = {
				stringify: function stringify(wordArray) {
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
					var latin1Chars = [];

					for (var i = 0; i < sigBytes; i++) {
						var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						latin1Chars.push(String.fromCharCode(bite));
					}

					return latin1Chars.join('');
				},
				parse: function parse(latin1Str) {
					var latin1StrLength = latin1Str.length;
					var words = [];

					for (var i = 0; i < latin1StrLength; i++) {
						words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
					}

					return new WordArray.init(words, latin1StrLength);
				}
			};
			var Utf8 = C_enc.Utf8 = {
				stringify: function stringify(wordArray) {
					try {
						return decodeURIComponent(escape(Latin1.stringify(wordArray)));
					} catch (e) {
						throw new Error('Malformed UTF-8 data');
					}
				},
				parse: function parse(utf8Str) {
					return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
				}
			};
			var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
				reset: function reset() {
					this._data = new WordArray.init();
					this._nDataBytes = 0;
				},
				_append: function _append(data) {
					if (typeof data == 'string') {
						data = Utf8.parse(data);
					}

					this._data.concat(data);

					this._nDataBytes += data.sigBytes;
				},
				_process: function _process(doFlush) {
					var data = this._data;
					var dataWords = data.words;
					var dataSigBytes = data.sigBytes;
					var blockSize = this.blockSize;
					var blockSizeBytes = blockSize * 4;
					var nBlocksReady = dataSigBytes / blockSizeBytes;

					if (doFlush) {
						nBlocksReady = Math.ceil(nBlocksReady);
					} else {
						nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
					}

					var nWordsReady = nBlocksReady * blockSize;
					var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

					if (nWordsReady) {
						for (var offset = 0; offset < nWordsReady; offset += blockSize) {
							this._doProcessBlock(dataWords, offset);
						}

						var processedWords = dataWords.splice(0, nWordsReady);
						data.sigBytes -= nBytesReady;
					}

					return new WordArray.init(processedWords, nBytesReady);
				},
				clone: function clone() {
					var clone = Base.clone.call(this);
					clone._data = this._data.clone();
					return clone;
				},
				_minBufferSize: 0
			});
			var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
				cfg: Base.extend(),
				init: function init(cfg) {
					this.cfg = this.cfg.extend(cfg);
					this.reset();
				},
				reset: function reset() {
					BufferedBlockAlgorithm.reset.call(this);

					this._doReset();
				},
				update: function update(messageUpdate) {
					this._append(messageUpdate);

					this._process();

					return this;
				},
				finalize: function finalize(messageUpdate) {
					if (messageUpdate) {
						this._append(messageUpdate);
					}

					var hash = this._doFinalize();

					return hash;
				},
				blockSize: 16,
				_createHelper: function _createHelper(hasher) {
					return function (message, cfg) {
						return new hasher.init(cfg).finalize(message);
					};
				},
				_createHmacHelper: function _createHmacHelper(hasher) {
					return function (message, key) {
						return new C_algo.HMAC.init(hasher, key).finalize(message);
					};
				}
			});
			var C_algo = C.algo = {};
			return C;
		}(Math);

		return CryptoJS;
	});
},873,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  (function () {
    var root = typeof self == 'object' && self.self === self && self || typeof global == 'object' && global.global === global && global || this || {};
    var previousUnderscore = root._;
    var ArrayProto = Array.prototype,
        ObjProto = Object.prototype;
    var SymbolProto = typeof Symbol !== 'undefined' ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : null;
    var push = ArrayProto.push,
        slice = ArrayProto.slice,
        toString = ObjProto.toString,
        hasOwnProperty = ObjProto.hasOwnProperty;
    var nativeIsArray = Array.isArray,
        nativeKeys = Object.keys,
        nativeCreate = Object.create;

    var Ctor = function Ctor() {};

    var _ = function _(obj) {
      if (obj instanceof _) return obj;
      if (!(this instanceof _)) return new _(obj);
      this._wrapped = obj;
    };

    if (typeof exports != 'undefined' && !exports.nodeType) {
      if (typeof module != 'undefined' && !module.nodeType && module.exports) {
        exports = module.exports = _;
      }

      exports._ = _;
    } else {
      root._ = _;
    }

    _.VERSION = '1.9.1';

    var optimizeCb = function optimizeCb(func, context, argCount) {
      if (context === void 0) return func;

      switch (argCount == null ? 3 : argCount) {
        case 1:
          return function (value) {
            return func.call(context, value);
          };

        case 3:
          return function (value, index, collection) {
            return func.call(context, value, index, collection);
          };

        case 4:
          return function (accumulator, value, index, collection) {
            return func.call(context, accumulator, value, index, collection);
          };
      }

      return function () {
        return func.apply(context, arguments);
      };
    };

    var builtinIteratee;

    var cb = function cb(value, context, argCount) {
      if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
      if (value == null) return _.identity;
      if (_.isFunction(value)) return optimizeCb(value, context, argCount);
      if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
      return _.property(value);
    };

    _.iteratee = builtinIteratee = function builtinIteratee(value, context) {
      return cb(value, context, Infinity);
    };

    var restArguments = function restArguments(func, startIndex) {
      startIndex = startIndex == null ? func.length - 1 : +startIndex;
      return function () {
        var length = Math.max(arguments.length - startIndex, 0),
            rest = Array(length),
            index = 0;

        for (; index < length; index++) {
          rest[index] = arguments[index + startIndex];
        }

        switch (startIndex) {
          case 0:
            return func.call(this, rest);

          case 1:
            return func.call(this, arguments[0], rest);

          case 2:
            return func.call(this, arguments[0], arguments[1], rest);
        }

        var args = Array(startIndex + 1);

        for (index = 0; index < startIndex; index++) {
          args[index] = arguments[index];
        }

        args[startIndex] = rest;
        return func.apply(this, args);
      };
    };

    var baseCreate = function baseCreate(prototype) {
      if (!_.isObject(prototype)) return {};
      if (nativeCreate) return nativeCreate(prototype);
      Ctor.prototype = prototype;
      var result = new Ctor();
      Ctor.prototype = null;
      return result;
    };

    var shallowProperty = function shallowProperty(key) {
      return function (obj) {
        return obj == null ? void 0 : obj[key];
      };
    };

    var has = function has(obj, path) {
      return obj != null && hasOwnProperty.call(obj, path);
    };

    var deepGet = function deepGet(obj, path) {
      var length = path.length;

      for (var i = 0; i < length; i++) {
        if (obj == null) return void 0;
        obj = obj[path[i]];
      }

      return length ? obj : void 0;
    };

    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
    var getLength = shallowProperty('length');

    var isArrayLike = function isArrayLike(collection) {
      var length = getLength(collection);
      return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
    };

    _.each = _.forEach = function (obj, iteratee, context) {
      iteratee = optimizeCb(iteratee, context);
      var i, length;

      if (isArrayLike(obj)) {
        for (i = 0, length = obj.length; i < length; i++) {
          iteratee(obj[i], i, obj);
        }
      } else {
        var keys = _.keys(obj);

        for (i = 0, length = keys.length; i < length; i++) {
          iteratee(obj[keys[i]], keys[i], obj);
        }
      }

      return obj;
    };

    _.map = _.collect = function (obj, iteratee, context) {
      iteratee = cb(iteratee, context);

      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          results = Array(length);

      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        results[index] = iteratee(obj[currentKey], currentKey, obj);
      }

      return results;
    };

    var createReduce = function createReduce(dir) {
      var reducer = function reducer(obj, iteratee, memo, initial) {
        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length,
            index = dir > 0 ? 0 : length - 1;

        if (!initial) {
          memo = obj[keys ? keys[index] : index];
          index += dir;
        }

        for (; index >= 0 && index < length; index += dir) {
          var currentKey = keys ? keys[index] : index;
          memo = iteratee(memo, obj[currentKey], currentKey, obj);
        }

        return memo;
      };

      return function (obj, iteratee, memo, context) {
        var initial = arguments.length >= 3;
        return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
      };
    };

    _.reduce = _.foldl = _.inject = createReduce(1);
    _.reduceRight = _.foldr = createReduce(-1);

    _.find = _.detect = function (obj, predicate, context) {
      var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
      var key = keyFinder(obj, predicate, context);
      if (key !== void 0 && key !== -1) return obj[key];
    };

    _.filter = _.select = function (obj, predicate, context) {
      var results = [];
      predicate = cb(predicate, context);

      _.each(obj, function (value, index, list) {
        if (predicate(value, index, list)) results.push(value);
      });

      return results;
    };

    _.reject = function (obj, predicate, context) {
      return _.filter(obj, _.negate(cb(predicate)), context);
    };

    _.every = _.all = function (obj, predicate, context) {
      predicate = cb(predicate, context);

      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length;

      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        if (!predicate(obj[currentKey], currentKey, obj)) return false;
      }

      return true;
    };

    _.some = _.any = function (obj, predicate, context) {
      predicate = cb(predicate, context);

      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length;

      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        if (predicate(obj[currentKey], currentKey, obj)) return true;
      }

      return false;
    };

    _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      if (typeof fromIndex != 'number' || guard) fromIndex = 0;
      return _.indexOf(obj, item, fromIndex) >= 0;
    };

    _.invoke = restArguments(function (obj, path, args) {
      var contextPath, func;

      if (_.isFunction(path)) {
        func = path;
      } else if (_.isArray(path)) {
        contextPath = path.slice(0, -1);
        path = path[path.length - 1];
      }

      return _.map(obj, function (context) {
        var method = func;

        if (!method) {
          if (contextPath && contextPath.length) {
            context = deepGet(context, contextPath);
          }

          if (context == null) return void 0;
          method = context[path];
        }

        return method == null ? method : method.apply(context, args);
      });
    });

    _.pluck = function (obj, key) {
      return _.map(obj, _.property(key));
    };

    _.where = function (obj, attrs) {
      return _.filter(obj, _.matcher(attrs));
    };

    _.findWhere = function (obj, attrs) {
      return _.find(obj, _.matcher(attrs));
    };

    _.max = function (obj, iteratee, context) {
      var result = -Infinity,
          lastComputed = -Infinity,
          value,
          computed;

      if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
        obj = isArrayLike(obj) ? obj : _.values(obj);

        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];

          if (value != null && value > result) {
            result = value;
          }
        }
      } else {
        iteratee = cb(iteratee, context);

        _.each(obj, function (v, index, list) {
          computed = iteratee(v, index, list);

          if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
            result = v;
            lastComputed = computed;
          }
        });
      }

      return result;
    };

    _.min = function (obj, iteratee, context) {
      var result = Infinity,
          lastComputed = Infinity,
          value,
          computed;

      if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
        obj = isArrayLike(obj) ? obj : _.values(obj);

        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];

          if (value != null && value < result) {
            result = value;
          }
        }
      } else {
        iteratee = cb(iteratee, context);

        _.each(obj, function (v, index, list) {
          computed = iteratee(v, index, list);

          if (computed < lastComputed || computed === Infinity && result === Infinity) {
            result = v;
            lastComputed = computed;
          }
        });
      }

      return result;
    };

    _.shuffle = function (obj) {
      return _.sample(obj, Infinity);
    };

    _.sample = function (obj, n, guard) {
      if (n == null || guard) {
        if (!isArrayLike(obj)) obj = _.values(obj);
        return obj[_.random(obj.length - 1)];
      }

      var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
      var length = getLength(sample);
      n = Math.max(Math.min(n, length), 0);
      var last = length - 1;

      for (var index = 0; index < n; index++) {
        var rand = _.random(index, last);

        var temp = sample[index];
        sample[index] = sample[rand];
        sample[rand] = temp;
      }

      return sample.slice(0, n);
    };

    _.sortBy = function (obj, iteratee, context) {
      var index = 0;
      iteratee = cb(iteratee, context);
      return _.pluck(_.map(obj, function (value, key, list) {
        return {
          value: value,
          index: index++,
          criteria: iteratee(value, key, list)
        };
      }).sort(function (left, right) {
        var a = left.criteria;
        var b = right.criteria;

        if (a !== b) {
          if (a > b || a === void 0) return 1;
          if (a < b || b === void 0) return -1;
        }

        return left.index - right.index;
      }), 'value');
    };

    var group = function group(behavior, partition) {
      return function (obj, iteratee, context) {
        var result = partition ? [[], []] : {};
        iteratee = cb(iteratee, context);

        _.each(obj, function (value, index) {
          var key = iteratee(value, index, obj);
          behavior(result, value, key);
        });

        return result;
      };
    };

    _.groupBy = group(function (result, value, key) {
      if (has(result, key)) result[key].push(value);else result[key] = [value];
    });
    _.indexBy = group(function (result, value, key) {
      result[key] = value;
    });
    _.countBy = group(function (result, value, key) {
      if (has(result, key)) result[key]++;else result[key] = 1;
    });
    var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;

    _.toArray = function (obj) {
      if (!obj) return [];
      if (_.isArray(obj)) return slice.call(obj);

      if (_.isString(obj)) {
        return obj.match(reStrSymbol);
      }

      if (isArrayLike(obj)) return _.map(obj, _.identity);
      return _.values(obj);
    };

    _.size = function (obj) {
      if (obj == null) return 0;
      return isArrayLike(obj) ? obj.length : _.keys(obj).length;
    };

    _.partition = group(function (result, value, pass) {
      result[pass ? 0 : 1].push(value);
    }, true);

    _.first = _.head = _.take = function (array, n, guard) {
      if (array == null || array.length < 1) return n == null ? void 0 : [];
      if (n == null || guard) return array[0];
      return _.initial(array, array.length - n);
    };

    _.initial = function (array, n, guard) {
      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
    };

    _.last = function (array, n, guard) {
      if (array == null || array.length < 1) return n == null ? void 0 : [];
      if (n == null || guard) return array[array.length - 1];
      return _.rest(array, Math.max(0, array.length - n));
    };

    _.rest = _.tail = _.drop = function (array, n, guard) {
      return slice.call(array, n == null || guard ? 1 : n);
    };

    _.compact = function (array) {
      return _.filter(array, Boolean);
    };

    var flatten = function flatten(input, shallow, strict, output) {
      output = output || [];
      var idx = output.length;

      for (var i = 0, length = getLength(input); i < length; i++) {
        var value = input[i];

        if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
          if (shallow) {
            var j = 0,
                len = value.length;

            while (j < len) {
              output[idx++] = value[j++];
            }
          } else {
            flatten(value, shallow, strict, output);
            idx = output.length;
          }
        } else if (!strict) {
          output[idx++] = value;
        }
      }

      return output;
    };

    _.flatten = function (array, shallow) {
      return flatten(array, shallow, false);
    };

    _.without = restArguments(function (array, otherArrays) {
      return _.difference(array, otherArrays);
    });

    _.uniq = _.unique = function (array, isSorted, iteratee, context) {
      if (!_.isBoolean(isSorted)) {
        context = iteratee;
        iteratee = isSorted;
        isSorted = false;
      }

      if (iteratee != null) iteratee = cb(iteratee, context);
      var result = [];
      var seen = [];

      for (var i = 0, length = getLength(array); i < length; i++) {
        var value = array[i],
            computed = iteratee ? iteratee(value, i, array) : value;

        if (isSorted && !iteratee) {
          if (!i || seen !== computed) result.push(value);
          seen = computed;
        } else if (iteratee) {
          if (!_.contains(seen, computed)) {
            seen.push(computed);
            result.push(value);
          }
        } else if (!_.contains(result, value)) {
          result.push(value);
        }
      }

      return result;
    };

    _.union = restArguments(function (arrays) {
      return _.uniq(flatten(arrays, true, true));
    });

    _.intersection = function (array) {
      var result = [];
      var argsLength = arguments.length;

      for (var i = 0, length = getLength(array); i < length; i++) {
        var item = array[i];
        if (_.contains(result, item)) continue;
        var j;

        for (j = 1; j < argsLength; j++) {
          if (!_.contains(arguments[j], item)) break;
        }

        if (j === argsLength) result.push(item);
      }

      return result;
    };

    _.difference = restArguments(function (array, rest) {
      rest = flatten(rest, true, true);
      return _.filter(array, function (value) {
        return !_.contains(rest, value);
      });
    });

    _.unzip = function (array) {
      var length = array && _.max(array, getLength).length || 0;
      var result = Array(length);

      for (var index = 0; index < length; index++) {
        result[index] = _.pluck(array, index);
      }

      return result;
    };

    _.zip = restArguments(_.unzip);

    _.object = function (list, values) {
      var result = {};

      for (var i = 0, length = getLength(list); i < length; i++) {
        if (values) {
          result[list[i]] = values[i];
        } else {
          result[list[i][0]] = list[i][1];
        }
      }

      return result;
    };

    var createPredicateIndexFinder = function createPredicateIndexFinder(dir) {
      return function (array, predicate, context) {
        predicate = cb(predicate, context);
        var length = getLength(array);
        var index = dir > 0 ? 0 : length - 1;

        for (; index >= 0 && index < length; index += dir) {
          if (predicate(array[index], index, array)) return index;
        }

        return -1;
      };
    };

    _.findIndex = createPredicateIndexFinder(1);
    _.findLastIndex = createPredicateIndexFinder(-1);

    _.sortedIndex = function (array, obj, iteratee, context) {
      iteratee = cb(iteratee, context, 1);
      var value = iteratee(obj);
      var low = 0,
          high = getLength(array);

      while (low < high) {
        var mid = Math.floor((low + high) / 2);
        if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;
      }

      return low;
    };

    var createIndexFinder = function createIndexFinder(dir, predicateFind, sortedIndex) {
      return function (array, item, idx) {
        var i = 0,
            length = getLength(array);

        if (typeof idx == 'number') {
          if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
          } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
          }
        } else if (sortedIndex && idx && length) {
          idx = sortedIndex(array, item);
          return array[idx] === item ? idx : -1;
        }

        if (item !== item) {
          idx = predicateFind(slice.call(array, i, length), _.isNaN);
          return idx >= 0 ? idx + i : -1;
        }

        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
          if (array[idx] === item) return idx;
        }

        return -1;
      };
    };

    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

    _.range = function (start, stop, step) {
      if (stop == null) {
        stop = start || 0;
        start = 0;
      }

      if (!step) {
        step = stop < start ? -1 : 1;
      }

      var length = Math.max(Math.ceil((stop - start) / step), 0);
      var range = Array(length);

      for (var idx = 0; idx < length; idx++, start += step) {
        range[idx] = start;
      }

      return range;
    };

    _.chunk = function (array, count) {
      if (count == null || count < 1) return [];
      var result = [];
      var i = 0,
          length = array.length;

      while (i < length) {
        result.push(slice.call(array, i, i += count));
      }

      return result;
    };

    var executeBound = function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
      if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
      var self = baseCreate(sourceFunc.prototype);
      var result = sourceFunc.apply(self, args);
      if (_.isObject(result)) return result;
      return self;
    };

    _.bind = restArguments(function (func, context, args) {
      if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
      var bound = restArguments(function (callArgs) {
        return executeBound(func, bound, context, this, args.concat(callArgs));
      });
      return bound;
    });
    _.partial = restArguments(function (func, boundArgs) {
      var placeholder = _.partial.placeholder;

      var bound = function bound() {
        var position = 0,
            length = boundArgs.length;
        var args = Array(length);

        for (var i = 0; i < length; i++) {
          args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
        }

        while (position < arguments.length) {
          args.push(arguments[position++]);
        }

        return executeBound(func, bound, this, this, args);
      };

      return bound;
    });
    _.partial.placeholder = _;
    _.bindAll = restArguments(function (obj, keys) {
      keys = flatten(keys, false, false);
      var index = keys.length;
      if (index < 1) throw new Error('bindAll must be passed function names');

      while (index--) {
        var key = keys[index];
        obj[key] = _.bind(obj[key], obj);
      }
    });

    _.memoize = function (func, hasher) {
      var memoize = function memoize(key) {
        var cache = memoize.cache;
        var address = '' + (hasher ? hasher.apply(this, arguments) : key);
        if (!has(cache, address)) cache[address] = func.apply(this, arguments);
        return cache[address];
      };

      memoize.cache = {};
      return memoize;
    };

    _.delay = restArguments(function (func, wait, args) {
      return setTimeout(function () {
        return func.apply(null, args);
      }, wait);
    });
    _.defer = _.partial(_.delay, _, 1);

    _.throttle = function (func, wait, options) {
      var timeout, context, args, result;
      var previous = 0;
      if (!options) options = {};

      var later = function later() {
        previous = options.leading === false ? 0 : _.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      };

      var throttled = function throttled() {
        var now = _.now();

        if (!previous && options.leading === false) previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;

        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }

          previous = now;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }

        return result;
      };

      throttled.cancel = function () {
        clearTimeout(timeout);
        previous = 0;
        timeout = context = args = null;
      };

      return throttled;
    };

    _.debounce = function (func, wait, immediate) {
      var timeout, result;

      var later = function later(context, args) {
        timeout = null;
        if (args) result = func.apply(context, args);
      };

      var debounced = restArguments(function (args) {
        if (timeout) clearTimeout(timeout);

        if (immediate) {
          var callNow = !timeout;
          timeout = setTimeout(later, wait);
          if (callNow) result = func.apply(this, args);
        } else {
          timeout = _.delay(later, wait, this, args);
        }

        return result;
      });

      debounced.cancel = function () {
        clearTimeout(timeout);
        timeout = null;
      };

      return debounced;
    };

    _.wrap = function (func, wrapper) {
      return _.partial(wrapper, func);
    };

    _.negate = function (predicate) {
      return function () {
        return !predicate.apply(this, arguments);
      };
    };

    _.compose = function () {
      var args = arguments;
      var start = args.length - 1;
      return function () {
        var i = start;
        var result = args[start].apply(this, arguments);

        while (i--) {
          result = args[i].call(this, result);
        }

        return result;
      };
    };

    _.after = function (times, func) {
      return function () {
        if (--times < 1) {
          return func.apply(this, arguments);
        }
      };
    };

    _.before = function (times, func) {
      var memo;
      return function () {
        if (--times > 0) {
          memo = func.apply(this, arguments);
        }

        if (times <= 1) func = null;
        return memo;
      };
    };

    _.once = _.partial(_.before, 2);
    _.restArguments = restArguments;
    var hasEnumBug = !{
      toString: null
    }.propertyIsEnumerable('toString');
    var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

    var collectNonEnumProps = function collectNonEnumProps(obj, keys) {
      var nonEnumIdx = nonEnumerableProps.length;
      var constructor = obj.constructor;
      var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;
      var prop = 'constructor';
      if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

      while (nonEnumIdx--) {
        prop = nonEnumerableProps[nonEnumIdx];

        if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
          keys.push(prop);
        }
      }
    };

    _.keys = function (obj) {
      if (!_.isObject(obj)) return [];
      if (nativeKeys) return nativeKeys(obj);
      var keys = [];

      for (var key in obj) {
        if (has(obj, key)) keys.push(key);
      }

      if (hasEnumBug) collectNonEnumProps(obj, keys);
      return keys;
    };

    _.allKeys = function (obj) {
      if (!_.isObject(obj)) return [];
      var keys = [];

      for (var key in obj) {
        keys.push(key);
      }

      if (hasEnumBug) collectNonEnumProps(obj, keys);
      return keys;
    };

    _.values = function (obj) {
      var keys = _.keys(obj);

      var length = keys.length;
      var values = Array(length);

      for (var i = 0; i < length; i++) {
        values[i] = obj[keys[i]];
      }

      return values;
    };

    _.mapObject = function (obj, iteratee, context) {
      iteratee = cb(iteratee, context);

      var keys = _.keys(obj),
          length = keys.length,
          results = {};

      for (var index = 0; index < length; index++) {
        var currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }

      return results;
    };

    _.pairs = function (obj) {
      var keys = _.keys(obj);

      var length = keys.length;
      var pairs = Array(length);

      for (var i = 0; i < length; i++) {
        pairs[i] = [keys[i], obj[keys[i]]];
      }

      return pairs;
    };

    _.invert = function (obj) {
      var result = {};

      var keys = _.keys(obj);

      for (var i = 0, length = keys.length; i < length; i++) {
        result[obj[keys[i]]] = keys[i];
      }

      return result;
    };

    _.functions = _.methods = function (obj) {
      var names = [];

      for (var key in obj) {
        if (_.isFunction(obj[key])) names.push(key);
      }

      return names.sort();
    };

    var createAssigner = function createAssigner(keysFunc, defaults) {
      return function (obj) {
        var length = arguments.length;
        if (defaults) obj = Object(obj);
        if (length < 2 || obj == null) return obj;

        for (var index = 1; index < length; index++) {
          var source = arguments[index],
              keys = keysFunc(source),
              l = keys.length;

          for (var i = 0; i < l; i++) {
            var key = keys[i];
            if (!defaults || obj[key] === void 0) obj[key] = source[key];
          }
        }

        return obj;
      };
    };

    _.extend = createAssigner(_.allKeys);
    _.extendOwn = _.assign = createAssigner(_.keys);

    _.findKey = function (obj, predicate, context) {
      predicate = cb(predicate, context);

      var keys = _.keys(obj),
          key;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (predicate(obj[key], key, obj)) return key;
      }
    };

    var keyInObj = function keyInObj(value, key, obj) {
      return key in obj;
    };

    _.pick = restArguments(function (obj, keys) {
      var result = {},
          iteratee = keys[0];
      if (obj == null) return result;

      if (_.isFunction(iteratee)) {
        if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
        keys = _.allKeys(obj);
      } else {
        iteratee = keyInObj;
        keys = flatten(keys, false, false);
        obj = Object(obj);
      }

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }

      return result;
    });
    _.omit = restArguments(function (obj, keys) {
      var iteratee = keys[0],
          context;

      if (_.isFunction(iteratee)) {
        iteratee = _.negate(iteratee);
        if (keys.length > 1) context = keys[1];
      } else {
        keys = _.map(flatten(keys, false, false), String);

        iteratee = function iteratee(value, key) {
          return !_.contains(keys, key);
        };
      }

      return _.pick(obj, iteratee, context);
    });
    _.defaults = createAssigner(_.allKeys, true);

    _.create = function (prototype, props) {
      var result = baseCreate(prototype);
      if (props) _.extendOwn(result, props);
      return result;
    };

    _.clone = function (obj) {
      if (!_.isObject(obj)) return obj;
      return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };

    _.tap = function (obj, interceptor) {
      interceptor(obj);
      return obj;
    };

    _.isMatch = function (object, attrs) {
      var keys = _.keys(attrs),
          length = keys.length;

      if (object == null) return !length;
      var obj = Object(object);

      for (var i = 0; i < length; i++) {
        var key = keys[i];
        if (attrs[key] !== obj[key] || !(key in obj)) return false;
      }

      return true;
    };

    var eq, deepEq;

    eq = function eq(a, b, aStack, bStack) {
      if (a === b) return a !== 0 || 1 / a === 1 / b;
      if (a == null || b == null) return false;
      if (a !== a) return b !== b;
      var type = typeof a;
      if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
      return deepEq(a, b, aStack, bStack);
    };

    deepEq = function deepEq(a, b, aStack, bStack) {
      if (a instanceof _) a = a._wrapped;
      if (b instanceof _) b = b._wrapped;
      var className = toString.call(a);
      if (className !== toString.call(b)) return false;

      switch (className) {
        case '[object RegExp]':
        case '[object String]':
          return '' + a === '' + b;

        case '[object Number]':
          if (+a !== +a) return +b !== +b;
          return +a === 0 ? 1 / +a === 1 / b : +a === +b;

        case '[object Date]':
        case '[object Boolean]':
          return +a === +b;

        case '[object Symbol]':
          return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
      }

      var areArrays = className === '[object Array]';

      if (!areArrays) {
        if (typeof a != 'object' || typeof b != 'object') return false;
        var aCtor = a.constructor,
            bCtor = b.constructor;

        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {
          return false;
        }
      }

      aStack = aStack || [];
      bStack = bStack || [];
      var length = aStack.length;

      while (length--) {
        if (aStack[length] === a) return bStack[length] === b;
      }

      aStack.push(a);
      bStack.push(b);

      if (areArrays) {
        length = a.length;
        if (length !== b.length) return false;

        while (length--) {
          if (!eq(a[length], b[length], aStack, bStack)) return false;
        }
      } else {
        var keys = _.keys(a),
            key;

        length = keys.length;
        if (_.keys(b).length !== length) return false;

        while (length--) {
          key = keys[length];
          if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
        }
      }

      aStack.pop();
      bStack.pop();
      return true;
    };

    _.isEqual = function (a, b) {
      return eq(a, b);
    };

    _.isEmpty = function (obj) {
      if (obj == null) return true;
      if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
      return _.keys(obj).length === 0;
    };

    _.isElement = function (obj) {
      return !!(obj && obj.nodeType === 1);
    };

    _.isArray = nativeIsArray || function (obj) {
      return toString.call(obj) === '[object Array]';
    };

    _.isObject = function (obj) {
      var type = typeof obj;
      return type === 'function' || type === 'object' && !!obj;
    };

    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function (name) {
      _['is' + name] = function (obj) {
        return toString.call(obj) === '[object ' + name + ']';
      };
    });

    if (!_.isArguments(arguments)) {
      _.isArguments = function (obj) {
        return has(obj, 'callee');
      };
    }

    var nodelist = root.document && root.document.childNodes;

    if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
      _.isFunction = function (obj) {
        return typeof obj == 'function' || false;
      };
    }

    _.isFinite = function (obj) {
      return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
    };

    _.isNaN = function (obj) {
      return _.isNumber(obj) && isNaN(obj);
    };

    _.isBoolean = function (obj) {
      return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
    };

    _.isNull = function (obj) {
      return obj === null;
    };

    _.isUndefined = function (obj) {
      return obj === void 0;
    };

    _.has = function (obj, path) {
      if (!_.isArray(path)) {
        return has(obj, path);
      }

      var length = path.length;

      for (var i = 0; i < length; i++) {
        var key = path[i];

        if (obj == null || !hasOwnProperty.call(obj, key)) {
          return false;
        }

        obj = obj[key];
      }

      return !!length;
    };

    _.noConflict = function () {
      root._ = previousUnderscore;
      return this;
    };

    _.identity = function (value) {
      return value;
    };

    _.constant = function (value) {
      return function () {
        return value;
      };
    };

    _.noop = function () {};

    _.property = function (path) {
      if (!_.isArray(path)) {
        return shallowProperty(path);
      }

      return function (obj) {
        return deepGet(obj, path);
      };
    };

    _.propertyOf = function (obj) {
      if (obj == null) {
        return function () {};
      }

      return function (path) {
        return !_.isArray(path) ? obj[path] : deepGet(obj, path);
      };
    };

    _.matcher = _.matches = function (attrs) {
      attrs = _.extendOwn({}, attrs);
      return function (obj) {
        return _.isMatch(obj, attrs);
      };
    };

    _.times = function (n, iteratee, context) {
      var accum = Array(Math.max(0, n));
      iteratee = optimizeCb(iteratee, context, 1);

      for (var i = 0; i < n; i++) {
        accum[i] = iteratee(i);
      }

      return accum;
    };

    _.random = function (min, max) {
      if (max == null) {
        max = min;
        min = 0;
      }

      return min + Math.floor(Math.random() * (max - min + 1));
    };

    _.now = Date.now || function () {
      return new Date().getTime();
    };

    var escapeMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '`': '&#x60;'
    };

    var unescapeMap = _.invert(escapeMap);

    var createEscaper = function createEscaper(map) {
      var escaper = function escaper(match) {
        return map[match];
      };

      var source = '(?:' + _.keys(map).join('|') + ')';
      var testRegexp = RegExp(source);
      var replaceRegexp = RegExp(source, 'g');
      return function (string) {
        string = string == null ? '' : '' + string;
        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
      };
    };

    _.escape = createEscaper(escapeMap);
    _.unescape = createEscaper(unescapeMap);

    _.result = function (obj, path, fallback) {
      if (!_.isArray(path)) path = [path];
      var length = path.length;

      if (!length) {
        return _.isFunction(fallback) ? fallback.call(obj) : fallback;
      }

      for (var i = 0; i < length; i++) {
        var prop = obj == null ? void 0 : obj[path[i]];

        if (prop === void 0) {
          prop = fallback;
          i = length;
        }

        obj = _.isFunction(prop) ? prop.call(obj) : prop;
      }

      return obj;
    };

    var idCounter = 0;

    _.uniqueId = function (prefix) {
      var id = ++idCounter + '';
      return prefix ? prefix + id : id;
    };

    _.templateSettings = {
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/;
    var escapes = {
      "'": "'",
      '\\': '\\',
      '\r': 'r',
      '\n': 'n',
      "\u2028": 'u2028',
      "\u2029": 'u2029'
    };
    var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

    var escapeChar = function escapeChar(match) {
      return '\\' + escapes[match];
    };

    _.template = function (text, settings, oldSettings) {
      if (!settings && oldSettings) settings = oldSettings;
      settings = _.defaults({}, settings, _.templateSettings);
      var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g');
      var index = 0;
      var source = "__p+='";
      text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
        source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
        index = offset + match.length;

        if (escape) {
          source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
        } else if (interpolate) {
          source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
        } else if (evaluate) {
          source += "';\n" + evaluate + "\n__p+='";
        }

        return match;
      });
      source += "';\n";
      if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
      source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + 'return __p;\n';
      var render;

      try {
        render = new Function(settings.variable || 'obj', '_', source);
      } catch (e) {
        e.source = source;
        throw e;
      }

      var template = function template(data) {
        return render.call(this, data, _);
      };

      var argument = settings.variable || 'obj';
      template.source = 'function(' + argument + '){\n' + source + '}';
      return template;
    };

    _.chain = function (obj) {
      var instance = _(obj);

      instance._chain = true;
      return instance;
    };

    var chainResult = function chainResult(instance, obj) {
      return instance._chain ? _(obj).chain() : obj;
    };

    _.mixin = function (obj) {
      _.each(_.functions(obj), function (name) {
        var func = _[name] = obj[name];

        _.prototype[name] = function () {
          var args = [this._wrapped];
          push.apply(args, arguments);
          return chainResult(this, func.apply(_, args));
        };
      });

      return _;
    };

    _.mixin(_);

    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
      var method = ArrayProto[name];

      _.prototype[name] = function () {
        var obj = this._wrapped;
        method.apply(obj, arguments);
        if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
        return chainResult(this, obj);
      };
    });

    _.each(['concat', 'join', 'slice'], function (name) {
      var method = ArrayProto[name];

      _.prototype[name] = function () {
        return chainResult(this, method.apply(this._wrapped, arguments));
      };
    });

    _.prototype.value = function () {
      return this._wrapped;
    };

    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

    _.prototype.toString = function () {
      return String(this._wrapped);
    };

    if (typeof define == 'function' && define.amd) {
      define('underscore', [], function () {
        return _;
      });
    }
  })();
},874,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var UNMISTAKABLE_CHARS = '23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz';
  module.exports = {
    id: function id() {
      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 17;
      var res = '';

      for (var i = 0; i < count; i++) {
        res += UNMISTAKABLE_CHARS[Math.floor(Math.random() * UNMISTAKABLE_CHARS.length)];
      }

      return res;
    }
  };
},875,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _ReactNative = _require(_dependencyMap[0]);

  var _ReactNative2 = babelHelpers.interopRequireDefault(_ReactNative);

  var _minimongoCache = _require(_dependencyMap[1]);

  var _minimongoCache2 = babelHelpers.interopRequireDefault(_minimongoCache);

  var _trackr = _require(_dependencyMap[2]);

  var _trackr2 = babelHelpers.interopRequireDefault(_trackr);

  var _reactNative = _require(_dependencyMap[3]);

  process.nextTick = setImmediate;
  var db = new _minimongoCache2.default();
  db.debug = false;
  db.batchedUpdates = _ReactNative2.default.unstable_batchedUpdates;

  function runAfterOtherComputations(fn) {
    _reactNative.InteractionManager.runAfterInteractions(function () {
      _trackr2.default.afterFlush(function () {
        fn();
      });
    });
  }

  exports.default = {
    _endpoint: null,
    _options: null,
    ddp: null,
    subscriptions: {},
    db: db,
    calls: [],
    getUrl: function getUrl() {
      return this._endpoint.substring(0, this._endpoint.indexOf('/websocket'));
    },
    waitDdpReady: function waitDdpReady(cb) {
      var _this = this;

      if (this.ddp) {
        cb();
      } else {
        runAfterOtherComputations(function () {
          _this.waitDdpReady(cb);
        });
      }
    },
    _cbs: [],
    onChange: function onChange(cb) {
      this.db.on('change', cb);
      this.ddp.on('connected', cb);
      this.ddp.on('disconnected', cb);
      this.on('loggingIn', cb);
      this.on('change', cb);
    },
    offChange: function offChange(cb) {
      this.db.off('change', cb);
      this.ddp.off('connected', cb);
      this.ddp.off('disconnected', cb);
      this.off('loggingIn', cb);
      this.off('change', cb);
    },
    on: function on(eventName, cb) {
      this._cbs.push({
        eventName: eventName,
        callback: cb
      });
    },
    off: function off(eventName, cb) {
      this._cbs.splice(this._cbs.findIndex(function (_cb) {
        return _cb.callback == cb && _cb.eventName == eventName;
      }), 1);
    },
    notify: function notify(eventName) {
      this._cbs.map(function (cb) {
        if (cb.eventName == eventName && typeof cb.callback == 'function') {
          cb.callback();
        }
      });
    },
    waitDdpConnected: function waitDdpConnected(cb) {
      var _this2 = this;

      if (this.ddp && this.ddp.status == 'connected') {
        cb();
      } else if (this.ddp) {
        this.ddp.once('connected', cb);
      } else {
        setTimeout(function () {
          _this2.waitDdpConnected(cb);
        }, 10);
      }
    }
  };
},876,[46,877,861,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MemoryDb = _require(_dependencyMap[0]);

  module.exports = MemoryDb;
},877,[878]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var Collection, MemoryDb, NullTransaction, WithObservableReads, WithObservableWrites, WithReactMixin, WithServerQuery, processFind, utils, _;

  NullTransaction = _require(_dependencyMap[0]);
  WithObservableReads = _require(_dependencyMap[1]);
  WithObservableWrites = _require(_dependencyMap[2]);
  WithReactMixin = _require(_dependencyMap[3]);
  WithServerQuery = _require(_dependencyMap[4]);
  _ = _require(_dependencyMap[5]);
  utils = _require(_dependencyMap[6]);
  processFind = _require(_dependencyMap[6]).processFind;

  module.exports = MemoryDb = function () {
    function MemoryDb() {
      this.collections = {};
      this.debug = true;

      this.batchedUpdates = function (cb) {
        return cb();
      };

      this.transaction = this.getDefaultTransaction();
    }

    MemoryDb.prototype.uncaughtExceptionHandler = function (e) {
      throw e;
    };

    MemoryDb.prototype.getDefaultTransaction = function () {
      return new NullTransaction();
    };

    MemoryDb.prototype.serialize = function () {
      var collectionName, data;
      data = {};

      for (collectionName in this.collections) {
        data[collectionName] = this.collections[collectionName].serialize();
      }

      return data;
    };

    MemoryDb.deserialize = function (data) {
      var collection, collectionName, db;
      db = new MemoryDb();

      for (collectionName in data) {
        collection = Collection.deserialize(db, data[collectionName]);
        db.collections[collectionName] = collection;
        db[collectionName] = collection;
      }

      return db;
    };

    MemoryDb.prototype.addCollection = function (name) {
      var collection;

      if (this[name] != null) {
        return;
      }

      collection = new Collection(name, this);
      this[name] = collection;
      return this.collections[name] = collection;
    };

    MemoryDb.prototype.withTransaction = function (transaction, func, context) {
      var prevTransaction;

      if (!this.transaction.canPushTransaction(transaction)) {
        throw new Error('Already in a transaction');
      }

      prevTransaction = this.transaction;
      this.transaction = transaction;

      try {
        return func.call(context);
      } finally {
        this.transaction = prevTransaction;
      }
    };

    return MemoryDb;
  }();

  _.mixin(MemoryDb.prototype, WithObservableReads);

  _.mixin(MemoryDb.prototype, WithObservableWrites);

  _.mixin(MemoryDb.prototype, WithReactMixin);

  _.mixin(MemoryDb.prototype, WithServerQuery);

  Collection = function () {
    function Collection(name, db) {
      this.name = name;
      this.db = db;
      this.items = {};
      this.versions = {};
      this.version = 1;
    }

    Collection.prototype.serialize = function () {
      return {
        name: this.name,
        items: this.items,
        versions: this.versions,
        version: this.version
      };
    };

    Collection.deserialize = function (db, data) {
      var collection;
      collection = new Collection(data.name, db);
      collection.items = data.items;
      collection.versions = data.versions;
      collection.version = data.version;
      return collection;
    };

    Collection.prototype.find = function (selector, options) {
      return this.db.transaction.find(this.name, this._findFetch(selector, options), selector, options);
    };

    Collection.prototype.findOne = function (selector, options) {
      return this.db.transaction.findOne(this.name, this._findOne(selector, options), selector, options);
    };

    Collection.prototype._findOne = function (selector, options) {
      var results;
      options = options || {};
      results = this._findFetch(selector, options);

      if (results.length > 0) {
        return results[0];
      } else {
        return null;
      }
    };

    Collection.prototype._findFetch = function (selector, options) {
      return processFind(this.items, selector, options);
    };

    Collection.prototype.get = function (_id, missing) {
      return this.db.transaction.get(this.name, this._findOne({
        _id: _id
      }), _id) || missing || null;
    };

    Collection.prototype.upsert = function (docs) {
      var doc, item, items, _1, _2, _i, _len, _ref;

      _ref = utils.regularizeUpsert(docs), items = _ref[0], _1 = _ref[1], _2 = _ref[2];

      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        doc = _.assign({}, this.items[item.doc._id] || {}, item.doc);
        this.items[item.doc._id] = doc;
        this.version += 1;
        this.versions[doc._id] = (this.versions[doc._id] || 0) + 1;
        this.items[doc._id]._version = this.versions[doc._id];
      }

      return this.db.transaction.upsert(this.name, docs, docs);
    };

    Collection.prototype.del = function (id) {
      var prev_version;

      if (_.has(this.items, id)) {
        prev_version = this.items[id]._version;
        this.version += 1;
        this.versions[id] = prev_version + 1;
        delete this.items[id];
      }

      return this.db.transaction.del(this.name, null, id);
    };

    Collection.prototype.remove = function (selector, options) {
      var results;
      results = this._findFetch(selector, options);
      return results.forEach(function (_this) {
        return function (doc) {
          return _this.del(doc._id);
        };
      }(this));
    };

    return Collection;
  }();
},878,[879,880,884,888,889,883,890]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var NullTransaction,
      __slice = [].slice;

  NullTransaction = function () {
    function NullTransaction() {}

    NullTransaction.prototype.get = function () {
      var args, collectionName, result;
      collectionName = arguments[0], result = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return result;
    };

    NullTransaction.prototype.find = function () {
      var args, collectionName, result;
      collectionName = arguments[0], result = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return result;
    };

    NullTransaction.prototype.findOne = function () {
      var args, collectionName, result;
      collectionName = arguments[0], result = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return result;
    };

    NullTransaction.prototype.upsert = function () {
      var args, collectionName, result;
      collectionName = arguments[0], result = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      throw new Error('Cannot write outside of a WriteTransaction');
    };

    NullTransaction.prototype.del = function () {
      var args, collectionName, result;
      collectionName = arguments[0], result = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      throw new Error('Cannot write outside of a WriteTransaction');
    };

    NullTransaction.prototype.canPushTransaction = function (transaction) {
      return true;
    };

    return NullTransaction;
  }();

  module.exports = NullTransaction;
},879,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var ObservableRead, ReadTransaction, WithObservableReads, _;

  ReadTransaction = _require(_dependencyMap[0]);
  _ = _require(_dependencyMap[1]);

  ObservableRead = function () {
    function ObservableRead(db, func, context) {
      this.db = db;
      this.func = func;
      this.context = context;
      this.lastReadTransaction = null;
      this.lastValue = null;
      this.subscribers = [];
      this.changeListener = this.changeListener.bind(this);
      this.db.on('change', this.changeListener);
      this.rerunTransaction();
    }

    ObservableRead.prototype.subscribe = function (cb) {
      this.subscribers.push(cb);
      cb(this.lastValue);
      return this;
    };

    ObservableRead.prototype.dispose = function () {
      return this.db.removeListener('change', this.changeListener);
    };

    ObservableRead.prototype.rerunTransaction = function () {
      var nextReadTransaction, prevValue, value;
      nextReadTransaction = new ReadTransaction();
      value = this.db.withTransaction(nextReadTransaction, this.func, this.context);

      if (!this.lastReadTransaction || !_.isEqual(this.lastReadTransaction.log, nextReadTransaction.log)) {
        this.lastReadTransaction = nextReadTransaction;
        prevValue = this.lastValue;
        this.lastValue = value;
        return this.subscribers.forEach(function (cb) {
          cb(this.lastValue, prevValue);
        }, this);
      }
    };

    ObservableRead.prototype.changeListener = function (changeRecords) {
      var collectionName, dirtyIdsForCollection, documentFragment, documentFragments, i;

      if (!this.lastReadTransaction) {
        this.rerunTransaction();
        return;
      }

      for (collectionName in changeRecords) {
        if (this.lastReadTransaction.dirtyScans[collectionName]) {
          this.rerunTransaction();
          return;
        }

        dirtyIdsForCollection = this.lastReadTransaction.dirtyIds[collectionName] || {};
        documentFragments = changeRecords[collectionName];
        i = 0;

        while (i < documentFragments.length) {
          documentFragment = documentFragments[i];

          if (dirtyIdsForCollection[documentFragment._id]) {
            this.rerunTransaction();
            return;
          }

          i++;
        }
      }
    };

    return ObservableRead;
  }();

  WithObservableReads = {
    observe: function observe(func, context) {
      return new ObservableRead(this, func, context);
    }
  };
  module.exports = WithObservableReads;
},880,[881,883]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var NullTransaction,
      ReadTransaction,
      SynchronousWriteTransaction,
      __hasProp = {}.hasOwnProperty,
      __extends = function __extends(child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key)) child[key] = parent[key];
    }

    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  };

  NullTransaction = _require(_dependencyMap[0]);
  SynchronousWriteTransaction = _require(_dependencyMap[1]);

  ReadTransaction = function (_super) {
    __extends(ReadTransaction, _super);

    function ReadTransaction() {
      this.dirtyIds = {};
      this.dirtyScans = {};
      this.log = [];
    }

    ReadTransaction.prototype._extractFragment = function (doc) {
      if (!doc) {
        return null;
      }

      return {
        _id: doc._id,
        _version: doc._version
      };
    };

    ReadTransaction.prototype.get = function (collectionName, result, _id) {
      this.dirtyIds[collectionName] = this.dirtyIds[collectionName] || {};
      this.dirtyIds[collectionName][_id] = true;
      this.log.push(this._extractFragment(result));
      return result;
    };

    ReadTransaction.prototype.find = function (collectionName, result) {
      this.dirtyScans[collectionName] = true;
      this.log.push(result.map(this._extractFragment));
      return result;
    };

    ReadTransaction.prototype.findOne = function (collectionName, result) {
      this.dirtyScans[collectionName] = true;
      this.log.push(this._extractFragment(result));
      return result;
    };

    ReadTransaction.prototype.canPushTransaction = function (transaction) {
      return transaction instanceof SynchronousWriteTransaction;
    };

    return ReadTransaction;
  }(NullTransaction);

  module.exports = ReadTransaction;
},881,[879,882]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _ = _require(_dependencyMap[0]);

  function cannotRead() {
    throw new Error('Cannot read in a SynchronousWriteTransaction');
  }

  function SynchronousWriteTransaction() {}

  _.mixin(SynchronousWriteTransaction.prototype, {
    get: cannotRead,
    find: cannotRead,
    findOne: cannotRead,
    upsert: function upsert(_, result) {
      return result;
    },
    del: function del(_, result) {
      return result;
    },
    canPushTransaction: function canPushTransaction() {
      return false;
    }
  });

  module.exports = SynchronousWriteTransaction;
},882,[883]);
__d(function (global, _require, module, exports, _dependencyMap) {
  /**
   * @license
   * Lo-Dash 2.4.2 (Custom Build) <https://lodash.com/>
   * Build: `lodash modern -o ./dist/lodash.js`
   * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
   * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
   * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   * Available under MIT license <https://lodash.com/license>
   */;
  (function () {
    var undefined;
    var arrayPool = [],
        objectPool = [];
    var idCounter = 0;
    var keyPrefix = +new Date() + '';
    var largeArraySize = 75;
    var maxPoolSize = 40;
    var whitespace = " \t\x0B\f\xA0\uFEFF\n\r\u2028\u2029\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000";
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reFuncName = /^\s*function[ \n\r\t]+\w/;
    var reInterpolate = /<%=([\s\S]+?)%>/g;
    var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');
    var reNoMatch = /($^)/;
    var reThis = /\bthis\b/;
    var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;
    var contextProps = ['Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object', 'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN', 'parseInt', 'setTimeout'];
    var templateCounter = 0;
    var argsClass = '[object Arguments]',
        arrayClass = '[object Array]',
        boolClass = '[object Boolean]',
        dateClass = '[object Date]',
        funcClass = '[object Function]',
        numberClass = '[object Number]',
        objectClass = '[object Object]',
        regexpClass = '[object RegExp]',
        stringClass = '[object String]';
    var cloneableClasses = {};
    cloneableClasses[funcClass] = false;
    cloneableClasses[argsClass] = cloneableClasses[arrayClass] = cloneableClasses[boolClass] = cloneableClasses[dateClass] = cloneableClasses[numberClass] = cloneableClasses[objectClass] = cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;
    var debounceOptions = {
      'leading': false,
      'maxWait': 0,
      'trailing': false
    };
    var descriptor = {
      'configurable': false,
      'enumerable': false,
      'value': null,
      'writable': false
    };
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\t': 't',
      "\u2028": 'u2028',
      "\u2029": 'u2029'
    };
    var root = objectTypes[typeof window] && window || this;
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
    var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;
    var freeGlobal = objectTypes[typeof global] && global;

    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }

    function baseIndexOf(array, value, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }

      return -1;
    }

    function cacheIndexOf(cache, value) {
      var type = typeof value;
      cache = cache.cache;

      if (type == 'boolean' || value == null) {
        return cache[value] ? 0 : -1;
      }

      if (type != 'number' && type != 'string') {
        type = 'object';
      }

      var key = type == 'number' ? value : keyPrefix + value;
      cache = (cache = cache[type]) && cache[key];
      return type == 'object' ? cache && baseIndexOf(cache, value) > -1 ? 0 : -1 : cache ? 0 : -1;
    }

    function cachePush(value) {
      var cache = this.cache,
          type = typeof value;

      if (type == 'boolean' || value == null) {
        cache[value] = true;
      } else {
        if (type != 'number' && type != 'string') {
          type = 'object';
        }

        var key = type == 'number' ? value : keyPrefix + value,
            typeCache = cache[type] || (cache[type] = {});

        if (type == 'object') {
          (typeCache[key] || (typeCache[key] = [])).push(value);
        } else {
          typeCache[key] = true;
        }
      }
    }

    function charAtCallback(value) {
      return value.charCodeAt(0);
    }

    function compareAscending(a, b) {
      var ac = a.criteria,
          bc = b.criteria,
          index = -1,
          length = ac.length;

      while (++index < length) {
        var value = ac[index],
            other = bc[index];

        if (value !== other) {
          if (value > other || typeof value == 'undefined') {
            return 1;
          }

          if (value < other || typeof other == 'undefined') {
            return -1;
          }
        }
      }

      return a.index - b.index;
    }

    function createCache(array) {
      var index = -1,
          length = array.length,
          first = array[0],
          mid = array[length / 2 | 0],
          last = array[length - 1];

      if (first && typeof first == 'object' && mid && typeof mid == 'object' && last && typeof last == 'object') {
        return false;
      }

      var cache = getObject();
      cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;
      var result = getObject();
      result.array = array;
      result.cache = cache;
      result.push = cachePush;

      while (++index < length) {
        result.push(array[index]);
      }

      return result;
    }

    function escapeStringChar(match) {
      return '\\' + stringEscapes[match];
    }

    function getArray() {
      return arrayPool.pop() || [];
    }

    function getObject() {
      return objectPool.pop() || {
        'array': null,
        'cache': null,
        'criteria': null,
        'false': false,
        'index': 0,
        'null': false,
        'number': null,
        'object': null,
        'push': null,
        'string': null,
        'true': false,
        'undefined': false,
        'value': null
      };
    }

    function releaseArray(array) {
      array.length = 0;

      if (arrayPool.length < maxPoolSize) {
        arrayPool.push(array);
      }
    }

    function releaseObject(object) {
      var cache = object.cache;

      if (cache) {
        releaseObject(cache);
      }

      object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;

      if (objectPool.length < maxPoolSize) {
        objectPool.push(object);
      }
    }

    function slice(array, start, end) {
      start || (start = 0);

      if (typeof end == 'undefined') {
        end = array ? array.length : 0;
      }

      var index = -1,
          length = end - start || 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = array[start + index];
      }

      return result;
    }

    function runInContext(context) {
      context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
      var Array = context.Array,
          Boolean = context.Boolean,
          Date = context.Date,
          Function = context.Function,
          Math = context.Math,
          Number = context.Number,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;
      var arrayRef = [];
      var objectProto = Object.prototype;
      var oldDash = context._;
      var toString = objectProto.toString;
      var reNative = RegExp('^' + String(toString).replace(/[.*+?^${}()|[\]\\]/g, '\\$&').replace(/toString| for [^\]]+/g, '.*?') + '$');
      var ceil = Math.ceil,
          clearTimeout = context.clearTimeout,
          floor = Math.floor,
          fnToString = Function.prototype.toString,
          getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
          hasOwnProperty = objectProto.hasOwnProperty,
          push = arrayRef.push,
          setTimeout = context.setTimeout,
          splice = arrayRef.splice,
          unshift = arrayRef.unshift;

      var defineProperty = function () {
        try {
          var o = {},
              func = isNative(func = Object.defineProperty) && func,
              result = func(o, o, o) && func;
        } catch (e) {}

        return result;
      }();

      var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
          nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
          nativeIsFinite = context.isFinite,
          nativeIsNaN = context.isNaN,
          nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random;
      var ctorByClass = {};
      ctorByClass[arrayClass] = Array;
      ctorByClass[boolClass] = Boolean;
      ctorByClass[dateClass] = Date;
      ctorByClass[funcClass] = Function;
      ctorByClass[objectClass] = Object;
      ctorByClass[numberClass] = Number;
      ctorByClass[regexpClass] = RegExp;
      ctorByClass[stringClass] = String;

      function lodash(value) {
        return value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__') ? value : new lodashWrapper(value);
      }

      function lodashWrapper(value, chainAll) {
        this.__chain__ = !!chainAll;
        this.__wrapped__ = value;
      }

      lodashWrapper.prototype = lodash.prototype;
      var support = lodash.support = {};
      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);
      support.funcNames = typeof Function.name == 'string';
      lodash.templateSettings = {
        'escape': /<%-([\s\S]+?)%>/g,
        'evaluate': /<%([\s\S]+?)%>/g,
        'interpolate': reInterpolate,
        'variable': '',
        'imports': {
          '_': lodash
        }
      };

      function baseBind(bindData) {
        var func = bindData[0],
            partialArgs = bindData[2],
            thisArg = bindData[4];

        function bound() {
          if (partialArgs) {
            var args = slice(partialArgs);
            push.apply(args, arguments);
          }

          if (this instanceof bound) {
            var thisBinding = baseCreate(func.prototype),
                result = func.apply(thisBinding, args || arguments);
            return isObject(result) ? result : thisBinding;
          }

          return func.apply(thisArg, args || arguments);
        }

        setBindData(bound, bindData);
        return bound;
      }

      function baseClone(value, isDeep, callback, stackA, stackB) {
        if (callback) {
          var result = callback(value);

          if (typeof result != 'undefined') {
            return result;
          }
        }

        var isObj = isObject(value);

        if (isObj) {
          var className = toString.call(value);

          if (!cloneableClasses[className]) {
            return value;
          }

          var ctor = ctorByClass[className];

          switch (className) {
            case boolClass:
            case dateClass:
              return new ctor(+value);

            case numberClass:
            case stringClass:
              return new ctor(value);

            case regexpClass:
              result = ctor(value.source, reFlags.exec(value));
              result.lastIndex = value.lastIndex;
              return result;
          }
        } else {
          return value;
        }

        var isArr = isArray(value);

        if (isDeep) {
          var initedStack = !stackA;
          stackA || (stackA = getArray());
          stackB || (stackB = getArray());
          var length = stackA.length;

          while (length--) {
            if (stackA[length] == value) {
              return stackB[length];
            }
          }

          result = isArr ? ctor(value.length) : {};
        } else {
          result = isArr ? slice(value) : assign({}, value);
        }

        if (isArr) {
          if (hasOwnProperty.call(value, 'index')) {
            result.index = value.index;
          }

          if (hasOwnProperty.call(value, 'input')) {
            result.input = value.input;
          }
        }

        if (!isDeep) {
          return result;
        }

        stackA.push(value);
        stackB.push(result);
        (isArr ? forEach : forOwn)(value, function (objValue, key) {
          result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
        });

        if (initedStack) {
          releaseArray(stackA);
          releaseArray(stackB);
        }

        return result;
      }

      function baseCreate(prototype, properties) {
        return isObject(prototype) ? nativeCreate(prototype) : {};
      }

      if (!nativeCreate) {
        baseCreate = function () {
          function Object() {}

          return function (prototype) {
            if (isObject(prototype)) {
              Object.prototype = prototype;
              var result = new Object();
              Object.prototype = null;
            }

            return result || context.Object();
          };
        }();
      }

      function baseCreateCallback(func, thisArg, argCount) {
        if (typeof func != 'function') {
          return identity;
        }

        if (typeof thisArg == 'undefined' || !('prototype' in func)) {
          return func;
        }

        var bindData = func.__bindData__;

        if (typeof bindData == 'undefined') {
          if (support.funcNames) {
            bindData = !func.name;
          }

          bindData = bindData || !support.funcDecomp;

          if (!bindData) {
            var source = fnToString.call(func);

            if (!support.funcNames) {
              bindData = !reFuncName.test(source);
            }

            if (!bindData) {
              bindData = reThis.test(source);
              setBindData(func, bindData);
            }
          }
        }

        if (bindData === false || bindData !== true && bindData[1] & 1) {
          return func;
        }

        switch (argCount) {
          case 1:
            return function (value) {
              return func.call(thisArg, value);
            };

          case 2:
            return function (a, b) {
              return func.call(thisArg, a, b);
            };

          case 3:
            return function (value, index, collection) {
              return func.call(thisArg, value, index, collection);
            };

          case 4:
            return function (accumulator, value, index, collection) {
              return func.call(thisArg, accumulator, value, index, collection);
            };
        }

        return bind(func, thisArg);
      }

      function baseCreateWrapper(bindData) {
        var func = bindData[0],
            bitmask = bindData[1],
            partialArgs = bindData[2],
            partialRightArgs = bindData[3],
            thisArg = bindData[4],
            arity = bindData[5];
        var isBind = bitmask & 1,
            isBindKey = bitmask & 2,
            isCurry = bitmask & 4,
            isCurryBound = bitmask & 8,
            key = func;

        function bound() {
          var thisBinding = isBind ? thisArg : this;

          if (partialArgs) {
            var args = slice(partialArgs);
            push.apply(args, arguments);
          }

          if (partialRightArgs || isCurry) {
            args || (args = slice(arguments));

            if (partialRightArgs) {
              push.apply(args, partialRightArgs);
            }

            if (isCurry && args.length < arity) {
              bitmask |= 16 & ~32;
              return baseCreateWrapper([func, isCurryBound ? bitmask : bitmask & ~3, args, null, thisArg, arity]);
            }
          }

          args || (args = arguments);

          if (isBindKey) {
            func = thisBinding[key];
          }

          if (this instanceof bound) {
            thisBinding = baseCreate(func.prototype);
            var result = func.apply(thisBinding, args);
            return isObject(result) ? result : thisBinding;
          }

          return func.apply(thisBinding, args);
        }

        setBindData(bound, bindData);
        return bound;
      }

      function baseDifference(array, values) {
        var index = -1,
            indexOf = getIndexOf(),
            length = array ? array.length : 0,
            isLarge = length >= largeArraySize && indexOf === baseIndexOf,
            result = [];

        if (isLarge) {
          var cache = createCache(values);

          if (cache) {
            indexOf = cacheIndexOf;
            values = cache;
          } else {
            isLarge = false;
          }
        }

        while (++index < length) {
          var value = array[index];

          if (indexOf(values, value) < 0) {
            result.push(value);
          }
        }

        if (isLarge) {
          releaseObject(values);
        }

        return result;
      }

      function baseFlatten(array, isShallow, isStrict, fromIndex) {
        var index = (fromIndex || 0) - 1,
            length = array ? array.length : 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (value && typeof value == 'object' && typeof value.length == 'number' && (isArray(value) || isArguments(value))) {
            if (!isShallow) {
              value = baseFlatten(value, isShallow, isStrict);
            }

            var valIndex = -1,
                valLength = value.length,
                resIndex = result.length;
            result.length += valLength;

            while (++valIndex < valLength) {
              result[resIndex++] = value[valIndex];
            }
          } else if (!isStrict) {
            result.push(value);
          }
        }

        return result;
      }

      function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
        if (callback) {
          var result = callback(a, b);

          if (typeof result != 'undefined') {
            return !!result;
          }
        }

        if (a === b) {
          return a !== 0 || 1 / a == 1 / b;
        }

        var type = typeof a,
            otherType = typeof b;

        if (a === a && !(a && objectTypes[type]) && !(b && objectTypes[otherType])) {
          return false;
        }

        if (a == null || b == null) {
          return a === b;
        }

        var className = toString.call(a),
            otherClass = toString.call(b);

        if (className == argsClass) {
          className = objectClass;
        }

        if (otherClass == argsClass) {
          otherClass = objectClass;
        }

        if (className != otherClass) {
          return false;
        }

        switch (className) {
          case boolClass:
          case dateClass:
            return +a == +b;

          case numberClass:
            return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;

          case regexpClass:
          case stringClass:
            return a == String(b);
        }

        var isArr = className == arrayClass;

        if (!isArr) {
          var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
              bWrapped = hasOwnProperty.call(b, '__wrapped__');

          if (aWrapped || bWrapped) {
            return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
          }

          if (className != objectClass) {
            return false;
          }

          var ctorA = a.constructor,
              ctorB = b.constructor;

          if (ctorA != ctorB && !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) && 'constructor' in a && 'constructor' in b) {
            return false;
          }
        }

        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());
        var length = stackA.length;

        while (length--) {
          if (stackA[length] == a) {
            return stackB[length] == b;
          }
        }

        var size = 0;
        result = true;
        stackA.push(a);
        stackB.push(b);

        if (isArr) {
          length = a.length;
          size = b.length;
          result = size == length;

          if (result || isWhere) {
            while (size--) {
              var index = length,
                  value = b[size];

              if (isWhere) {
                while (index--) {
                  if (result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB)) {
                    break;
                  }
                }
              } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
                break;
              }
            }
          }
        } else {
          forIn(b, function (value, key, b) {
            if (hasOwnProperty.call(b, key)) {
              size++;
              return result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB);
            }
          });

          if (result && !isWhere) {
            forIn(a, function (value, key, a) {
              if (hasOwnProperty.call(a, key)) {
                return result = --size > -1;
              }
            });
          }
        }

        stackA.pop();
        stackB.pop();

        if (initedStack) {
          releaseArray(stackA);
          releaseArray(stackB);
        }

        return result;
      }

      function baseMerge(object, source, callback, stackA, stackB) {
        (isArray(source) ? forEach : forOwn)(source, function (source, key) {
          var found,
              isArr,
              result = source,
              value = object[key];

          if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
            var stackLength = stackA.length;

            while (stackLength--) {
              if (found = stackA[stackLength] == source) {
                value = stackB[stackLength];
                break;
              }
            }

            if (!found) {
              var isShallow;

              if (callback) {
                result = callback(value, source);

                if (isShallow = typeof result != 'undefined') {
                  value = result;
                }
              }

              if (!isShallow) {
                value = isArr ? isArray(value) ? value : [] : isPlainObject(value) ? value : {};
              }

              stackA.push(source);
              stackB.push(value);

              if (!isShallow) {
                baseMerge(value, source, callback, stackA, stackB);
              }
            }
          } else {
            if (callback) {
              result = callback(value, source);

              if (typeof result == 'undefined') {
                result = source;
              }
            }

            if (typeof result != 'undefined') {
              value = result;
            }
          }

          object[key] = value;
        });
      }

      function baseRandom(min, max) {
        return min + floor(nativeRandom() * (max - min + 1));
      }

      function baseUniq(array, isSorted, callback) {
        var index = -1,
            indexOf = getIndexOf(),
            length = array ? array.length : 0,
            result = [];
        var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
            seen = callback || isLarge ? getArray() : result;

        if (isLarge) {
          var cache = createCache(seen);
          indexOf = cacheIndexOf;
          seen = cache;
        }

        while (++index < length) {
          var value = array[index],
              computed = callback ? callback(value, index, array) : value;

          if (isSorted ? !index || seen[seen.length - 1] !== computed : indexOf(seen, computed) < 0) {
            if (callback || isLarge) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        if (isLarge) {
          releaseArray(seen.array);
          releaseObject(seen);
        } else if (callback) {
          releaseArray(seen);
        }

        return result;
      }

      function createAggregator(setter) {
        return function (collection, callback, thisArg) {
          var result = {};
          callback = lodash.createCallback(callback, thisArg, 3);
          var index = -1,
              length = collection ? collection.length : 0;

          if (typeof length == 'number') {
            while (++index < length) {
              var value = collection[index];
              setter(result, value, callback(value, index, collection), collection);
            }
          } else {
            forOwn(collection, function (value, key, collection) {
              setter(result, value, callback(value, key, collection), collection);
            });
          }

          return result;
        };
      }

      function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
        var isBind = bitmask & 1,
            isBindKey = bitmask & 2,
            isCurry = bitmask & 4,
            isCurryBound = bitmask & 8,
            isPartial = bitmask & 16,
            isPartialRight = bitmask & 32;

        if (!isBindKey && !isFunction(func)) {
          throw new TypeError();
        }

        if (isPartial && !partialArgs.length) {
          bitmask &= ~16;
          isPartial = partialArgs = false;
        }

        if (isPartialRight && !partialRightArgs.length) {
          bitmask &= ~32;
          isPartialRight = partialRightArgs = false;
        }

        var bindData = func && func.__bindData__;

        if (bindData && bindData !== true) {
          bindData = slice(bindData);

          if (bindData[2]) {
            bindData[2] = slice(bindData[2]);
          }

          if (bindData[3]) {
            bindData[3] = slice(bindData[3]);
          }

          if (isBind && !(bindData[1] & 1)) {
            bindData[4] = thisArg;
          }

          if (!isBind && bindData[1] & 1) {
            bitmask |= 8;
          }

          if (isCurry && !(bindData[1] & 4)) {
            bindData[5] = arity;
          }

          if (isPartial) {
            push.apply(bindData[2] || (bindData[2] = []), partialArgs);
          }

          if (isPartialRight) {
            unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
          }

          bindData[1] |= bitmask;
          return createWrapper.apply(null, bindData);
        }

        var creater = bitmask == 1 || bitmask === 17 ? baseBind : baseCreateWrapper;
        return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
      }

      function escapeHtmlChar(match) {
        return htmlEscapes[match];
      }

      function getIndexOf() {
        var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
        return result;
      }

      function isNative(value) {
        return typeof value == 'function' && reNative.test(value);
      }

      var setBindData = !defineProperty ? noop : function (func, value) {
        descriptor.value = value;
        defineProperty(func, '__bindData__', descriptor);
        descriptor.value = null;
      };

      function shimIsPlainObject(value) {
        var ctor, result;

        if (!(value && toString.call(value) == objectClass) || (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
          return false;
        }

        forIn(value, function (value, key) {
          result = key;
        });
        return typeof result == 'undefined' || hasOwnProperty.call(value, result);
      }

      function unescapeHtmlChar(match) {
        return htmlUnescapes[match];
      }

      function isArguments(value) {
        return value && typeof value == 'object' && typeof value.length == 'number' && toString.call(value) == argsClass || false;
      }

      var isArray = nativeIsArray || function (value) {
        return value && typeof value == 'object' && typeof value.length == 'number' && toString.call(value) == arrayClass || false;
      };

      var shimKeys = function shimKeys(object) {
        var index,
            iterable = object,
            result = [];
        if (!iterable) return result;
        if (!objectTypes[typeof object]) return result;

        for (index in iterable) {
          if (hasOwnProperty.call(iterable, index)) {
            result.push(index);
          }
        }

        return result;
      };

      var keys = !nativeKeys ? shimKeys : function (object) {
        if (!isObject(object)) {
          return [];
        }

        return nativeKeys(object);
      };
      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };
      var htmlUnescapes = invert(htmlEscapes);
      var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
          reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

      var assign = function assign(object, source, guard) {
        var index,
            iterable = object,
            result = iterable;
        if (!iterable) return result;
        var args = arguments,
            argsIndex = 0,
            argsLength = typeof guard == 'number' ? 2 : args.length;

        if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
          var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
        } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
          callback = args[--argsLength];
        }

        while (++argsIndex < argsLength) {
          iterable = args[argsIndex];

          if (iterable && objectTypes[typeof iterable]) {
            var ownIndex = -1,
                ownProps = objectTypes[typeof iterable] && keys(iterable),
                length = ownProps ? ownProps.length : 0;

            while (++ownIndex < length) {
              index = ownProps[ownIndex];
              result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];
            }
          }
        }

        return result;
      };

      function clone(value, isDeep, callback, thisArg) {
        if (typeof isDeep != 'boolean' && isDeep != null) {
          thisArg = callback;
          callback = isDeep;
          isDeep = false;
        }

        return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
      }

      function cloneDeep(value, callback, thisArg) {
        return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
      }

      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties ? assign(result, properties) : result;
      }

      var defaults = function defaults(object, source, guard) {
        var index,
            iterable = object,
            result = iterable;
        if (!iterable) return result;
        var args = arguments,
            argsIndex = 0,
            argsLength = typeof guard == 'number' ? 2 : args.length;

        while (++argsIndex < argsLength) {
          iterable = args[argsIndex];

          if (iterable && objectTypes[typeof iterable]) {
            var ownIndex = -1,
                ownProps = objectTypes[typeof iterable] && keys(iterable),
                length = ownProps ? ownProps.length : 0;

            while (++ownIndex < length) {
              index = ownProps[ownIndex];
              if (typeof result[index] == 'undefined') result[index] = iterable[index];
            }
          }
        }

        return result;
      };

      function findKey(object, callback, thisArg) {
        var result;
        callback = lodash.createCallback(callback, thisArg, 3);
        forOwn(object, function (value, key, object) {
          if (callback(value, key, object)) {
            result = key;
            return false;
          }
        });
        return result;
      }

      function findLastKey(object, callback, thisArg) {
        var result;
        callback = lodash.createCallback(callback, thisArg, 3);
        forOwnRight(object, function (value, key, object) {
          if (callback(value, key, object)) {
            result = key;
            return false;
          }
        });
        return result;
      }

      var forIn = function forIn(collection, callback, thisArg) {
        var index,
            iterable = collection,
            result = iterable;
        if (!iterable) return result;
        if (!objectTypes[typeof iterable]) return result;
        callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);

        for (index in iterable) {
          if (callback(iterable[index], index, collection) === false) return result;
        }

        return result;
      };

      function forInRight(object, callback, thisArg) {
        var pairs = [];
        forIn(object, function (value, key) {
          pairs.push(key, value);
        });
        var length = pairs.length;
        callback = baseCreateCallback(callback, thisArg, 3);

        while (length--) {
          if (callback(pairs[length--], pairs[length], object) === false) {
            break;
          }
        }

        return object;
      }

      var forOwn = function forOwn(collection, callback, thisArg) {
        var index,
            iterable = collection,
            result = iterable;
        if (!iterable) return result;
        if (!objectTypes[typeof iterable]) return result;
        callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (callback(iterable[index], index, collection) === false) return result;
        }

        return result;
      };

      function forOwnRight(object, callback, thisArg) {
        var props = keys(object),
            length = props.length;
        callback = baseCreateCallback(callback, thisArg, 3);

        while (length--) {
          var key = props[length];

          if (callback(object[key], key, object) === false) {
            break;
          }
        }

        return object;
      }

      function functions(object) {
        var result = [];
        forIn(object, function (value, key) {
          if (isFunction(value)) {
            result.push(key);
          }
        });
        return result.sort();
      }

      function has(object, key) {
        return object ? hasOwnProperty.call(object, key) : false;
      }

      function invert(object) {
        var index = -1,
            props = keys(object),
            length = props.length,
            result = {};

        while (++index < length) {
          var key = props[index];
          result[object[key]] = key;
        }

        return result;
      }

      function isBoolean(value) {
        return value === true || value === false || value && typeof value == 'object' && toString.call(value) == boolClass || false;
      }

      function isDate(value) {
        return value && typeof value == 'object' && toString.call(value) == dateClass || false;
      }

      function isElement(value) {
        return value && value.nodeType === 1 || false;
      }

      function isEmpty(value) {
        var result = true;

        if (!value) {
          return result;
        }

        var className = toString.call(value),
            length = value.length;

        if (className == arrayClass || className == stringClass || className == argsClass || className == objectClass && typeof length == 'number' && isFunction(value.splice)) {
          return !length;
        }

        forOwn(value, function () {
          return result = false;
        });
        return result;
      }

      function isEqual(a, b, callback, thisArg) {
        return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
      }

      function isFinite(value) {
        return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
      }

      function isFunction(value) {
        return typeof value == 'function';
      }

      function isObject(value) {
        return !!(value && objectTypes[typeof value]);
      }

      function isNaN(value) {
        return isNumber(value) && value != +value;
      }

      function isNull(value) {
        return value === null;
      }

      function isNumber(value) {
        return typeof value == 'number' || value && typeof value == 'object' && toString.call(value) == numberClass || false;
      }

      var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function (value) {
        if (!(value && toString.call(value) == objectClass)) {
          return false;
        }

        var valueOf = value.valueOf,
            objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);
        return objProto ? value == objProto || getPrototypeOf(value) == objProto : shimIsPlainObject(value);
      };

      function isRegExp(value) {
        return value && typeof value == 'object' && toString.call(value) == regexpClass || false;
      }

      function isString(value) {
        return typeof value == 'string' || value && typeof value == 'object' && toString.call(value) == stringClass || false;
      }

      function isUndefined(value) {
        return typeof value == 'undefined';
      }

      function mapValues(object, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);
        forOwn(object, function (value, key, object) {
          result[key] = callback(value, key, object);
        });
        return result;
      }

      function merge(object) {
        var args = arguments,
            length = 2;

        if (!isObject(object)) {
          return object;
        }

        if (typeof args[2] != 'number') {
          length = args.length;
        }

        if (length > 3 && typeof args[length - 2] == 'function') {
          var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
        } else if (length > 2 && typeof args[length - 1] == 'function') {
          callback = args[--length];
        }

        var sources = slice(arguments, 1, length),
            index = -1,
            stackA = getArray(),
            stackB = getArray();

        while (++index < length) {
          baseMerge(object, sources[index], callback, stackA, stackB);
        }

        releaseArray(stackA);
        releaseArray(stackB);
        return object;
      }

      function omit(object, callback, thisArg) {
        var result = {};

        if (typeof callback != 'function') {
          var props = [];
          forIn(object, function (value, key) {
            props.push(key);
          });
          props = baseDifference(props, baseFlatten(arguments, true, false, 1));
          var index = -1,
              length = props.length;

          while (++index < length) {
            var key = props[index];
            result[key] = object[key];
          }
        } else {
          callback = lodash.createCallback(callback, thisArg, 3);
          forIn(object, function (value, key, object) {
            if (!callback(value, key, object)) {
              result[key] = value;
            }
          });
        }

        return result;
      }

      function pairs(object) {
        var index = -1,
            props = keys(object),
            length = props.length,
            result = Array(length);

        while (++index < length) {
          var key = props[index];
          result[index] = [key, object[key]];
        }

        return result;
      }

      function pick(object, callback, thisArg) {
        var result = {};

        if (typeof callback != 'function') {
          var index = -1,
              props = baseFlatten(arguments, true, false, 1),
              length = isObject(object) ? props.length : 0;

          while (++index < length) {
            var key = props[index];

            if (key in object) {
              result[key] = object[key];
            }
          }
        } else {
          callback = lodash.createCallback(callback, thisArg, 3);
          forIn(object, function (value, key, object) {
            if (callback(value, key, object)) {
              result[key] = value;
            }
          });
        }

        return result;
      }

      function transform(object, callback, accumulator, thisArg) {
        var isArr = isArray(object);

        if (accumulator == null) {
          if (isArr) {
            accumulator = [];
          } else {
            var ctor = object && object.constructor,
                proto = ctor && ctor.prototype;
            accumulator = baseCreate(proto);
          }
        }

        if (callback) {
          callback = lodash.createCallback(callback, thisArg, 4);
          (isArr ? forEach : forOwn)(object, function (value, index, object) {
            return callback(accumulator, value, index, object);
          });
        }

        return accumulator;
      }

      function values(object) {
        var index = -1,
            props = keys(object),
            length = props.length,
            result = Array(length);

        while (++index < length) {
          result[index] = object[props[index]];
        }

        return result;
      }

      function at(collection) {
        var args = arguments,
            index = -1,
            props = baseFlatten(args, true, false, 1),
            length = args[2] && args[2][args[1]] === collection ? 1 : props.length,
            result = Array(length);

        while (++index < length) {
          result[index] = collection[props[index]];
        }

        return result;
      }

      function contains(collection, target, fromIndex) {
        var index = -1,
            indexOf = getIndexOf(),
            length = collection ? collection.length : 0,
            result = false;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;

        if (isArray(collection)) {
          result = indexOf(collection, target, fromIndex) > -1;
        } else if (typeof length == 'number') {
          result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
        } else {
          forOwn(collection, function (value) {
            if (++index >= fromIndex) {
              return !(result = value === target);
            }
          });
        }

        return result;
      }

      var countBy = createAggregator(function (result, value, key) {
        hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1;
      });

      function every(collection, callback, thisArg) {
        var result = true;
        callback = lodash.createCallback(callback, thisArg, 3);
        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            if (!(result = !!callback(collection[index], index, collection))) {
              break;
            }
          }
        } else {
          forOwn(collection, function (value, index, collection) {
            return result = !!callback(value, index, collection);
          });
        }

        return result;
      }

      function filter(collection, callback, thisArg) {
        var result = [];
        callback = lodash.createCallback(callback, thisArg, 3);
        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];

            if (callback(value, index, collection)) {
              result.push(value);
            }
          }
        } else {
          forOwn(collection, function (value, index, collection) {
            if (callback(value, index, collection)) {
              result.push(value);
            }
          });
        }

        return result;
      }

      function find(collection, callback, thisArg) {
        callback = lodash.createCallback(callback, thisArg, 3);
        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];

            if (callback(value, index, collection)) {
              return value;
            }
          }
        } else {
          var result;
          forOwn(collection, function (value, index, collection) {
            if (callback(value, index, collection)) {
              result = value;
              return false;
            }
          });
          return result;
        }
      }

      function findLast(collection, callback, thisArg) {
        var result;
        callback = lodash.createCallback(callback, thisArg, 3);
        forEachRight(collection, function (value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }

      function forEach(collection, callback, thisArg) {
        var index = -1,
            length = collection ? collection.length : 0;
        callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);

        if (typeof length == 'number') {
          while (++index < length) {
            if (callback(collection[index], index, collection) === false) {
              break;
            }
          }
        } else {
          forOwn(collection, callback);
        }

        return collection;
      }

      function forEachRight(collection, callback, thisArg) {
        var length = collection ? collection.length : 0;
        callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);

        if (typeof length == 'number') {
          while (length--) {
            if (callback(collection[length], length, collection) === false) {
              break;
            }
          }
        } else {
          var props = keys(collection);
          length = props.length;
          forOwn(collection, function (value, key, collection) {
            key = props ? props[--length] : --length;
            return callback(collection[key], key, collection);
          });
        }

        return collection;
      }

      var groupBy = createAggregator(function (result, value, key) {
        (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
      });
      var indexBy = createAggregator(function (result, value, key) {
        result[key] = value;
      });

      function invoke(collection, methodName) {
        var args = slice(arguments, 2),
            index = -1,
            isFunc = typeof methodName == 'function',
            length = collection ? collection.length : 0,
            result = Array(typeof length == 'number' ? length : 0);
        forEach(collection, function (value) {
          result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
        });
        return result;
      }

      function map(collection, callback, thisArg) {
        var index = -1,
            length = collection ? collection.length : 0;
        callback = lodash.createCallback(callback, thisArg, 3);

        if (typeof length == 'number') {
          var result = Array(length);

          while (++index < length) {
            result[index] = callback(collection[index], index, collection);
          }
        } else {
          result = [];
          forOwn(collection, function (value, key, collection) {
            result[++index] = callback(value, key, collection);
          });
        }

        return result;
      }

      function max(collection, callback, thisArg) {
        var computed = -Infinity,
            result = computed;

        if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
          callback = null;
        }

        if (callback == null && isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];

            if (value > result) {
              result = value;
            }
          }
        } else {
          callback = callback == null && isString(collection) ? charAtCallback : lodash.createCallback(callback, thisArg, 3);
          forEach(collection, function (value, index, collection) {
            var current = callback(value, index, collection);

            if (current > computed) {
              computed = current;
              result = value;
            }
          });
        }

        return result;
      }

      function min(collection, callback, thisArg) {
        var computed = Infinity,
            result = computed;

        if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
          callback = null;
        }

        if (callback == null && isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];

            if (value < result) {
              result = value;
            }
          }
        } else {
          callback = callback == null && isString(collection) ? charAtCallback : lodash.createCallback(callback, thisArg, 3);
          forEach(collection, function (value, index, collection) {
            var current = callback(value, index, collection);

            if (current < computed) {
              computed = current;
              result = value;
            }
          });
        }

        return result;
      }

      var pluck = map;

      function reduce(collection, callback, accumulator, thisArg) {
        if (!collection) return accumulator;
        var noaccum = arguments.length < 3;
        callback = lodash.createCallback(callback, thisArg, 4);
        var index = -1,
            length = collection.length;

        if (typeof length == 'number') {
          if (noaccum) {
            accumulator = collection[++index];
          }

          while (++index < length) {
            accumulator = callback(accumulator, collection[index], index, collection);
          }
        } else {
          forOwn(collection, function (value, index, collection) {
            accumulator = noaccum ? (noaccum = false, value) : callback(accumulator, value, index, collection);
          });
        }

        return accumulator;
      }

      function reduceRight(collection, callback, accumulator, thisArg) {
        var noaccum = arguments.length < 3;
        callback = lodash.createCallback(callback, thisArg, 4);
        forEachRight(collection, function (value, index, collection) {
          accumulator = noaccum ? (noaccum = false, value) : callback(accumulator, value, index, collection);
        });
        return accumulator;
      }

      function reject(collection, callback, thisArg) {
        callback = lodash.createCallback(callback, thisArg, 3);
        return filter(collection, function (value, index, collection) {
          return !callback(value, index, collection);
        });
      }

      function sample(collection, n, guard) {
        if (collection && typeof collection.length != 'number') {
          collection = values(collection);
        }

        if (n == null || guard) {
          return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
        }

        var result = shuffle(collection);
        result.length = nativeMin(nativeMax(0, n), result.length);
        return result;
      }

      function shuffle(collection) {
        var index = -1,
            length = collection ? collection.length : 0,
            result = Array(typeof length == 'number' ? length : 0);
        forEach(collection, function (value) {
          var rand = baseRandom(0, ++index);
          result[index] = result[rand];
          result[rand] = value;
        });
        return result;
      }

      function size(collection) {
        var length = collection ? collection.length : 0;
        return typeof length == 'number' ? length : keys(collection).length;
      }

      function some(collection, callback, thisArg) {
        var result;
        callback = lodash.createCallback(callback, thisArg, 3);
        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            if (result = callback(collection[index], index, collection)) {
              break;
            }
          }
        } else {
          forOwn(collection, function (value, index, collection) {
            return !(result = callback(value, index, collection));
          });
        }

        return !!result;
      }

      function sortBy(collection, callback, thisArg) {
        var index = -1,
            isArr = isArray(callback),
            length = collection ? collection.length : 0,
            result = Array(typeof length == 'number' ? length : 0);

        if (!isArr) {
          callback = lodash.createCallback(callback, thisArg, 3);
        }

        forEach(collection, function (value, key, collection) {
          var object = result[++index] = getObject();

          if (isArr) {
            object.criteria = map(callback, function (key) {
              return value[key];
            });
          } else {
            (object.criteria = getArray())[0] = callback(value, key, collection);
          }

          object.index = index;
          object.value = value;
        });
        length = result.length;
        result.sort(compareAscending);

        while (length--) {
          var object = result[length];
          result[length] = object.value;

          if (!isArr) {
            releaseArray(object.criteria);
          }

          releaseObject(object);
        }

        return result;
      }

      function toArray(collection) {
        if (collection && typeof collection.length == 'number') {
          return slice(collection);
        }

        return values(collection);
      }

      var where = filter;

      function compact(array) {
        var index = -1,
            length = array ? array.length : 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (value) {
            result.push(value);
          }
        }

        return result;
      }

      function difference(array) {
        return baseDifference(array, baseFlatten(arguments, true, true, 1));
      }

      function findIndex(array, callback, thisArg) {
        var index = -1,
            length = array ? array.length : 0;
        callback = lodash.createCallback(callback, thisArg, 3);

        while (++index < length) {
          if (callback(array[index], index, array)) {
            return index;
          }
        }

        return -1;
      }

      function findLastIndex(array, callback, thisArg) {
        var length = array ? array.length : 0;
        callback = lodash.createCallback(callback, thisArg, 3);

        while (length--) {
          if (callback(array[length], length, array)) {
            return length;
          }
        }

        return -1;
      }

      function first(array, callback, thisArg) {
        var n = 0,
            length = array ? array.length : 0;

        if (typeof callback != 'number' && callback != null) {
          var index = -1;
          callback = lodash.createCallback(callback, thisArg, 3);

          while (++index < length && callback(array[index], index, array)) {
            n++;
          }
        } else {
          n = callback;

          if (n == null || thisArg) {
            return array ? array[0] : undefined;
          }
        }

        return slice(array, 0, nativeMin(nativeMax(0, n), length));
      }

      function flatten(array, isShallow, callback, thisArg) {
        if (typeof isShallow != 'boolean' && isShallow != null) {
          thisArg = callback;
          callback = typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array ? null : isShallow;
          isShallow = false;
        }

        if (callback != null) {
          array = map(array, callback, thisArg);
        }

        return baseFlatten(array, isShallow);
      }

      function indexOf(array, value, fromIndex) {
        if (typeof fromIndex == 'number') {
          var length = array ? array.length : 0;
          fromIndex = fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0;
        } else if (fromIndex) {
          var index = sortedIndex(array, value);
          return array[index] === value ? index : -1;
        }

        return baseIndexOf(array, value, fromIndex);
      }

      function initial(array, callback, thisArg) {
        var n = 0,
            length = array ? array.length : 0;

        if (typeof callback != 'number' && callback != null) {
          var index = length;
          callback = lodash.createCallback(callback, thisArg, 3);

          while (index-- && callback(array[index], index, array)) {
            n++;
          }
        } else {
          n = callback == null || thisArg ? 1 : callback || n;
        }

        return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
      }

      function intersection() {
        var args = [],
            argsIndex = -1,
            argsLength = arguments.length,
            caches = getArray(),
            indexOf = getIndexOf(),
            trustIndexOf = indexOf === baseIndexOf,
            seen = getArray();

        while (++argsIndex < argsLength) {
          var value = arguments[argsIndex];

          if (isArray(value) || isArguments(value)) {
            args.push(value);
            caches.push(trustIndexOf && value.length >= largeArraySize && createCache(argsIndex ? args[argsIndex] : seen));
          }
        }

        var array = args[0],
            index = -1,
            length = array ? array.length : 0,
            result = [];

        outer: while (++index < length) {
          var cache = caches[0];
          value = array[index];

          if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
            argsIndex = argsLength;
            (cache || seen).push(value);

            while (--argsIndex) {
              cache = caches[argsIndex];

              if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
                continue outer;
              }
            }

            result.push(value);
          }
        }

        while (argsLength--) {
          cache = caches[argsLength];

          if (cache) {
            releaseObject(cache);
          }
        }

        releaseArray(caches);
        releaseArray(seen);
        return result;
      }

      function last(array, callback, thisArg) {
        var n = 0,
            length = array ? array.length : 0;

        if (typeof callback != 'number' && callback != null) {
          var index = length;
          callback = lodash.createCallback(callback, thisArg, 3);

          while (index-- && callback(array[index], index, array)) {
            n++;
          }
        } else {
          n = callback;

          if (n == null || thisArg) {
            return array ? array[length - 1] : undefined;
          }
        }

        return slice(array, nativeMax(0, length - n));
      }

      function lastIndexOf(array, value, fromIndex) {
        var index = array ? array.length : 0;

        if (typeof fromIndex == 'number') {
          index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
        }

        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }

        return -1;
      }

      function pull(array) {
        var args = arguments,
            argsIndex = 0,
            argsLength = args.length,
            length = array ? array.length : 0;

        while (++argsIndex < argsLength) {
          var index = -1,
              value = args[argsIndex];

          while (++index < length) {
            if (array[index] === value) {
              splice.call(array, index--, 1);
              length--;
            }
          }
        }

        return array;
      }

      function range(start, end, step) {
        start = +start || 0;
        step = typeof step == 'number' ? step : +step || 1;

        if (end == null) {
          end = start;
          start = 0;
        }

        var index = -1,
            length = nativeMax(0, ceil((end - start) / (step || 1))),
            result = Array(length);

        while (++index < length) {
          result[index] = start;
          start += step;
        }

        return result;
      }

      function remove(array, callback, thisArg) {
        var index = -1,
            length = array ? array.length : 0,
            result = [];
        callback = lodash.createCallback(callback, thisArg, 3);

        while (++index < length) {
          var value = array[index];

          if (callback(value, index, array)) {
            result.push(value);
            splice.call(array, index--, 1);
            length--;
          }
        }

        return result;
      }

      function rest(array, callback, thisArg) {
        if (typeof callback != 'number' && callback != null) {
          var n = 0,
              index = -1,
              length = array ? array.length : 0;
          callback = lodash.createCallback(callback, thisArg, 3);

          while (++index < length && callback(array[index], index, array)) {
            n++;
          }
        } else {
          n = callback == null || thisArg ? 1 : nativeMax(0, callback);
        }

        return slice(array, n);
      }

      function sortedIndex(array, value, callback, thisArg) {
        var low = 0,
            high = array ? array.length : low;
        callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
        value = callback(value);

        while (low < high) {
          var mid = low + high >>> 1;
          callback(array[mid]) < value ? low = mid + 1 : high = mid;
        }

        return low;
      }

      function union() {
        return baseUniq(baseFlatten(arguments, true, true));
      }

      function uniq(array, isSorted, callback, thisArg) {
        if (typeof isSorted != 'boolean' && isSorted != null) {
          thisArg = callback;
          callback = typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array ? null : isSorted;
          isSorted = false;
        }

        if (callback != null) {
          callback = lodash.createCallback(callback, thisArg, 3);
        }

        return baseUniq(array, isSorted, callback);
      }

      function without(array) {
        return baseDifference(array, slice(arguments, 1));
      }

      function xor() {
        var index = -1,
            length = arguments.length;

        while (++index < length) {
          var array = arguments[index];

          if (isArray(array) || isArguments(array)) {
            var result = result ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result))) : array;
          }
        }

        return result || [];
      }

      function zip() {
        var array = arguments.length > 1 ? arguments : arguments[0],
            index = -1,
            length = array ? max(pluck(array, 'length')) : 0,
            result = Array(length < 0 ? 0 : length);

        while (++index < length) {
          result[index] = pluck(array, index);
        }

        return result;
      }

      function zipObject(keys, values) {
        var index = -1,
            length = keys ? keys.length : 0,
            result = {};

        if (!values && length && !isArray(keys[0])) {
          values = [];
        }

        while (++index < length) {
          var key = keys[index];

          if (values) {
            result[key] = values[index];
          } else if (key) {
            result[key[0]] = key[1];
          }
        }

        return result;
      }

      function after(n, func) {
        if (!isFunction(func)) {
          throw new TypeError();
        }

        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      function bind(func, thisArg) {
        return arguments.length > 2 ? createWrapper(func, 17, slice(arguments, 2), null, thisArg) : createWrapper(func, 1, null, null, thisArg);
      }

      function bindAll(object) {
        var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
            index = -1,
            length = funcs.length;

        while (++index < length) {
          var key = funcs[index];
          object[key] = createWrapper(object[key], 1, null, null, object);
        }

        return object;
      }

      function bindKey(object, key) {
        return arguments.length > 2 ? createWrapper(key, 19, slice(arguments, 2), null, object) : createWrapper(key, 3, null, null, object);
      }

      function compose() {
        var funcs = arguments,
            length = funcs.length;

        while (length--) {
          if (!isFunction(funcs[length])) {
            throw new TypeError();
          }
        }

        return function () {
          var args = arguments,
              length = funcs.length;

          while (length--) {
            args = [funcs[length].apply(this, args)];
          }

          return args[0];
        };
      }

      function curry(func, arity) {
        arity = typeof arity == 'number' ? arity : +arity || func.length;
        return createWrapper(func, 4, null, null, null, arity);
      }

      function debounce(func, wait, options) {
        var args,
            maxTimeoutId,
            result,
            stamp,
            thisArg,
            timeoutId,
            trailingCall,
            lastCalled = 0,
            maxWait = false,
            trailing = true;

        if (!isFunction(func)) {
          throw new TypeError();
        }

        wait = nativeMax(0, wait) || 0;

        if (options === true) {
          var leading = true;
          trailing = false;
        } else if (isObject(options)) {
          leading = options.leading;
          maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
          trailing = 'trailing' in options ? options.trailing : trailing;
        }

        var delayed = function delayed() {
          var remaining = wait - (now() - stamp);

          if (remaining <= 0) {
            if (maxTimeoutId) {
              clearTimeout(maxTimeoutId);
            }

            var isCalled = trailingCall;
            maxTimeoutId = timeoutId = trailingCall = undefined;

            if (isCalled) {
              lastCalled = now();
              result = func.apply(thisArg, args);

              if (!timeoutId && !maxTimeoutId) {
                args = thisArg = null;
              }
            }
          } else {
            timeoutId = setTimeout(delayed, remaining);
          }
        };

        var maxDelayed = function maxDelayed() {
          if (timeoutId) {
            clearTimeout(timeoutId);
          }

          maxTimeoutId = timeoutId = trailingCall = undefined;

          if (trailing || maxWait !== wait) {
            lastCalled = now();
            result = func.apply(thisArg, args);

            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        };

        return function () {
          args = arguments;
          stamp = now();
          thisArg = this;
          trailingCall = trailing && (timeoutId || !leading);

          if (maxWait === false) {
            var leadingCall = leading && !timeoutId;
          } else {
            if (!maxTimeoutId && !leading) {
              lastCalled = stamp;
            }

            var remaining = maxWait - (stamp - lastCalled),
                isCalled = remaining <= 0;

            if (isCalled) {
              if (maxTimeoutId) {
                maxTimeoutId = clearTimeout(maxTimeoutId);
              }

              lastCalled = stamp;
              result = func.apply(thisArg, args);
            } else if (!maxTimeoutId) {
              maxTimeoutId = setTimeout(maxDelayed, remaining);
            }
          }

          if (isCalled && timeoutId) {
            timeoutId = clearTimeout(timeoutId);
          } else if (!timeoutId && wait !== maxWait) {
            timeoutId = setTimeout(delayed, wait);
          }

          if (leadingCall) {
            isCalled = true;
            result = func.apply(thisArg, args);
          }

          if (isCalled && !timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }

          return result;
        };
      }

      function defer(func) {
        if (!isFunction(func)) {
          throw new TypeError();
        }

        var args = slice(arguments, 1);
        return setTimeout(function () {
          func.apply(undefined, args);
        }, 1);
      }

      function delay(func, wait) {
        if (!isFunction(func)) {
          throw new TypeError();
        }

        var args = slice(arguments, 2);
        return setTimeout(function () {
          func.apply(undefined, args);
        }, wait);
      }

      function memoize(func, resolver) {
        if (!isFunction(func)) {
          throw new TypeError();
        }

        var memoized = function memoized() {
          var cache = memoized.cache,
              key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];
          return hasOwnProperty.call(cache, key) ? cache[key] : cache[key] = func.apply(this, arguments);
        };

        memoized.cache = {};
        return memoized;
      }

      function once(func) {
        var ran, result;

        if (!isFunction(func)) {
          throw new TypeError();
        }

        return function () {
          if (ran) {
            return result;
          }

          ran = true;
          result = func.apply(this, arguments);
          func = null;
          return result;
        };
      }

      function partial(func) {
        return createWrapper(func, 16, slice(arguments, 1));
      }

      function partialRight(func) {
        return createWrapper(func, 32, null, slice(arguments, 1));
      }

      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (!isFunction(func)) {
          throw new TypeError();
        }

        if (options === false) {
          leading = false;
        } else if (isObject(options)) {
          leading = 'leading' in options ? options.leading : leading;
          trailing = 'trailing' in options ? options.trailing : trailing;
        }

        debounceOptions.leading = leading;
        debounceOptions.maxWait = wait;
        debounceOptions.trailing = trailing;
        return debounce(func, wait, debounceOptions);
      }

      function wrap(value, wrapper) {
        return createWrapper(wrapper, 16, [value]);
      }

      function constant(value) {
        return function () {
          return value;
        };
      }

      function createCallback(func, thisArg, argCount) {
        var type = typeof func;

        if (func == null || type == 'function') {
          return baseCreateCallback(func, thisArg, argCount);
        }

        if (type != 'object') {
          return property(func);
        }

        var props = keys(func),
            key = props[0],
            a = func[key];

        if (props.length == 1 && a === a && !isObject(a)) {
          return function (object) {
            var b = object[key];
            return a === b && (a !== 0 || 1 / a == 1 / b);
          };
        }

        return function (object) {
          var length = props.length,
              result = false;

          while (length--) {
            if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
              break;
            }
          }

          return result;
        };
      }

      function escape(string) {
        return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
      }

      function identity(value) {
        return value;
      }

      function mixin(object, source, options) {
        var chain = true,
            methodNames = source && functions(source);

        if (!source || !options && !methodNames.length) {
          if (options == null) {
            options = source;
          }

          ctor = lodashWrapper;
          source = object;
          object = lodash;
          methodNames = functions(source);
        }

        if (options === false) {
          chain = false;
        } else if (isObject(options) && 'chain' in options) {
          chain = options.chain;
        }

        var ctor = object,
            isFunc = isFunction(ctor);
        forEach(methodNames, function (methodName) {
          var func = object[methodName] = source[methodName];

          if (isFunc) {
            ctor.prototype[methodName] = function () {
              var chainAll = this.__chain__,
                  value = this.__wrapped__,
                  args = [value];
              push.apply(args, arguments);
              var result = func.apply(object, args);

              if (chain || chainAll) {
                if (value === result && isObject(result)) {
                  return this;
                }

                result = new ctor(result);
                result.__chain__ = chainAll;
              }

              return result;
            };
          }
        });
      }

      function noConflict() {
        context._ = oldDash;
        return this;
      }

      function noop() {}

      var now = isNative(now = Date.now) && now || function () {
        return new Date().getTime();
      };

      var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function (value, radix) {
        return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
      };

      function property(key) {
        return function (object) {
          return object[key];
        };
      }

      function random(min, max, floating) {
        var noMin = min == null,
            noMax = max == null;

        if (floating == null) {
          if (typeof min == 'boolean' && noMax) {
            floating = min;
            min = 1;
          } else if (!noMax && typeof max == 'boolean') {
            floating = max;
            noMax = true;
          }
        }

        if (noMin && noMax) {
          max = 1;
        }

        min = +min || 0;

        if (noMax) {
          max = min;
          min = 0;
        } else {
          max = +max || 0;
        }

        if (floating || min % 1 || max % 1) {
          var rand = nativeRandom();
          return nativeMin(min + rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1))), max);
        }

        return baseRandom(min, max);
      }

      function result(object, key) {
        if (object) {
          var value = object[key];
          return isFunction(value) ? object[key]() : value;
        }
      }

      function template(text, data, options) {
        var settings = lodash.templateSettings;
        text = String(text || '');
        options = defaults({}, options, settings);
        var imports = defaults({}, options.imports, settings.imports),
            importsKeys = keys(imports),
            importsValues = values(imports);
        var isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
        text.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          if (escapeValue) {
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }

          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }

          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }

          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = options.variable,
            hasVariable = variable;

        if (!hasVariable) {
          variable = 'obj';
          source = 'with (' + variable + ') {\n' + source + '\n}\n';
        }

        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
        source = 'function(' + variable + ') {\n' + (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') + "var __t, __p = '', __e = _.escape" + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + templateCounter++ + ']') + '\n*/';

        try {
          var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
        } catch (e) {
          e.source = source;
          throw e;
        }

        if (data) {
          return result(data);
        }

        result.source = source;
        return result;
      }

      function times(n, callback, thisArg) {
        n = (n = +n) > -1 ? n : 0;
        var index = -1,
            result = Array(n);
        callback = baseCreateCallback(callback, thisArg, 1);

        while (++index < n) {
          result[index] = callback(index);
        }

        return result;
      }

      function unescape(string) {
        return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
      }

      function uniqueId(prefix) {
        var id = ++idCounter;
        return String(prefix == null ? '' : prefix) + id;
      }

      function chain(value) {
        value = new lodashWrapper(value);
        value.__chain__ = true;
        return value;
      }

      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      function wrapperChain() {
        this.__chain__ = true;
        return this;
      }

      function wrapperToString() {
        return String(this.__wrapped__);
      }

      function wrapperValueOf() {
        return this.__wrapped__;
      }

      lodash.after = after;
      lodash.assign = assign;
      lodash.at = at;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.chain = chain;
      lodash.compact = compact;
      lodash.compose = compose;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.createCallback = createCallback;
      lodash.curry = curry;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.filter = filter;
      lodash.flatten = flatten;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.functions = functions;
      lodash.groupBy = groupBy;
      lodash.indexBy = indexBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.invert = invert;
      lodash.invoke = invoke;
      lodash.keys = keys;
      lodash.map = map;
      lodash.mapValues = mapValues;
      lodash.max = max;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.min = min;
      lodash.omit = omit;
      lodash.once = once;
      lodash.pairs = pairs;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.pick = pick;
      lodash.pluck = pluck;
      lodash.property = property;
      lodash.pull = pull;
      lodash.range = range;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.shuffle = shuffle;
      lodash.sortBy = sortBy;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.times = times;
      lodash.toArray = toArray;
      lodash.transform = transform;
      lodash.union = union;
      lodash.uniq = uniq;
      lodash.values = values;
      lodash.where = where;
      lodash.without = without;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.collect = map;
      lodash.drop = rest;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.extend = assign;
      lodash.methods = functions;
      lodash.object = zipObject;
      lodash.select = filter;
      lodash.tail = rest;
      lodash.unique = uniq;
      lodash.unzip = zip;
      mixin(lodash);
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.contains = contains;
      lodash.escape = escape;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.has = has;
      lodash.identity = identity;
      lodash.indexOf = indexOf;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isBoolean = isBoolean;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isNaN = isNaN;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isString = isString;
      lodash.isUndefined = isUndefined;
      lodash.lastIndexOf = lastIndexOf;
      lodash.mixin = mixin;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.result = result;
      lodash.runInContext = runInContext;
      lodash.size = size;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.template = template;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.all = every;
      lodash.any = some;
      lodash.detect = find;
      lodash.findWhere = find;
      lodash.foldl = reduce;
      lodash.foldr = reduceRight;
      lodash.include = contains;
      lodash.inject = reduce;
      mixin(function () {
        var source = {};
        forOwn(lodash, function (func, methodName) {
          if (!lodash.prototype[methodName]) {
            source[methodName] = func;
          }
        });
        return source;
      }(), false);
      lodash.first = first;
      lodash.last = last;
      lodash.sample = sample;
      lodash.take = first;
      lodash.head = first;
      forOwn(lodash, function (func, methodName) {
        var callbackable = methodName !== 'sample';

        if (!lodash.prototype[methodName]) {
          lodash.prototype[methodName] = function (n, guard) {
            var chainAll = this.__chain__,
                result = func(this.__wrapped__, n, guard);
            return !chainAll && (n == null || guard && !(callbackable && typeof n == 'function')) ? result : new lodashWrapper(result, chainAll);
          };
        }
      });
      lodash.VERSION = '2.4.2';
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.toString = wrapperToString;
      lodash.prototype.value = wrapperValueOf;
      lodash.prototype.valueOf = wrapperValueOf;
      forEach(['join', 'pop', 'shift'], function (methodName) {
        var func = arrayRef[methodName];

        lodash.prototype[methodName] = function () {
          var chainAll = this.__chain__,
              result = func.apply(this.__wrapped__, arguments);
          return chainAll ? new lodashWrapper(result, chainAll) : result;
        };
      });
      forEach(['push', 'reverse', 'sort', 'unshift'], function (methodName) {
        var func = arrayRef[methodName];

        lodash.prototype[methodName] = function () {
          func.apply(this.__wrapped__, arguments);
          return this;
        };
      });
      forEach(['concat', 'slice', 'splice'], function (methodName) {
        var func = arrayRef[methodName];

        lodash.prototype[methodName] = function () {
          return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
        };
      });
      return lodash;
    }

    var _ = runInContext();

    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      root._ = _;
      define(function () {
        return _;
      });
    } else if (freeExports && freeModule) {
        if (moduleExports) {
          (freeModule.exports = _)._ = _;
        } else {
            freeExports._ = _;
          }
      } else {
        root._ = _;
      }
  }).call(this);
},883,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var EventEmitter, WithObservableWrites, WriteTransaction, _;

  EventEmitter = _require(_dependencyMap[0]);
  WriteTransaction = _require(_dependencyMap[1]);
  _ = _require(_dependencyMap[2]);
  WithObservableWrites = {
    getDefaultTransaction: function getDefaultTransaction() {
      this.setMaxListeners(0);
      return new WriteTransaction(this);
    }
  };

  _.mixin(WithObservableWrites, EventEmitter.prototype);

  module.exports = WithObservableWrites;
},884,[885,886,883]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var has = Object.prototype.hasOwnProperty;
  var prefix = typeof Object.create !== 'function' ? '~' : false;

  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  function EventEmitter() {}

  EventEmitter.prototype._events = undefined;

  EventEmitter.prototype.eventNames = function eventNames() {
    var events = this._events,
        names = [],
        name;
    if (!events) return names;

    for (name in events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  EventEmitter.prototype.listeners = function listeners(event, exists) {
    var evt = prefix ? prefix + event : event,
        available = this._events && this._events[evt];
    if (exists) return !!available;
    if (!available) return [];
    if (available.fn) return [available.fn];

    for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
      ee[i] = available[i].fn;
    }

    return ee;
  };

  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events || !this._events[evt]) return false;
    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if ('function' === typeof listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;

        case 2:
          return listeners.fn.call(listeners.context, a1), true;

        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;

        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;

        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;

          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;

          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;

          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  EventEmitter.prototype.on = function on(event, fn, context) {
    var listener = new EE(fn, context || this),
        evt = prefix ? prefix + event : event;
    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;else {
      if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
    }
    return this;
  };

  EventEmitter.prototype.once = function once(event, fn, context) {
    var listener = new EE(fn, context || this, true),
        evt = prefix ? prefix + event : event;
    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;else {
      if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
    }
    return this;
  };

  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events || !this._events[evt]) return this;
    var listeners = this._events[evt],
        events = [];

    if (fn) {
      if (listeners.fn) {
        if (listeners.fn !== fn || once && !listeners.once || context && listeners.context !== context) {
          events.push(listeners);
        }
      } else {
        for (var i = 0, length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
      }
    }

    if (events.length) {
      this._events[evt] = events.length === 1 ? events[0] : events;
    } else {
      delete this._events[evt];
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    if (!this._events) return this;
    if (event) delete this._events[prefix ? prefix + event : event];else this._events = prefix ? {} : Object.create(null);
    return this;
  };

  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    return this;
  };

  EventEmitter.prefixed = prefix;

  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }
},885,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var NullTransaction,
      WriteTransaction,
      __hasProp = {}.hasOwnProperty,
      __extends = function __extends(child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key)) child[key] = parent[key];
    }

    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  };

  NullTransaction = _require(_dependencyMap[0]);

  WriteTransaction = function (_super) {
    __extends(WriteTransaction, _super);

    function WriteTransaction(db) {
      this.db = db;
      this.dirtyIds = {};
      this.queued = false;
      this.traces = {};
    }

    WriteTransaction.prototype._ensureQueued = function () {
      if (this.db.debug) {
        this.traces[new Error().stack.split('\n').slice(1).join('\n')] = true;
      }

      if (!this.queued) {
        this.queued = true;
        return process.nextTick(function (_this) {
          return function () {
            return _this._flush();
          };
        }(this));
      }
    };

    WriteTransaction.prototype.upsert = function (collectionName, result, docs) {
      if (!Array.isArray(docs)) {
        docs = [docs];
      }

      this.dirtyIds[collectionName] = this.dirtyIds[collectionName] || {};
      docs.forEach(function (_this) {
        return function (doc) {
          return _this.dirtyIds[collectionName][doc._id] = true;
        };
      }(this));

      this._ensureQueued();

      return result;
    };

    WriteTransaction.prototype.del = function (collectionName, result, id) {
      this.dirtyIds[collectionName] = this.dirtyIds[collectionName] || {};
      this.dirtyIds[collectionName][id] = true;

      this._ensureQueued();

      return result;
    };

    WriteTransaction.prototype.canPushTransaction = function (transaction) {
      return true;
    };

    WriteTransaction.prototype._flush = function () {
      var ReadOnlyTransaction, changeRecords, collectionName, documentFragments, id, ids, version, _ref;

      ReadOnlyTransaction = _require(_dependencyMap[1]);
      changeRecords = {};
      _ref = this.dirtyIds;

      for (collectionName in _ref) {
        ids = _ref[collectionName];
        documentFragments = [];

        for (id in ids) {
          version = this.db.collections[collectionName].versions[id];
          documentFragments.push({
            _id: id,
            _version: version
          });
        }

        changeRecords[collectionName] = documentFragments;
      }

      this.dirtyIds = {};
      this.queued = false;
      return this.db.batchedUpdates(function (_this) {
        return function () {
          return _this.db.withTransaction(new ReadOnlyTransaction(), function () {
            var e, prev_prepare, traces;

            if (_this.db.debug) {
              traces = _this.traces;
              _this.traces = {};
              prev_prepare = Error.prepareStackTrace;

              Error.prepareStackTrace = function (e) {
                var stack, trace;
                stack = e.stack;

                for (trace in traces) {
                  stack += '\nFrom observed write:\n' + trace;
                }

                return stack;
              };

              try {
                return _this.db.emit('change', changeRecords);
              } catch (_error) {
                e = _error;
                return _this.db.uncaughtExceptionHandler(e);
              } finally {
                Error.prepareStackTrace = prev_prepare;
              }
            } else {
              try {
                return _this.db.emit('change', changeRecords);
              } catch (_error) {
                e = _error;
                return _this.db.uncaughtExceptionHandler(e);
              }
            }
          });
        };
      }(this));
    };

    return WriteTransaction;
  }(NullTransaction);

  module.exports = WriteTransaction;
},886,[879,887]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var NullTransaction,
      ReadOnlyTransaction,
      WriteTransaction,
      __hasProp = {}.hasOwnProperty,
      __extends = function __extends(child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key)) child[key] = parent[key];
    }

    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  };

  NullTransaction = _require(_dependencyMap[0]);
  WriteTransaction = _require(_dependencyMap[1]);

  ReadOnlyTransaction = function (_super) {
    __extends(ReadOnlyTransaction, _super);

    function ReadOnlyTransaction() {
      return ReadOnlyTransaction.__super__.constructor.apply(this, arguments);
    }

    ReadOnlyTransaction.prototype.canPushTransaction = function (transaction) {
      return !(transaction instanceof WriteTransaction);
    };

    return ReadOnlyTransaction;
  }(NullTransaction);

  module.exports = ReadOnlyTransaction;
},887,[879,886]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var WithReactMixin, createMixin, invariant;
  invariant = _require(_dependencyMap[0]);

  createMixin = function createMixin(db) {
    var Mixin;
    return Mixin = {
      componentWillMount: function componentWillMount() {
        invariant(this.observeData != null, 'You must implement observeData: ' + this.constructor.displayName);
        this.subscription = null;
        this.prevData = null;
        this.data = {};

        if (this.shouldComponentUpdate != null) {
          this._userShouldComponentUpdate = this.shouldComponentUpdate;
          this.shouldComponentUpdate = this._shouldComponentUpdate;
        }

        return this._refresh();
      },
      _shouldComponentUpdate: function _shouldComponentUpdate(nextProps, nextState, nextContext) {
        var nextData;
        nextData = this.data;
        this.data = this.prevData;

        try {
          return this._userShouldComponentUpdate(nextProps, nextState, nextData, nextContext);
        } finally {
          this.data = nextData;
          this.prevData = this.data;
        }
      },
      _refresh: function _refresh() {
        if (this.subscription) {
          this.subscription.dispose();
        }

        this.subscription = db.observe(this.observeData);
        return this.subscription.subscribe(this._setData);
      },
      _setData: function _setData(nextData, prevData) {
        this.prevData = this.data;
        this.data = nextData;

        if (prevData) {
          return this.setState({});
        }
      },
      componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
        var prevProps, prevState;
        prevProps = this.props;
        prevState = this.state;
        this.props = nextProps;
        this.state = nextState;

        try {
          return this._refresh();
        } finally {
          this.props = prevProps;
          this.state = prevState;
        }
      },
      componentWillUnmount: function componentWillUnmount() {
        if (this.subscription) {
          return this.subscription.dispose();
        }
      }
    };
  };

  WithReactMixin = {
    getReactMixin: function getReactMixin() {
      if (this.mixin == null) {
        this.mixin = createMixin(this);
      }

      return this.mixin;
    }
  };
  module.exports = WithReactMixin;
},888,[319]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var SynchronousWriteTransaction = _require(_dependencyMap[0]);

  var _ = _require(_dependencyMap[1]);

  var invariant = _require(_dependencyMap[2]);

  var ServerQuery = function () {
    function ServerQuery(cache, key) {
      _classCallCheck(this, ServerQuery);

      this.cache = cache;
      this.key = key;
      this.mounted = false;
      this.querying = false;
    }

    _createClass(ServerQuery, [{
      key: 'getInitialState',
      value: function getInitialState() {
        return {};
      }
    }, {
      key: 'queryDidMount',
      value: function queryDidMount() {}
    }, {
      key: 'queryDidUpdate',
      value: function queryDidUpdate(prevProps) {}
    }, {
      key: 'query',
      value: function query() {
        throw new Error('ServerQuery.query() not implemented');
      }
    }, {
      key: 'setState',
      value: function setState(updates) {
        var _this = this;

        var mergedState = _.assign({}, this.state, updates);

        var cb = function cb() {
          _this.cache.serverQueries.upsert({
            _id: _this.key,
            state: mergedState
          });
        };

        this.state = mergedState;

        if (this.querying) {
          this.cache.withTransaction(new SynchronousWriteTransaction(), cb);
        } else {
          cb();
        }
      }
    }, {
      key: 'execute',
      value: function execute(props) {
        this.querying = true;

        try {
          if (!this.mounted) {
            this.props = props;
            this.state = this.getInitialState();
            this.setState(this.state);
            this.state = this.cache.serverQueries.get(this.key).state;
            this.mounted = true;
            this.queryDidMount();
          } else {
            var prevProps = this.props;
            var prevState = this.state;
            this.props = props;
            this.state = this.cache.serverQueries.get(this.key).state;
            this.queryDidUpdate(prevProps, prevState);
          }

          return this.query();
        } finally {
          this.querying = false;
        }
      }
    }]);

    return ServerQuery;
  }();

  function createNewServerQuery(cache, key, spec) {
    invariant(spec.hasOwnProperty('query'), 'You must implement query()');

    if (!cache.hasOwnProperty('serverQueries')) {
      cache.addCollection('serverQueries');
    }

    var serverQuery = new ServerQuery(cache, key);

    _.mixin(serverQuery, spec);

    return serverQuery;
  }

  var serverQueries = {};
  var numTypes = 0;
  var WithServerQuery = {
    createServerQuery: function createServerQuery(spec) {
      var cache = this;
      invariant(spec.hasOwnProperty('statics'), 'spec must have statics property');
      invariant(spec.statics.hasOwnProperty('getKey'), 'statics.getKey must be a function');
      var typeId = numTypes++;

      function getInstance(props) {
        var key = spec.statics.getKey(props);
        invariant(typeof key === 'string', 'You must return a string key');
        key = typeId + '~' + key;

        if (!serverQueries.hasOwnProperty(key)) {
          serverQueries[key] = createNewServerQuery(cache, key, spec);
        }

        return serverQueries[key];
      }

      function serverQuery(props) {
        return getInstance(props).execute(props);
      }

      serverQuery.getInstance = getInstance;
      return serverQuery;
    }
  };
  module.exports = WithServerQuery;
},889,[882,883,319]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var compileDocumentSelector, compileSort, deg2rad, getDistanceFromLatLngInM, pointInPolygon, processGeoIntersectsOperator, processNearOperator, _;

  _ = _require(_dependencyMap[0]);
  compileDocumentSelector = _require(_dependencyMap[1]).compileDocumentSelector;
  compileSort = _require(_dependencyMap[1]).compileSort;
  exports.compileDocumentSelector = compileDocumentSelector;

  exports.processFind = function (items, selector, options) {
    var filtered;
    filtered = _.filter(_.values(items), compileDocumentSelector(selector));
    filtered = processNearOperator(selector, filtered);
    filtered = processGeoIntersectsOperator(selector, filtered);

    if (options && options.sort) {
      filtered.sort(compileSort(options.sort));
    }

    if (options && options.skip) {
      filtered = _.rest(filtered, options.skip);
    }

    if (options && options.limit) {
      filtered = _.first(filtered, options.limit);
    }

    if (options && options.fields) {
      filtered = exports.filterFields(filtered, options.fields);
    }

    return filtered;
  };

  exports.filterFields = function (items, fields) {
    if (fields == null) {
      fields = {};
    }

    if (_.keys(fields).length === 0) {
      return items;
    }

    return _.map(items, function (item) {
      var field, from, newItem, obj, path, pathElem, to, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;

      newItem = {};

      if (_.first(_.values(fields)) === 1) {
        _ref = _.keys(fields).concat(["_id"]);

        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          path = field.split(".");
          obj = item;

          for (_j = 0, _len1 = path.length; _j < _len1; _j++) {
            pathElem = path[_j];

            if (obj) {
              obj = obj[pathElem];
            }
          }

          if (obj == null) {
            continue;
          }

          from = item;
          to = newItem;
          _ref1 = _.initial(path);

          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            pathElem = _ref1[_k];
            to[pathElem] = to[pathElem] || {};
            to = to[pathElem];
            from = from[pathElem];
          }

          to[_.last(path)] = from[_.last(path)];
        }

        return newItem;
      } else {
        _ref2 = _.keys(fields).concat(["_id"]);

        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
          field = _ref2[_l];
          path = field.split(".");
          obj = item;
          _ref3 = _.initial(path);

          for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
            pathElem = _ref3[_m];

            if (obj) {
              obj = obj[pathElem];
            }
          }

          if (obj == null) {
            continue;
          }

          delete obj[_.last(path)];
        }

        return item;
      }
    });
  };

  exports.createUid = function () {
    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };

  processNearOperator = function processNearOperator(selector, list) {
    var distances, geo, key, value;

    for (key in selector) {
      value = selector[key];

      if (value != null && value['$near']) {
        geo = value['$near']['$geometry'];

        if (geo.type !== 'Point') {
          break;
        }

        list = _.filter(list, function (doc) {
          return doc[key] && doc[key].type === 'Point';
        });
        distances = _.map(list, function (doc) {
          return {
            doc: doc,
            distance: getDistanceFromLatLngInM(geo.coordinates[1], geo.coordinates[0], doc[key].coordinates[1], doc[key].coordinates[0])
          };
        });
        distances = _.filter(distances, function (item) {
          return item.distance >= 0;
        });
        distances = _.sortBy(distances, 'distance');

        if (value['$near']['$maxDistance']) {
          distances = _.filter(distances, function (item) {
            return item.distance <= value['$near']['$maxDistance'];
          });
        }

        distances = _.first(distances, 100);
        list = _.pluck(distances, 'doc');
      }
    }

    return list;
  };

  pointInPolygon = function pointInPolygon(point, polygon) {
    if (!_.isEqual(_.first(polygon.coordinates[0]), _.last(polygon.coordinates[0]))) {
      throw new Error("First must equal last");
    }

    if (point.coordinates[0] < Math.min.apply(this, _.map(polygon.coordinates[0], function (coord) {
      return coord[0];
    }))) {
      return false;
    }

    if (point.coordinates[1] < Math.min.apply(this, _.map(polygon.coordinates[0], function (coord) {
      return coord[1];
    }))) {
      return false;
    }

    if (point.coordinates[0] > Math.max.apply(this, _.map(polygon.coordinates[0], function (coord) {
      return coord[0];
    }))) {
      return false;
    }

    if (point.coordinates[1] > Math.max.apply(this, _.map(polygon.coordinates[0], function (coord) {
      return coord[1];
    }))) {
      return false;
    }

    return true;
  };

  getDistanceFromLatLngInM = function getDistanceFromLatLngInM(lat1, lng1, lat2, lng2) {
    var R, a, c, d, dLat, dLng;
    R = 6370986;
    dLat = deg2rad(lat2 - lat1);
    dLng = deg2rad(lng2 - lng1);
    a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);
    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    d = R * c;
    return d;
  };

  deg2rad = function deg2rad(deg) {
    return deg * (Math.PI / 180);
  };

  processGeoIntersectsOperator = function processGeoIntersectsOperator(selector, list) {
    var geo, key, value;

    for (key in selector) {
      value = selector[key];

      if (value != null && value['$geoIntersects']) {
        geo = value['$geoIntersects']['$geometry'];

        if (geo.type !== 'Polygon') {
          break;
        }

        list = _.filter(list, function (doc) {
          if (!doc[key] || doc[key].type !== 'Point') {
            return false;
          }

          return pointInPolygon(doc[key], geo);
        });
      }
    }

    return list;
  };

  exports.regularizeUpsert = function (docs, bases, success, error) {
    var item, items, _i, _len, _ref;

    if (_.isFunction(bases)) {
      _ref = [void 0, bases, success], bases = _ref[0], success = _ref[1], error = _ref[2];
    }

    if (!_.isArray(docs)) {
      docs = [docs];
      bases = [bases];
    } else {
      bases = bases || [];
    }

    items = _.map(docs, function (doc, i) {
      return {
        doc: doc,
        base: i < bases.length ? bases[i] : void 0
      };
    });

    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];

      if (item.doc._id == null) {
        throw new Error('All documents in the upsert must have an _id');
      }
    }

    return [items, success, error];
  };
},890,[883,891]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _typeof(obj) {
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
  }

  var LocalCollection = {};

  var EJSON = _require(_dependencyMap[0]);

  var _ = _require(_dependencyMap[1]);

  var isArray = function isArray(x) {
    return _.isArray(x) && !EJSON.isBinary(x);
  };

  var _anyIfArray = function _anyIfArray(x, f) {
    if (isArray(x)) return _.any(x, f);
    return f(x);
  };

  var _anyIfArrayPlus = function _anyIfArrayPlus(x, f) {
    if (f(x)) return true;
    return isArray(x) && _.any(x, f);
  };

  var hasOperators = function hasOperators(valueSelector) {
    var theseAreOperators = undefined;

    for (var selKey in valueSelector) {
      var thisIsOperator = selKey.substr(0, 1) === '$';

      if (theseAreOperators === undefined) {
        theseAreOperators = thisIsOperator;
      } else if (theseAreOperators !== thisIsOperator) {
        throw new Error("Inconsistent selector: " + valueSelector);
      }
    }

    return !!theseAreOperators;
  };

  var compileValueSelector = function compileValueSelector(valueSelector) {
    if (valueSelector == null) {
      return function (value) {
        return _anyIfArray(value, function (x) {
          return x == null;
        });
      };
    }

    if (!_.isObject(valueSelector)) {
      return function (value) {
        return _anyIfArray(value, function (x) {
          return x === valueSelector;
        });
      };
    }

    if (valueSelector instanceof RegExp) {
      return function (value) {
        if (value === undefined) return false;
        return _anyIfArray(value, function (x) {
          return valueSelector.test(x);
        });
      };
    }

    if (isArray(valueSelector)) {
      return function (value) {
        if (!isArray(value)) return false;
        return _anyIfArrayPlus(value, function (x) {
          return LocalCollection._f._equal(valueSelector, x);
        });
      };
    }

    if (hasOperators(valueSelector)) {
      var operatorFunctions = [];

      _.each(valueSelector, function (operand, operator) {
        if (!_.has(VALUE_OPERATORS, operator)) throw new Error("Unrecognized operator: " + operator);
        operatorFunctions.push(VALUE_OPERATORS[operator](operand, valueSelector.$options));
      });

      return function (value) {
        return _.all(operatorFunctions, function (f) {
          return f(value);
        });
      };
    }

    return function (value) {
      return _anyIfArray(value, function (x) {
        return LocalCollection._f._equal(valueSelector, x);
      });
    };
  };

  var LOGICAL_OPERATORS = {
    "$and": function $and(subSelector) {
      if (!isArray(subSelector) || _.isEmpty(subSelector)) throw Error("$and/$or/$nor must be nonempty array");

      var subSelectorFunctions = _.map(subSelector, compileDocumentSelector);

      return function (doc) {
        return _.all(subSelectorFunctions, function (f) {
          return f(doc);
        });
      };
    },
    "$or": function $or(subSelector) {
      if (!isArray(subSelector) || _.isEmpty(subSelector)) throw Error("$and/$or/$nor must be nonempty array");

      var subSelectorFunctions = _.map(subSelector, compileDocumentSelector);

      return function (doc) {
        return _.any(subSelectorFunctions, function (f) {
          return f(doc);
        });
      };
    },
    "$nor": function $nor(subSelector) {
      if (!isArray(subSelector) || _.isEmpty(subSelector)) throw Error("$and/$or/$nor must be nonempty array");

      var subSelectorFunctions = _.map(subSelector, compileDocumentSelector);

      return function (doc) {
        return _.all(subSelectorFunctions, function (f) {
          return !f(doc);
        });
      };
    },
    "$where": function $where(selectorValue) {
      if (!(selectorValue instanceof Function)) {
        selectorValue = Function("return " + selectorValue);
      }

      return function (doc) {
        return selectorValue.call(doc);
      };
    }
  };
  var VALUE_OPERATORS = {
    "$in": function $in(operand) {
      if (!isArray(operand)) throw new Error("Argument to $in must be array");
      return function (value) {
        return _anyIfArrayPlus(value, function (x) {
          return _.any(operand, function (operandElt) {
            return LocalCollection._f._equal(operandElt, x);
          });
        });
      };
    },
    "$all": function $all(operand) {
      if (!isArray(operand)) throw new Error("Argument to $all must be array");
      return function (value) {
        if (!isArray(value)) return false;
        return _.all(operand, function (operandElt) {
          return _.any(value, function (valueElt) {
            return LocalCollection._f._equal(operandElt, valueElt);
          });
        });
      };
    },
    "$lt": function $lt(operand) {
      return function (value) {
        return _anyIfArray(value, function (x) {
          return LocalCollection._f._cmp(x, operand) < 0;
        });
      };
    },
    "$lte": function $lte(operand) {
      return function (value) {
        return _anyIfArray(value, function (x) {
          return LocalCollection._f._cmp(x, operand) <= 0;
        });
      };
    },
    "$gt": function $gt(operand) {
      return function (value) {
        return _anyIfArray(value, function (x) {
          return LocalCollection._f._cmp(x, operand) > 0;
        });
      };
    },
    "$gte": function $gte(operand) {
      return function (value) {
        return _anyIfArray(value, function (x) {
          return LocalCollection._f._cmp(x, operand) >= 0;
        });
      };
    },
    "$ne": function $ne(operand) {
      return function (value) {
        return !_anyIfArrayPlus(value, function (x) {
          return LocalCollection._f._equal(x, operand);
        });
      };
    },
    "$nin": function $nin(operand) {
      if (!isArray(operand)) throw new Error("Argument to $nin must be array");
      var inFunction = VALUE_OPERATORS.$in(operand);
      return function (value) {
        if (value === undefined) return true;
        return !inFunction(value);
      };
    },
    "$exists": function $exists(operand) {
      return function (value) {
        return operand === (value !== undefined);
      };
    },
    "$mod": function $mod(operand) {
      var divisor = operand[0],
          remainder = operand[1];
      return function (value) {
        return _anyIfArray(value, function (x) {
          return x % divisor === remainder;
        });
      };
    },
    "$size": function $size(operand) {
      return function (value) {
        return isArray(value) && operand === value.length;
      };
    },
    "$type": function $type(operand) {
      return function (value) {
        if (value === undefined) return false;
        return _anyIfArray(value, function (x) {
          return LocalCollection._f._type(x) === operand;
        });
      };
    },
    "$regex": function $regex(operand, options) {
      if (options !== undefined) {
        if (/[^gim]/.test(options)) throw new Error("Only the i, m, and g regexp options are supported");
        var regexSource = operand instanceof RegExp ? operand.source : operand;
        operand = new RegExp(regexSource, options);
      } else if (!(operand instanceof RegExp)) {
        operand = new RegExp(operand);
      }

      return function (value) {
        if (value === undefined) return false;
        return _anyIfArray(value, function (x) {
          return operand.test(x);
        });
      };
    },
    "$options": function $options(operand) {
      return function (value) {
        return true;
      };
    },
    "$elemMatch": function $elemMatch(operand) {
      var matcher = compileDocumentSelector(operand);
      return function (value) {
        if (!isArray(value)) return false;
        return _.any(value, function (x) {
          return matcher(x);
        });
      };
    },
    "$not": function $not(operand) {
      var matcher = compileValueSelector(operand);
      return function (value) {
        return !matcher(value);
      };
    },
    "$near": function $near(operand) {
      return function (value) {
        return true;
      };
    },
    "$geoIntersects": function $geoIntersects(operand) {
      return function (value) {
        return true;
      };
    }
  };
  LocalCollection._f = {
    _type: function _type(v) {
      if (typeof v === "number") return 1;
      if (typeof v === "string") return 2;
      if (typeof v === "boolean") return 8;
      if (isArray(v)) return 4;
      if (v === null) return 10;
      if (v instanceof RegExp) return 11;
      if (typeof v === "function") return 13;
      if (v instanceof Date) return 9;
      if (EJSON.isBinary(v)) return 5;
      return 3;
    },
    _equal: function _equal(a, b) {
      return EJSON.equals(a, b, {
        keyOrderSensitive: true
      });
    },
    _typeorder: function _typeorder(t) {
      return [-1, 1, 2, 3, 4, 5, -1, 6, 7, 8, 0, 9, -1, 100, 2, 100, 1, 8, 1][t];
    },
    _cmp: function _cmp(a, b) {
      if (a === undefined) return b === undefined ? 0 : -1;
      if (b === undefined) return 1;

      var ta = LocalCollection._f._type(a);

      var tb = LocalCollection._f._type(b);

      var oa = LocalCollection._f._typeorder(ta);

      var ob = LocalCollection._f._typeorder(tb);

      if (oa !== ob) return oa < ob ? -1 : 1;
      if (ta !== tb) throw Error("Missing type coercion logic in _cmp");

      if (ta === 7) {
        ta = tb = 2;
        a = a.toHexString();
        b = b.toHexString();
      }

      if (ta === 9) {
        ta = tb = 1;
        a = a.getTime();
        b = b.getTime();
      }

      if (ta === 1) return a - b;
      if (tb === 2) return a < b ? -1 : a === b ? 0 : 1;

      if (ta === 3) {
        var to_array = function to_array(obj) {
          var ret = [];

          for (var key in obj) {
            ret.push(key);
            ret.push(obj[key]);
          }

          return ret;
        };

        return LocalCollection._f._cmp(to_array(a), to_array(b));
      }

      if (ta === 4) {
        for (var i = 0;; i++) {
          if (i === a.length) return i === b.length ? 0 : -1;
          if (i === b.length) return 1;

          var s = LocalCollection._f._cmp(a[i], b[i]);

          if (s !== 0) return s;
        }
      }

      if (ta === 5) {
        if (a.length !== b.length) return a.length - b.length;

        for (i = 0; i < a.length; i++) {
          if (a[i] < b[i]) return -1;
          if (a[i] > b[i]) return 1;
        }

        return 0;
      }

      if (ta === 8) {
        if (a) return b ? 0 : 1;
        return b ? -1 : 0;
      }

      if (ta === 10) return 0;
      if (ta === 11) throw Error("Sorting not supported on regular expression");
      if (ta === 13) throw Error("Sorting not supported on Javascript code");
      throw Error("Unknown type to sort");
    }
  };

  LocalCollection._matches = function (selector, doc) {
    return LocalCollection._compileSelector(selector)(doc);
  };

  LocalCollection._makeLookupFunction = function (key) {
    var dotLocation = key.indexOf('.');
    var first, lookupRest, nextIsNumeric;

    if (dotLocation === -1) {
      first = key;
    } else {
      first = key.substr(0, dotLocation);
      var rest = key.substr(dotLocation + 1);
      lookupRest = LocalCollection._makeLookupFunction(rest);
      nextIsNumeric = /^\d+(\.|$)/.test(rest);
    }

    return function (doc) {
      if (doc == null) return [undefined];
      var firstLevel = doc[first];
      if (!lookupRest) return [firstLevel];
      if (isArray(firstLevel) && firstLevel.length === 0) return [undefined];
      if (!isArray(firstLevel) || nextIsNumeric) firstLevel = [firstLevel];
      return Array.prototype.concat.apply([], _.map(firstLevel, lookupRest));
    };
  };

  var compileDocumentSelector = function compileDocumentSelector(docSelector) {
    var perKeySelectors = [];

    _.each(docSelector, function (subSelector, key) {
      if (key.substr(0, 1) === '$') {
        if (!_.has(LOGICAL_OPERATORS, key)) throw new Error("Unrecognized logical operator: " + key);
        perKeySelectors.push(LOGICAL_OPERATORS[key](subSelector));
      } else {
        var lookUpByIndex = LocalCollection._makeLookupFunction(key);

        var valueSelectorFunc = compileValueSelector(subSelector);
        perKeySelectors.push(function (doc) {
          var branchValues = lookUpByIndex(doc);
          return _.any(branchValues, valueSelectorFunc);
        });
      }
    });

    return function (doc) {
      return _.all(perKeySelectors, function (f) {
        return f(doc);
      });
    };
  };

  LocalCollection._compileSelector = function (selector) {
    if (selector instanceof Function) return function (doc) {
      return selector.call(doc);
    };

    if (LocalCollection._selectorIsId(selector)) {
      return function (doc) {
        return EJSON.equals(doc._id, selector);
      };
    }

    if (!selector || '_id' in selector && !selector._id) return function (doc) {
      return false;
    };
    if (typeof selector === 'boolean' || isArray(selector) || EJSON.isBinary(selector)) throw new Error("Invalid selector: " + selector);
    return compileDocumentSelector(selector);
  };

  LocalCollection._compileSort = function (spec) {
    var sortSpecParts = [];

    if (spec instanceof Array) {
      for (var i = 0; i < spec.length; i++) {
        if (typeof spec[i] === "string") {
          sortSpecParts.push({
            lookup: LocalCollection._makeLookupFunction(spec[i]),
            ascending: true
          });
        } else {
          sortSpecParts.push({
            lookup: LocalCollection._makeLookupFunction(spec[i][0]),
            ascending: spec[i][1] !== "desc"
          });
        }
      }
    } else if ((typeof spec === 'undefined' ? 'undefined' : _typeof(spec)) === "object") {
      for (var key in spec) {
        sortSpecParts.push({
          lookup: LocalCollection._makeLookupFunction(key),
          ascending: spec[key] >= 0
        });
      }
    } else {
      throw Error("Bad sort specification: ", JSON.stringify(spec));
    }

    if (sortSpecParts.length === 0) return function () {
      return 0;
    };

    var reduceValue = function reduceValue(branchValues, findMin) {
      var reduced;
      var first = true;

      _.each(branchValues, function (branchValue) {
        if (!isArray(branchValue)) branchValue = [branchValue];
        if (isArray(branchValue) && branchValue.length === 0) branchValue = [undefined];

        _.each(branchValue, function (value) {
          if (first) {
            reduced = value;
            first = false;
          } else {
            var cmp = LocalCollection._f._cmp(reduced, value);

            if (findMin && cmp > 0 || !findMin && cmp < 0) reduced = value;
          }
        });
      });

      return reduced;
    };

    return function (a, b) {
      for (var i = 0; i < sortSpecParts.length; ++i) {
        var specPart = sortSpecParts[i];
        var aValue = reduceValue(specPart.lookup(a), specPart.ascending);
        var bValue = reduceValue(specPart.lookup(b), specPart.ascending);

        var compare = LocalCollection._f._cmp(aValue, bValue);

        if (compare !== 0) return specPart.ascending ? compare : -compare;
      }

      ;
      return 0;
    };
  };

  exports.compileDocumentSelector = compileDocumentSelector;
  exports.compileSort = LocalCollection._compileSort;
},891,[892,883]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function _typeof(obj) {
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
  }

  var _ = _require(_dependencyMap[0]);

  var EJSON = {};
  var customTypes = {};

  EJSON.addType = function (name, factory) {
    if (_.has(customTypes, name)) throw new Error("Type " + name + " already present");
    customTypes[name] = factory;
  };

  var builtinConverters = [{
    matchJSONValue: function matchJSONValue(obj) {
      return _.has(obj, '$date') && _.size(obj) === 1;
    },
    matchObject: function matchObject(obj) {
      return obj instanceof Date;
    },
    toJSONValue: function toJSONValue(obj) {
      return {
        $date: obj.getTime()
      };
    },
    fromJSONValue: function fromJSONValue(obj) {
      return new Date(obj.$date);
    }
  }, {
    matchJSONValue: function matchJSONValue(obj) {
      return _.has(obj, '$binary') && _.size(obj) === 1;
    },
    matchObject: function matchObject(obj) {
      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && _.has(obj, '$Uint8ArrayPolyfill');
    },
    toJSONValue: function toJSONValue(obj) {
      return {
        $binary: EJSON._base64Encode(obj)
      };
    },
    fromJSONValue: function fromJSONValue(obj) {
      return EJSON._base64Decode(obj.$binary);
    }
  }, {
    matchJSONValue: function matchJSONValue(obj) {
      return _.has(obj, '$escape') && _.size(obj) === 1;
    },
    matchObject: function matchObject(obj) {
      if (_.isEmpty(obj) || _.size(obj) > 2) {
        return false;
      }

      return _.any(builtinConverters, function (converter) {
        return converter.matchJSONValue(obj);
      });
    },
    toJSONValue: function toJSONValue(obj) {
      var newObj = {};

      _.each(obj, function (value, key) {
        newObj[key] = EJSON.toJSONValue(value);
      });

      return {
        $escape: newObj
      };
    },
    fromJSONValue: function fromJSONValue(obj) {
      var newObj = {};

      _.each(obj.$escape, function (value, key) {
        newObj[key] = EJSON.fromJSONValue(value);
      });

      return newObj;
    }
  }, {
    matchJSONValue: function matchJSONValue(obj) {
      return _.has(obj, '$type') && _.has(obj, '$value') && _.size(obj) === 2;
    },
    matchObject: function matchObject(obj) {
      return EJSON._isCustomType(obj);
    },
    toJSONValue: function toJSONValue(obj) {
      return {
        $type: obj.typeName(),
        $value: obj.toJSONValue()
      };
    },
    fromJSONValue: function fromJSONValue(obj) {
      var typeName = obj.$type;
      var converter = customTypes[typeName];
      return converter(obj.$value);
    }
  }];

  EJSON._isCustomType = function (obj) {
    return obj && typeof obj.toJSONValue === 'function' && typeof obj.typeName === 'function' && _.has(customTypes, obj.typeName());
  };

  var adjustTypesToJSONValue = EJSON._adjustTypesToJSONValue = function (obj) {
    if (obj === null) return null;
    var maybeChanged = toJSONValueHelper(obj);
    if (maybeChanged !== undefined) return maybeChanged;

    _.each(obj, function (value, key) {
      if ((typeof value === "undefined" ? "undefined" : _typeof(value)) !== 'object' && value !== undefined) return;
      var changed = toJSONValueHelper(value);

      if (changed) {
        obj[key] = changed;
        return;
      }

      adjustTypesToJSONValue(value);
    });

    return obj;
  };

  var toJSONValueHelper = function toJSONValueHelper(item) {
    for (var i = 0; i < builtinConverters.length; i++) {
      var converter = builtinConverters[i];

      if (converter.matchObject(item)) {
        return converter.toJSONValue(item);
      }
    }

    return undefined;
  };

  EJSON.toJSONValue = function (item) {
    var changed = toJSONValueHelper(item);
    if (changed !== undefined) return changed;

    if ((typeof item === "undefined" ? "undefined" : _typeof(item)) === 'object') {
      item = EJSON.clone(item);
      adjustTypesToJSONValue(item);
    }

    return item;
  };

  var adjustTypesFromJSONValue = EJSON._adjustTypesFromJSONValue = function (obj) {
    if (obj === null) return null;
    var maybeChanged = fromJSONValueHelper(obj);
    if (maybeChanged !== obj) return maybeChanged;

    _.each(obj, function (value, key) {
      if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
        var changed = fromJSONValueHelper(value);

        if (value !== changed) {
          obj[key] = changed;
          return;
        }

        adjustTypesFromJSONValue(value);
      }
    });

    return obj;
  };

  var fromJSONValueHelper = function fromJSONValueHelper(value) {
    if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object' && value !== null) {
      if (_.size(value) <= 2 && _.all(value, function (v, k) {
        return typeof k === 'string' && k.substr(0, 1) === '$';
      })) {
        for (var i = 0; i < builtinConverters.length; i++) {
          var converter = builtinConverters[i];

          if (converter.matchJSONValue(value)) {
            return converter.fromJSONValue(value);
          }
        }
      }
    }

    return value;
  };

  EJSON.fromJSONValue = function (item) {
    var changed = fromJSONValueHelper(item);

    if (changed === item && (typeof item === "undefined" ? "undefined" : _typeof(item)) === 'object') {
      item = EJSON.clone(item);
      adjustTypesFromJSONValue(item);
      return item;
    } else {
      return changed;
    }
  };

  EJSON.stringify = function (item) {
    return JSON.stringify(EJSON.toJSONValue(item));
  };

  EJSON.parse = function (item) {
    return EJSON.fromJSONValue(JSON.parse(item));
  };

  EJSON.isBinary = function (obj) {
    return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && obj.$Uint8ArrayPolyfill;
  };

  EJSON.equals = function (a, b, options) {
    var i;
    var keyOrderSensitive = !!(options && options.keyOrderSensitive);
    if (a === b) return true;
    if (!a || !b) return false;
    if (!((typeof a === "undefined" ? "undefined" : _typeof(a)) === 'object' && (typeof b === "undefined" ? "undefined" : _typeof(b)) === 'object')) return false;
    if (a instanceof Date && b instanceof Date) return a.valueOf() === b.valueOf();

    if (EJSON.isBinary(a) && EJSON.isBinary(b)) {
      if (a.length !== b.length) return false;

      for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }

      return true;
    }

    if (typeof a.equals === 'function') return a.equals(b, options);

    if (a instanceof Array) {
      if (!(b instanceof Array)) return false;
      if (a.length !== b.length) return false;

      for (i = 0; i < a.length; i++) {
        if (!EJSON.equals(a[i], b[i], options)) return false;
      }

      return true;
    }

    var ret;

    if (keyOrderSensitive) {
      var bKeys = [];

      _.each(b, function (val, x) {
        bKeys.push(x);
      });

      i = 0;
      ret = _.all(a, function (val, x) {
        if (i >= bKeys.length) {
          return false;
        }

        if (x !== bKeys[i]) {
          return false;
        }

        if (!EJSON.equals(val, b[bKeys[i]], options)) {
          return false;
        }

        i++;
        return true;
      });
      return ret && i === bKeys.length;
    } else {
      i = 0;
      ret = _.all(a, function (val, key) {
        if (!_.has(b, key)) {
          return false;
        }

        if (!EJSON.equals(val, b[key], options)) {
          return false;
        }

        i++;
        return true;
      });
      return ret && _.size(b) === i;
    }
  };

  EJSON.clone = function (v) {
    var ret;
    if ((typeof v === "undefined" ? "undefined" : _typeof(v)) !== "object") return v;
    if (v === null) return null;
    if (v instanceof Date) return new Date(v.getTime());

    if (EJSON.isBinary(v)) {
      ret = EJSON.newBinary(v.length);

      for (var i = 0; i < v.length; i++) {
        ret[i] = v[i];
      }

      return ret;
    }

    if (_.isArray(v) || _.isArguments(v)) {
      ret = [];

      for (i = 0; i < v.length; i++) {
        ret[i] = EJSON.clone(v[i]);
      }

      return ret;
    }

    if (typeof v.clone === 'function') {
      return v.clone();
    }

    ret = {};

    _.each(v, function (value, key) {
      ret[key] = EJSON.clone(value);
    });

    return ret;
  };

  module.exports = EJSON;
},892,[883]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Collection = undefined;

  var _trackr = _require(_dependencyMap[0]);

  var _trackr2 = babelHelpers.interopRequireDefault(_trackr);

  var _ejson = _require(_dependencyMap[1]);

  var _ejson2 = babelHelpers.interopRequireDefault(_ejson);

  var _underscore = _require(_dependencyMap[2]);

  var _underscore2 = babelHelpers.interopRequireDefault(_underscore);

  var _Data = _require(_dependencyMap[3]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var _Random = _require(_dependencyMap[4]);

  var _Random2 = babelHelpers.interopRequireDefault(_Random);

  var _Call = _require(_dependencyMap[5]);

  var _Call2 = babelHelpers.interopRequireDefault(_Call);

  var _utils = _require(_dependencyMap[6]);

  var Cursor = function () {
    function Cursor(collection, docs) {
      babelHelpers.classCallCheck(this, Cursor);
      this._docs = docs || [];
      this._collection = collection;
    }

    babelHelpers.createClass(Cursor, [{
      key: "count",
      value: function count() {
        return this._docs.length;
      }
    }, {
      key: "fetch",
      value: function fetch() {
        return this._transformedDocs();
      }
    }, {
      key: "forEach",
      value: function forEach(callback) {
        this._transformedDocs().forEach(callback);
      }
    }, {
      key: "map",
      value: function map(callback) {
        return this._transformedDocs().map(callback);
      }
    }, {
      key: "_transformedDocs",
      value: function _transformedDocs() {
        return this._collection._transform ? this._docs.map(this._collection._transform) : this._docs;
      }
    }]);
    return Cursor;
  }();

  var Collection = function () {
    function Collection(name) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      babelHelpers.classCallCheck(this, Collection);
      if (!_Data2.default.db[name]) _Data2.default.db.addCollection(name);
      this._collection = _Data2.default.db[name];
      this._cursoredFind = options.cursoredFind;
      this._name = name;
      this._transform = wrapTransform(options.transform);
    }

    babelHelpers.createClass(Collection, [{
      key: "find",
      value: function find(selector, options) {
        var result = void 0;
        var docs = void 0;

        if (typeof selector == 'string') {
          if (options) {
            docs = this._collection.findOne({
              _id: selector
            }, options);
          } else {
            docs = this._collection.get(selector);
          }

          if (docs) docs = [docs];
        } else {
          docs = this._collection.find(selector, options);
        }

        if (this._cursoredFind) {
          result = new Cursor(this, docs);
        } else {
          if (docs && this._transform) docs = docs.map(this._transform);
          result = docs;
        }

        return result;
      }
    }, {
      key: "findOne",
      value: function findOne(selector, options) {
        var result = this.find(selector, options);

        if (result) {
          if (this._cursoredFind) result = result.fetch();
          result = result[0];
        }

        return result;
      }
    }, {
      key: "insert",
      value: function insert(item) {
        var _this = this;

        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
        var id = void 0;

        if ('_id' in item) {
          if (!item._id || typeof item._id != 'string') {
            return callback('Meteor requires document _id fields to be non-empty strings');
          }

          id = item._id;
        } else {
          id = item._id = _Random2.default.id();
        }

        if (this._collection.get(id)) return callback({
          error: 409,
          reason: "Duplicate key _id with value " + id
        });

        this._collection.upsert(item);

        _Data2.default.waitDdpConnected(function () {
          (0, _Call2.default)("/" + _this._name + "/insert", item, function (err) {
            if (err) {
              _this._collection.del(id);

              return callback(err);
            }

            callback(null, id);
          });
        });

        return id;
      }
    }, {
      key: "update",
      value: function update(id, modifier) {
        var _this2 = this;

        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};

        if (typeof options == 'function') {
          callback = options;
          options = {};
        }

        if (!this._collection.get(id)) return callback({
          error: 409,
          reason: "Item not found in collection " + this._name + " with id " + id
        });

        this._collection.upsert(babelHelpers.extends({
          _id: id
        }, modifier.$set));

        _Data2.default.waitDdpConnected(function () {
          (0, _Call2.default)("/" + _this2._name + "/update", {
            _id: id
          }, modifier, function (err) {
            if (err) {
              return callback(err);
            }

            callback(null, id);
          });
        });
      }
    }, {
      key: "remove",
      value: function remove(id) {
        var _this3 = this;

        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
        var element = this.findOne(id);

        if (element) {
          this._collection.del(element._id);

          _Data2.default.waitDdpConnected(function () {
            (0, _Call2.default)("/" + _this3._name + "/remove", {
              _id: id
            }, function (err, res) {
              if (err) {
                _this3._collection.upsert(element);

                return callback(err);
              }

              callback(null, res);
            });
          });
        } else {
          callback("No document with _id : " + id);
        }
      }
    }, {
      key: "helpers",
      value: function helpers(_helpers) {
        var _this4 = this;

        var self = this;

        var _transform = void 0;

        if (this._transform && !this._helpers) _transform = this._transform;

        if (!this._helpers) {
          this._helpers = function Document(doc) {
            return _underscore2.default.extend(this, doc);
          };

          this._transform = function (doc) {
            if (_transform) {
              doc = _transform(doc);
            }

            return new _this4._helpers(doc);
          };
        }

        _underscore2.default.each(_helpers, function (helper, key) {
          _this4._helpers.prototype[key] = helper;
        });
      }
    }]);
    return Collection;
  }();

  exports.Collection = Collection;

  function wrapTransform(transform) {
    if (!transform) return null;
    if (transform.__wrappedTransform__) return transform;

    var wrapped = function wrapped(doc) {
      if (!_underscore2.default.has(doc, '_id')) {
        throw new Error('can only transform documents with _id');
      }

      var id = doc._id;

      var transformed = _trackr2.default.nonreactive(function () {
        return transform(doc);
      });

      if (!(0, _utils.isPlainObject)(transformed)) {
        throw new Error('transform must return object');
      }

      if (_underscore2.default.has(transformed, '_id')) {
        if (!_ejson2.default.equals(transformed._id, id)) {
          throw new Error("transformed document can't have different _id");
        }
      } else {
        transformed._id = id;
      }

      return transformed;
    };

    wrapped.__wrappedTransform__ = true;
    return wrapped;
  }
},893,[861,864,874,876,875,894,871]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (eventName) {
    var args = Array.prototype.slice.call(arguments, 1);

    if (args.length && typeof args[args.length - 1] === 'function') {
      var callback = args.pop();
    }

    var id = _Data2.default.ddp.method(eventName, args);

    _Data2.default.calls.push({
      id: id,
      callback: callback
    });
  };

  var _Data = _require(_dependencyMap[0]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);
},894,[876]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _trackr = _require(_dependencyMap[0]);

  var _trackr2 = babelHelpers.interopRequireDefault(_trackr);

  var _ejson = _require(_dependencyMap[1]);

  var _ejson2 = babelHelpers.interopRequireDefault(_ejson);

  var _Data = _require(_dependencyMap[2]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var _ReactMeteorData = _require(_dependencyMap[3]);

  exports.default = _ReactMeteorData.ReactMeteorData;
},895,[861,864,876,896]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ReactMeteorData = undefined;
  exports.default = connect;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _ejson = _require(_dependencyMap[1]);

  var _ejson2 = babelHelpers.interopRequireDefault(_ejson);

  var _Data = _require(_dependencyMap[2]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var _MeteorDataManager = _require(_dependencyMap[3]);

  var _MeteorDataManager2 = babelHelpers.interopRequireDefault(_MeteorDataManager);

  var ReactMeteorData = {
    componentWillMount: function componentWillMount() {
      var _this = this;

      _Data2.default.waitDdpReady(function () {
        if (_this.getMeteorData) {
          _this.data = {};
          _this._meteorDataManager = new _MeteorDataManager2.default(_this);

          var newData = _this._meteorDataManager.calculateData();

          _this._meteorDataManager.updateData(newData);
        }
      });
    },
    componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
      if (this.startMeteorSubscriptions) {
        if (!_ejson2.default.equals(this.state, nextState) || !_ejson2.default.equals(this.props, nextProps)) {
          this._meteorSubscriptionsManager._meteorDataChangedCallback();
        }
      }

      if (this.getMeteorData) {
        var saveProps = this.props;
        var saveState = this.state;
        var newData = void 0;

        try {
          this.props = nextProps;
          this.state = nextState;
          newData = this._meteorDataManager.calculateData();
        } finally {
          this.props = saveProps;
          this.state = saveState;
        }

        this._meteorDataManager.updateData(newData);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._meteorDataManager) {
        this._meteorDataManager.dispose();
      }

      if (this._meteorSubscriptionsManager) {
        this._meteorSubscriptionsManager.dispose();
      }
    }
  };
  exports.ReactMeteorData = ReactMeteorData;

  var ReactComponent = function (_React$Component) {
    babelHelpers.inherits(ReactComponent, _React$Component);

    function ReactComponent() {
      babelHelpers.classCallCheck(this, ReactComponent);
      return babelHelpers.possibleConstructorReturn(this, (ReactComponent.__proto__ || Object.getPrototypeOf(ReactComponent)).apply(this, arguments));
    }

    return ReactComponent;
  }(_react2.default.Component);

  babelHelpers.extends(ReactComponent.prototype, ReactMeteorData);

  var ReactPureComponent = function (_React$PureComponent) {
    babelHelpers.inherits(ReactPureComponent, _React$PureComponent);

    function ReactPureComponent() {
      babelHelpers.classCallCheck(this, ReactPureComponent);
      return babelHelpers.possibleConstructorReturn(this, (ReactPureComponent.__proto__ || Object.getPrototypeOf(ReactPureComponent)).apply(this, arguments));
    }

    return ReactPureComponent;
  }(_react2.default.PureComponent);

  babelHelpers.extends(ReactPureComponent.prototype, ReactMeteorData);

  function connect(options) {
    var expandedOptions = options;

    if (typeof options === 'function') {
      expandedOptions = {
        getMeteorData: options
      };
    }

    var _expandedOptions = expandedOptions,
        _getMeteorData = _expandedOptions.getMeteorData,
        _expandedOptions$pure = _expandedOptions.pure,
        pure = _expandedOptions$pure === undefined ? true : _expandedOptions$pure;
    var BaseComponent = pure ? ReactPureComponent : ReactComponent;
    return function (WrappedComponent) {
      return function (_BaseComponent) {
        babelHelpers.inherits(ReactMeteorDataComponent, _BaseComponent);

        function ReactMeteorDataComponent() {
          babelHelpers.classCallCheck(this, ReactMeteorDataComponent);
          return babelHelpers.possibleConstructorReturn(this, (ReactMeteorDataComponent.__proto__ || Object.getPrototypeOf(ReactMeteorDataComponent)).apply(this, arguments));
        }

        babelHelpers.createClass(ReactMeteorDataComponent, [{
          key: "getMeteorData",
          value: function getMeteorData() {
            return _getMeteorData(this.props);
          }
        }, {
          key: "render",
          value: function render() {
            return _react2.default.createElement(WrappedComponent, babelHelpers.extends({}, this.props, this.data));
          }
        }]);
        return ReactMeteorDataComponent;
      }(BaseComponent);
    };
  }
},896,[103,864,876,897]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _trackr = _require(_dependencyMap[0]);

  var _trackr2 = babelHelpers.interopRequireDefault(_trackr);

  var _Data = _require(_dependencyMap[1]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var MeteorDataManager = function () {
    function MeteorDataManager(component) {
      var _this = this;

      babelHelpers.classCallCheck(this, MeteorDataManager);
      this.component = component;
      this.computation = null;
      this.oldData = null;
      this._meteorDataDep = new _trackr2.default.Dependency();

      this._meteorDataChangedCallback = function () {
        _this._meteorDataDep.changed();
      };

      _Data2.default.onChange(this._meteorDataChangedCallback);
    }

    babelHelpers.createClass(MeteorDataManager, [{
      key: "dispose",
      value: function dispose() {
        if (this.computation) {
          this.computation.stop();
          this.computation = null;
        }

        _Data2.default.offChange(this._meteorDataChangedCallback);
      }
    }, {
      key: "calculateData",
      value: function calculateData() {
        var _this2 = this;

        var component = this.component;

        if (!component.getMeteorData) {
          return null;
        }

        if (this.computation) {
          this.computation.stop();
          this.computation = null;
        }

        var data = void 0;
        this.computation = _trackr2.default.nonreactive(function () {
          return _trackr2.default.autorun(function (c) {
            _this2._meteorDataDep.depend();

            if (c.firstRun) {
              var savedSetState = component.setState;

              try {
                component.setState = function () {
                  throw new Error("Can't call `setState` inside `getMeteorData` as this could cause an endless loop. To respond to Meteor data changing, consider making this component a \"wrapper component\" that only fetches data and passes it in as props to a child component. Then you can use `componentWillReceiveProps` in that child component.");
                };

                data = component.getMeteorData();
              } finally {
                component.setState = savedSetState;
              }
            } else {
              c.stop();

              try {
                component.forceUpdate();
              } catch (e) {
                console.error(e);
              }
            }
          });
        });
        return data;
      }
    }, {
      key: "updateData",
      value: function updateData(newData) {
        var component = this.component;
        var oldData = this.oldData;

        if (!(newData && typeof newData === 'object')) {
          throw new Error('Expected object returned from getMeteorData');
        }

        for (var key in newData) {
          component.data[key] = newData[key];
        }

        if (oldData) {
          for (var _key in oldData) {
            if (!(_key in newData)) {
              delete component.data[_key];
            }
          }
        }

        this.oldData = newData;
      }
    }]);
    return MeteorDataManager;
  }();

  exports.default = MeteorDataManager;
},897,[861,876]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _Data = _require(_dependencyMap[3]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var MeteorListView = (_temp = _class = function (_Component) {
    babelHelpers.inherits(MeteorListView, _Component);

    function MeteorListView(props) {
      babelHelpers.classCallCheck(this, MeteorListView);

      var _this = babelHelpers.possibleConstructorReturn(this, (MeteorListView.__proto__ || Object.getPrototypeOf(MeteorListView)).call(this, props));

      _this.state = {
        ds: new _reactNative.ListView.DataSource({
          rowHasChanged: function rowHasChanged(row1, row2) {
            return row1 !== row2;
          }
        })
      };
      return _this;
    }

    babelHelpers.createClass(MeteorListView, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        var collection = props.collection,
            selector = props.selector,
            options = props.options;
        this.update(_Data2.default.db[collection].find(selector, options));
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        var _props = this.props,
            collection = _props.collection,
            selector = _props.selector,
            options = _props.options;

        this.update = function (results) {
          _this2.setState({
            ds: _this2.state.ds.cloneWithRows(results)
          });
        };

        if (!_Data2.default.db[collection]) {
          _Data2.default.db.addCollection(collection);
        }

        this.items = _Data2.default.db.observe(function () {
          return _Data2.default.db[collection].find(selector, options);
        });
        this.items.subscribe(this.update);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.items.dispose();
      }
    }, {
      key: "render",
      value: function render() {
        var ds = this.state.ds;
        var _props2 = this.props,
            listViewRef = _props2.listViewRef,
            props = babelHelpers.objectWithoutProperties(_props2, ["listViewRef"]);
        return _react2.default.createElement(_reactNative.ListView, babelHelpers.extends({}, props, {
          ref: listViewRef,
          dataSource: ds
        }));
      }
    }]);
    return MeteorListView;
  }(_react.Component), _class.propTypes = {
    collection: _propTypes2.default.string.isRequired,
    selector: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
    options: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
    renderRow: _propTypes2.default.func.isRequired,
    listViewRef: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string])
  }, _class.defaultProps = {
    selector: {}
  }, _temp);
  exports.default = MeteorListView;
},898,[103,121,14,876]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _Data = _require(_dependencyMap[3]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var MeteorListView = (_temp = _class = function (_Component) {
    babelHelpers.inherits(MeteorListView, _Component);

    function MeteorListView(props) {
      babelHelpers.classCallCheck(this, MeteorListView);

      var _this = babelHelpers.possibleConstructorReturn(this, (MeteorListView.__proto__ || Object.getPrototypeOf(MeteorListView)).call(this, props));

      _this.state = {
        ds: new _reactNative.ListView.DataSource({
          rowHasChanged: function rowHasChanged(row1, row2) {
            return row1 !== row2;
          }
        })
      };
      return _this;
    }

    babelHelpers.createClass(MeteorListView, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        var elements = props.elements;
        var elems = elements();
        this.setState({
          ds: this.state.ds.cloneWithRows(elems)
        });
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        var elements = this.props.elements;

        this.onChange = function () {
          var elems = elements();

          _this2.setState({
            ds: _this2.state.ds.cloneWithRows(elems)
          });
        };

        this.onChange();

        _Data2.default.onChange(this.onChange);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _Data2.default.offChange(this.onChange);
      }
    }, {
      key: "render",
      value: function render() {
        var ds = this.state.ds;
        var _props = this.props,
            listViewRef = _props.listViewRef,
            props = babelHelpers.objectWithoutProperties(_props, ["listViewRef"]);
        return _react2.default.createElement(_reactNative.ListView, babelHelpers.extends({}, props, {
          ref: listViewRef,
          dataSource: ds
        }));
      }
    }]);
    return MeteorListView;
  }(_react.Component), _class.propTypes = {
    elements: _propTypes2.default.func.isRequired,
    renderRow: _propTypes2.default.func.isRequired,
    listViewRef: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string])
  }, _temp);
  exports.default = MeteorListView;
},899,[103,121,14,876]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createContainer;

  var _ReactMeteorData = _require(_dependencyMap[0]);

  var _ReactMeteorData2 = babelHelpers.interopRequireDefault(_ReactMeteorData);

  var hasDisplayedWarning = false;

  function createContainer(options, Component) {
    return (0, _ReactMeteorData2.default)(options)(Component);
  }
},900,[896]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (reactiveFn, L, E, options) {
    var onPropsChange = function onPropsChange(props, onData) {
      var trackerCleanup = void 0;

      var _meteorDataDep = new _trackr2.default.Dependency();

      var _meteorDataChangedCallback = function _meteorDataChangedCallback() {
        _meteorDataDep.changed();
      };

      _Data2.default.onChange(_meteorDataChangedCallback);

      var handler = _trackr2.default.nonreactive(function () {
        return _trackr2.default.autorun(function () {
          _meteorDataDep.depend();

          trackerCleanup = reactiveFn(props, onData);
        });
      });

      return function () {
        if (typeof trackerCleanup === 'function') {
          trackerCleanup();
        }

        _Data2.default.offChange(_meteorDataChangedCallback);

        return handler.stop();
      };
    };

    return (0, _reactKomposer.compose)(onPropsChange, L, E, options);
  };

  var _trackr = _require(_dependencyMap[0]);

  var _trackr2 = babelHelpers.interopRequireDefault(_trackr);

  var _reactKomposer = _require(_dependencyMap[1]);

  var _Data = _require(_dependencyMap[2]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);
},901,[861,902,876]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.composeWithMobx = exports.composeWithObservable = exports.composeWithPromise = exports.composeWithTracker = exports.composeAll = exports.compose = undefined;
  exports.disable = disable;
  exports.getDisableMode = getDisableMode;
  exports.setStubbingMode = setStubbingMode;
  exports.getStubbingMode = getStubbingMode;
  exports.setComposerStub = setComposerStub;
  exports.setDefaultLoadingComponent = setDefaultLoadingComponent;
  exports.setDefaultErrorComponent = setDefaultErrorComponent;
  exports._getDefaultLoadingComponent = _getDefaultLoadingComponent;
  exports._getDefaultErrorComponent = _getDefaultErrorComponent;

  var _compose2 = _require(_dependencyMap[0]);

  var _compose3 = _interopRequireDefault(_compose2);

  var _compose_all = _require(_dependencyMap[1]);

  var _compose_all2 = _interopRequireDefault(_compose_all);

  var _with_tracker = _require(_dependencyMap[2]);

  var _with_tracker2 = _interopRequireDefault(_with_tracker);

  var _with_promise = _require(_dependencyMap[3]);

  var _with_promise2 = _interopRequireDefault(_with_promise);

  var _with_observable = _require(_dependencyMap[4]);

  var _with_observable2 = _interopRequireDefault(_with_observable);

  var _with_mobx = _require(_dependencyMap[5]);

  var _with_mobx2 = _interopRequireDefault(_with_mobx);

  var _common_components = _require(_dependencyMap[6]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var compose = exports.compose = _compose3.default;
  var composeAll = exports.composeAll = _compose_all2.default;
  var composeWithTracker = exports.composeWithTracker = _with_tracker2.default;
  var composeWithPromise = exports.composeWithPromise = _with_promise2.default;
  var composeWithObservable = exports.composeWithObservable = _with_observable2.default;
  var composeWithMobx = exports.composeWithMobx = _with_mobx2.default;
  var disableMode = false;
  var stubbingMode = false;
  var defaultErrorComponent = null;
  var defaultLoadingComponent = null;

  function disable() {
    var value = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
    disableMode = value;
  }

  function getDisableMode() {
    return disableMode;
  }

  function setStubbingMode() {
    var value = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
    stubbingMode = value;
  }

  function getStubbingMode() {
    return stubbingMode;
  }

  function setComposerStub(Container, composerStub) {
    Container.__composerStub = composerStub;
  }

  function setDefaultLoadingComponent(comp) {
    defaultLoadingComponent = comp;
  }

  function setDefaultErrorComponent(comp) {
    defaultErrorComponent = comp;
  }

  function _getDefaultLoadingComponent() {
    return defaultLoadingComponent || _common_components.DefaultLoadingComponent;
  }

  function _getDefaultErrorComponent() {
    return defaultErrorComponent || _common_components.DefaultErrorComponent;
  }
},902,[903,1002,1003,1004,1005,1006,1001]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends2 = _require(_dependencyMap[0]);

  var _extends3 = _interopRequireDefault(_extends2);

  var _getPrototypeOf = _require(_dependencyMap[1]);

  var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

  var _classCallCheck2 = _require(_dependencyMap[2]);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _createClass2 = _require(_dependencyMap[3]);

  var _createClass3 = _interopRequireDefault(_createClass2);

  var _possibleConstructorReturn2 = _require(_dependencyMap[4]);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = _require(_dependencyMap[5]);

  var _inherits3 = _interopRequireDefault(_inherits2);

  exports.default = compose;

  var _react = _require(_dependencyMap[6]);

  var _react2 = _interopRequireDefault(_react);

  var _invariant = _require(_dependencyMap[7]);

  var _invariant2 = _interopRequireDefault(_invariant);

  var _shallowequal = _require(_dependencyMap[8]);

  var _shallowequal2 = _interopRequireDefault(_shallowequal);

  var _utils = _require(_dependencyMap[9]);

  var _common_components = _require(_dependencyMap[10]);

  var _ = _require(_dependencyMap[11]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function compose(fn, L1, E1) {
    var _ref = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

    var contextTypes = _ref.contextTypes;
    var _ref$pure = _ref.pure;
    var pure = _ref$pure === undefined ? true : _ref$pure;
    var _ref$withRef = _ref.withRef;
    var withRef = _ref$withRef === undefined ? false : _ref$withRef;
    return function (ChildComponent, L2, E2) {
      (0, _invariant2.default)(Boolean(ChildComponent), 'Should provide a child component to build the higher order container.');

      if ((0, _utils.isReactNative)()) {
        (0, _invariant2.default)(L1 || L2, 'Should provide a loading component in ReactNative.');
        (0, _invariant2.default)(E1 || E2, 'Should provide a error handling component in ReactNative.');
      }

      var LoadingComponent = L1 || L2 || (0, _._getDefaultLoadingComponent)();
      var ErrorComponent = E1 || E2 || (0, _._getDefaultErrorComponent)();

      if ((0, _.getDisableMode)()) {
        return (0, _utils.inheritStatics)(_common_components.DummyComponent, ChildComponent);
      }

      var Container = function (_React$Component) {
        (0, _inherits3.default)(Container, _React$Component);

        function Container(props, context) {
          (0, _classCallCheck3.default)(this, Container);

          var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Container).call(this, props, context));

          _this.getWrappedInstance = _this.getWrappedInstance.bind(_this);
          _this.state = {};

          _this._subscribe(props, context);

          return _this;
        }

        (0, _createClass3.default)(Container, [{
          key: 'componentDidMount',
          value: function componentDidMount() {
            this._mounted = true;
          }
        }, {
          key: 'componentWillReceiveProps',
          value: function componentWillReceiveProps(props, context) {
            this._subscribe(props, context);
          }
        }, {
          key: 'componentWillUnmount',
          value: function componentWillUnmount() {
            this._mounted = false;

            this._unsubscribe();
          }
        }, {
          key: 'shouldComponentUpdate',
          value: function shouldComponentUpdate(nextProps, nextState) {
            if (!pure) {
              return true;
            }

            return !(0, _shallowequal2.default)(this.props, nextProps) || this.state.error !== nextState.error || !(0, _shallowequal2.default)(this.state.payload, nextState.payload);
          }
        }, {
          key: 'getWrappedInstance',
          value: function getWrappedInstance() {
            (0, _invariant2.default)(withRef, "To access the wrapped instance, you need to specify { withRef: true } as the fourth argument of the compose() call.");
            return this.refs.wrappedInstance;
          }
        }, {
          key: 'render',
          value: function render() {
            var error = this._getError();

            var loading = this._isLoading();

            if (error) {
              return _react2.default.createElement(ErrorComponent, {
                error: error
              });
            }

            if (loading) {
              return _react2.default.createElement(LoadingComponent, this._getProps());
            }

            return _react2.default.createElement(ChildComponent, this._getProps());
          }
        }, {
          key: '_subscribe',
          value: function _subscribe(props, context) {
            var _this2 = this;

            this._unsubscribe();

            var onData = function onData(error, payload) {
              if (error) {
                (0, _invariant2.default)(error.message && error.stack, 'Passed error should be an instance of an Error.');
              }

              var state = {
                error: error,
                payload: payload
              };

              if (_this2._mounted) {
                _this2.setState(state);
              } else {
                _this2.state = state;
              }
            };

            this._stop = fn(props, onData, context);
          }
        }, {
          key: '_unsubscribe',
          value: function _unsubscribe() {
            if (this._stop) {
              this._stop();
            }
          }
        }, {
          key: '_getProps',
          value: function _getProps() {
            var _state$payload = this.state.payload;
            var payload = _state$payload === undefined ? {} : _state$payload;
            var props = (0, _extends3.default)({}, this.props, payload);

            if (withRef) {
              props.ref = 'wrappedInstance';
            }

            return props;
          }
        }, {
          key: '_getError',
          value: function _getError() {
            var error = this.state.error;
            return error;
          }
        }, {
          key: '_isLoading',
          value: function _isLoading() {
            var payload = this.state.payload;
            return !Boolean(payload);
          }
        }]);
        return Container;
      }(_react2.default.Component);

      Container.contextTypes = contextTypes;
      return (0, _utils.inheritStatics)(Container, ChildComponent);
    };
  }
},903,[904,943,948,949,953,986,103,319,994,999,1001,902]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;

  var _assign = _require(_dependencyMap[0]);

  var _assign2 = _interopRequireDefault(_assign);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = _assign2.default || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
},904,[905]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "default": _require(_dependencyMap[0]),
    __esModule: true
  };
},905,[906]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0]);

  module.exports = _require(_dependencyMap[1]).Object.assign;
},906,[907,910]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var $export = _require(_dependencyMap[0]);

  $export($export.S + $export.F, 'Object', {
    assign: _require(_dependencyMap[1])
  });
},907,[908,924]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var global = _require(_dependencyMap[0]);

  var core = _require(_dependencyMap[1]);

  var ctx = _require(_dependencyMap[2]);

  var hide = _require(_dependencyMap[3]);

  var has = _require(_dependencyMap[4]);

  var PROTOTYPE = 'prototype';

  var $export = function $export(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var IS_WRAP = type & $export.W;
    var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
    var expProto = exports[PROTOTYPE];
    var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
    var key, own, out;
    if (IS_GLOBAL) source = name;

    for (key in source) {
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && has(exports, key)) continue;
      out = own ? target[key] : source[key];
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? function (C) {
        var F = function F(a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0:
                return new C();

              case 1:
                return new C(a);

              case 2:
                return new C(a, b);
            }

            return new C(a, b, c);
          }

          return C.apply(this, arguments);
        };

        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;

      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out;
        if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
      }
    }
  };

  $export.F = 1;
  $export.G = 2;
  $export.S = 4;
  $export.P = 8;
  $export.B = 16;
  $export.W = 32;
  $export.U = 64;
  $export.R = 128;
  module.exports = $export;
},908,[909,910,911,913,923]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if (typeof __g == 'number') __g = global;
},909,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var core = module.exports = {
    version: '2.5.7'
  };
  if (typeof __e == 'number') __e = core;
},910,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var aFunction = _require(_dependencyMap[0]);

  module.exports = function (fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;

    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };

      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };

      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }

    return function () {
      return fn.apply(that, arguments);
    };
  };
},911,[912]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };
},912,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var dP = _require(_dependencyMap[0]);

  var createDesc = _require(_dependencyMap[1]);

  module.exports = _require(_dependencyMap[2]) ? function (object, key, value) {
    return dP.f(object, key, createDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };
},913,[914,922,918]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var anObject = _require(_dependencyMap[0]);

  var IE8_DOM_DEFINE = _require(_dependencyMap[1]);

  var toPrimitive = _require(_dependencyMap[2]);

  var dP = Object.defineProperty;
  exports.f = _require(_dependencyMap[3]) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
      return dP(O, P, Attributes);
    } catch (e) {}
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
},914,[915,917,921,918]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isObject = _require(_dependencyMap[0]);

  module.exports = function (it) {
    if (!isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };
},915,[916]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };
},916,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = !_require(_dependencyMap[0]) && !_require(_dependencyMap[1])(function () {
    return Object.defineProperty(_require(_dependencyMap[2])('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });
},917,[918,919,920]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = !_require(_dependencyMap[0])(function () {
    return Object.defineProperty({}, 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });
},918,[919]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
},919,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isObject = _require(_dependencyMap[0]);

  var document = _require(_dependencyMap[1]).document;

  var is = isObject(document) && isObject(document.createElement);

  module.exports = function (it) {
    return is ? document.createElement(it) : {};
  };
},920,[916,909]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isObject = _require(_dependencyMap[0]);

  module.exports = function (it, S) {
    if (!isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };
},921,[916]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
},922,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var hasOwnProperty = {}.hasOwnProperty;

  module.exports = function (it, key) {
    return hasOwnProperty.call(it, key);
  };
},923,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var getKeys = _require(_dependencyMap[0]);

  var gOPS = _require(_dependencyMap[1]);

  var pIE = _require(_dependencyMap[2]);

  var toObject = _require(_dependencyMap[3]);

  var IObject = _require(_dependencyMap[4]);

  var $assign = Object.assign;
  module.exports = !$assign || _require(_dependencyMap[5])(function () {
    var A = {};
    var B = {};
    var S = Symbol();
    var K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) {
      B[k] = k;
    });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) {
    var T = toObject(target);
    var aLen = arguments.length;
    var index = 1;
    var getSymbols = gOPS.f;
    var isEnum = pIE.f;

    while (aLen > index) {
      var S = IObject(arguments[index++]);
      var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
      var length = keys.length;
      var j = 0;
      var key;

      while (length > j) {
        if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
      }
    }

    return T;
  } : $assign;
},924,[925,940,941,942,928,919]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var $keys = _require(_dependencyMap[0]);

  var enumBugKeys = _require(_dependencyMap[1]);

  module.exports = Object.keys || function keys(O) {
    return $keys(O, enumBugKeys);
  };
},925,[926,939]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var has = _require(_dependencyMap[0]);

  var toIObject = _require(_dependencyMap[1]);

  var arrayIndexOf = _require(_dependencyMap[2])(false);

  var IE_PROTO = _require(_dependencyMap[3])('IE_PROTO');

  module.exports = function (object, names) {
    var O = toIObject(object);
    var i = 0;
    var result = [];
    var key;

    for (key in O) {
      if (key != IE_PROTO) has(O, key) && result.push(key);
    }

    while (names.length > i) {
      if (has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
    }

    return result;
  };
},926,[923,927,931,935]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var IObject = _require(_dependencyMap[0]);

  var defined = _require(_dependencyMap[1]);

  module.exports = function (it) {
    return IObject(defined(it));
  };
},927,[928,930]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var cof = _require(_dependencyMap[0]);

  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
},928,[929]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var toString = {}.toString;

  module.exports = function (it) {
    return toString.call(it).slice(8, -1);
  };
},929,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };
},930,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var toIObject = _require(_dependencyMap[0]);

  var toLength = _require(_dependencyMap[1]);

  var toAbsoluteIndex = _require(_dependencyMap[2]);

  module.exports = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIObject($this);
      var length = toLength(O.length);
      var index = toAbsoluteIndex(fromIndex, length);
      var value;
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        if (value != value) return true;
      } else for (; length > index; index++) {
        if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        }
      }
      return !IS_INCLUDES && -1;
    };
  };
},931,[927,932,934]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var toInteger = _require(_dependencyMap[0]);

  var min = Math.min;

  module.exports = function (it) {
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
  };
},932,[933]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var ceil = Math.ceil;
  var floor = Math.floor;

  module.exports = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };
},933,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var toInteger = _require(_dependencyMap[0]);

  var max = Math.max;
  var min = Math.min;

  module.exports = function (index, length) {
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };
},934,[933]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var shared = _require(_dependencyMap[0])('keys');

  var uid = _require(_dependencyMap[1]);

  module.exports = function (key) {
    return shared[key] || (shared[key] = uid(key));
  };
},935,[936,938]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var core = _require(_dependencyMap[0]);

  var global = _require(_dependencyMap[1]);

  var SHARED = '__core-js_shared__';
  var store = global[SHARED] || (global[SHARED] = {});
  (module.exports = function (key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: core.version,
    mode: _require(_dependencyMap[2]) ? 'pure' : 'global',
    copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
  });
},936,[910,909,937]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = true;
},937,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var id = 0;
  var px = Math.random();

  module.exports = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };
},938,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
},939,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  exports.f = Object.getOwnPropertySymbols;
},940,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  exports.f = {}.propertyIsEnumerable;
},941,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var defined = _require(_dependencyMap[0]);

  module.exports = function (it) {
    return Object(defined(it));
  };
},942,[930]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "default": _require(_dependencyMap[0]),
    __esModule: true
  };
},943,[944]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0]);

  module.exports = _require(_dependencyMap[1]).Object.getPrototypeOf;
},944,[945,910]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var toObject = _require(_dependencyMap[0]);

  var $getPrototypeOf = _require(_dependencyMap[1]);

  _require(_dependencyMap[2])('getPrototypeOf', function () {
    return function getPrototypeOf(it) {
      return $getPrototypeOf(toObject(it));
    };
  });
},945,[942,946,947]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var has = _require(_dependencyMap[0]);

  var toObject = _require(_dependencyMap[1]);

  var IE_PROTO = _require(_dependencyMap[2])('IE_PROTO');

  var ObjectProto = Object.prototype;

  module.exports = Object.getPrototypeOf || function (O) {
    O = toObject(O);
    if (has(O, IE_PROTO)) return O[IE_PROTO];

    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }

    return O instanceof Object ? ObjectProto : null;
  };
},946,[923,942,935]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var $export = _require(_dependencyMap[0]);

  var core = _require(_dependencyMap[1]);

  var fails = _require(_dependencyMap[2]);

  module.exports = function (KEY, exec) {
    var fn = (core.Object || {})[KEY] || Object[KEY];
    var exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function () {
      fn(1);
    }), 'Object', exp);
  };
},947,[908,910,919]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;

  exports.default = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
},948,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;

  var _defineProperty = _require(_dependencyMap[0]);

  var _defineProperty2 = _interopRequireDefault(_defineProperty);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        (0, _defineProperty2.default)(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
},949,[950]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "default": _require(_dependencyMap[0]),
    __esModule: true
  };
},950,[951]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0]);

  var $Object = _require(_dependencyMap[1]).Object;

  module.exports = function defineProperty(it, key, desc) {
    return $Object.defineProperty(it, key, desc);
  };
},951,[952,910]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var $export = _require(_dependencyMap[0]);

  $export($export.S + $export.F * !_require(_dependencyMap[1]), 'Object', {
    defineProperty: _require(_dependencyMap[2]).f
  });
},952,[908,918,914]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;

  var _typeof2 = _require(_dependencyMap[0]);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  };
},953,[954]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;

  var _iterator = _require(_dependencyMap[0]);

  var _iterator2 = _interopRequireDefault(_iterator);

  var _symbol = _require(_dependencyMap[1]);

  var _symbol2 = _interopRequireDefault(_symbol);

  var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
  };

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof(obj);
  } : function (obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
  };
},954,[955,973]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "default": _require(_dependencyMap[0]),
    __esModule: true
  };
},955,[956]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0]);

  _require(_dependencyMap[1]);

  module.exports = _require(_dependencyMap[2]).f('iterator');
},956,[957,968,972]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var $at = _require(_dependencyMap[0])(true);

  _require(_dependencyMap[1])(String, 'String', function (iterated) {
    this._t = String(iterated);
    this._i = 0;
  }, function () {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return {
      value: undefined,
      done: true
    };
    point = $at(O, index);
    this._i += point.length;
    return {
      value: point,
      done: false
    };
  });
},957,[958,959]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var toInteger = _require(_dependencyMap[0]);

  var defined = _require(_dependencyMap[1]);

  module.exports = function (TO_STRING) {
    return function (that, pos) {
      var s = String(defined(that));
      var i = toInteger(pos);
      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
},958,[933,930]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var LIBRARY = _require(_dependencyMap[0]);

  var $export = _require(_dependencyMap[1]);

  var redefine = _require(_dependencyMap[2]);

  var hide = _require(_dependencyMap[3]);

  var Iterators = _require(_dependencyMap[4]);

  var $iterCreate = _require(_dependencyMap[5]);

  var setToStringTag = _require(_dependencyMap[6]);

  var getPrototypeOf = _require(_dependencyMap[7]);

  var ITERATOR = _require(_dependencyMap[8])('iterator');

  var BUGGY = !([].keys && 'next' in [].keys());
  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';

  var returnThis = function returnThis() {
    return this;
  };

  module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);

    var getMethod = function getMethod(kind) {
      if (!BUGGY && kind in proto) return proto[kind];

      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };

        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }

      return function entries() {
        return new Constructor(this, kind);
      };
    };

    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype;

    if ($anyNative) {
      IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        setToStringTag(IteratorPrototype, TAG, true);
        if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }

    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;

      $default = function values() {
        return $native.call(this);
      };
    }

    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      hide(proto, ITERATOR, $default);
    }

    Iterators[NAME] = $default;
    Iterators[TAG] = returnThis;

    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }

    return methods;
  };
},959,[937,908,960,913,961,962,966,946,967]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]);
},960,[913]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {};
},961,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var create = _require(_dependencyMap[0]);

  var descriptor = _require(_dependencyMap[1]);

  var setToStringTag = _require(_dependencyMap[2]);

  var IteratorPrototype = {};

  _require(_dependencyMap[3])(IteratorPrototype, _require(_dependencyMap[4])('iterator'), function () {
    return this;
  });

  module.exports = function (Constructor, NAME, next) {
    Constructor.prototype = create(IteratorPrototype, {
      next: descriptor(1, next)
    });
    setToStringTag(Constructor, NAME + ' Iterator');
  };
},962,[963,922,966,913,967]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var anObject = _require(_dependencyMap[0]);

  var dPs = _require(_dependencyMap[1]);

  var enumBugKeys = _require(_dependencyMap[2]);

  var IE_PROTO = _require(_dependencyMap[3])('IE_PROTO');

  var Empty = function Empty() {};

  var PROTOTYPE = 'prototype';

  var _createDict = function createDict() {
    var iframe = _require(_dependencyMap[4])('iframe');

    var i = enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';

    _require(_dependencyMap[5]).appendChild(iframe);

    iframe.src = 'javascript:';
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    _createDict = iframeDocument.F;

    while (i--) {
      delete _createDict[PROTOTYPE][enumBugKeys[i]];
    }

    return _createDict();
  };

  module.exports = Object.create || function create(O, Properties) {
    var result;

    if (O !== null) {
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty();
      Empty[PROTOTYPE] = null;
      result[IE_PROTO] = O;
    } else result = _createDict();

    return Properties === undefined ? result : dPs(result, Properties);
  };
},963,[915,964,939,935,920,965]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var dP = _require(_dependencyMap[0]);

  var anObject = _require(_dependencyMap[1]);

  var getKeys = _require(_dependencyMap[2]);

  module.exports = _require(_dependencyMap[3]) ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = getKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;

    while (length > i) {
      dP.f(O, P = keys[i++], Properties[P]);
    }

    return O;
  };
},964,[914,915,925,918]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var document = _require(_dependencyMap[0]).document;

  module.exports = document && document.documentElement;
},965,[909]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var def = _require(_dependencyMap[0]).f;

  var has = _require(_dependencyMap[1]);

  var TAG = _require(_dependencyMap[2])('toStringTag');

  module.exports = function (it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
      configurable: true,
      value: tag
    });
  };
},966,[914,923,967]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var store = _require(_dependencyMap[0])('wks');

  var uid = _require(_dependencyMap[1]);

  var Symbol = _require(_dependencyMap[2]).Symbol;

  var USE_SYMBOL = typeof Symbol == 'function';

  var $exports = module.exports = function (name) {
    return store[name] || (store[name] = USE_SYMBOL && (typeof Symbol === "function" ? Symbol[name] : "@@name") || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
  };

  $exports.store = store;
},967,[936,938,909]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0]);

  var global = _require(_dependencyMap[1]);

  var hide = _require(_dependencyMap[2]);

  var Iterators = _require(_dependencyMap[3]);

  var TO_STRING_TAG = _require(_dependencyMap[4])('toStringTag');

  var DOMIterables = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(',');

  for (var i = 0; i < DOMIterables.length; i++) {
    var NAME = DOMIterables[i];
    var Collection = global[NAME];
    var proto = Collection && Collection.prototype;
    if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = Iterators.Array;
  }
},968,[969,909,913,961,967]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var addToUnscopables = _require(_dependencyMap[0]);

  var step = _require(_dependencyMap[1]);

  var Iterators = _require(_dependencyMap[2]);

  var toIObject = _require(_dependencyMap[3]);

  module.exports = _require(_dependencyMap[4])(Array, 'Array', function (iterated, kind) {
    this._t = toIObject(iterated);
    this._i = 0;
    this._k = kind;
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;

    if (!O || index >= O.length) {
      this._t = undefined;
      return step(1);
    }

    if (kind == 'keys') return step(0, index);
    if (kind == 'values') return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');
  Iterators.Arguments = Iterators.Array;
  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');
},969,[970,971,961,927,959]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = function () {};
},970,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = function (done, value) {
    return {
      value: value,
      done: !!done
    };
  };
},971,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  exports.f = _require(_dependencyMap[0]);
},972,[967]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "default": _require(_dependencyMap[0]),
    __esModule: true
  };
},973,[974]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0]);

  _require(_dependencyMap[1]);

  _require(_dependencyMap[2]);

  _require(_dependencyMap[3]);

  module.exports = _require(_dependencyMap[4]).Symbol;
},974,[975,983,984,985,910]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var global = _require(_dependencyMap[0]);

  var has = _require(_dependencyMap[1]);

  var DESCRIPTORS = _require(_dependencyMap[2]);

  var $export = _require(_dependencyMap[3]);

  var redefine = _require(_dependencyMap[4]);

  var META = _require(_dependencyMap[5]).KEY;

  var $fails = _require(_dependencyMap[6]);

  var shared = _require(_dependencyMap[7]);

  var setToStringTag = _require(_dependencyMap[8]);

  var uid = _require(_dependencyMap[9]);

  var wks = _require(_dependencyMap[10]);

  var wksExt = _require(_dependencyMap[11]);

  var wksDefine = _require(_dependencyMap[12]);

  var enumKeys = _require(_dependencyMap[13]);

  var isArray = _require(_dependencyMap[14]);

  var anObject = _require(_dependencyMap[15]);

  var isObject = _require(_dependencyMap[16]);

  var toIObject = _require(_dependencyMap[17]);

  var toPrimitive = _require(_dependencyMap[18]);

  var createDesc = _require(_dependencyMap[19]);

  var _create = _require(_dependencyMap[20]);

  var gOPNExt = _require(_dependencyMap[21]);

  var $GOPD = _require(_dependencyMap[22]);

  var $DP = _require(_dependencyMap[23]);

  var $keys = _require(_dependencyMap[24]);

  var gOPD = $GOPD.f;
  var dP = $DP.f;
  var gOPN = gOPNExt.f;
  var $Symbol = global.Symbol;
  var $JSON = global.JSON;

  var _stringify = $JSON && $JSON.stringify;

  var PROTOTYPE = 'prototype';
  var HIDDEN = wks('_hidden');
  var TO_PRIMITIVE = wks('toPrimitive');
  var isEnum = {}.propertyIsEnumerable;
  var SymbolRegistry = shared('symbol-registry');
  var AllSymbols = shared('symbols');
  var OPSymbols = shared('op-symbols');
  var ObjectProto = Object[PROTOTYPE];
  var USE_NATIVE = typeof $Symbol == 'function';
  var QObject = global.QObject;
  var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
  var setSymbolDesc = DESCRIPTORS && $fails(function () {
    return _create(dP({}, 'a', {
      get: function get() {
        return dP(this, 'a', {
          value: 7
        }).a;
      }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD(ObjectProto, key);
    if (protoDesc) delete ObjectProto[key];
    dP(it, key, D);
    if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
  } : dP;

  var wrap = function wrap(tag) {
    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);

    sym._k = tag;
    return sym;
  };

  var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return it instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);

    if (has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _create(D, {
          enumerable: createDesc(0, false)
        });
      }

      return setSymbolDesc(it, key, D);
    }

    return dP(it, key, D);
  };

  var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIObject(P));
    var i = 0;
    var l = keys.length;
    var key;

    while (l > i) {
      $defineProperty(it, key = keys[i++], P[key]);
    }

    return it;
  };

  var $create = function create(it, P) {
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };

  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = toPrimitive(key, true));
    if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };

  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = toIObject(it);
    key = toPrimitive(key, true);
    if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
    var D = gOPD(it, key);
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };

  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN(toIObject(it));
    var result = [];
    var i = 0;
    var key;

    while (names.length > i) {
      if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    }

    return result;
  };

  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto;
    var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
    var result = [];
    var i = 0;
    var key;

    while (names.length > i) {
      if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
    }

    return result;
  };

  if (!USE_NATIVE) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
      var tag = uid(arguments.length > 0 ? arguments[0] : undefined);

      var $set = function $set(value) {
        if (this === ObjectProto) $set.call(OPSymbols, value);
        if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      };

      if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
        configurable: true,
        set: $set
      });
      return wrap(tag);
    };

    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
      return this._k;
    });
    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f = $defineProperty;
    _require(_dependencyMap[25]).f = gOPNExt.f = $getOwnPropertyNames;
    _require(_dependencyMap[26]).f = $propertyIsEnumerable;
    _require(_dependencyMap[27]).f = $getOwnPropertySymbols;

    if (DESCRIPTORS && !_require(_dependencyMap[28])) {
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }

    wksExt.f = function (name) {
      return wrap(wks(name));
    };
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, {
    Symbol: $Symbol
  });

  for (var es6Symbols = 'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
    wks(es6Symbols[j++]);
  }

  for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
    wksDefine(wellKnownSymbols[k++]);
  }

  $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    'for': function _for(key) {
      return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

      for (var key in SymbolRegistry) {
        if (SymbolRegistry[key] === sym) return key;
      }
    },
    useSetter: function useSetter() {
      setter = true;
    },
    useSimple: function useSimple() {
      setter = false;
    }
  });
  $export($export.S + $export.F * !USE_NATIVE, 'Object', {
    create: $create,
    defineProperty: $defineProperty,
    defineProperties: $defineProperties,
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    getOwnPropertyNames: $getOwnPropertyNames,
    getOwnPropertySymbols: $getOwnPropertySymbols
  });
  $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
    var S = $Symbol();
    return _stringify([S]) != '[null]' || _stringify({
      a: S
    }) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      var args = [it];
      var i = 1;
      var replacer, $replacer;

      while (arguments.length > i) {
        args.push(arguments[i++]);
      }

      $replacer = replacer = args[1];
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return;
      if (!isArray(replacer)) replacer = function replacer(key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  });
  $Symbol[PROTOTYPE][TO_PRIMITIVE] || _require(_dependencyMap[29])($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
  setToStringTag($Symbol, 'Symbol');
  setToStringTag(Math, 'Math', true);
  setToStringTag(global.JSON, 'JSON', true);
},975,[909,923,918,908,960,976,919,936,966,938,967,972,977,978,979,915,916,927,921,922,963,980,982,914,925,981,941,940,937,913]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var META = _require(_dependencyMap[0])('meta');

  var isObject = _require(_dependencyMap[1]);

  var has = _require(_dependencyMap[2]);

  var setDesc = _require(_dependencyMap[3]).f;

  var id = 0;

  var isExtensible = Object.isExtensible || function () {
    return true;
  };

  var FREEZE = !_require(_dependencyMap[4])(function () {
    return isExtensible(Object.preventExtensions({}));
  });

  var setMeta = function setMeta(it) {
    setDesc(it, META, {
      value: {
        i: 'O' + ++id,
        w: {}
      }
    });
  };

  var fastKey = function fastKey(it, create) {
    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

    if (!has(it, META)) {
      if (!isExtensible(it)) return 'F';
      if (!create) return 'E';
      setMeta(it);
    }

    return it[META].i;
  };

  var getWeak = function getWeak(it, create) {
    if (!has(it, META)) {
      if (!isExtensible(it)) return true;
      if (!create) return false;
      setMeta(it);
    }

    return it[META].w;
  };

  var onFreeze = function onFreeze(it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
    return it;
  };

  var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
  };
},976,[938,916,923,914,919]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var global = _require(_dependencyMap[0]);

  var core = _require(_dependencyMap[1]);

  var LIBRARY = _require(_dependencyMap[2]);

  var wksExt = _require(_dependencyMap[3]);

  var defineProperty = _require(_dependencyMap[4]).f;

  module.exports = function (name) {
    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
      value: wksExt.f(name)
    });
  };
},977,[909,910,937,972,914]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getKeys = _require(_dependencyMap[0]);

  var gOPS = _require(_dependencyMap[1]);

  var pIE = _require(_dependencyMap[2]);

  module.exports = function (it) {
    var result = getKeys(it);
    var getSymbols = gOPS.f;

    if (getSymbols) {
      var symbols = getSymbols(it);
      var isEnum = pIE.f;
      var i = 0;
      var key;

      while (symbols.length > i) {
        if (isEnum.call(it, key = symbols[i++])) result.push(key);
      }
    }

    return result;
  };
},978,[925,940,941]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var cof = _require(_dependencyMap[0]);

  module.exports = Array.isArray || function isArray(arg) {
    return cof(arg) == 'Array';
  };
},979,[929]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var toIObject = _require(_dependencyMap[0]);

  var gOPN = _require(_dependencyMap[1]).f;

  var toString = {}.toString;
  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function getWindowNames(it) {
    try {
      return gOPN(it);
    } catch (e) {
      return windowNames.slice();
    }
  };

  module.exports.f = function getOwnPropertyNames(it) {
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
  };
},980,[927,981]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var $keys = _require(_dependencyMap[0]);

  var hiddenKeys = _require(_dependencyMap[1]).concat('length', 'prototype');

  exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return $keys(O, hiddenKeys);
  };
},981,[926,939]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var pIE = _require(_dependencyMap[0]);

  var createDesc = _require(_dependencyMap[1]);

  var toIObject = _require(_dependencyMap[2]);

  var toPrimitive = _require(_dependencyMap[3]);

  var has = _require(_dependencyMap[4]);

  var IE8_DOM_DEFINE = _require(_dependencyMap[5]);

  var gOPD = Object.getOwnPropertyDescriptor;
  exports.f = _require(_dependencyMap[6]) ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = toIObject(O);
    P = toPrimitive(P, true);
    if (IE8_DOM_DEFINE) try {
      return gOPD(O, P);
    } catch (e) {}
    if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
  };
},982,[941,922,927,921,923,917,918]);
__d(function (global, _require, module, exports, _dependencyMap) {},983,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0])('asyncIterator');
},984,[977]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0])('observable');
},985,[977]);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;

  var _setPrototypeOf = _require(_dependencyMap[0]);

  var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

  var _create = _require(_dependencyMap[1]);

  var _create2 = _interopRequireDefault(_create);

  var _typeof2 = _require(_dependencyMap[2]);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }

    subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
  };
},986,[987,991,954]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "default": _require(_dependencyMap[0]),
    __esModule: true
  };
},987,[988]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0]);

  module.exports = _require(_dependencyMap[1]).Object.setPrototypeOf;
},988,[989,910]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var $export = _require(_dependencyMap[0]);

  $export($export.S, 'Object', {
    setPrototypeOf: _require(_dependencyMap[1]).set
  });
},989,[908,990]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var isObject = _require(_dependencyMap[0]);

  var anObject = _require(_dependencyMap[1]);

  var check = function check(O, proto) {
    anObject(O);
    if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
  };

  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? function (test, buggy, set) {
      try {
        set = _require(_dependencyMap[2])(Function.call, _require(_dependencyMap[3]).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) {
        buggy = true;
      }

      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
    check: check
  };
},990,[916,915,911,982]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "default": _require(_dependencyMap[0]),
    __esModule: true
  };
},991,[992]);
__d(function (global, _require, module, exports, _dependencyMap) {
  _require(_dependencyMap[0]);

  var $Object = _require(_dependencyMap[1]).Object;

  module.exports = function create(P, D) {
    return $Object.create(P, D);
  };
},992,[993,910]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var $export = _require(_dependencyMap[0]);

  $export($export.S, 'Object', {
    create: _require(_dependencyMap[1])
  });
},993,[908,963]);
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var fetchKeys = _require(_dependencyMap[0]);

    module.exports = function shallowEqual(objA, objB, compare, compareContext) {
        var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

        if (ret !== void 0) {
            return !!ret;
        }

        if (objA === objB) {
            return true;
        }

        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
            return false;
        }

        var keysA = fetchKeys(objA);
        var keysB = fetchKeys(objB);
        var len = keysA.length;

        if (len !== keysB.length) {
            return false;
        }

        compareContext = compareContext || null;
        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

        for (var i = 0; i < len; i++) {
            var key = keysA[i];

            if (!bHasOwnProperty(key)) {
                return false;
            }

            var valueA = objA[key];
            var valueB = objB[key];

            var _ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

            if (_ret === false || _ret === void 0 && valueA !== valueB) {
                return false;
            }
        }

        return true;
    };
},994,[995]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var getNative = _require(_dependencyMap[0]),
      isArguments = _require(_dependencyMap[1]),
      isArray = _require(_dependencyMap[2]);

  var reIsUint = /^\d+$/;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeKeys = getNative(Object, 'keys');
  var MAX_SAFE_INTEGER = 9007199254740991;

  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  var getLength = baseProperty('length');

  function isArrayLike(value) {
    return value != null && isLength(getLength(value));
  }

  function isIndex(value, length) {
    value = typeof value == 'number' || reIsUint.test(value) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function shimKeys(object) {
    var props = keysIn(object),
        propsLength = props.length,
        length = propsLength && object.length;
    var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));
    var index = -1,
        result = [];

    while (++index < propsLength) {
      var key = props[index];

      if (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) {
        result.push(key);
      }
    }

    return result;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  var keys = !nativeKeys ? shimKeys : function (object) {
    var Ctor = object == null ? undefined : object.constructor;

    if (typeof Ctor == 'function' && Ctor.prototype === object || typeof object != 'function' && isArrayLike(object)) {
      return shimKeys(object);
    }

    return isObject(object) ? nativeKeys(object) : [];
  };

  function keysIn(object) {
    if (object == null) {
      return [];
    }

    if (!isObject(object)) {
      object = Object(object);
    }

    var length = object.length;
    length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;
    var Ctor = object.constructor,
        index = -1,
        isProto = typeof Ctor == 'function' && Ctor.prototype === object,
        result = Array(length),
        skipIndexes = length > 0;

    while (++index < length) {
      result[index] = index + '';
    }

    for (var key in object) {
      if (!(skipIndexes && isIndex(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = keys;
},995,[996,997,998]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var funcTag = '[object Function]';
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  var objectProto = Object.prototype;
  var fnToString = Function.prototype.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objToString = objectProto.toString;
  var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  function getNative(object, key) {
    var value = object == null ? undefined : object[key];
    return isNative(value) ? value : undefined;
  }

  function isFunction(value) {
    return isObject(value) && objToString.call(value) == funcTag;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isNative(value) {
    if (value == null) {
      return false;
    }

    if (isFunction(value)) {
      return reIsNative.test(fnToString.call(value));
    }

    return isObjectLike(value) && reIsHostCtor.test(value);
  }

  module.exports = getNative;
},996,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  module.exports = isArguments;
},997,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var arrayTag = '[object Array]',
      funcTag = '[object Function]';
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  var objectProto = Object.prototype;
  var fnToString = Function.prototype.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objToString = objectProto.toString;
  var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var nativeIsArray = getNative(Array, 'isArray');
  var MAX_SAFE_INTEGER = 9007199254740991;

  function getNative(object, key) {
    var value = object == null ? undefined : object[key];
    return isNative(value) ? value : undefined;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  var isArray = nativeIsArray || function (value) {
    return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
  };

  function isFunction(value) {
    return isObject(value) && objToString.call(value) == funcTag;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isNative(value) {
    if (value == null) {
      return false;
    }

    if (isFunction(value)) {
      return reIsNative.test(fnToString.call(value));
    }

    return isObjectLike(value) && reIsHostCtor.test(value);
  }

  module.exports = isArray;
},998,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.inheritStatics = inheritStatics;
  exports.isReactNative = isReactNative;

  var _hoistNonReactStatics = _require(_dependencyMap[0]);

  var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function inheritStatics(Container, ChildComponent) {
    var childDisplayName = ChildComponent.displayName || ChildComponent.name || 'ChildComponent';
    Container.displayName = 'Container(' + childDisplayName + ')';
    return (0, _hoistNonReactStatics2.default)(Container, ChildComponent);
  }

  function isReactNative() {
    if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
      return true;
    }

    return false;
  }
},999,[1000]);
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        arguments: true,
        arity: true
    };
    var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

    module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
        if (typeof sourceComponent !== 'string') {
            var keys = Object.getOwnPropertyNames(sourceComponent);

            if (isGetOwnPropertySymbolsAvailable) {
                keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
            }

            for (var i = 0; i < keys.length; ++i) {
                if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                    try {
                        targetComponent[keys[i]] = sourceComponent[keys[i]];
                    } catch (error) {}
                }
            }
        }

        return targetComponent;
    };
},1000,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DummyComponent = undefined;

  var _getPrototypeOf = _require(_dependencyMap[0]);

  var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

  var _classCallCheck2 = _require(_dependencyMap[1]);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _createClass2 = _require(_dependencyMap[2]);

  var _createClass3 = _interopRequireDefault(_createClass2);

  var _possibleConstructorReturn2 = _require(_dependencyMap[3]);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = _require(_dependencyMap[4]);

  var _inherits3 = _interopRequireDefault(_inherits2);

  exports.DefaultErrorComponent = DefaultErrorComponent;
  exports.DefaultLoadingComponent = DefaultLoadingComponent;

  var _react = _require(_dependencyMap[5]);

  var _react2 = _interopRequireDefault(_react);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var DummyComponent = exports.DummyComponent = function (_React$Component) {
    (0, _inherits3.default)(DummyComponent, _React$Component);

    function DummyComponent() {
      (0, _classCallCheck3.default)(this, DummyComponent);
      return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(DummyComponent).apply(this, arguments));
    }

    (0, _createClass3.default)(DummyComponent, [{
      key: 'render',
      value: function render() {
        return null;
      }
    }]);
    return DummyComponent;
  }(_react2.default.Component);

  function DefaultErrorComponent(_ref) {
    var error = _ref.error;
    return _react2.default.createElement('pre', {
      style: {
        color: 'red'
      }
    }, error.message, ' ', _react2.default.createElement('br', null), error.stack);
  }

  function DefaultLoadingComponent() {
    return _react2.default.createElement('p', null, 'Loading...');
  }
},1001,[943,948,949,953,986,103]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends2 = _require(_dependencyMap[0]);

  var _extends3 = _interopRequireDefault(_extends2);

  exports.default = composeAll;

  var _react = _require(_dependencyMap[1]);

  var _react2 = _interopRequireDefault(_react);

  var _ = _require(_dependencyMap[2]);

  var _common_components = _require(_dependencyMap[3]);

  var _utils = _require(_dependencyMap[4]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function composeAll() {
    for (var _len = arguments.length, composers = Array(_len), _key = 0; _key < _len; _key++) {
      composers[_key] = arguments[_key];
    }

    return function (BaseComponent) {
      if ((0, _.getDisableMode)()) {
        return _common_components.DummyComponent;
      }

      if (BaseComponent === null || BaseComponent === undefined) {
        throw new Error('Curry function of composeAll needs an input.');
      }

      var FinalComponent = BaseComponent;
      composers.forEach(function (composer) {
        if (typeof composer !== 'function') {
          throw new Error('Composer should be a function.');
        }

        FinalComponent = composer(FinalComponent);

        if (FinalComponent === null || FinalComponent === undefined) {
          throw new Error('Composer function should return a value.');
        }
      });
      FinalComponent.__OriginalBaseComponent = BaseComponent.__OriginalBaseComponent || BaseComponent;
      var stubbingMode = (0, _.getStubbingMode)();

      if (!stubbingMode) {
        return FinalComponent;
      }

      var ResultContainer = function ResultContainer(props) {
        if (ResultContainer.__composerStub) {
          var data = ResultContainer.__composerStub(props);

          var finalProps = (0, _extends3.default)({}, props, data);
          return _react2.default.createElement(FinalComponent.__OriginalBaseComponent, finalProps);
        }

        var displayName = FinalComponent.displayName || FinalComponent.name;
        return _react2.default.createElement('span', null, '<' + displayName + ' />');
      };

      (0, _utils.inheritStatics)(ResultContainer, FinalComponent);
      return ResultContainer;
    };
  }
},1002,[904,103,902,1001,999]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = composeWithTracker;

  var _compose = _require(_dependencyMap[0]);

  var _compose2 = _interopRequireDefault(_compose);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function composeWithTracker(reactiveFn, L, E, options) {
    var onPropsChange = function onPropsChange(props, onData, context) {
      var trackerCleanup = void 0;
      var handler = Tracker.nonreactive(function () {
        return Tracker.autorun(function () {
          trackerCleanup = reactiveFn(props, onData, context);
        });
      });
      return function () {
        if (typeof trackerCleanup === 'function') {
          trackerCleanup();
        }

        return handler.stop();
      };
    };

    return (0, _compose2.default)(onPropsChange, L, E, options);
  }
},1003,[903]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends2 = _require(_dependencyMap[0]);

  var _extends3 = _interopRequireDefault(_extends2);

  var _typeof2 = _require(_dependencyMap[1]);

  var _typeof3 = _interopRequireDefault(_typeof2);

  exports.default = composeWithPromise;

  var _compose = _require(_dependencyMap[2]);

  var _compose2 = _interopRequireDefault(_compose);

  var _invariant = _require(_dependencyMap[3]);

  var _invariant2 = _interopRequireDefault(_invariant);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function composeWithPromise(fn, L, E, options) {
    var onPropsChange = function onPropsChange(props, onData, context) {
      var promise = fn(props, context);
      (0, _invariant2.default)(typeof promise.then === 'function' && typeof promise.catch === 'function', 'Should return a promise from the callback of `composeWithPromise`');
      onData();
      promise.then(function (data) {
        (0, _invariant2.default)((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object', 'Should return a plain object from the promise');
        var clonedData = (0, _extends3.default)({}, data);
        onData(null, clonedData);
      }).catch(function (err) {
        onData(err);
      });
    };

    return (0, _compose2.default)(onPropsChange, L, E, options);
  }
},1004,[904,954,903,319]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends2 = _require(_dependencyMap[0]);

  var _extends3 = _interopRequireDefault(_extends2);

  var _typeof2 = _require(_dependencyMap[1]);

  var _typeof3 = _interopRequireDefault(_typeof2);

  exports.default = composeWithObservable;

  var _compose = _require(_dependencyMap[2]);

  var _compose2 = _interopRequireDefault(_compose);

  var _invariant = _require(_dependencyMap[3]);

  var _invariant2 = _interopRequireDefault(_invariant);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function composeWithObservable(fn, L, E, options) {
    var onPropsChange = function onPropsChange(props, sendData, context) {
      var observable = fn(props, context);
      (0, _invariant2.default)(typeof observable.subscribe === 'function', 'Should return an observable from the callback of `composeWithObservable`');
      sendData();

      var onData = function onData(data) {
        (0, _invariant2.default)((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object', 'Should return a plain object from the promise');
        var clonedData = (0, _extends3.default)({}, data);
        sendData(null, clonedData);
      };

      var onError = function onError(err) {
        sendData(err);
      };

      var sub = observable.subscribe(onData, onError);
      return sub.completed.bind(sub);
    };

    return (0, _compose2.default)(onPropsChange, L, E, options);
  }
},1005,[904,954,903,319]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = composeWithMobx;

  var _compose = _require(_dependencyMap[0]);

  var _compose2 = _interopRequireDefault(_compose);

  var _mobx = _require(_dependencyMap[1]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function composeWithMobx(fn, L, E, options) {
    var onPropsChange = function onPropsChange(props, onData) {
      var reactiveFn = function reactiveFn() {
        return fn(props, onData);
      };

      (0, _mobx.autorun)(reactiveFn);
      return reactiveFn();
    };

    return (0, _compose2.default)(onPropsChange, L, E, options);
  }
},1006,[903,1007]);
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }

        function __() {
            this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    registerGlobals();
    exports.extras = {
        allowStateChanges: allowStateChanges,
        getAtom: getAtom,
        getDebugName: getDebugName,
        getDependencyTree: getDependencyTree,
        getObserverTree: getObserverTree,
        isComputingDerivation: isComputingDerivation,
        isSpyEnabled: isSpyEnabled,
        resetGlobalState: resetGlobalState,
        spyReport: spyReport,
        spyReportEnd: spyReportEnd,
        spyReportStart: spyReportStart,
        trackTransitions: trackTransitions,
        setReactionScheduler: setReactionScheduler
    };
    exports._ = {
        getAdministration: getAdministration,
        resetGlobalState: resetGlobalState
    };

    if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === 'object') {
        __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx(module.exports);
    }

    var actionFieldDecorator = createClassPropertyDecorator(function (target, key, value, args, originalDescriptor) {
        var actionName = args && args.length === 1 ? args[0] : value.name || key || "<unnamed action>";
        var wrappedAction = action(actionName, value);
        addHiddenProp(target, key, wrappedAction);
    }, function (key) {
        return this[key];
    }, function () {
        invariant(false, "It is not allowed to assign new values to @action fields");
    }, false, true);

    function action(arg1, arg2, arg3, arg4) {
        if (arguments.length === 1 && typeof arg1 === "function") return createAction(arg1.name || "<unnamed action>", arg1);
        if (arguments.length === 2 && typeof arg2 === "function") return createAction(arg1, arg2);
        if (arguments.length === 1 && typeof arg1 === "string") return namedActionDecorator(arg1);
        return namedActionDecorator(arg2).apply(null, arguments);
    }

    exports.action = action;

    function namedActionDecorator(name) {
        return function (target, prop, descriptor) {
            if (descriptor && typeof descriptor.value === "function") {
                descriptor.value = createAction(name, descriptor.value);
                descriptor.enumerable = false;
                descriptor.configurable = true;
                return descriptor;
            }

            return actionFieldDecorator(name).apply(this, arguments);
        };
    }

    function runInAction(arg1, arg2, arg3) {
        var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
        var fn = typeof arg1 === "function" ? arg1 : arg2;
        var scope = typeof arg1 === "function" ? arg2 : arg3;
        invariant(typeof fn === "function", "`runInAction` expects a function");
        invariant(fn.length === 0, "`runInAction` expects a function without arguments");
        invariant(typeof actionName === "string" && actionName.length > 0, "actions should have valid names, got: '" + actionName + "'");
        return executeAction(actionName, fn, scope, undefined);
    }

    exports.runInAction = runInAction;

    function isAction(thing) {
        return typeof thing === "function" && thing.isMobxAction === true;
    }

    exports.isAction = isAction;

    function autorun(arg1, arg2, arg3) {
        var name, view, scope;

        if (typeof arg1 === "string") {
            name = arg1;
            view = arg2;
            scope = arg3;
        } else if (typeof arg1 === "function") {
            name = arg1.name || "Autorun@" + getNextId();
            view = arg1;
            scope = arg2;
        }

        assertUnwrapped(view, "autorun methods cannot have modifiers");
        invariant(typeof view === "function", "autorun expects a function");
        invariant(isAction(view) === false, "Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.");
        if (scope) view = view.bind(scope);
        var reaction = new Reaction(name, function () {
            this.track(reactionRunner);
        });

        function reactionRunner() {
            view(reaction);
        }

        reaction.schedule();
        return reaction.getDisposer();
    }

    exports.autorun = autorun;

    function when(arg1, arg2, arg3, arg4) {
        var name, predicate, effect, scope;

        if (typeof arg1 === "string") {
            name = arg1;
            predicate = arg2;
            effect = arg3;
            scope = arg4;
        } else if (typeof arg1 === "function") {
            name = "When@" + getNextId();
            predicate = arg1;
            effect = arg2;
            scope = arg3;
        }

        var disposer = autorun(name, function (r) {
            if (predicate.call(scope)) {
                r.dispose();
                var prevUntracked = untrackedStart();
                effect.call(scope);
                untrackedEnd(prevUntracked);
            }
        });
        return disposer;
    }

    exports.when = when;

    function autorunUntil(predicate, effect, scope) {
        deprecated("`autorunUntil` is deprecated, please use `when`.");
        return when.apply(null, arguments);
    }

    exports.autorunUntil = autorunUntil;

    function autorunAsync(arg1, arg2, arg3, arg4) {
        var name, func, delay, scope;

        if (typeof arg1 === "string") {
            name = arg1;
            func = arg2;
            delay = arg3;
            scope = arg4;
        } else if (typeof arg1 === "function") {
            name = arg1.name || "AutorunAsync@" + getNextId();
            func = arg1;
            delay = arg2;
            scope = arg3;
        }

        invariant(isAction(func) === false, "Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.");
        if (delay === void 0) delay = 1;
        if (scope) func = func.bind(scope);
        var isScheduled = false;
        var r = new Reaction(name, function () {
            if (!isScheduled) {
                isScheduled = true;
                setTimeout(function () {
                    isScheduled = false;
                    if (!r.isDisposed) r.track(reactionRunner);
                }, delay);
            }
        });

        function reactionRunner() {
            func(r);
        }

        r.schedule();
        return r.getDisposer();
    }

    exports.autorunAsync = autorunAsync;

    function reaction(arg1, arg2, arg3, arg4, arg5, arg6) {
        var name, expression, effect, fireImmediately, delay, scope;

        if (typeof arg1 === "string") {
            name = arg1;
            expression = arg2;
            effect = arg3;
            fireImmediately = arg4;
            delay = arg5;
            scope = arg6;
        } else {
            name = arg1.name || arg2.name || "Reaction@" + getNextId();
            expression = arg1;
            effect = arg2;
            fireImmediately = arg3;
            delay = arg4;
            scope = arg5;
        }

        if (fireImmediately === void 0) fireImmediately = false;
        if (delay === void 0) delay = 0;

        var _a = getValueModeFromValue(expression, ValueMode.Reference),
            valueMode = _a[0],
            unwrappedExpression = _a[1];

        var compareStructural = valueMode === ValueMode.Structure;

        if (scope) {
            unwrappedExpression = unwrappedExpression.bind(scope);
            effect = action(name, effect.bind(scope));
        }

        var firstTime = true;
        var isScheduled = false;
        var nextValue = undefined;
        var r = new Reaction(name, function () {
            if (delay < 1) {
                reactionRunner();
            } else if (!isScheduled) {
                isScheduled = true;
                setTimeout(function () {
                    isScheduled = false;
                    reactionRunner();
                }, delay);
            }
        });

        function reactionRunner() {
            if (r.isDisposed) return;
            var changed = false;
            r.track(function () {
                var v = unwrappedExpression(r);
                changed = valueDidChange(compareStructural, nextValue, v);
                nextValue = v;
            });
            if (firstTime && fireImmediately) effect(nextValue, r);
            if (!firstTime && changed === true) effect(nextValue, r);
            if (firstTime) firstTime = false;
        }

        r.schedule();
        return r.getDisposer();
    }

    exports.reaction = reaction;
    var computedDecorator = createClassPropertyDecorator(function (target, name, _, decoratorArgs, originalDescriptor) {
        invariant(typeof originalDescriptor !== "undefined", "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.");
        var baseValue = originalDescriptor.get;
        var setter = originalDescriptor.set;
        invariant(typeof baseValue === "function", "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'");
        var compareStructural = false;
        if (decoratorArgs && decoratorArgs.length === 1 && decoratorArgs[0].asStructure === true) compareStructural = true;
        var adm = asObservableObject(target, undefined, ValueMode.Recursive);
        defineObservableProperty(adm, name, compareStructural ? asStructure(baseValue) : baseValue, false, setter);
    }, function (name) {
        var observable = this.$mobx.values[name];
        if (observable === undefined) return undefined;
        return observable.get();
    }, function (name, value) {
        this.$mobx.values[name].set(value);
    }, false, true);

    function computed(targetOrExpr, keyOrScopeOrSetter, baseDescriptor, options) {
        if ((typeof targetOrExpr === "function" || isModifierWrapper(targetOrExpr)) && arguments.length < 3) {
            if (typeof keyOrScopeOrSetter === "function") return computedExpr(targetOrExpr, keyOrScopeOrSetter, undefined);else return computedExpr(targetOrExpr, undefined, keyOrScopeOrSetter);
        }

        return computedDecorator.apply(null, arguments);
    }

    exports.computed = computed;

    function computedExpr(expr, setter, scope) {
        var _a = getValueModeFromValue(expr, ValueMode.Recursive),
            mode = _a[0],
            value = _a[1];

        return new ComputedValue(value, scope, mode === ValueMode.Structure, value.name, setter);
    }

    function createTransformer(transformer, onCleanup) {
        invariant(typeof transformer === "function" && transformer.length === 1, "createTransformer expects a function that accepts one argument");
        var objectCache = {};
        var resetId = globalState.resetId;

        var Transformer = function (_super) {
            __extends(Transformer, _super);

            function Transformer(sourceIdentifier, sourceObject) {
                _super.call(this, function () {
                    return transformer(sourceObject);
                }, null, false, "Transformer-" + transformer.name + "-" + sourceIdentifier, undefined);

                this.sourceIdentifier = sourceIdentifier;
                this.sourceObject = sourceObject;
            }

            Transformer.prototype.onBecomeUnobserved = function () {
                var lastValue = this.value;

                _super.prototype.onBecomeUnobserved.call(this);

                delete objectCache[this.sourceIdentifier];
                if (onCleanup) onCleanup(lastValue, this.sourceObject);
            };

            return Transformer;
        }(ComputedValue);

        return function (object) {
            if (resetId !== globalState.resetId) {
                objectCache = {};
                resetId = globalState.resetId;
            }

            var identifier = getMemoizationId(object);
            var reactiveTransformer = objectCache[identifier];
            if (reactiveTransformer) return reactiveTransformer.get();
            reactiveTransformer = objectCache[identifier] = new Transformer(identifier, object);
            return reactiveTransformer.get();
        };
    }

    exports.createTransformer = createTransformer;

    function getMemoizationId(object) {
        if (object === null || typeof object !== "object") throw new Error("[mobx] transform expected some kind of object, got: " + object);
        var tid = object.$transformId;

        if (tid === undefined) {
            tid = getNextId();
            addHiddenProp(object, "$transformId", tid);
        }

        return tid;
    }

    function expr(expr, scope) {
        if (!isComputingDerivation()) console.warn("[mobx.expr] 'expr' should only be used inside other reactive functions.");
        return computed(expr, scope).get();
    }

    exports.expr = expr;

    function extendObservable(target) {
        var properties = [];

        for (var _i = 1; _i < arguments.length; _i++) {
            properties[_i - 1] = arguments[_i];
        }

        invariant(arguments.length >= 2, "extendObservable expected 2 or more arguments");
        invariant(typeof target === "object", "extendObservable expects an object as first argument");
        invariant(!isObservableMap(target), "extendObservable should not be used on maps, use map.merge instead");
        properties.forEach(function (propSet) {
            invariant(typeof propSet === "object", "all arguments of extendObservable should be objects");
            invariant(!isObservable(propSet), "extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540");
            extendObservableHelper(target, propSet, ValueMode.Recursive, null);
        });
        return target;
    }

    exports.extendObservable = extendObservable;

    function extendObservableHelper(target, properties, mode, name) {
        var adm = asObservableObject(target, name, mode);

        for (var key in properties) {
            if (hasOwnProperty(properties, key)) {
                if (target === properties && !isPropertyConfigurable(target, key)) continue;
                var descriptor = Object.getOwnPropertyDescriptor(properties, key);
                setObservableObjectInstanceProperty(adm, key, descriptor);
            }
        }

        return target;
    }

    function getDependencyTree(thing, property) {
        return nodeToDependencyTree(getAtom(thing, property));
    }

    function nodeToDependencyTree(node) {
        var result = {
            name: node.name
        };
        if (node.observing && node.observing.length > 0) result.dependencies = unique(node.observing).map(nodeToDependencyTree);
        return result;
    }

    function getObserverTree(thing, property) {
        return nodeToObserverTree(getAtom(thing, property));
    }

    function nodeToObserverTree(node) {
        var result = {
            name: node.name
        };
        if (hasObservers(node)) result.observers = getObservers(node).map(nodeToObserverTree);
        return result;
    }

    function intercept(thing, propOrHandler, handler) {
        if (typeof handler === "function") return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);
    }

    exports.intercept = intercept;

    function interceptInterceptable(thing, handler) {
        if (isPlainObject(thing) && !isObservableObject(thing)) {
            deprecated("Passing plain objects to intercept / observe is deprecated and will be removed in 3.0");
            return getAdministration(observable(thing)).intercept(handler);
        }

        return getAdministration(thing).intercept(handler);
    }

    function interceptProperty(thing, property, handler) {
        if (isPlainObject(thing) && !isObservableObject(thing)) {
            deprecated("Passing plain objects to intercept / observe is deprecated and will be removed in 3.0");
            extendObservable(thing, {
                property: thing[property]
            });
            return interceptProperty(thing, property, handler);
        }

        return getAdministration(thing, property).intercept(handler);
    }

    function isComputed(value, property) {
        if (value === null || value === undefined) return false;

        if (property !== undefined) {
            if (isObservableObject(value) === false) return false;
            var atom = getAtom(value, property);
            return isComputedValue(atom);
        }

        return isComputedValue(value);
    }

    exports.isComputed = isComputed;

    function isObservable(value, property) {
        if (value === null || value === undefined) return false;

        if (property !== undefined) {
            if (isObservableArray(value) || isObservableMap(value)) throw new Error("[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");else if (isObservableObject(value)) {
                var o = value.$mobx;
                return o.values && !!o.values[property];
            }
            return false;
        }

        return isObservableObject(value) || !!value.$mobx || isAtom(value) || isReaction(value) || isComputedValue(value);
    }

    exports.isObservable = isObservable;
    var decoratorImpl = createClassPropertyDecorator(function (target, name, baseValue) {
        var prevA = allowStateChangesStart(true);
        if (typeof baseValue === "function") baseValue = asReference(baseValue);
        var adm = asObservableObject(target, undefined, ValueMode.Recursive);
        defineObservableProperty(adm, name, baseValue, true, undefined);
        allowStateChangesEnd(prevA);
    }, function (name) {
        var observable = this.$mobx.values[name];
        if (observable === undefined) return undefined;
        return observable.get();
    }, function (name, value) {
        setPropertyValue(this, name, value);
    }, true, false);

    function observableDecorator(target, key, baseDescriptor) {
        invariant(arguments.length >= 2 && arguments.length <= 3, "Illegal decorator config", key);
        assertPropertyConfigurable(target, key);
        invariant(!baseDescriptor || !baseDescriptor.get, "@observable can not be used on getters, use @computed instead");
        return decoratorImpl.apply(null, arguments);
    }

    function observable(v, keyOrScope) {
        if (v === void 0) {
            v = undefined;
        }

        if (typeof arguments[1] === "string") return observableDecorator.apply(null, arguments);
        invariant(arguments.length < 3, "observable expects zero, one or two arguments");
        if (isObservable(v)) return v;

        var _a = getValueModeFromValue(v, ValueMode.Recursive),
            mode = _a[0],
            value = _a[1];

        var sourceType = mode === ValueMode.Reference ? ValueType.Reference : getTypeOfValue(value);

        switch (sourceType) {
            case ValueType.Array:
            case ValueType.PlainObject:
                return makeChildObservable(value, mode);

            case ValueType.Reference:
            case ValueType.ComplexObject:
                return new ObservableValue(value, mode);

            case ValueType.ComplexFunction:
                throw new Error("[mobx.observable] To be able to make a function reactive it should not have arguments. If you need an observable reference to a function, use `observable(asReference(f))`");

            case ValueType.ViewFunction:
                deprecated("Use `computed(expr)` instead of `observable(expr)`");
                return computed(v, keyOrScope);
        }

        invariant(false, "Illegal State");
    }

    exports.observable = observable;
    var ValueType;

    (function (ValueType) {
        ValueType[ValueType["Reference"] = 0] = "Reference";
        ValueType[ValueType["PlainObject"] = 1] = "PlainObject";
        ValueType[ValueType["ComplexObject"] = 2] = "ComplexObject";
        ValueType[ValueType["Array"] = 3] = "Array";
        ValueType[ValueType["ViewFunction"] = 4] = "ViewFunction";
        ValueType[ValueType["ComplexFunction"] = 5] = "ComplexFunction";
    })(ValueType || (ValueType = {}));

    function getTypeOfValue(value) {
        if (value === null || value === undefined) return ValueType.Reference;
        if (typeof value === "function") return value.length ? ValueType.ComplexFunction : ValueType.ViewFunction;
        if (isArrayLike(value)) return ValueType.Array;
        if (typeof value === "object") return isPlainObject(value) ? ValueType.PlainObject : ValueType.ComplexObject;
        return ValueType.Reference;
    }

    function observe(thing, propOrCb, cbOrFire, fireImmediately) {
        if (typeof cbOrFire === "function") return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);
    }

    exports.observe = observe;

    function observeObservable(thing, listener, fireImmediately) {
        if (isPlainObject(thing) && !isObservableObject(thing)) {
            deprecated("Passing plain objects to intercept / observe is deprecated and will be removed in 3.0");
            return getAdministration(observable(thing)).observe(listener, fireImmediately);
        }

        return getAdministration(thing).observe(listener, fireImmediately);
    }

    function observeObservableProperty(thing, property, listener, fireImmediately) {
        if (isPlainObject(thing) && !isObservableObject(thing)) {
            deprecated("Passing plain objects to intercept / observe is deprecated and will be removed in 3.0");
            extendObservable(thing, {
                property: thing[property]
            });
            return observeObservableProperty(thing, property, listener, fireImmediately);
        }

        return getAdministration(thing, property).observe(listener, fireImmediately);
    }

    function toJS(source, detectCycles, __alreadySeen) {
        if (detectCycles === void 0) {
            detectCycles = true;
        }

        if (__alreadySeen === void 0) {
            __alreadySeen = null;
        }

        function cache(value) {
            if (detectCycles) __alreadySeen.push([source, value]);
            return value;
        }

        if (isObservable(source)) {
            if (detectCycles && __alreadySeen === null) __alreadySeen = [];

            if (detectCycles && source !== null && typeof source === "object") {
                for (var i = 0, l = __alreadySeen.length; i < l; i++) {
                    if (__alreadySeen[i][0] === source) return __alreadySeen[i][1];
                }
            }

            if (isObservableArray(source)) {
                var res = cache([]);
                var toAdd = source.map(function (value) {
                    return toJS(value, detectCycles, __alreadySeen);
                });
                res.length = toAdd.length;

                for (var i = 0, l = toAdd.length; i < l; i++) {
                    res[i] = toAdd[i];
                }

                return res;
            }

            if (isObservableObject(source)) {
                var res = cache({});

                for (var key in source) {
                    res[key] = toJS(source[key], detectCycles, __alreadySeen);
                }

                return res;
            }

            if (isObservableMap(source)) {
                var res_1 = cache({});
                source.forEach(function (value, key) {
                    return res_1[key] = toJS(value, detectCycles, __alreadySeen);
                });
                return res_1;
            }

            if (isObservableValue(source)) return toJS(source.get(), detectCycles, __alreadySeen);
        }

        return source;
    }

    exports.toJS = toJS;

    function toJSlegacy(source, detectCycles, __alreadySeen) {
        if (detectCycles === void 0) {
            detectCycles = true;
        }

        if (__alreadySeen === void 0) {
            __alreadySeen = null;
        }

        deprecated("toJSlegacy is deprecated and will be removed in the next major. Use `toJS` instead. See #566");

        function cache(value) {
            if (detectCycles) __alreadySeen.push([source, value]);
            return value;
        }

        if (source instanceof Date || source instanceof RegExp) return source;
        if (detectCycles && __alreadySeen === null) __alreadySeen = [];

        if (detectCycles && source !== null && typeof source === "object") {
            for (var i = 0, l = __alreadySeen.length; i < l; i++) {
                if (__alreadySeen[i][0] === source) return __alreadySeen[i][1];
            }
        }

        if (!source) return source;

        if (isArrayLike(source)) {
            var res = cache([]);
            var toAdd = source.map(function (value) {
                return toJSlegacy(value, detectCycles, __alreadySeen);
            });
            res.length = toAdd.length;

            for (var i = 0, l = toAdd.length; i < l; i++) {
                res[i] = toAdd[i];
            }

            return res;
        }

        if (isObservableMap(source)) {
            var res_2 = cache({});
            source.forEach(function (value, key) {
                return res_2[key] = toJSlegacy(value, detectCycles, __alreadySeen);
            });
            return res_2;
        }

        if (isObservableValue(source)) return toJSlegacy(source.get(), detectCycles, __alreadySeen);

        if (typeof source === "object") {
            var res = cache({});

            for (var key in source) {
                res[key] = toJSlegacy(source[key], detectCycles, __alreadySeen);
            }

            return res;
        }

        return source;
    }

    exports.toJSlegacy = toJSlegacy;

    function toJSON(source, detectCycles, __alreadySeen) {
        if (detectCycles === void 0) {
            detectCycles = true;
        }

        if (__alreadySeen === void 0) {
            __alreadySeen = null;
        }

        deprecated("toJSON is deprecated. Use toJS instead");
        return toJSlegacy.apply(null, arguments);
    }

    exports.toJSON = toJSON;

    function log(msg) {
        console.log(msg);
        return msg;
    }

    function whyRun(thing, prop) {
        switch (arguments.length) {
            case 0:
                thing = globalState.trackingDerivation;
                if (!thing) return log("whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested it's value.");
                break;

            case 2:
                thing = getAtom(thing, prop);
                break;
        }

        thing = getAtom(thing);
        if (isComputedValue(thing)) return log(thing.whyRun());else if (isReaction(thing)) return log(thing.whyRun());else invariant(false, "whyRun can only be used on reactions and computed values");
    }

    exports.whyRun = whyRun;

    function createAction(actionName, fn) {
        invariant(typeof fn === "function", "`action` can only be invoked on functions");
        invariant(typeof actionName === "string" && actionName.length > 0, "actions should have valid names, got: '" + actionName + "'");

        var res = function res() {
            return executeAction(actionName, fn, this, arguments);
        };

        res.isMobxAction = true;
        return res;
    }

    function executeAction(actionName, fn, scope, args) {
        invariant(!isComputedValue(globalState.trackingDerivation), "Computed values or transformers should not invoke actions or trigger other side effects");
        var notifySpy = isSpyEnabled();
        var startTime;

        if (notifySpy) {
            startTime = Date.now();
            var l = args && args.length || 0;
            var flattendArgs = new Array(l);
            if (l > 0) for (var i = 0; i < l; i++) {
                flattendArgs[i] = args[i];
            }
            spyReportStart({
                type: "action",
                name: actionName,
                fn: fn,
                target: scope,
                arguments: flattendArgs
            });
        }

        var prevUntracked = untrackedStart();
        transactionStart(actionName, scope, false);
        var prevAllowStateChanges = allowStateChangesStart(true);

        try {
            return fn.apply(scope, args);
        } finally {
            allowStateChangesEnd(prevAllowStateChanges);
            transactionEnd(false);
            untrackedEnd(prevUntracked);
            if (notifySpy) spyReportEnd({
                time: Date.now() - startTime
            });
        }
    }

    function useStrict(strict) {
        if (arguments.length === 0) {
            deprecated("`useStrict` without arguments is deprecated, use `isStrictModeEnabled()` instead");
            return globalState.strictMode;
        } else {
            invariant(globalState.trackingDerivation === null, "It is not allowed to set `useStrict` when a derivation is running");
            globalState.strictMode = strict;
            globalState.allowStateChanges = !strict;
        }
    }

    exports.useStrict = useStrict;

    function isStrictModeEnabled() {
        return globalState.strictMode;
    }

    exports.isStrictModeEnabled = isStrictModeEnabled;

    function allowStateChanges(allowStateChanges, func) {
        var prev = allowStateChangesStart(allowStateChanges);
        var res = func();
        allowStateChangesEnd(prev);
        return res;
    }

    function allowStateChangesStart(allowStateChanges) {
        var prev = globalState.allowStateChanges;
        globalState.allowStateChanges = allowStateChanges;
        return prev;
    }

    function allowStateChangesEnd(prev) {
        globalState.allowStateChanges = prev;
    }

    var BaseAtom = function () {
        function BaseAtom(name) {
            if (name === void 0) {
                name = "Atom@" + getNextId();
            }

            this.name = name;
            this.isPendingUnobservation = true;
            this.observers = [];
            this.observersIndexes = {};
            this.diffValue = 0;
            this.lastAccessedBy = 0;
            this.lowestObserverState = IDerivationState.NOT_TRACKING;
        }

        BaseAtom.prototype.onBecomeUnobserved = function () {};

        BaseAtom.prototype.reportObserved = function () {
            reportObserved(this);
        };

        BaseAtom.prototype.reportChanged = function () {
            transactionStart("propagatingAtomChange", null, false);
            propagateChanged(this);
            transactionEnd(false);
        };

        BaseAtom.prototype.toString = function () {
            return this.name;
        };

        return BaseAtom;
    }();

    exports.BaseAtom = BaseAtom;

    var Atom = function (_super) {
        __extends(Atom, _super);

        function Atom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
            if (name === void 0) {
                name = "Atom@" + getNextId();
            }

            if (onBecomeObservedHandler === void 0) {
                onBecomeObservedHandler = noop;
            }

            if (onBecomeUnobservedHandler === void 0) {
                onBecomeUnobservedHandler = noop;
            }

            _super.call(this, name);

            this.name = name;
            this.onBecomeObservedHandler = onBecomeObservedHandler;
            this.onBecomeUnobservedHandler = onBecomeUnobservedHandler;
            this.isPendingUnobservation = false;
            this.isBeingTracked = false;
        }

        Atom.prototype.reportObserved = function () {
            startBatch();

            _super.prototype.reportObserved.call(this);

            if (!this.isBeingTracked) {
                this.isBeingTracked = true;
                this.onBecomeObservedHandler();
            }

            endBatch();
            return !!globalState.trackingDerivation;
        };

        Atom.prototype.onBecomeUnobserved = function () {
            this.isBeingTracked = false;
            this.onBecomeUnobservedHandler();
        };

        return Atom;
    }(BaseAtom);

    exports.Atom = Atom;
    var isAtom = createInstanceofPredicate("Atom", BaseAtom);

    var ComputedValue = function () {
        function ComputedValue(derivation, scope, compareStructural, name, setter) {
            this.derivation = derivation;
            this.scope = scope;
            this.compareStructural = compareStructural;
            this.dependenciesState = IDerivationState.NOT_TRACKING;
            this.observing = [];
            this.newObserving = null;
            this.isPendingUnobservation = false;
            this.observers = [];
            this.observersIndexes = {};
            this.diffValue = 0;
            this.runId = 0;
            this.lastAccessedBy = 0;
            this.lowestObserverState = IDerivationState.UP_TO_DATE;
            this.unboundDepsCount = 0;
            this.__mapid = "#" + getNextId();
            this.value = undefined;
            this.isComputing = false;
            this.isRunningSetter = false;
            this.name = name || "ComputedValue@" + getNextId();
            if (setter) this.setter = createAction(name + "-setter", setter);
        }

        ComputedValue.prototype.peek = function () {
            this.isComputing = true;
            var prevAllowStateChanges = allowStateChangesStart(false);
            var res = this.derivation.call(this.scope);
            allowStateChangesEnd(prevAllowStateChanges);
            this.isComputing = false;
            return res;
        };

        ;

        ComputedValue.prototype.peekUntracked = function () {
            var hasError = true;

            try {
                var res = this.peek();
                hasError = false;
                return res;
            } finally {
                if (hasError) handleExceptionInDerivation(this);
            }
        };

        ComputedValue.prototype.onBecomeStale = function () {
            propagateMaybeChanged(this);
        };

        ComputedValue.prototype.onBecomeUnobserved = function () {
            invariant(this.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row");
            clearObserving(this);
            this.value = undefined;
        };

        ComputedValue.prototype.get = function () {
            invariant(!this.isComputing, "Cycle detected in computation " + this.name, this.derivation);
            startBatch();

            if (globalState.inBatch === 1) {
                if (shouldCompute(this)) this.value = this.peekUntracked();
            } else {
                reportObserved(this);
                if (shouldCompute(this)) if (this.trackAndCompute()) propagateChangeConfirmed(this);
            }

            var result = this.value;
            endBatch();
            return result;
        };

        ComputedValue.prototype.recoverFromError = function () {
            this.isComputing = false;
        };

        ComputedValue.prototype.set = function (value) {
            if (this.setter) {
                invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
                this.isRunningSetter = true;

                try {
                    this.setter.call(this.scope, value);
                } finally {
                    this.isRunningSetter = false;
                }
            } else invariant(false, "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
        };

        ComputedValue.prototype.trackAndCompute = function () {
            if (isSpyEnabled()) {
                spyReport({
                    object: this,
                    type: "compute",
                    fn: this.derivation,
                    target: this.scope
                });
            }

            var oldValue = this.value;
            var newValue = this.value = trackDerivedFunction(this, this.peek);
            return valueDidChange(this.compareStructural, newValue, oldValue);
        };

        ComputedValue.prototype.observe = function (listener, fireImmediately) {
            var _this = this;

            var firstTime = true;
            var prevValue = undefined;
            return autorun(function () {
                var newValue = _this.get();

                if (!firstTime || fireImmediately) {
                    var prevU = untrackedStart();
                    listener(newValue, prevValue);
                    untrackedEnd(prevU);
                }

                firstTime = false;
                prevValue = newValue;
            });
        };

        ComputedValue.prototype.toJSON = function () {
            return this.get();
        };

        ComputedValue.prototype.toString = function () {
            return this.name + "[" + this.derivation.toString() + "]";
        };

        ComputedValue.prototype.whyRun = function () {
            var isTracking = Boolean(globalState.trackingDerivation);
            var observing = unique(this.isComputing ? this.newObserving : this.observing).map(function (dep) {
                return dep.name;
            });
            var observers = unique(getObservers(this).map(function (dep) {
                return dep.name;
            }));
            return "\nWhyRun? computation '" + this.name + "':\n * Running because: " + (isTracking ? "[active] the value of this computation is needed by a reaction" : this.isComputing ? "[get] The value of this computed was requested outside a reaction" : "[idle] not running at the moment") + "\n" + (this.dependenciesState === IDerivationState.NOT_TRACKING ? " * This computation is suspended (not in use by any reaction) and won't run automatically.\n\tDidn't expect this computation to be suspended at this point?\n\t  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\n\t  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).\n" : " * This computation will re-run if any of the following observables changes:\n    " + joinStrings(observing) + "\n    " + (this.isComputing && isTracking ? " (... or any observable accessed during the remainder of the current run)" : "") + "\n\tMissing items in this list?\n\t  1. Check whether all used values are properly marked as observable (use isObservable to verify)\n\t  2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\n  * If the outcome of this computation changes, the following observers will be re-run:\n    " + joinStrings(observers) + "\n");
        };

        return ComputedValue;
    }();

    var isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue);
    var IDerivationState;

    (function (IDerivationState) {
        IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
        IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
        IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
        IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
    })(IDerivationState || (IDerivationState = {}));

    exports.IDerivationState = IDerivationState;

    function shouldCompute(derivation) {
        switch (derivation.dependenciesState) {
            case IDerivationState.UP_TO_DATE:
                return false;

            case IDerivationState.NOT_TRACKING:
            case IDerivationState.STALE:
                return true;

            case IDerivationState.POSSIBLY_STALE:
                {
                    var hasError = true;
                    var prevUntracked = untrackedStart();

                    try {
                        var obs = derivation.observing,
                            l = obs.length;

                        for (var i = 0; i < l; i++) {
                            var obj = obs[i];

                            if (isComputedValue(obj)) {
                                obj.get();

                                if (derivation.dependenciesState === IDerivationState.STALE) {
                                    hasError = false;
                                    untrackedEnd(prevUntracked);
                                    return true;
                                }
                            }
                        }

                        hasError = false;
                        changeDependenciesStateTo0(derivation);
                        untrackedEnd(prevUntracked);
                        return false;
                    } finally {
                        if (hasError) {
                            changeDependenciesStateTo0(derivation);
                        }
                    }
                }
        }
    }

    function isComputingDerivation() {
        return globalState.trackingDerivation !== null;
    }

    function checkIfStateModificationsAreAllowed() {
        if (!globalState.allowStateChanges) {
            invariant(false, globalState.strictMode ? "It is not allowed to create or change state outside an `action` when MobX is in strict mode. Wrap the current method in `action` if this state change is intended" : "It is not allowed to change the state when a computed value or transformer is being evaluated. Use 'autorun' to create reactive functions with side-effects.");
        }
    }

    function trackDerivedFunction(derivation, f) {
        changeDependenciesStateTo0(derivation);
        derivation.newObserving = new Array(derivation.observing.length + 100);
        derivation.unboundDepsCount = 0;
        derivation.runId = ++globalState.runId;
        var prevTracking = globalState.trackingDerivation;
        globalState.trackingDerivation = derivation;
        var hasException = true;
        var result;

        try {
            result = f.call(derivation);
            hasException = false;
        } finally {
            if (hasException) {
                handleExceptionInDerivation(derivation);
            } else {
                globalState.trackingDerivation = prevTracking;
                bindDependencies(derivation);
            }
        }

        return result;
    }

    function handleExceptionInDerivation(derivation) {
        var message = "[mobx] An uncaught exception occurred while calculating your computed value, autorun or transformer. Or inside the render() method of an observer based React component. These functions should never throw exceptions as MobX will not always be able to recover from them. " + ("Please fix the error reported after this message or enable 'Pause on (caught) exceptions' in your debugger to find the root cause. In: '" + derivation.name + "'. ") + "For more details see https://github.com/mobxjs/mobx/issues/462";

        if (isSpyEnabled()) {
            spyReport({
                type: "error",
                message: message
            });
        }

        console.warn(message);
        changeDependenciesStateTo0(derivation);
        derivation.newObserving = null;
        derivation.unboundDepsCount = 0;
        derivation.recoverFromError();
        endBatch();
        resetGlobalState();
    }

    function bindDependencies(derivation) {
        var prevObserving = derivation.observing;
        var observing = derivation.observing = derivation.newObserving;
        derivation.newObserving = null;
        var i0 = 0,
            l = derivation.unboundDepsCount;

        for (var i = 0; i < l; i++) {
            var dep = observing[i];

            if (dep.diffValue === 0) {
                dep.diffValue = 1;
                if (i0 !== i) observing[i0] = dep;
                i0++;
            }
        }

        observing.length = i0;
        l = prevObserving.length;

        while (l--) {
            var dep = prevObserving[l];

            if (dep.diffValue === 0) {
                removeObserver(dep, derivation);
            }

            dep.diffValue = 0;
        }

        while (i0--) {
            var dep = observing[i0];

            if (dep.diffValue === 1) {
                dep.diffValue = 0;
                addObserver(dep, derivation);
            }
        }
    }

    function clearObserving(derivation) {
        var obs = derivation.observing;
        var i = obs.length;

        while (i--) {
            removeObserver(obs[i], derivation);
        }

        derivation.dependenciesState = IDerivationState.NOT_TRACKING;
        obs.length = 0;
    }

    function untracked(action) {
        var prev = untrackedStart();
        var res = action();
        untrackedEnd(prev);
        return res;
    }

    exports.untracked = untracked;

    function untrackedStart() {
        var prev = globalState.trackingDerivation;
        globalState.trackingDerivation = null;
        return prev;
    }

    function untrackedEnd(prev) {
        globalState.trackingDerivation = prev;
    }

    function changeDependenciesStateTo0(derivation) {
        if (derivation.dependenciesState === IDerivationState.UP_TO_DATE) return;
        derivation.dependenciesState = IDerivationState.UP_TO_DATE;
        var obs = derivation.observing;
        var i = obs.length;

        while (i--) {
            obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;
        }
    }

    var persistentKeys = ["mobxGuid", "resetId", "spyListeners", "strictMode", "runId"];

    var MobXGlobals = function () {
        function MobXGlobals() {
            this.version = 4;
            this.trackingDerivation = null;
            this.runId = 0;
            this.mobxGuid = 0;
            this.inTransaction = 0;
            this.isRunningReactions = false;
            this.inBatch = 0;
            this.pendingUnobservations = [];
            this.pendingReactions = [];
            this.allowStateChanges = true;
            this.strictMode = false;
            this.resetId = 0;
            this.spyListeners = [];
        }

        return MobXGlobals;
    }();

    var globalState = function () {
        var res = new MobXGlobals();
        if (global.__mobservableTrackingStack || global.__mobservableViewStack) throw new Error("[mobx] An incompatible version of mobservable is already loaded.");
        if (global.__mobxGlobal && global.__mobxGlobal.version !== res.version) throw new Error("[mobx] An incompatible version of mobx is already loaded.");
        if (global.__mobxGlobal) return global.__mobxGlobal;
        return global.__mobxGlobal = res;
    }();

    function registerGlobals() {}

    function resetGlobalState() {
        globalState.resetId++;
        var defaultGlobals = new MobXGlobals();

        for (var key in defaultGlobals) {
            if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];
        }

        globalState.allowStateChanges = !globalState.strictMode;
    }

    function hasObservers(observable) {
        return observable.observers && observable.observers.length > 0;
    }

    function getObservers(observable) {
        return observable.observers;
    }

    function invariantObservers(observable) {
        var list = observable.observers;
        var map = observable.observersIndexes;
        var l = list.length;

        for (var i = 0; i < l; i++) {
            var id = list[i].__mapid;

            if (i) {
                invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list");
            } else {
                invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldnt be held in map.");
            }
        }

        invariant(list.length === 0 || Object.keys(map).length === list.length - 1, "INTERNAL ERROR there is no junk in map");
    }

    function addObserver(observable, node) {
        var l = observable.observers.length;

        if (l) {
            observable.observersIndexes[node.__mapid] = l;
        }

        observable.observers[l] = node;
        if (observable.lowestObserverState > node.dependenciesState) observable.lowestObserverState = node.dependenciesState;
    }

    function removeObserver(observable, node) {
        if (observable.observers.length === 1) {
            observable.observers.length = 0;
            queueForUnobservation(observable);
        } else {
            var list = observable.observers;
            var map_1 = observable.observersIndexes;
            var filler = list.pop();

            if (filler !== node) {
                var index = map_1[node.__mapid] || 0;

                if (index) {
                    map_1[filler.__mapid] = index;
                } else {
                    delete map_1[filler.__mapid];
                }

                list[index] = filler;
            }

            delete map_1[node.__mapid];
        }
    }

    function queueForUnobservation(observable) {
        if (!observable.isPendingUnobservation) {
            observable.isPendingUnobservation = true;
            globalState.pendingUnobservations.push(observable);
        }
    }

    function startBatch() {
        globalState.inBatch++;
    }

    function endBatch() {
        if (globalState.inBatch === 1) {
            var list = globalState.pendingUnobservations;

            for (var i = 0; i < list.length; i++) {
                var observable_1 = list[i];
                observable_1.isPendingUnobservation = false;

                if (observable_1.observers.length === 0) {
                    observable_1.onBecomeUnobserved();
                }
            }

            globalState.pendingUnobservations = [];
        }

        globalState.inBatch--;
    }

    function reportObserved(observable) {
        var derivation = globalState.trackingDerivation;

        if (derivation !== null) {
            if (derivation.runId !== observable.lastAccessedBy) {
                observable.lastAccessedBy = derivation.runId;
                derivation.newObserving[derivation.unboundDepsCount++] = observable;
            }
        } else if (observable.observers.length === 0) {
            queueForUnobservation(observable);
        }
    }

    function invariantLOS(observable, msg) {
        var min = getObservers(observable).reduce(function (a, b) {
            return Math.min(a, b.dependenciesState);
        }, 2);
        if (min >= observable.lowestObserverState) return;
        throw new Error("lowestObserverState is wrong for " + msg + " because " + min + " < " + observable.lowestObserverState);
    }

    function propagateChanged(observable) {
        if (observable.lowestObserverState === IDerivationState.STALE) return;
        observable.lowestObserverState = IDerivationState.STALE;
        var observers = observable.observers;
        var i = observers.length;

        while (i--) {
            var d = observers[i];
            if (d.dependenciesState === IDerivationState.UP_TO_DATE) d.onBecomeStale();
            d.dependenciesState = IDerivationState.STALE;
        }
    }

    function propagateChangeConfirmed(observable) {
        if (observable.lowestObserverState === IDerivationState.STALE) return;
        observable.lowestObserverState = IDerivationState.STALE;
        var observers = observable.observers;
        var i = observers.length;

        while (i--) {
            var d = observers[i];
            if (d.dependenciesState === IDerivationState.POSSIBLY_STALE) d.dependenciesState = IDerivationState.STALE;else if (d.dependenciesState === IDerivationState.UP_TO_DATE) observable.lowestObserverState = IDerivationState.UP_TO_DATE;
        }
    }

    function propagateMaybeChanged(observable) {
        if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE) return;
        observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;
        var observers = observable.observers;
        var i = observers.length;

        while (i--) {
            var d = observers[i];

            if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
                d.dependenciesState = IDerivationState.POSSIBLY_STALE;
                d.onBecomeStale();
            }
        }
    }

    var Reaction = function () {
        function Reaction(name, onInvalidate) {
            if (name === void 0) {
                name = "Reaction@" + getNextId();
            }

            this.name = name;
            this.onInvalidate = onInvalidate;
            this.observing = [];
            this.newObserving = [];
            this.dependenciesState = IDerivationState.NOT_TRACKING;
            this.diffValue = 0;
            this.runId = 0;
            this.unboundDepsCount = 0;
            this.__mapid = "#" + getNextId();
            this.isDisposed = false;
            this._isScheduled = false;
            this._isTrackPending = false;
            this._isRunning = false;
        }

        Reaction.prototype.onBecomeStale = function () {
            this.schedule();
        };

        Reaction.prototype.schedule = function () {
            if (!this._isScheduled) {
                this._isScheduled = true;
                globalState.pendingReactions.push(this);
                startBatch();
                runReactions();
                endBatch();
            }
        };

        Reaction.prototype.isScheduled = function () {
            return this._isScheduled;
        };

        Reaction.prototype.runReaction = function () {
            if (!this.isDisposed) {
                this._isScheduled = false;

                if (shouldCompute(this)) {
                    this._isTrackPending = true;
                    this.onInvalidate();

                    if (this._isTrackPending && isSpyEnabled()) {
                        spyReport({
                            object: this,
                            type: "scheduled-reaction"
                        });
                    }
                }
            }
        };

        Reaction.prototype.track = function (fn) {
            startBatch();
            var notify = isSpyEnabled();
            var startTime;

            if (notify) {
                startTime = Date.now();
                spyReportStart({
                    object: this,
                    type: "reaction",
                    fn: fn
                });
            }

            this._isRunning = true;
            trackDerivedFunction(this, fn);
            this._isRunning = false;
            this._isTrackPending = false;

            if (this.isDisposed) {
                clearObserving(this);
            }

            if (notify) {
                spyReportEnd({
                    time: Date.now() - startTime
                });
            }

            endBatch();
        };

        Reaction.prototype.recoverFromError = function () {
            this._isRunning = false;
            this._isTrackPending = false;
        };

        Reaction.prototype.dispose = function () {
            if (!this.isDisposed) {
                this.isDisposed = true;

                if (!this._isRunning) {
                    startBatch();
                    clearObserving(this);
                    endBatch();
                }
            }
        };

        Reaction.prototype.getDisposer = function () {
            var r = this.dispose.bind(this);
            r.$mobx = this;
            return r;
        };

        Reaction.prototype.toString = function () {
            return "Reaction[" + this.name + "]";
        };

        Reaction.prototype.whyRun = function () {
            var observing = unique(this._isRunning ? this.newObserving : this.observing).map(function (dep) {
                return dep.name;
            });
            return "\nWhyRun? reaction '" + this.name + "':\n * Status: [" + (this.isDisposed ? "stopped" : this._isRunning ? "running" : this.isScheduled() ? "scheduled" : "idle") + "]\n * This reaction will re-run if any of the following observables changes:\n    " + joinStrings(observing) + "\n    " + (this._isRunning ? " (... or any observable accessed during the remainder of the current run)" : "") + "\n\tMissing items in this list?\n\t  1. Check whether all used values are properly marked as observable (use isObservable to verify)\n\t  2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\n";
        };

        return Reaction;
    }();

    exports.Reaction = Reaction;
    var MAX_REACTION_ITERATIONS = 100;

    var reactionScheduler = function reactionScheduler(f) {
        return f();
    };

    function runReactions() {
        if (globalState.isRunningReactions === true || globalState.inTransaction > 0) return;
        reactionScheduler(runReactionsHelper);
    }

    function runReactionsHelper() {
        globalState.isRunningReactions = true;
        var allReactions = globalState.pendingReactions;
        var iterations = 0;

        while (allReactions.length > 0) {
            if (++iterations === MAX_REACTION_ITERATIONS) {
                resetGlobalState();
                throw new Error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]));
            }

            var remainingReactions = allReactions.splice(0);

            for (var i = 0, l = remainingReactions.length; i < l; i++) {
                remainingReactions[i].runReaction();
            }
        }

        globalState.isRunningReactions = false;
    }

    var isReaction = createInstanceofPredicate("Reaction", Reaction);

    function setReactionScheduler(fn) {
        var baseScheduler = reactionScheduler;

        reactionScheduler = function reactionScheduler(f) {
            return fn(function () {
                return baseScheduler(f);
            });
        };
    }

    function isSpyEnabled() {
        return !!globalState.spyListeners.length;
    }

    function spyReport(event) {
        if (!globalState.spyListeners.length) return false;
        var listeners = globalState.spyListeners;

        for (var i = 0, l = listeners.length; i < l; i++) {
            listeners[i](event);
        }
    }

    function spyReportStart(event) {
        var change = objectAssign({}, event, {
            spyReportStart: true
        });
        spyReport(change);
    }

    var END_EVENT = {
        spyReportEnd: true
    };

    function spyReportEnd(change) {
        if (change) spyReport(objectAssign({}, change, END_EVENT));else spyReport(END_EVENT);
    }

    function spy(listener) {
        globalState.spyListeners.push(listener);
        return once(function () {
            var idx = globalState.spyListeners.indexOf(listener);
            if (idx !== -1) globalState.spyListeners.splice(idx, 1);
        });
    }

    exports.spy = spy;

    function trackTransitions(onReport) {
        deprecated("trackTransitions is deprecated. Use mobx.spy instead");

        if (typeof onReport === "boolean") {
            deprecated("trackTransitions only takes a single callback function. If you are using the mobx-react-devtools, please update them first");
            onReport = arguments[1];
        }

        if (!onReport) {
            deprecated("trackTransitions without callback has been deprecated and is a no-op now. If you are using the mobx-react-devtools, please update them first");
            return function () {};
        }

        return spy(onReport);
    }

    function transaction(action, thisArg, report) {
        if (thisArg === void 0) {
            thisArg = undefined;
        }

        if (report === void 0) {
            report = true;
        }

        transactionStart(action.name || "anonymous transaction", thisArg, report);

        try {
            return action.call(thisArg);
        } finally {
            transactionEnd(report);
        }
    }

    exports.transaction = transaction;

    function transactionStart(name, thisArg, report) {
        if (thisArg === void 0) {
            thisArg = undefined;
        }

        if (report === void 0) {
            report = true;
        }

        startBatch();
        globalState.inTransaction += 1;

        if (report && isSpyEnabled()) {
            spyReportStart({
                type: "transaction",
                target: thisArg,
                name: name
            });
        }
    }

    function transactionEnd(report) {
        if (report === void 0) {
            report = true;
        }

        if (--globalState.inTransaction === 0) {
            runReactions();
        }

        if (report && isSpyEnabled()) spyReportEnd();
        endBatch();
    }

    function hasInterceptors(interceptable) {
        return interceptable.interceptors && interceptable.interceptors.length > 0;
    }

    function registerInterceptor(interceptable, handler) {
        var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
        interceptors.push(handler);
        return once(function () {
            var idx = interceptors.indexOf(handler);
            if (idx !== -1) interceptors.splice(idx, 1);
        });
    }

    function interceptChange(interceptable, change) {
        var prevU = untrackedStart();

        try {
            var interceptors = interceptable.interceptors;

            for (var i = 0, l = interceptors.length; i < l; i++) {
                change = interceptors[i](change);
                invariant(!change || change.type, "Intercept handlers should return nothing or a change object");
                if (!change) break;
            }

            return change;
        } finally {
            untrackedEnd(prevU);
        }
    }

    function hasListeners(listenable) {
        return listenable.changeListeners && listenable.changeListeners.length > 0;
    }

    function registerListener(listenable, handler) {
        var listeners = listenable.changeListeners || (listenable.changeListeners = []);
        listeners.push(handler);
        return once(function () {
            var idx = listeners.indexOf(handler);
            if (idx !== -1) listeners.splice(idx, 1);
        });
    }

    function notifyListeners(listenable, change) {
        var prevU = untrackedStart();
        var listeners = listenable.changeListeners;
        if (!listeners) return;
        listeners = listeners.slice();

        for (var i = 0, l = listeners.length; i < l; i++) {
            if (Array.isArray(change)) {
                listeners[i].apply(null, change);
            } else {
                listeners[i](change);
            }
        }

        untrackedEnd(prevU);
    }

    var ValueMode;

    (function (ValueMode) {
        ValueMode[ValueMode["Recursive"] = 0] = "Recursive";
        ValueMode[ValueMode["Reference"] = 1] = "Reference";
        ValueMode[ValueMode["Structure"] = 2] = "Structure";
        ValueMode[ValueMode["Flat"] = 3] = "Flat";
    })(ValueMode || (ValueMode = {}));

    exports.ValueMode = ValueMode;

    function withModifier(modifier, value) {
        assertUnwrapped(value, "Modifiers are not allowed to be nested");
        return {
            mobxModifier: modifier,
            value: value
        };
    }

    function getModifier(value) {
        if (value) {
            return value.mobxModifier || null;
        }

        return null;
    }

    function asReference(value) {
        return withModifier(ValueMode.Reference, value);
    }

    exports.asReference = asReference;
    asReference.mobxModifier = ValueMode.Reference;

    function asStructure(value) {
        return withModifier(ValueMode.Structure, value);
    }

    exports.asStructure = asStructure;
    asStructure.mobxModifier = ValueMode.Structure;

    function asFlat(value) {
        return withModifier(ValueMode.Flat, value);
    }

    exports.asFlat = asFlat;
    asFlat.mobxModifier = ValueMode.Flat;

    function asMap(data, modifierFunc) {
        return map(data, modifierFunc);
    }

    exports.asMap = asMap;

    function getValueModeFromValue(value, defaultMode) {
        var mode = getModifier(value);
        if (mode) return [mode, value.value];
        return [defaultMode, value];
    }

    function getValueModeFromModifierFunc(func) {
        if (func === undefined) return ValueMode.Recursive;
        var mod = getModifier(func);
        invariant(mod !== null, "Cannot determine value mode from function. Please pass in one of these: mobx.asReference, mobx.asStructure or mobx.asFlat, got: " + func);
        return mod;
    }

    function isModifierWrapper(value) {
        return value.mobxModifier !== undefined;
    }

    function makeChildObservable(value, parentMode, name) {
        var childMode;
        if (isObservable(value)) return value;

        switch (parentMode) {
            case ValueMode.Reference:
                return value;

            case ValueMode.Flat:
                assertUnwrapped(value, "Items inside 'asFlat' cannot have modifiers");
                childMode = ValueMode.Reference;
                break;

            case ValueMode.Structure:
                assertUnwrapped(value, "Items inside 'asStructure' cannot have modifiers");
                childMode = ValueMode.Structure;
                break;

            case ValueMode.Recursive:
                _a = getValueModeFromValue(value, ValueMode.Recursive), childMode = _a[0], value = _a[1];
                break;

            default:
                invariant(false, "Illegal State");
        }

        if (Array.isArray(value)) return createObservableArray(value, childMode, name);
        if (isPlainObject(value) && Object.isExtensible(value)) return extendObservableHelper(value, value, childMode, name);
        return value;

        var _a;
    }

    function assertUnwrapped(value, message) {
        if (getModifier(value) !== null) throw new Error("[mobx] asStructure / asReference / asFlat cannot be used here. " + message);
    }

    var safariPrototypeSetterInheritanceBug = function () {
        var v = false;
        var p = {};
        Object.defineProperty(p, "0", {
            set: function set() {
                v = true;
            }
        });
        Object.create(p)["0"] = 1;
        return v === false;
    }();

    var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;

    var StubArray = function () {
        function StubArray() {}

        return StubArray;
    }();

    StubArray.prototype = [];

    var ObservableArrayAdministration = function () {
        function ObservableArrayAdministration(name, mode, array, owned) {
            this.mode = mode;
            this.array = array;
            this.owned = owned;
            this.lastKnownLength = 0;
            this.interceptors = null;
            this.changeListeners = null;
            this.atom = new BaseAtom(name || "ObservableArray@" + getNextId());
        }

        ObservableArrayAdministration.prototype.makeReactiveArrayItem = function (value) {
            assertUnwrapped(value, "Array values cannot have modifiers");
            if (this.mode === ValueMode.Flat || this.mode === ValueMode.Reference) return value;
            return makeChildObservable(value, this.mode, this.atom.name + "[..]");
        };

        ObservableArrayAdministration.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately === void 0) {
                fireImmediately = false;
            }

            if (fireImmediately) {
                listener({
                    object: this.array,
                    type: "splice",
                    index: 0,
                    added: this.values.slice(),
                    addedCount: this.values.length,
                    removed: [],
                    removedCount: 0
                });
            }

            return registerListener(this, listener);
        };

        ObservableArrayAdministration.prototype.getArrayLength = function () {
            this.atom.reportObserved();
            return this.values.length;
        };

        ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
            if (typeof newLength !== "number" || newLength < 0) throw new Error("[mobx.array] Out of range: " + newLength);
            var currentLength = this.values.length;
            if (newLength === currentLength) return;else if (newLength > currentLength) this.spliceWithArray(currentLength, 0, new Array(newLength - currentLength));else this.spliceWithArray(newLength, currentLength - newLength);
        };

        ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
            if (oldLength !== this.lastKnownLength) throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");
            this.lastKnownLength += delta;
            if (delta > 0 && oldLength + delta + 1 > OBSERVABLE_ARRAY_BUFFER_SIZE) reserveArrayBuffer(oldLength + delta + 1);
        };

        ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
            checkIfStateModificationsAreAllowed();
            var length = this.values.length;
            if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);
            if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));
            if (newItems === undefined) newItems = [];

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: this.array,
                    type: "splice",
                    index: index,
                    removedCount: deleteCount,
                    added: newItems
                });
                if (!change) return EMPTY_ARRAY;
                deleteCount = change.removedCount;
                newItems = change.added;
            }

            newItems = newItems.map(this.makeReactiveArrayItem, this);
            var lengthDelta = newItems.length - deleteCount;
            this.updateArrayLength(length, lengthDelta);

            var res = (_a = this.values).splice.apply(_a, [index, deleteCount].concat(newItems));

            if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice(index, newItems, res);
            return res;

            var _a;
        };

        ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
            var notifySpy = !this.owned && isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                object: this.array,
                type: "update",
                index: index,
                newValue: newValue,
                oldValue: oldValue
            } : null;
            if (notifySpy) spyReportStart(change);
            this.atom.reportChanged();
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
        };

        ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
            var notifySpy = !this.owned && isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                object: this.array,
                type: "splice",
                index: index,
                removed: removed,
                added: added,
                removedCount: removed.length,
                addedCount: added.length
            } : null;
            if (notifySpy) spyReportStart(change);
            this.atom.reportChanged();
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
        };

        return ObservableArrayAdministration;
    }();

    var ObservableArray = function (_super) {
        __extends(ObservableArray, _super);

        function ObservableArray(initialValues, mode, name, owned) {
            if (owned === void 0) {
                owned = false;
            }

            _super.call(this);

            var adm = new ObservableArrayAdministration(name, mode, this, owned);
            addHiddenFinalProp(this, "$mobx", adm);

            if (initialValues && initialValues.length) {
                adm.updateArrayLength(0, initialValues.length);
                adm.values = initialValues.map(adm.makeReactiveArrayItem, adm);
                adm.notifyArraySplice(0, adm.values.slice(), EMPTY_ARRAY);
            } else {
                adm.values = [];
            }

            if (safariPrototypeSetterInheritanceBug) {
                Object.defineProperty(adm.array, "0", ENTRY_0);
            }
        }

        ObservableArray.prototype.intercept = function (handler) {
            return this.$mobx.intercept(handler);
        };

        ObservableArray.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately === void 0) {
                fireImmediately = false;
            }

            return this.$mobx.observe(listener, fireImmediately);
        };

        ObservableArray.prototype.clear = function () {
            return this.splice(0);
        };

        ObservableArray.prototype.concat = function () {
            var arrays = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                arrays[_i - 0] = arguments[_i];
            }

            this.$mobx.atom.reportObserved();
            return Array.prototype.concat.apply(this.slice(), arrays.map(function (a) {
                return isObservableArray(a) ? a.slice() : a;
            }));
        };

        ObservableArray.prototype.replace = function (newItems) {
            return this.$mobx.spliceWithArray(0, this.$mobx.values.length, newItems);
        };

        ObservableArray.prototype.toJS = function () {
            return this.slice();
        };

        ObservableArray.prototype.toJSON = function () {
            return this.toJS();
        };

        ObservableArray.prototype.peek = function () {
            return this.$mobx.values;
        };

        ObservableArray.prototype.find = function (predicate, thisArg, fromIndex) {
            if (fromIndex === void 0) {
                fromIndex = 0;
            }

            this.$mobx.atom.reportObserved();
            var items = this.$mobx.values,
                l = items.length;

            for (var i = fromIndex; i < l; i++) {
                if (predicate.call(thisArg, items[i], i, this)) return items[i];
            }

            return undefined;
        };

        ObservableArray.prototype.splice = function (index, deleteCount) {
            var newItems = [];

            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }

            switch (arguments.length) {
                case 0:
                    return [];

                case 1:
                    return this.$mobx.spliceWithArray(index);

                case 2:
                    return this.$mobx.spliceWithArray(index, deleteCount);
            }

            return this.$mobx.spliceWithArray(index, deleteCount, newItems);
        };

        ObservableArray.prototype.push = function () {
            var items = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i - 0] = arguments[_i];
            }

            var adm = this.$mobx;
            adm.spliceWithArray(adm.values.length, 0, items);
            return adm.values.length;
        };

        ObservableArray.prototype.pop = function () {
            return this.splice(Math.max(this.$mobx.values.length - 1, 0), 1)[0];
        };

        ObservableArray.prototype.shift = function () {
            return this.splice(0, 1)[0];
        };

        ObservableArray.prototype.unshift = function () {
            var items = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i - 0] = arguments[_i];
            }

            var adm = this.$mobx;
            adm.spliceWithArray(0, 0, items);
            return adm.values.length;
        };

        ObservableArray.prototype.reverse = function () {
            this.$mobx.atom.reportObserved();
            var clone = this.slice();
            return clone.reverse.apply(clone, arguments);
        };

        ObservableArray.prototype.sort = function (compareFn) {
            this.$mobx.atom.reportObserved();
            var clone = this.slice();
            return clone.sort.apply(clone, arguments);
        };

        ObservableArray.prototype.remove = function (value) {
            var idx = this.$mobx.values.indexOf(value);

            if (idx > -1) {
                this.splice(idx, 1);
                return true;
            }

            return false;
        };

        ObservableArray.prototype.move = function (fromIndex, toIndex) {
            function checkIndex(index) {
                if (index < 0) {
                    throw new Error("[mobx.array] Index out of bounds: " + index + " is negative");
                }

                var length = this.$mobx.values.length;

                if (index >= length) {
                    throw new Error("[mobx.array] Index out of bounds: " + index + " is not smaller than " + length);
                }
            }

            checkIndex.call(this, fromIndex);
            checkIndex.call(this, toIndex);

            if (fromIndex === toIndex) {
                return;
            }

            var oldItems = this.$mobx.values;
            var newItems;

            if (fromIndex < toIndex) {
                newItems = oldItems.slice(0, fromIndex).concat(oldItems.slice(fromIndex + 1, toIndex + 1), [oldItems[fromIndex]], oldItems.slice(toIndex + 1));
            } else {
                newItems = oldItems.slice(0, toIndex).concat([oldItems[fromIndex]], oldItems.slice(toIndex, fromIndex), oldItems.slice(fromIndex + 1));
            }

            this.replace(newItems);
        };

        ObservableArray.prototype.toString = function () {
            return "[mobx.array] " + Array.prototype.toString.apply(this.$mobx.values, arguments);
        };

        ObservableArray.prototype.toLocaleString = function () {
            return "[mobx.array] " + Array.prototype.toLocaleString.apply(this.$mobx.values, arguments);
        };

        return ObservableArray;
    }(StubArray);

    declareIterator(ObservableArray.prototype, function () {
        return arrayAsIterator(this.slice());
    });
    makeNonEnumerable(ObservableArray.prototype, ["constructor", "intercept", "observe", "clear", "concat", "replace", "toJS", "toJSON", "peek", "find", "splice", "push", "pop", "shift", "unshift", "reverse", "sort", "remove", "move", "toString", "toLocaleString"]);
    Object.defineProperty(ObservableArray.prototype, "length", {
        enumerable: false,
        configurable: true,
        get: function get() {
            return this.$mobx.getArrayLength();
        },
        set: function set(newLength) {
            this.$mobx.setArrayLength(newLength);
        }
    });
    ["every", "filter", "forEach", "indexOf", "join", "lastIndexOf", "map", "reduce", "reduceRight", "slice", "some"].forEach(function (funcName) {
        var baseFunc = Array.prototype[funcName];
        invariant(typeof baseFunc === "function", "Base function not defined on Array prototype: '" + funcName + "'");
        addHiddenProp(ObservableArray.prototype, funcName, function () {
            this.$mobx.atom.reportObserved();
            return baseFunc.apply(this.$mobx.values, arguments);
        });
    });
    var ENTRY_0 = {
        configurable: true,
        enumerable: false,
        set: createArraySetter(0),
        get: createArrayGetter(0)
    };

    function createArrayBufferItem(index) {
        var set = createArraySetter(index);
        var get = createArrayGetter(index);
        Object.defineProperty(ObservableArray.prototype, "" + index, {
            enumerable: false,
            configurable: true,
            set: set,
            get: get
        });
    }

    function createArraySetter(index) {
        return function (newValue) {
            var adm = this.$mobx;
            var values = adm.values;
            assertUnwrapped(newValue, "Modifiers cannot be used on array values. For non-reactive array values use makeReactive(asFlat(array)).");

            if (index < values.length) {
                checkIfStateModificationsAreAllowed();
                var oldValue = values[index];

                if (hasInterceptors(adm)) {
                    var change = interceptChange(adm, {
                        type: "update",
                        object: adm.array,
                        index: index,
                        newValue: newValue
                    });
                    if (!change) return;
                    newValue = change.newValue;
                }

                newValue = adm.makeReactiveArrayItem(newValue);
                var changed = adm.mode === ValueMode.Structure ? !deepEquals(oldValue, newValue) : oldValue !== newValue;

                if (changed) {
                    values[index] = newValue;
                    adm.notifyArrayChildUpdate(index, newValue, oldValue);
                }
            } else if (index === values.length) {
                adm.spliceWithArray(index, 0, [newValue]);
            } else throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
        };
    }

    function createArrayGetter(index) {
        return function () {
            var impl = this.$mobx;

            if (impl && index < impl.values.length) {
                impl.atom.reportObserved();
                return impl.values[index];
            }

            console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + impl.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
            return undefined;
        };
    }

    function reserveArrayBuffer(max) {
        for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max; index++) {
            createArrayBufferItem(index);
        }

        OBSERVABLE_ARRAY_BUFFER_SIZE = max;
    }

    reserveArrayBuffer(1000);

    function createObservableArray(initialValues, mode, name) {
        return new ObservableArray(initialValues, mode, name);
    }

    function fastArray(initialValues) {
        deprecated("fastArray is deprecated. Please use `observable(asFlat([]))`");
        return createObservableArray(initialValues, ValueMode.Flat, null);
    }

    exports.fastArray = fastArray;
    var isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);

    function isObservableArray(thing) {
        return isObject(thing) && isObservableArrayAdministration(thing.$mobx);
    }

    exports.isObservableArray = isObservableArray;
    var ObservableMapMarker = {};

    var ObservableMap = function () {
        function ObservableMap(initialData, valueModeFunc) {
            var _this = this;

            this.$mobx = ObservableMapMarker;
            this._data = {};
            this._hasMap = {};
            this.name = "ObservableMap@" + getNextId();
            this._keys = new ObservableArray(null, ValueMode.Reference, this.name + ".keys()", true);
            this.interceptors = null;
            this.changeListeners = null;
            this._valueMode = getValueModeFromModifierFunc(valueModeFunc);
            if (this._valueMode === ValueMode.Flat) this._valueMode = ValueMode.Reference;
            allowStateChanges(true, function () {
                if (isPlainObject(initialData)) _this.merge(initialData);else if (Array.isArray(initialData)) initialData.forEach(function (_a) {
                    var key = _a[0],
                        value = _a[1];
                    return _this.set(key, value);
                });
            });
        }

        ObservableMap.prototype._has = function (key) {
            return typeof this._data[key] !== "undefined";
        };

        ObservableMap.prototype.has = function (key) {
            if (!this.isValidKey(key)) return false;
            key = "" + key;
            if (this._hasMap[key]) return this._hasMap[key].get();
            return this._updateHasMapEntry(key, false).get();
        };

        ObservableMap.prototype.set = function (key, value) {
            this.assertValidKey(key);
            key = "" + key;

            var hasKey = this._has(key);

            assertUnwrapped(value, "[mobx.map.set] Expected unwrapped value to be inserted to key '" + key + "'. If you need to use modifiers pass them as second argument to the constructor");

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: hasKey ? "update" : "add",
                    object: this,
                    newValue: value,
                    name: key
                });
                if (!change) return;
                value = change.newValue;
            }

            if (hasKey) {
                this._updateValue(key, value);
            } else {
                this._addValue(key, value);
            }
        };

        ObservableMap.prototype.delete = function (key) {
            var _this = this;

            this.assertValidKey(key);
            key = "" + key;

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: "delete",
                    object: this,
                    name: key
                });
                if (!change) return false;
            }

            if (this._has(key)) {
                var notifySpy = isSpyEnabled();
                var notify = hasListeners(this);
                var change = notify || notifySpy ? {
                    type: "delete",
                    object: this,
                    oldValue: this._data[key].value,
                    name: key
                } : null;
                if (notifySpy) spyReportStart(change);
                transaction(function () {
                    _this._keys.remove(key);

                    _this._updateHasMapEntry(key, false);

                    var observable = _this._data[key];
                    observable.setNewValue(undefined);
                    _this._data[key] = undefined;
                }, undefined, false);
                if (notify) notifyListeners(this, change);
                if (notifySpy) spyReportEnd();
                return true;
            }

            return false;
        };

        ObservableMap.prototype._updateHasMapEntry = function (key, value) {
            var entry = this._hasMap[key];

            if (entry) {
                entry.setNewValue(value);
            } else {
                entry = this._hasMap[key] = new ObservableValue(value, ValueMode.Reference, this.name + "." + key + "?", false);
            }

            return entry;
        };

        ObservableMap.prototype._updateValue = function (name, newValue) {
            var observable = this._data[name];
            newValue = observable.prepareNewValue(newValue);

            if (newValue !== UNCHANGED) {
                var notifySpy = isSpyEnabled();
                var notify = hasListeners(this);
                var change = notify || notifySpy ? {
                    type: "update",
                    object: this,
                    oldValue: observable.value,
                    name: name,
                    newValue: newValue
                } : null;
                if (notifySpy) spyReportStart(change);
                observable.setNewValue(newValue);
                if (notify) notifyListeners(this, change);
                if (notifySpy) spyReportEnd();
            }
        };

        ObservableMap.prototype._addValue = function (name, newValue) {
            var _this = this;

            transaction(function () {
                var observable = _this._data[name] = new ObservableValue(newValue, _this._valueMode, _this.name + "." + name, false);
                newValue = observable.value;

                _this._updateHasMapEntry(name, true);

                _this._keys.push(name);
            }, undefined, false);
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                type: "add",
                object: this,
                name: name,
                newValue: newValue
            } : null;
            if (notifySpy) spyReportStart(change);
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
        };

        ObservableMap.prototype.get = function (key) {
            key = "" + key;
            if (this.has(key)) return this._data[key].get();
            return undefined;
        };

        ObservableMap.prototype.keys = function () {
            return arrayAsIterator(this._keys.slice());
        };

        ObservableMap.prototype.values = function () {
            return arrayAsIterator(this._keys.map(this.get, this));
        };

        ObservableMap.prototype.entries = function () {
            var _this = this;

            return arrayAsIterator(this._keys.map(function (key) {
                return [key, _this.get(key)];
            }));
        };

        ObservableMap.prototype.forEach = function (callback, thisArg) {
            var _this = this;

            this.keys().forEach(function (key) {
                return callback.call(thisArg, _this.get(key), key);
            });
        };

        ObservableMap.prototype.merge = function (other) {
            var _this = this;

            transaction(function () {
                if (isObservableMap(other)) other.keys().forEach(function (key) {
                    return _this.set(key, other.get(key));
                });else Object.keys(other).forEach(function (key) {
                    return _this.set(key, other[key]);
                });
            }, undefined, false);
            return this;
        };

        ObservableMap.prototype.clear = function () {
            var _this = this;

            transaction(function () {
                untracked(function () {
                    _this.keys().forEach(_this.delete, _this);
                });
            }, undefined, false);
        };

        Object.defineProperty(ObservableMap.prototype, "size", {
            get: function get() {
                return this._keys.length;
            },
            enumerable: true,
            configurable: true
        });

        ObservableMap.prototype.toJS = function () {
            var _this = this;

            var res = {};
            this.keys().forEach(function (key) {
                return res[key] = _this.get(key);
            });
            return res;
        };

        ObservableMap.prototype.toJs = function () {
            deprecated("toJs is deprecated, use toJS instead");
            return this.toJS();
        };

        ObservableMap.prototype.toJSON = function () {
            return this.toJS();
        };

        ObservableMap.prototype.isValidKey = function (key) {
            if (key === null || key === undefined) return false;
            if (typeof key !== "string" && typeof key !== "number" && typeof key !== "boolean") return false;
            return true;
        };

        ObservableMap.prototype.assertValidKey = function (key) {
            if (!this.isValidKey(key)) throw new Error("[mobx.map] Invalid key: '" + key + "'");
        };

        ObservableMap.prototype.toString = function () {
            var _this = this;

            return this.name + "[{ " + this.keys().map(function (key) {
                return key + ": " + ("" + _this.get(key));
            }).join(", ") + " }]";
        };

        ObservableMap.prototype.observe = function (listener, fireImmediately) {
            invariant(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable maps.");
            return registerListener(this, listener);
        };

        ObservableMap.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        return ObservableMap;
    }();

    exports.ObservableMap = ObservableMap;
    declareIterator(ObservableMap.prototype, function () {
        return this.entries();
    });

    function map(initialValues, valueModifier) {
        return new ObservableMap(initialValues, valueModifier);
    }

    exports.map = map;
    var isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap);
    exports.isObservableMap = isObservableMap;
    var COMPUTED_FUNC_DEPRECATED = "\nIn MobX 2.* passing a function without arguments to (extend)observable will automatically be inferred to be a computed value.\nThis behavior is ambiguous and will change in MobX 3 to create just an observable reference to the value passed in.\nTo disambiguate, please pass the function wrapped with a modifier: use 'computed(fn)' (for current behavior; automatic conversion), or 'asReference(fn)' (future behavior, just store reference) or 'action(fn)'.\nNote that the idiomatic way to write computed properties is 'observable({ get propertyName() { ... }})'.\nFor more details, see https://github.com/mobxjs/mobx/issues/532";

    var ObservableObjectAdministration = function () {
        function ObservableObjectAdministration(target, name, mode) {
            this.target = target;
            this.name = name;
            this.mode = mode;
            this.values = {};
            this.changeListeners = null;
            this.interceptors = null;
        }

        ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
            invariant(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable objects.");
            return registerListener(this, callback);
        };

        ObservableObjectAdministration.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        return ObservableObjectAdministration;
    }();

    function asObservableObject(target, name, mode) {
        if (mode === void 0) {
            mode = ValueMode.Recursive;
        }

        if (isObservableObject(target)) return target.$mobx;
        if (!isPlainObject(target)) name = (target.constructor.name || "ObservableObject") + "@" + getNextId();
        if (!name) name = "ObservableObject@" + getNextId();
        var adm = new ObservableObjectAdministration(target, name, mode);
        addHiddenFinalProp(target, "$mobx", adm);
        return adm;
    }

    function handleAsComputedValue(value) {
        return typeof value === "function" && value.length === 0 && !isAction(value);
    }

    function setObservableObjectInstanceProperty(adm, propName, descriptor) {
        if (adm.values[propName]) {
            invariant("value" in descriptor, "cannot redefine property " + propName);
            adm.target[propName] = descriptor.value;
        } else {
            if ("value" in descriptor) {
                if (handleAsComputedValue(descriptor.value)) {
                    deprecated(COMPUTED_FUNC_DEPRECATED + ")in: " + adm.name + "." + propName);
                }

                defineObservableProperty(adm, propName, descriptor.value, true, undefined);
            } else {
                defineObservableProperty(adm, propName, descriptor.get, true, descriptor.set);
            }
        }
    }

    function defineObservableProperty(adm, propName, newValue, asInstanceProperty, setter) {
        if (asInstanceProperty) assertPropertyConfigurable(adm.target, propName);
        var observable;
        var name = adm.name + "." + propName;
        var isComputed = true;

        if (isComputedValue(newValue)) {
            observable = newValue;
            newValue.name = name;
            if (!newValue.scope) newValue.scope = adm.target;
        } else if (handleAsComputedValue(newValue)) {
            observable = new ComputedValue(newValue, adm.target, false, name, setter);
        } else if (getModifier(newValue) === ValueMode.Structure && typeof newValue.value === "function" && newValue.value.length === 0) {
            observable = new ComputedValue(newValue.value, adm.target, true, name, setter);
        } else {
            isComputed = false;

            if (hasInterceptors(adm)) {
                var change = interceptChange(adm, {
                    object: adm.target,
                    name: propName,
                    type: "add",
                    newValue: newValue
                });
                if (!change) return;
                newValue = change.newValue;
            }

            observable = new ObservableValue(newValue, adm.mode, name, false);
            newValue = observable.value;
        }

        adm.values[propName] = observable;

        if (asInstanceProperty) {
            Object.defineProperty(adm.target, propName, isComputed ? generateComputedPropConfig(propName) : generateObservablePropConfig(propName));
        }

        if (!isComputed) notifyPropertyAddition(adm, adm.target, propName, newValue);
    }

    var observablePropertyConfigs = {};
    var computedPropertyConfigs = {};

    function generateObservablePropConfig(propName) {
        var config = observablePropertyConfigs[propName];
        if (config) return config;
        return observablePropertyConfigs[propName] = {
            configurable: true,
            enumerable: true,
            get: function get() {
                return this.$mobx.values[propName].get();
            },
            set: function set(v) {
                setPropertyValue(this, propName, v);
            }
        };
    }

    function generateComputedPropConfig(propName) {
        var config = computedPropertyConfigs[propName];
        if (config) return config;
        return computedPropertyConfigs[propName] = {
            configurable: true,
            enumerable: false,
            get: function get() {
                return this.$mobx.values[propName].get();
            },
            set: function set(v) {
                return this.$mobx.values[propName].set(v);
            }
        };
    }

    function setPropertyValue(instance, name, newValue) {
        var adm = instance.$mobx;
        var observable = adm.values[name];

        if (hasInterceptors(adm)) {
            var change = interceptChange(adm, {
                type: "update",
                object: instance,
                name: name,
                newValue: newValue
            });
            if (!change) return;
            newValue = change.newValue;
        }

        newValue = observable.prepareNewValue(newValue);

        if (newValue !== UNCHANGED) {
            var notify = hasListeners(adm);
            var notifySpy = isSpyEnabled();
            var change = notify || notifySpy ? {
                type: "update",
                object: instance,
                oldValue: observable.value,
                name: name,
                newValue: newValue
            } : null;
            if (notifySpy) spyReportStart(change);
            observable.setNewValue(newValue);
            if (notify) notifyListeners(adm, change);
            if (notifySpy) spyReportEnd();
        }
    }

    function notifyPropertyAddition(adm, object, name, newValue) {
        var notify = hasListeners(adm);
        var notifySpy = isSpyEnabled();
        var change = notify || notifySpy ? {
            type: "add",
            object: object,
            name: name,
            newValue: newValue
        } : null;
        if (notifySpy) spyReportStart(change);
        if (notify) notifyListeners(adm, change);
        if (notifySpy) spyReportEnd();
    }

    var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);

    function isObservableObject(thing) {
        if (isObject(thing)) {
            runLazyInitializers(thing);
            return isObservableObjectAdministration(thing.$mobx);
        }

        return false;
    }

    exports.isObservableObject = isObservableObject;
    var UNCHANGED = {};

    var ObservableValue = function (_super) {
        __extends(ObservableValue, _super);

        function ObservableValue(value, mode, name, notifySpy) {
            if (name === void 0) {
                name = "ObservableValue@" + getNextId();
            }

            if (notifySpy === void 0) {
                notifySpy = true;
            }

            _super.call(this, name);

            this.mode = mode;
            this.hasUnreportedChange = false;
            this.value = undefined;

            var _a = getValueModeFromValue(value, ValueMode.Recursive),
                childmode = _a[0],
                unwrappedValue = _a[1];

            if (this.mode === ValueMode.Recursive) this.mode = childmode;
            this.value = makeChildObservable(unwrappedValue, this.mode, this.name);

            if (notifySpy && isSpyEnabled()) {
                spyReport({
                    type: "create",
                    object: this,
                    newValue: this.value
                });
            }
        }

        ObservableValue.prototype.set = function (newValue) {
            var oldValue = this.value;
            newValue = this.prepareNewValue(newValue);

            if (newValue !== UNCHANGED) {
                var notifySpy = isSpyEnabled();

                if (notifySpy) {
                    spyReportStart({
                        type: "update",
                        object: this,
                        newValue: newValue,
                        oldValue: oldValue
                    });
                }

                this.setNewValue(newValue);
                if (notifySpy) spyReportEnd();
            }
        };

        ObservableValue.prototype.prepareNewValue = function (newValue) {
            assertUnwrapped(newValue, "Modifiers cannot be used on non-initial values.");
            checkIfStateModificationsAreAllowed();

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: this,
                    type: "update",
                    newValue: newValue
                });
                if (!change) return UNCHANGED;
                newValue = change.newValue;
            }

            var changed = valueDidChange(this.mode === ValueMode.Structure, this.value, newValue);
            if (changed) return makeChildObservable(newValue, this.mode, this.name);
            return UNCHANGED;
        };

        ObservableValue.prototype.setNewValue = function (newValue) {
            var oldValue = this.value;
            this.value = newValue;
            this.reportChanged();
            if (hasListeners(this)) notifyListeners(this, [newValue, oldValue]);
        };

        ObservableValue.prototype.get = function () {
            this.reportObserved();
            return this.value;
        };

        ObservableValue.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        ObservableValue.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately) listener(this.value, undefined);
            return registerListener(this, listener);
        };

        ObservableValue.prototype.toJSON = function () {
            return this.get();
        };

        ObservableValue.prototype.toString = function () {
            return this.name + "[" + this.value + "]";
        };

        return ObservableValue;
    }(BaseAtom);

    var isObservableValue = createInstanceofPredicate("ObservableValue", ObservableValue);

    function getAtom(thing, property) {
        if (typeof thing === "object" && thing !== null) {
            if (isObservableArray(thing)) {
                invariant(property === undefined, "It is not possible to get index atoms from arrays");
                return thing.$mobx.atom;
            }

            if (isObservableMap(thing)) {
                if (property === undefined) return getAtom(thing._keys);
                var observable_2 = thing._data[property] || thing._hasMap[property];
                invariant(!!observable_2, "the entry '" + property + "' does not exist in the observable map '" + getDebugName(thing) + "'");
                return observable_2;
            }

            runLazyInitializers(thing);

            if (isObservableObject(thing)) {
                invariant(!!property, "please specify a property");
                var observable_3 = thing.$mobx.values[property];
                invariant(!!observable_3, "no observable property '" + property + "' found on the observable object '" + getDebugName(thing) + "'");
                return observable_3;
            }

            if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
                return thing;
            }
        } else if (typeof thing === "function") {
            if (isReaction(thing.$mobx)) {
                return thing.$mobx;
            }
        }

        invariant(false, "Cannot obtain atom from " + thing);
    }

    function getAdministration(thing, property) {
        invariant(thing, "Expecting some object");
        if (property !== undefined) return getAdministration(getAtom(thing, property));
        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;
        if (isObservableMap(thing)) return thing;
        runLazyInitializers(thing);
        if (thing.$mobx) return thing.$mobx;
        invariant(false, "Cannot obtain administration from " + thing);
    }

    function getDebugName(thing, property) {
        var named;
        if (property !== undefined) named = getAtom(thing, property);else if (isObservableObject(thing) || isObservableMap(thing)) named = getAdministration(thing);else named = getAtom(thing);
        return named.name;
    }

    function createClassPropertyDecorator(onInitialize, _get, _set, enumerable, allowCustomArguments) {
        function classPropertyDecorator(target, key, descriptor, customArgs, argLen) {
            invariant(allowCustomArguments || quacksLikeADecorator(arguments), "This function is a decorator, but it wasn't invoked like a decorator");

            if (!descriptor) {
                var newDescriptor = {
                    enumerable: enumerable,
                    configurable: true,
                    get: function get() {
                        if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) typescriptInitializeProperty(this, key, undefined, onInitialize, customArgs, descriptor);
                        return _get.call(this, key);
                    },
                    set: function set(v) {
                        if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) {
                            typescriptInitializeProperty(this, key, v, onInitialize, customArgs, descriptor);
                        } else {
                            _set.call(this, key, v);
                        }
                    }
                };

                if (arguments.length < 3 || arguments.length === 5 && argLen < 3) {
                    Object.defineProperty(target, key, newDescriptor);
                }

                return newDescriptor;
            } else {
                if (!hasOwnProperty(target, "__mobxLazyInitializers")) {
                    addHiddenProp(target, "__mobxLazyInitializers", target.__mobxLazyInitializers && target.__mobxLazyInitializers.slice() || []);
                }

                var value_1 = descriptor.value,
                    initializer_1 = descriptor.initializer;

                target.__mobxLazyInitializers.push(function (instance) {
                    onInitialize(instance, key, initializer_1 ? initializer_1.call(instance) : value_1, customArgs, descriptor);
                });

                return {
                    enumerable: enumerable,
                    configurable: true,
                    get: function get() {
                        if (this.__mobxDidRunLazyInitializers !== true) runLazyInitializers(this);
                        return _get.call(this, key);
                    },
                    set: function set(v) {
                        if (this.__mobxDidRunLazyInitializers !== true) runLazyInitializers(this);

                        _set.call(this, key, v);
                    }
                };
            }
        }

        if (allowCustomArguments) {
            return function () {
                if (quacksLikeADecorator(arguments)) return classPropertyDecorator.apply(null, arguments);
                var outerArgs = arguments;
                var argLen = arguments.length;
                return function (target, key, descriptor) {
                    return classPropertyDecorator(target, key, descriptor, outerArgs, argLen);
                };
            };
        }

        return classPropertyDecorator;
    }

    function typescriptInitializeProperty(instance, key, v, onInitialize, customArgs, baseDescriptor) {
        if (!hasOwnProperty(instance, "__mobxInitializedProps")) addHiddenProp(instance, "__mobxInitializedProps", {});
        instance.__mobxInitializedProps[key] = true;
        onInitialize(instance, key, v, customArgs, baseDescriptor);
    }

    function runLazyInitializers(instance) {
        if (instance.__mobxDidRunLazyInitializers === true) return;

        if (instance.__mobxLazyInitializers) {
            addHiddenProp(instance, "__mobxDidRunLazyInitializers", true);
            instance.__mobxDidRunLazyInitializers && instance.__mobxLazyInitializers.forEach(function (initializer) {
                return initializer(instance);
            });
        }
    }

    function quacksLikeADecorator(args) {
        return (args.length === 2 || args.length === 3) && typeof args[1] === "string";
    }

    function iteratorSymbol() {
        return typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") || "@@iterator";
    }

    var IS_ITERATING_MARKER = "__$$iterating";

    function arrayAsIterator(array) {
        invariant(array[IS_ITERATING_MARKER] !== true, "Illegal state: cannot recycle array as iterator");
        addHiddenFinalProp(array, IS_ITERATING_MARKER, true);
        var idx = -1;
        addHiddenFinalProp(array, "next", function next() {
            idx++;
            return {
                done: idx >= this.length,
                value: idx < this.length ? this[idx] : undefined
            };
        });
        return array;
    }

    function declareIterator(prototType, iteratorFactory) {
        addHiddenFinalProp(prototType, iteratorSymbol(), iteratorFactory);
    }

    var SimpleEventEmitter = function () {
        function SimpleEventEmitter() {
            this.listeners = [];
            deprecated("extras.SimpleEventEmitter is deprecated and will be removed in the next major release");
        }

        SimpleEventEmitter.prototype.emit = function () {
            var listeners = this.listeners.slice();

            for (var i = 0, l = listeners.length; i < l; i++) {
                listeners[i].apply(null, arguments);
            }
        };

        SimpleEventEmitter.prototype.on = function (listener) {
            var _this = this;

            this.listeners.push(listener);
            return once(function () {
                var idx = _this.listeners.indexOf(listener);

                if (idx !== -1) _this.listeners.splice(idx, 1);
            });
        };

        SimpleEventEmitter.prototype.once = function (listener) {
            var subscription = this.on(function () {
                subscription();
                listener.apply(this, arguments);
            });
            return subscription;
        };

        return SimpleEventEmitter;
    }();

    exports.SimpleEventEmitter = SimpleEventEmitter;
    var EMPTY_ARRAY = [];
    Object.freeze(EMPTY_ARRAY);

    function getNextId() {
        return ++globalState.mobxGuid;
    }

    function invariant(check, message, thing) {
        if (!check) throw new Error("[mobx] Invariant failed: " + message + (thing ? " in '" + thing + "'" : ""));
    }

    var deprecatedMessages = [];

    function deprecated(msg) {
        if (deprecatedMessages.indexOf(msg) !== -1) return;
        deprecatedMessages.push(msg);
        console.error("[mobx] Deprecated: " + msg);
    }

    function once(func) {
        var invoked = false;
        return function () {
            if (invoked) return;
            invoked = true;
            return func.apply(this, arguments);
        };
    }

    var noop = function noop() {};

    function unique(list) {
        var res = [];
        list.forEach(function (item) {
            if (res.indexOf(item) === -1) res.push(item);
        });
        return res;
    }

    function joinStrings(things, limit, separator) {
        if (limit === void 0) {
            limit = 100;
        }

        if (separator === void 0) {
            separator = " - ";
        }

        if (!things) return "";
        var sliced = things.slice(0, limit);
        return "" + sliced.join(separator) + (things.length > limit ? " (... and " + (things.length - limit) + "more)" : "");
    }

    function isObject(value) {
        return value !== null && typeof value === "object";
    }

    function isPlainObject(value) {
        if (value === null || typeof value !== "object") return false;
        var proto = Object.getPrototypeOf(value);
        return proto === Object.prototype || proto === null;
    }

    function objectAssign() {
        var res = arguments[0];

        for (var i = 1, l = arguments.length; i < l; i++) {
            var source = arguments[i];

            for (var key in source) {
                if (hasOwnProperty(source, key)) {
                    res[key] = source[key];
                }
            }
        }

        return res;
    }

    function valueDidChange(compareStructural, oldValue, newValue) {
        return compareStructural ? !deepEquals(oldValue, newValue) : oldValue !== newValue;
    }

    var prototypeHasOwnProperty = Object.prototype.hasOwnProperty;

    function hasOwnProperty(object, propName) {
        return prototypeHasOwnProperty.call(object, propName);
    }

    function makeNonEnumerable(object, propNames) {
        for (var i = 0; i < propNames.length; i++) {
            addHiddenProp(object, propNames[i], object[propNames[i]]);
        }
    }

    function addHiddenProp(object, propName, value) {
        Object.defineProperty(object, propName, {
            enumerable: false,
            writable: true,
            configurable: true,
            value: value
        });
    }

    function addHiddenFinalProp(object, propName, value) {
        Object.defineProperty(object, propName, {
            enumerable: false,
            writable: false,
            configurable: true,
            value: value
        });
    }

    function isPropertyConfigurable(object, prop) {
        var descriptor = Object.getOwnPropertyDescriptor(object, prop);
        return !descriptor || descriptor.configurable !== false && descriptor.writable !== false;
    }

    function assertPropertyConfigurable(object, prop) {
        invariant(isPropertyConfigurable(object, prop), "Cannot make property '" + prop + "' observable, it is not configurable and writable in the target object");
    }

    function getEnumerableKeys(obj) {
        var res = [];

        for (var key in obj) {
            res.push(key);
        }

        return res;
    }

    function deepEquals(a, b) {
        if (a === null && b === null) return true;
        if (a === undefined && b === undefined) return true;
        var aIsArray = isArrayLike(a);

        if (aIsArray !== isArrayLike(b)) {
            return false;
        } else if (aIsArray) {
            if (a.length !== b.length) return false;

            for (var i = a.length - 1; i >= 0; i--) {
                if (!deepEquals(a[i], b[i])) return false;
            }

            return true;
        } else if (typeof a === "object" && typeof b === "object") {
            if (a === null || b === null) return false;
            if (getEnumerableKeys(a).length !== getEnumerableKeys(b).length) return false;

            for (var prop in a) {
                if (!(prop in b)) return false;
                if (!deepEquals(a[prop], b[prop])) return false;
            }

            return true;
        }

        return a === b;
    }

    function createInstanceofPredicate(name, clazz) {
        var propName = "isMobX" + name;
        clazz.prototype[propName] = true;
        return function (x) {
            return isObject(x) && x[propName] === true;
        };
    }

    function isArrayLike(x) {
        return Array.isArray(x) || isObservableArray(x);
    }

    exports.isArrayLike = isArrayLike;
},1007,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (name) {
    var Meteor = this;
    var collectionName = 'cfs.' + name + '.filerecord';
    return {
      find: function find(selector, options) {
        var elems = (0, _Collection2.default)(collectionName).find(selector, options);
        return elems.map(function (elem) {
          return (0, _setProperties2.default)(name, elem);
        });
      },
      findOne: function findOne(selector, options) {
        var elem = (0, _Collection2.default)(collectionName).findOne(selector, options);
        return elem && (0, _setProperties2.default)(name, elem);
      },
      insert: function insert() {
        _Collection2.default.apply(Meteor, [collectionName]).insert.apply(Meteor, arguments);
      },
      update: function update() {
        _Collection2.default.apply(Meteor, [collectionName]).update.apply(Meteor, arguments);
      },
      remove: function remove() {
        _Collection2.default.apply(Meteor, [collectionName]).remove.apply(Meteor, arguments);
      }
    };
  };

  var _ejson = _require(_dependencyMap[0]);

  var _ejson2 = babelHelpers.interopRequireDefault(_ejson);

  var _Collection = _require(_dependencyMap[1]);

  var _Collection2 = babelHelpers.interopRequireDefault(_Collection);

  var _Data = _require(_dependencyMap[2]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var _setProperties = _require(_dependencyMap[3]);

  var _setProperties2 = babelHelpers.interopRequireDefault(_setProperties);

  if (!_ejson2.default._getTypes()['FS.File']) {
    _ejson2.default.addType('FS.File', function (value) {
      return {
        getFileRecord: function getFileRecord() {
          var collection = _Data2.default.db['cfs.' + value.collectionName + '.filerecord'];
          var item = collection && collection.get(value._id);
          if (!item) return value;
          return (0, _setProperties2.default)(value.collectionName, item);
        }
      };
    });
  }
},1008,[864,893,876,1009]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _base = _require(_dependencyMap[0]);

  var _base2 = babelHelpers.interopRequireDefault(_base);

  var _Data = _require(_dependencyMap[1]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  exports.default = function (name, file) {
    var getStoreName = function getStoreName() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        store: name
      };
      return params.store;
    };

    var getImageInfos = function getImageInfos(params) {
      if (!params || !params.store) return file.original || {};
      return file.copies[params.store] || {};
    };

    var getType = function getType(params) {
      return getImageInfos(params).type;
    };

    return babelHelpers.extends({}, file, {
      url: function url(params) {
        var token = _Data2.default._tokenIdSaved;
        var fileName = getImageInfos(params).name;
        return _Data2.default.getUrl().replace('ws://', 'http://').replace('wss://', 'https://') + '/cfs/files/' + name + '/' + file._id + '/' + fileName + '?store=' + getStoreName(params) + (token ? '&token=' + _base2.default.encode(JSON.stringify({
          authToken: token
        })) : '');
      },
      isImage: function isImage(params) {
        var type = getType(params);
        return type && type.indexOf('image/') === 0;
      },
      isAudio: function isAudio(params) {
        var type = getType(params);
        return type && type.indexOf('audio/') === 0;
      },
      isVideo: function isVideo(params) {
        var type = getType(params);
        return type && type.indexOf('video/') === 0;
      },
      isUploaded: function isUploaded(params) {
        return !!getImageInfos(params).updatedAt;
      },
      name: function name(params) {
        return getImageInfos(params).name;
      },
      extension: function extension(params) {
        var imageName = getImageInfos(params).name;
        if (!imageName) return;
        return imageName.substring(imageName.lastIndexOf('.') + 1);
      },
      size: function size(params) {
        return getImageInfos(params).size;
      },
      type: getType,
      updatedAt: function updatedAt(params) {
        return getImageInfos(params).updatedAt;
      }
    });
  };
},1009,[1010,876]);
__d(function (global, _require, module, exports, _dependencyMap) {
	;

	(function (root) {
		var freeExports = typeof exports == 'object' && exports;
		var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;
		var freeGlobal = typeof global == 'object' && global;

		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		var InvalidCharacterError = function InvalidCharacterError(message) {
			this.message = message;
		};

		InvalidCharacterError.prototype = new Error();
		InvalidCharacterError.prototype.name = 'InvalidCharacterError';

		var error = function error(message) {
			throw new InvalidCharacterError(message);
		};

		var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;

		var decode = function decode(input) {
			input = String(input).replace(REGEX_SPACE_CHARACTERS, '');
			var length = input.length;

			if (length % 4 == 0) {
				input = input.replace(/==?$/, '');
				length = input.length;
			}

			if (length % 4 == 1 || /[^+a-zA-Z0-9/]/.test(input)) {
				error('Invalid character: the string to be decoded is not correctly encoded.');
			}

			var bitCounter = 0;
			var bitStorage;
			var buffer;
			var output = '';
			var position = -1;

			while (++position < length) {
				buffer = TABLE.indexOf(input.charAt(position));
				bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;

				if (bitCounter++ % 4) {
					output += String.fromCharCode(0xFF & bitStorage >> (-2 * bitCounter & 6));
				}
			}

			return output;
		};

		var encode = function encode(input) {
			input = String(input);

			if (/[^\0-\xFF]/.test(input)) {
				error("The string to be encoded contains characters outside of the Latin1 range.");
			}

			var padding = input.length % 3;
			var output = '';
			var position = -1;
			var a;
			var b;
			var c;
			var d;
			var buffer;
			var length = input.length - padding;

			while (++position < length) {
				a = input.charCodeAt(position) << 16;
				b = input.charCodeAt(++position) << 8;
				c = input.charCodeAt(++position);
				buffer = a + b + c;
				output += TABLE.charAt(buffer >> 18 & 0x3F) + TABLE.charAt(buffer >> 12 & 0x3F) + TABLE.charAt(buffer >> 6 & 0x3F) + TABLE.charAt(buffer & 0x3F);
			}

			if (padding == 2) {
				a = input.charCodeAt(position) << 8;
				b = input.charCodeAt(++position);
				buffer = a + b;
				output += TABLE.charAt(buffer >> 10) + TABLE.charAt(buffer >> 4 & 0x3F) + TABLE.charAt(buffer << 2 & 0x3F) + '=';
			} else if (padding == 1) {
				buffer = input.charCodeAt(position);
				output += TABLE.charAt(buffer >> 2) + TABLE.charAt(buffer << 4 & 0x3F) + '==';
			}

			return output;
		};

		var base64 = {
			'encode': encode,
			'decode': decode,
			'version': '0.1.0'
		};

		if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
			define(function () {
				return base64;
			});
		} else if (freeExports && !freeExports.nodeType) {
			if (freeModule) {
				freeModule.exports = base64;
			} else {
				for (var key in base64) {
					base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
				}
			}
		} else {
			root.base64 = base64;
		}
	})(this);
},1010,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _Data = _require(_dependencyMap[3]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var _setProperties = _require(_dependencyMap[4]);

  var _setProperties2 = babelHelpers.interopRequireDefault(_setProperties);

  var FSCollectionImagesPreloader = (_temp = _class = function (_Component) {
    babelHelpers.inherits(FSCollectionImagesPreloader, _Component);

    function FSCollectionImagesPreloader(props) {
      babelHelpers.classCallCheck(this, FSCollectionImagesPreloader);

      var _this = babelHelpers.possibleConstructorReturn(this, (FSCollectionImagesPreloader.__proto__ || Object.getPrototypeOf(FSCollectionImagesPreloader)).call(this, props));

      _this.state = {
        items: []
      };
      return _this;
    }

    babelHelpers.createClass(FSCollectionImagesPreloader, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        var _props = this.props,
            collection = _props.collection,
            selector = _props.selector;

        this.update = function (results) {
          _this2.setState({
            items: results.map(function (elem) {
              return (0, _setProperties2.default)(collection, elem);
            })
          });
        };

        var collectionName = 'cfs.' + collection + '.filerecord';

        if (!_Data2.default.db[collectionName]) {
          _Data2.default.db.addCollection(collectionName);
        }

        this.items = _Data2.default.db.observe(function () {
          return _Data2.default.db[collectionName].find(selector);
        });
        this.items.subscribe(this.update);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.items.dispose();
      }
    }, {
      key: "render",
      value: function render() {
        var items = this.state.items;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.hidden
          },
          items && items.map(function (item) {
            return _react2.default.createElement(_reactNative.Image, {
              style: styles.hidden,
              key: item._id,
              source: {
                uri: item.url()
              }
            });
          })
        );
      }
    }]);
    return FSCollectionImagesPreloader;
  }(_react.Component), _class.propTypes = {
    collection: _propTypes2.default.string.isRequired,
    selector: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
  }, _class.defaultProps = {
    selector: {}
  }, _temp);
  exports.default = FSCollectionImagesPreloader;

  var styles = _reactNative.StyleSheet.create({
    hidden: {
      width: 1,
      height: 1,
      position: 'absolute',
      top: -100000,
      left: -10000,
      opacity: 0
    }
  });
},1011,[103,121,14,876,1009]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _ejson = _require(_dependencyMap[0]);

  var _ejson2 = babelHelpers.interopRequireDefault(_ejson);

  var _Data = _require(_dependencyMap[1]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var stringify = function stringify(value) {
    if (value === undefined) return 'undefined';
    return _ejson2.default.stringify(value);
  };

  var parse = function parse(serialized) {
    if (serialized === undefined || serialized === 'undefined') return undefined;
    return _ejson2.default.parse(serialized);
  };

  var ReactiveDict = function () {
    function ReactiveDict(dictName) {
      babelHelpers.classCallCheck(this, ReactiveDict);
      this.keys = {};

      if (typeof dictName === 'object') {
        for (var i in dictName) {
          this.keys[i] = stringify(dictName[i]);
        }
      }
    }

    babelHelpers.createClass(ReactiveDict, [{
      key: "set",
      value: function set(keyOrObject, value) {
        if (typeof keyOrObject === 'object' && value === undefined) {
          this._setObject(keyOrObject);

          return;
        }

        var key = keyOrObject;
        value = stringify(value);
        var oldSerializedValue = 'undefined';

        if (Object.keys(this.keys).indexOf(key) != -1) {
          oldSerializedValue = this.keys[key];
        }

        if (value === oldSerializedValue) return;
        this.keys[key] = value;

        _Data2.default.notify('change');
      }
    }, {
      key: "setDefault",
      value: function setDefault(key, value) {
        if (this.keys[key] === undefined) {
          this.set(key, value);
        }
      }
    }, {
      key: "get",
      value: function get(key) {
        return parse(this.keys[key]);
      }
    }, {
      key: "equals",
      value: function equals(key, value) {
        if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) throw new Error('ReactiveDict.equals: value must be scalar');
        var serializedValue = stringify(value);
        var oldValue = undefined;

        if (Object.keys(this.keys).indexOf(key) != -1) {
          oldValue = parse(this.keys[key]);
        }

        return _ejson2.default.equals(oldValue, value);
      }
    }, {
      key: "_setObject",
      value: function _setObject(object) {
        var keys = Object.keys(object);

        for (var i in keys) {
          this.set(i, keys[i]);
        }
      }
    }]);
    return ReactiveDict;
  }();

  exports.default = ReactiveDict;
},1012,[864,876]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _reactNative = _require(_dependencyMap[0]);

  var _Data = _require(_dependencyMap[1]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var _utils = _require(_dependencyMap[2]);

  var _Call = _require(_dependencyMap[3]);

  var _Call2 = babelHelpers.interopRequireDefault(_Call);

  var TOKEN_KEY = 'reactnativemeteor_usertoken';
  module.exports = {
    user: function user() {
      if (!this._userIdSaved) return null;
      return this.collection('users').findOne(this._userIdSaved);
    },
    userId: function userId() {
      if (!this._userIdSaved) return null;
      var user = this.collection('users').findOne(this._userIdSaved);
      return user && user._id;
    },
    _isLoggingIn: true,
    loggingIn: function loggingIn() {
      return this._isLoggingIn;
    },
    logout: function logout(callback) {
      var _this = this;

      (0, _Call2.default)('logout', function (err) {
        _this.handleLogout();

        _this.connect();

        typeof callback == 'function' && callback(err);
      });
    },
    handleLogout: function handleLogout() {
      _reactNative.AsyncStorage.removeItem(TOKEN_KEY);

      _Data2.default._tokenIdSaved = null;
      this._userIdSaved = null;
    },
    loginWithPassword: function loginWithPassword(selector, password, callback) {
      var _this2 = this;

      if (typeof selector === 'string') {
        if (selector.indexOf('@') === -1) selector = {
          username: selector
        };else selector = {
          email: selector
        };
      }

      this._startLoggingIn();

      (0, _Call2.default)('login', {
        user: selector,
        password: (0, _utils.hashPassword)(password)
      }, function (err, result) {
        _this2._endLoggingIn();

        _this2._handleLoginCallback(err, result);

        typeof callback == 'function' && callback(err);
      });
    },
    logoutOtherClients: function logoutOtherClients() {
      var _this3 = this;

      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
      (0, _Call2.default)('getNewToken', function (err, res) {
        if (err) return callback(err);

        _this3._handleLoginCallback(err, res);

        (0, _Call2.default)('removeOtherTokens', function (err) {
          callback(err);
        });
      });
    },
    _login: function _login(user, callback) {
      var _this4 = this;

      this._startLoggingIn();

      this.call('login', user, function (err, result) {
        _this4._endLoggingIn();

        _this4._handleLoginCallback(err, result);

        typeof callback == 'function' && callback(err);
      });
    },
    _startLoggingIn: function _startLoggingIn() {
      this._isLoggingIn = true;

      _Data2.default.notify('loggingIn');
    },
    _endLoggingIn: function _endLoggingIn() {
      this._isLoggingIn = false;

      _Data2.default.notify('loggingIn');
    },
    _handleLoginCallback: function _handleLoginCallback(err, result) {
      if (!err) {
        _reactNative.AsyncStorage.setItem(TOKEN_KEY, result.token);

        _Data2.default._tokenIdSaved = result.token;
        this._userIdSaved = result.id;

        _Data2.default.notify('onLogin');
      } else {
        _Data2.default.notify('onLoginFailure');

        this.handleLogout();
      }

      _Data2.default.notify('change');
    },
    _loginWithToken: function _loginWithToken(value) {
      var _this5 = this;

      _Data2.default._tokenIdSaved = value;

      if (value !== null) {
        this._startLoggingIn();

        (0, _Call2.default)('login', {
          resume: value
        }, function (err, result) {
          _this5._endLoggingIn();

          _this5._handleLoginCallback(err, result);
        });
      } else {
        this._endLoggingIn();
      }
    },
    getAuthToken: function getAuthToken() {
      return _Data2.default._tokenIdSaved;
    },
    _loadInitialUser: function _loadInitialUser() {
      var value;
      return regeneratorRuntime.async(function _loadInitialUser$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = null;
              _context.prev = 1;
              _context.next = 4;
              return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem(TOKEN_KEY));

            case 4:
              value = _context.sent;
              _context.next = 10;
              break;

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](1);
              console.warn('AsyncStorage error: ' + _context.t0.message);

            case 10:
              _context.prev = 10;

              this._loginWithToken(value);

              return _context.finish(10);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[1, 7, 10, 13]]);
    }
  };
},1013,[14,876,871,894]);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _Data = _require(_dependencyMap[0]);

  var _Data2 = babelHelpers.interopRequireDefault(_Data);

  var _Call = _require(_dependencyMap[1]);

  var _Call2 = babelHelpers.interopRequireDefault(_Call);

  var _User = _require(_dependencyMap[2]);

  var _User2 = babelHelpers.interopRequireDefault(_User);

  var _utils = _require(_dependencyMap[3]);

  module.exports = {
    createUser: function createUser(options) {
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
      if (options.username) options.username = options.username;
      if (options.email) options.email = options.email;
      options.password = (0, _utils.hashPassword)(options.password);

      _User2.default._startLoggingIn();

      (0, _Call2.default)('createUser', options, function (err, result) {
        _User2.default._endLoggingIn();

        _User2.default._handleLoginCallback(err, result);

        callback(err);
      });
    },
    changePassword: function changePassword(oldPassword, newPassword) {
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

      if (typeof newPassword != 'string' || !newPassword) {
        return callback('Password may not be empty');
      }

      (0, _Call2.default)('changePassword', oldPassword ? (0, _utils.hashPassword)(oldPassword) : null, (0, _utils.hashPassword)(newPassword), function (err, res) {
        callback(err);
      });
    },
    forgotPassword: function forgotPassword(options) {
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

      if (!options.email) {
        return callback('Must pass options.email');
      }

      (0, _Call2.default)('forgotPassword', options, function (err) {
        callback(err);
      });
    },
    resetPassword: function resetPassword(token, newPassword) {
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

      if (!newPassword) {
        return callback('Must pass a new password');
      }

      (0, _Call2.default)('resetPassword', token, (0, _utils.hashPassword)(newPassword), function (err, result) {
        if (!err) {
          _User2.default._loginWithToken(result.token);
        }

        callback(err);
      });
    },
    onLogin: function onLogin(cb) {
      _Data2.default.on('onLogin', cb);
    },
    onLoginFailure: function onLoginFailure(cb) {
      _Data2.default.on('onLoginFailure', cb);
    }
  };
},1014,[876,894,1013,871]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    text_1: 20,
    colors: {
      light: '#A7A9AC',
      cream: '#ffdab0',
      salmon: '#f7bd99',
      aqua: '#6fc3b5',
      teal: '#00979E',
      gray: '#58595B',
      white: '#FFFFFF',
      green: '#83A394',
      red: '#ee9b9b'
    }
  };
},1015,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/assets/images",
    "width": 131,
    "height": 132,
    "scales": [1],
    "hash": "6d7b258a39908cb58593faf8aa8ca41b",
    "name": "Logo",
    "type": "png",
    "fileHashes": ["6d7b258a39908cb58593faf8aa8ca41b"]
  });
},1016,[154]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _Styles = _require(_dependencyMap[3]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _SettingsLauncher = _require(_dependencyMap[4]);

  var _SettingsLauncher2 = babelHelpers.interopRequireDefault(_SettingsLauncher);

  var Home = function (_React$Component) {
    babelHelpers.inherits(Home, _React$Component);

    function Home(props) {
      babelHelpers.classCallCheck(this, Home);

      var _this = babelHelpers.possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).call(this, props));

      _this.state = {
        searchText: ''
      };
      return _this;
    }

    babelHelpers.createClass(Home, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.props.navigation.addListener('didFocus', function () {
          _this2.setState({
            searchText: ''
          });
        });
      }
    }, {
      key: "handleSearchPress",
      value: function handleSearchPress() {
        var navigation = this.props.navigation;
        var searchText = this.state.searchText;
        console.log('going to results');
        navigation.navigate('Results', {
          searchText: searchText
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var searchText = this.state.searchText;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(_reactNative.TextInput, {
            style: styles.input,
            label: 'Search Products',
            underlineColorAndroid: 'rgba(0,0,0,0)',
            onChangeText: function onChangeText(searchText) {
              return _this3.setState({
                searchText: searchText
              });
            },
            value: searchText
          }),
          _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              onPress: this.handleSearchPress.bind(this)
            },
            _react2.default.createElement(
              _reactNative.Text,
              null,
              "Search"
            )
          )
        );
      }
    }]);
    return Home;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: _Styles2.default.colors.white,
      justifyContent: 'center'
    }
  });

  exports.default = (0, _reactNativeMeteor.withTracker)(function () {
    var subscription = _reactNativeMeteor2.default.subscribe('documents');

    return {
      loaded: subscription.ready()
    };
  })(Home);
},1017,[103,14,858,1015,1018]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _Styles = _require(_dependencyMap[2]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _Icon = _require(_dependencyMap[3]);

  var SettingsLauncher = function (_React$Component) {
    babelHelpers.inherits(SettingsLauncher, _React$Component);

    function SettingsLauncher(props) {
      babelHelpers.classCallCheck(this, SettingsLauncher);
      return babelHelpers.possibleConstructorReturn(this, (SettingsLauncher.__proto__ || Object.getPrototypeOf(SettingsLauncher)).call(this, props));
    }

    babelHelpers.createClass(SettingsLauncher, [{
      key: "gotoSettings",
      value: function gotoSettings() {
        var navigate = this.props.navigation.navigate;
        navigate('Settings');
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              onPress: this.gotoSettings.bind(this),
              style: styles.button
            },
            _react2.default.createElement(_Icon.Cog, null)
          )
        );
      }
    }]);
    return SettingsLauncher;
  }(_react2.default.Component);

  exports.default = SettingsLauncher;

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignSelf: 'center',
      flex: 1,
      flexDirection: 'row'
    },
    button: {
      marginRight: 20
    }
  });
},1018,[103,14,1015,1019]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Cog = Cog;
  exports.Arrow = Arrow;
  exports.Heart = Heart;
  exports.Menu = Menu;
  exports.Share = Share;
  exports.CollectsIcon = CollectsIcon;
  exports.Camera = Camera;
  exports.HistoryIcon = HistoryIcon;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _expo = _require(_dependencyMap[1]);

  var _Styles = _require(_dependencyMap[2]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var Circle = _expo.Svg.Circle,
      Ellipse = _expo.Svg.Ellipse,
      G = _expo.Svg.G,
      Path = _expo.Svg.Path,
      Line = _expo.Svg.Line,
      Rect = _expo.Svg.Rect;

  function Cog(props) {
    return _react2.default.createElement(
      _expo.Svg,
      babelHelpers.extends({
        width: 22,
        height: 22
      }, props),
      _react2.default.createElement(Path, {
        className: "prefix__a",
        stroke: _Styles2.default.colors.gray,
        fillOpacity: "0",
        d: "M21.294 9.907v1.98a1.569 1.569 0 0 1-1.485 1.238h-.743c-.5 0-.99.248-.99.743-.248.5-.248.99.248 1.238l.5.5a1.5 1.5 0 0 1 0 1.98l-1.238 1.238a1.506 1.506 0 0 1-1.98 0 .532.532 0 0 0-.5-.5c-.248-.5-.743-.5-1.238-.5a1.361 1.361 0 0 0-.743 1.238v.743a1.169 1.169 0 0 1-1.238 1.238H10.4a1.169 1.169 0 0 1-1.238-1.238v-.743a1.361 1.361 0 0 0-.743-1.238 3.671 3.671 0 0 0-1.733.248c-.248.248-.248.5-.5.743a1.5 1.5 0 0 1-1.98 0c-.248-.5-.743-.743-.99-1.238a1.5 1.5 0 0 1 0-1.98l.5-.5c.5-.5.5-.743.248-1.485a1.891 1.891 0 0 0-1.238-.5h-.99A1.169 1.169 0 0 1 .5 11.887V10.4a1.427 1.427 0 0 1 1.485-1.483h.743a1.361 1.361 0 0 0 1.238-.743 1.089 1.089 0 0 0-.248-1.238c-.248-.5-.5-.5-.5-.743a1.5 1.5 0 0 1 0-1.98l1.243-1.238a1.5 1.5 0 0 1 1.98 0l.5.5a.9.9 0 0 0 1.238.5 1.361 1.361 0 0 0 .743-1.238v-.5A1.657 1.657 0 0 1 9.907.5h2.228c.743.248.99.743.99 1.733v.5a1.361 1.361 0 0 0 .743 1.238 1.089 1.089 0 0 0 1.238-.248l.5-.5a1.2 1.2 0 0 1 1.733 0l1.238 1.238a1.2 1.2 0 0 1 0 1.733.767.767 0 0 1-.248.5c-.5.248-.5.743-.248 1.238a1.361 1.361 0 0 0 1.238.743h.743A2.034 2.034 0 0 1 21.3 9.913zM6.689 10.9A4.208 4.208 0 1 0 10.9 6.689 4.172 4.172 0 0 0 6.689 10.9z"
      })
    );
  }

  function Arrow(props) {
    return _react2.default.createElement(
      _expo.Svg,
      babelHelpers.extends({
        width: 200,
        height: 100,
        version: "1.1"
      }, props),
      _react2.default.createElement(Rect, {
        width: 200,
        height: 100,
        stroke: "#000",
        strokeWidth: 6,
        fill: "green"
      })
    );
  }

  function Heart(props) {
    return _react2.default.createElement(
      _expo.Svg,
      babelHelpers.extends({
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        width: "41.531",
        height: "38.009"
      }, props),
      _react2.default.createElement(
        G,
        {
          className: "b",
          transform: "matrix(1, 0, 0, 1, 0, 0)"
        },
        _react2.default.createElement(Path, {
          className: "a",
          stroke: _Styles2.default.colors.teal,
          strokeWidth: 2,
          fill: _Styles2.default.colors.white,
          style: {
            shadowColor: _Styles2.default.colors.gray,
            shadowRadius: 12,
            shadowOpacity: 0.2
          },
          d: "M31.509 15.46a12.317 12.317 0 0 1-2.86 4.958 26.945 26.945 0 0 1-6.479 5.434 2.291 2.291 0 0 1-2.67 0 24.793 24.793 0 0 1-8.1-7.628 7.83 7.83 0 0 1-1.53-3.527 5.876 5.876 0 0 1 3.81-6.483 5.742 5.742 0 0 1 6.865 2.574c0 .1.1.1.191.286a6.94 6.94 0 0 1 2.1-2.288 5.838 5.838 0 0 1 8.673 6.674z"
        })
      )
    );
  }

  function Menu(props) {
    return _react2.default.createElement(
      _expo.Svg,
      babelHelpers.extends({
        width: 24,
        height: 6
      }, props),
      _react2.default.createElement(
        G,
        {
          transform: "translate(-152 -394)"
        },
        _react2.default.createElement(Circle, {
          className: "a",
          fill: _Styles2.default.colors.light,
          cx: 3,
          cy: 3,
          r: 3,
          transform: "translate(152 394)"
        }),
        _react2.default.createElement(Circle, {
          className: "a",
          fill: _Styles2.default.colors.light,
          cx: 3,
          cy: 3,
          r: 3,
          transform: "translate(161 394)"
        }),
        _react2.default.createElement(Circle, {
          className: "a",
          fill: _Styles2.default.colors.light,
          cx: 3,
          cy: 3,
          r: 3,
          transform: "translate(170 394)"
        })
      )
    );
  }

  function Share(props) {
    return _react2.default.createElement(
      _expo.Svg,
      babelHelpers.extends({
        width: "22.801",
        height: "31.144"
      }, props),
      _react2.default.createElement(
        G,
        {
          transform: "translate(0.5)"
        },
        _react2.default.createElement(Path, {
          className: "a",
          fillOpacity: "0",
          stroke: _Styles2.default.colors.gray,
          d: "M15.881 8.843H21.8v21.8H0v-21.8h5.919"
        }),
        _react2.default.createElement(Path, {
          className: "b",
          d: "M11.983 18.949h-2.31L9.529 5.525v-.291h-2.31a1.1 1.1 0 0 1-.722-.289.868.868 0 0 1 .144-.578 7.567 7.567 0 0 1 1.444-1.588c.722-.866 1.444-1.732 2.166-2.454a.965.965 0 0 1 1.446 0 42.023 42.023 0 0 0 3.465 3.9.635.635 0 0 1 .144.722c-.144.289-.433.289-.722.289h-2.168c-.289 0-.289 0-.433.289z"
        })
      )
    );
  }

  function CollectsIcon(props) {
    return _react2.default.createElement(
      _expo.Svg,
      babelHelpers.extends({
        width: "30.7",
        height: "27.62"
      }, props),
      _react2.default.createElement(
        G,
        {
          transform: "translate(-319.9 -626.4)"
        },
        _react2.default.createElement(Rect, {
          className: "a",
          fill: _Styles2.default.colors[props.color],
          width: "29.432",
          height: "6.952",
          transform: "translate(320.568 627)"
        }),
        _react2.default.createElement(Ellipse, {
          className: "b",
          fill: _Styles2.default.colors.teal,
          cx: "1.854",
          cy: "1.854",
          rx: "1.854",
          ry: "1.854",
          transform: "translate(322.654 628.622)"
        }),
        _react2.default.createElement(Rect, {
          className: "a",
          fill: _Styles2.default.colors[props.color],
          width: "29.432",
          height: "6.952",
          transform: "translate(320.5 646.467)"
        }),
        _react2.default.createElement(Ellipse, {
          className: "b",
          fill: _Styles2.default.colors.teal,
          cx: "1.854",
          cy: "1.854",
          rx: "1.854",
          ry: "1.854",
          transform: "translate(322.654 648.089)"
        }),
        _react2.default.createElement(Rect, {
          className: "a",
          fill: _Styles2.default.colors[props.color],
          width: "29.432",
          height: "6.952",
          transform: "translate(320.5 636.733)"
        }),
        _react2.default.createElement(Ellipse, {
          className: "b",
          fill: _Styles2.default.colors.teal,
          cx: "1.854",
          cy: "1.854",
          rx: "1.854",
          ry: "1.854",
          transform: "translate(322.654 638.356)"
        })
      )
    );
  }

  function Camera(props) {
    return _react2.default.createElement(
      _expo.Svg,
      babelHelpers.extends({
        width: "40.099",
        height: "33.14"
      }, props),
      _react2.default.createElement(Path, {
        className: "a",
        fill: _Styles2.default.colors[props.color],
        d: "M0 28.084V9.612a5.758 5.758 0 0 1 .075-.651 4.751 4.751 0 0 1 1.3-2.678A5.207 5.207 0 0 1 5.231 4.53c1.552-.025 3.1 0 4.656 0a.219.219 0 0 0 .225-.15 14.6 14.6 0 0 1 .976-1.852A4.564 4.564 0 0 1 14.768 0c3.5.025 7.008.025 10.538 0a3.773 3.773 0 0 1 2 .551 3.86 3.86 0 0 1 1.754 1.977 13.455 13.455 0 0 1 .976 1.877.188.188 0 0 0 .2.125h4.455a6.441 6.441 0 0 1 1.377.15A5.262 5.262 0 0 1 40.1 9.762c-.025 6.057 0 12.115 0 18.147a6.74 6.74 0 0 1-.075 1 5 5 0 0 1-2.125 3.255 5.218 5.218 0 0 1-3.2.976H5.432A6.908 6.908 0 0 1 4 32.99a5.307 5.307 0 0 1-2.4-1.327 4.862 4.862 0 0 1-1.525-2.878A62.25 62.25 0 0 1 0 28.084zm10.663-9.211c.025.3.025.6.05.926a7.933 7.933 0 0 0 .951 3.2 9.277 9.277 0 0 0 7.309 4.931 9.776 9.776 0 0 0 3.3-.2 9.23 9.23 0 0 0 7.084-8.285 9.512 9.512 0 0 0-.5-3.654 9.4 9.4 0 0 0-4.33-4.931 8.917 8.917 0 0 0-3.855-1.1 9.968 9.968 0 0 0-3.93.526 9.3 9.3 0 0 0-6.082 8.585z"
      }),
      _react2.default.createElement(Path, {
        className: "a",
        fill: _Styles2.default.colors[props.color],
        d: "M19.925 12.991a6.046 6.046 0 0 1 5.532 3.329 5.126 5.126 0 0 1 .576 2.578 5.93 5.93 0 0 1-5.532 5.807 5.854 5.854 0 0 1-3.479-.776 5.714 5.714 0 0 1-2.853-3.9 5.538 5.538 0 0 1 1.7-5.356 5.706 5.706 0 0 1 3-1.552c.376-.055.776-.08 1.056-.13z"
      })
    );
  }

  function HistoryIcon(props) {
    return _react2.default.createElement(
      _expo.Svg,
      babelHelpers.extends({
        id: "Layer_1",
        "data-name": "Layer 1",
        viewBox: "0 0 19.88 31",
        height: 32,
        width: 20
      }, props),
      _react2.default.createElement(Line, {
        className: "cls-1",
        stroke: _Styles2.default.colors[props.color],
        x1: "1.2",
        y1: "1.84",
        x2: "1.2",
        y2: 21
      }),
      _react2.default.createElement(Ellipse, {
        className: "cls-2",
        fill: _Styles2.default.colors[props.color],
        cx: "1.19",
        cy: "1.15",
        rx: "1.19",
        ry: "1.15"
      }),
      _react2.default.createElement(Path, {
        className: "cls-3",
        fill: _Styles2.default.colors[props.color],
        stroke: _Styles2.default.colors[props.color],
        d: "M1.25 12.83c0 .22 0 .22.22.44a10.43 10.43 0 0 0 4.64.87 12.53 12.53 0 0 0 4-.66 13.66 13.66 0 0 1 9.28.66V3.65a.22.22 0 0 0-.22-.22 25.72 25.72 0 0 0-4-1.09A13 13 0 0 0 9.43 3a12.46 12.46 0 0 1-4 .44 7.14 7.14 0 0 1-4.2-1.09c.01.65.02 10.48.02 10.48z"
      })
    );
  }
},1019,[103,12,1015]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _Styles = _require(_dependencyMap[3]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var Register = (0, _reactNativeMeteor.connectMeteor)(_class = function (_React$Component) {
    babelHelpers.inherits(Register, _React$Component);

    function Register(props) {
      babelHelpers.classCallCheck(this, Register);

      var _this = babelHelpers.possibleConstructorReturn(this, (Register.__proto__ || Object.getPrototypeOf(Register)).call(this, props));

      _this.state = {
        email: '',
        password: '',
        verifyPassword: '',
        error: ''
      };
      return _this;
    }

    babelHelpers.createClass(Register, [{
      key: "createNewUser",
      value: function createNewUser(user, navigate) {
        var _this2 = this;

        _reactNativeMeteor.Accounts.createUser(user, function (err) {
          if (err) {
            _this2.setState({
              error: err
            });
          } else {
            navigate('Login');
          }
        });
      }
    }, {
      key: "handleRegisterPress",
      value: function handleRegisterPress() {
        var _state = this.state,
            email = _state.email,
            password = _state.password;
        var navigate = this.props.navigation.navigate;
        var user = {
          email: email,
          password: password
        };
        this.createNewUser(user, navigate);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var navigate = this.props.navigation.navigate;
        var _state2 = this.state,
            email = _state2.email,
            password = _state2.password,
            verifyPassword = _state2.verifyPassword,
            error = _state2.error;
        return _react2.default.createElement(
          _reactNative.KeyboardAvoidingView,
          {
            behavior: "position",
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.logo
            },
            _react2.default.createElement(_reactNative.Image, {
              source: _require(_dependencyMap[4])
            }),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.intro
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.introText
                },
                "To get started, you can create a profile for your very own Clutch experience with existing logins:"
              )
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.bottom
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.instructions
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.instructionsText
                },
                "Register directly with Clutch"
              )
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.inputs
              },
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.inputGroup
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.label
                  },
                  "Email Address"
                ),
                _react2.default.createElement(_reactNative.TextInput, {
                  style: styles.input,
                  label: 'Email Address',
                  underlineColorAndroid: 'rgba(0,0,0,0)',
                  onChangeText: function onChangeText(email) {
                    return _this3.setState({
                      email: email
                    });
                  },
                  value: email
                })
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.inputGroup
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.label
                  },
                  "Password"
                ),
                _react2.default.createElement(_reactNative.TextInput, {
                  style: styles.input,
                  underlineColorAndroid: 'rgba(0,0,0,0)',
                  onChangeText: function onChangeText(password) {
                    return _this3.setState({
                      password: password
                    });
                  },
                  secureTextEntry: true,
                  value: password
                })
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.inputGroup
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.label
                  },
                  "Verify Password"
                ),
                _react2.default.createElement(_reactNative.TextInput, {
                  style: styles.input,
                  underlineColorAndroid: 'rgba(0,0,0,0)',
                  onChangeText: function onChangeText(verifyPassword) {
                    return _this3.setState({
                      verifyPassword: verifyPassword
                    });
                  },
                  secureTextEntry: true,
                  value: verifyPassword
                })
              )
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.buttons
              },
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  style: [styles.button],
                  onPress: this.handleRegisterPress.bind(this)
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.buttonText
                  },
                  "Register with Email"
                )
              ),
              _react2.default.createElement(
                _reactNative.Text,
                null,
                error
              )
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.login
            },
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.loginText
              },
              "Already a user?"
            ),
            _react2.default.createElement(
              _reactNative.TouchableOpacity,
              {
                onPress: function onPress() {
                  navigate('Login');
                }
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.loginLinkText
                },
                "Sign In."
              )
            )
          )
        );
      }
    }]);
    return Register;
  }(_react2.default.Component)) || _class;

  exports.default = Register;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'center',
      backgroundColor: _Styles2.default.colors.white
    },
    logo: {
      marginTop: 32,
      alignItems: 'center',
      justifyContent: 'flex-end'
    },
    bottom: {
      borderBottomWidth: 1,
      borderBottomColor: _Styles2.default.colors.gray,
      flex: 1,
      alignItems: 'center',
      marginHorizontal: 32
    },
    intro: {
      borderBottomWidth: 1,
      borderBottomColor: _Styles2.default.colors.gray,
      padding: 32,
      marginHorizontal: 32
    },
    introText: {
      textAlign: 'center',
      fontWeight: "200",
      fontSize: 20
    },
    inputs: {
      maxWidth: 480
    },
    inputGroup: {
      borderColor: _Styles2.default.colors.salmon,
      borderWidth: 2,
      borderRadius: 10,
      padding: 8,
      marginBottom: 16,
      minWidth: '100%',
      marginLeft: 'auto',
      marginRight: 'auto'
    },
    label: {
      fontSize: 10
    },
    input: {
      borderWidth: 0
    },
    instructions: {
      padding: 16
    },
    instructionsText: {
      fontSize: 16,
      textAlign: 'center'
    },
    buttons: {
      minWidth: '100%',
      paddingHorizontal: 20
    },
    button: {
      alignSelf: 'center',
      minWidth: 260,
      marginBottom: 26,
      paddingVertical: 16,
      justifyContent: 'center',
      alignItems: 'center',
      marginHorizontal: 8,
      backgroundColor: _Styles2.default.colors.salmon,
      borderRadius: 10
    },
    buttonText: {
      textAlign: 'center',
      color: _Styles2.default.colors.white,
      fontWeight: 'bold',
      fontSize: 20
    },
    login: {
      alignSelf: 'flex-end',
      marginHorizontal: 32,
      paddingVertical: 8,
      flexDirection: 'row',
      justifyContent: 'flex-end'
    },
    loginText: {
      textAlign: 'right',
      fontStyle: 'italic'
    },
    loginLinkText: {
      marginLeft: 4,
      fontWeight: 'bold',
      fontStyle: 'italic'
    }
  });
},1020,[103,14,858,1015,1016]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _Styles = _require(_dependencyMap[3]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _AddCollect = _require(_dependencyMap[4]);

  var _AddCollect2 = babelHelpers.interopRequireDefault(_AddCollect);

  var Collects = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Collects, _React$Component);

    function Collects(props) {
      babelHelpers.classCallCheck(this, Collects);

      var _this = babelHelpers.possibleConstructorReturn(this, (Collects.__proto__ || Object.getPrototypeOf(Collects)).call(this, props));

      _this.handleRowPress.bind(_this);

      _this.handleAddPress.bind(_this);

      _this.state = {
        showAddDialog: false
      };
      return _this;
    }

    babelHelpers.createClass(Collects, [{
      key: "handleRowPress",
      value: function handleRowPress(collection) {
        var navigate = this.props.navigation.navigate;
        navigate('Collection', {
          _id: collection._id,
          name: collection.name
        });
      }
    }, {
      key: "handleAddPress",
      value: function handleAddPress() {
        this.setState(function (state) {
          return {
            showAddDialog: !state.showAddDialog
          };
        });
      }
    }, {
      key: "card",
      value: function card(collection) {
        var _this2 = this;

        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.card
          },
          _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              style: styles.link,
              onPress: function onPress() {
                _this2.handleRowPress(collection);
              }
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.image
              },
              _react2.default.createElement(
                _reactNative.Text,
                null,
                "Image"
              )
            ),
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.name
              },
              collection.name
            )
          )
        );
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var loaded = this.props.loaded;
        var showAddDialog = this.state.showAddDialog;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              onPress: function onPress() {
                _this3.handleAddPress();
              }
            },
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.add
              },
              "Create a new collection"
            )
          ),
          !loaded ? _react2.default.createElement(
            _reactNative.Text,
            null,
            "Loading Collections..."
          ) : _react2.default.createElement(_reactNativeMeteor.MeteorListView, {
            collection: "Collects",
            enableEmptySections: true,
            style: styles.list,
            options: {
              sort: {
                createdAt: -1
              }
            },
            renderRow: this.card.bind(this)
          }),
          _react2.default.createElement(_AddCollect2.default, babelHelpers.extends({
            visible: showAddDialog,
            redirect: true,
            hide: function hide() {
              _this3.handleAddPress();
            }
          }, this.props))
        );
      }
    }]);
    return Collects;
  }(_react2.default.Component), _class.navigationOptions = {
    headerLeft: 'Edit'
  }, _temp);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      justifyContent: 'center'
    },
    list: {
      marginHorizontal: 22,
      borderTopColor: _Styles2.default.colors.light,
      borderTopWidth: 1
    },
    card: {
      borderBottomColor: _Styles2.default.colors.light,
      borderBottomWidth: 1,
      flexDirection: 'row',
      alignItems: 'center'
    },
    link: {
      paddingVertical: 22,
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center'
    },
    add: {
      color: _Styles2.default.colors.teal,
      padding: 22,
      fontWeight: "600",
      fontSize: _Styles2.default.text_1
    },
    name: {
      fontSize: 18,
      fontWeight: 'bold',
      marginLeft: 20,
      color: _Styles2.default.colors.gray
    },
    image: {
      borderColor: _Styles2.default.colors.light,
      borderWidth: 1,
      width: 80,
      height: 80,
      alignItems: 'center',
      justifyContent: 'center'
    }
  });

  exports.default = (0, _reactNativeMeteor.withTracker)(function () {
    var subscription = _reactNativeMeteor2.default.subscribe('collects');

    return {
      loaded: subscription.ready()
    };
  })(Collects);
},1021,[103,14,858,1015,1022]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _reactNativeDialog = _require(_dependencyMap[3]);

  var _reactNativeDialog2 = babelHelpers.interopRequireDefault(_reactNativeDialog);

  var AddCollect = function (_React$Component) {
    babelHelpers.inherits(AddCollect, _React$Component);

    function AddCollect(props) {
      babelHelpers.classCallCheck(this, AddCollect);

      var _this = babelHelpers.possibleConstructorReturn(this, (AddCollect.__proto__ || Object.getPrototypeOf(AddCollect)).call(this, props));

      _this.state = {
        name: ''
      };

      _this.hideSelf.bind(_this);

      return _this;
    }

    babelHelpers.createClass(AddCollect, [{
      key: "createNewCollection",
      value: function createNewCollection(collection, nav, redirect) {
        _reactNativeMeteor2.default.call('collects.insert', collection, function (err, col) {
          if (redirect) nav('Collection', {
            _id: col,
            name: collection.name
          });
        });
      }
    }, {
      key: "handleAddPress",
      value: function handleAddPress() {
        var name = this.state.name;
        var _props = this.props,
            navigation = _props.navigation,
            redirect = _props.redirect;

        if (name) {
          this.createNewCollection({
            name: name
          }, navigation.navigate, redirect);
        }

        this.hideSelf();
      }
    }, {
      key: "handleCancelPress",
      value: function handleCancelPress() {
        this.hideSelf();
      }
    }, {
      key: "hideSelf",
      value: function hideSelf() {
        this.props.hide();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var visible = this.props.visible;
        return _react2.default.createElement(
          _reactNative.View,
          null,
          _react2.default.createElement(
            _reactNativeDialog2.default.Container,
            {
              visible: visible,
              useNativeDriver: true
            },
            _react2.default.createElement(
              _reactNativeDialog2.default.Title,
              null,
              "New Collection"
            ),
            _react2.default.createElement(
              _reactNativeDialog2.default.Description,
              null,
              "Enter a name for this list"
            ),
            _react2.default.createElement(_reactNativeDialog2.default.Input, {
              value: this.state.name,
              onChangeText: function onChangeText(name) {
                return _this2.setState({
                  name: name
                });
              }
            }),
            _react2.default.createElement(_reactNativeDialog2.default.Button, {
              label: "Add",
              onPress: this.handleAddPress.bind(this)
            }),
            _react2.default.createElement(_reactNativeDialog2.default.Button, {
              label: "Cancel",
              onPress: this.handleCancelPress.bind(this)
            })
          )
        );
      }
    }]);
    return AddCollect;
  }(_react2.default.Component);

  exports.default = AddCollect;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      justifyContent: 'center'
    }
  });
},1022,[103,14,858,1023]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Button = _require(_dependencyMap[0]);

  var _Button2 = babelHelpers.interopRequireDefault(_Button);

  var _Container = _require(_dependencyMap[1]);

  var _Container2 = babelHelpers.interopRequireDefault(_Container);

  var _Description = _require(_dependencyMap[2]);

  var _Description2 = babelHelpers.interopRequireDefault(_Description);

  var _Input = _require(_dependencyMap[3]);

  var _Input2 = babelHelpers.interopRequireDefault(_Input);

  var _Switch = _require(_dependencyMap[4]);

  var _Switch2 = babelHelpers.interopRequireDefault(_Switch);

  var _Title = _require(_dependencyMap[5]);

  var _Title2 = babelHelpers.interopRequireDefault(_Title);

  exports.default = {
    Button: _Button2.default,
    Container: _Container2.default,
    Description: _Description2.default,
    Input: _Input2.default,
    Switch: _Switch2.default,
    Title: _Title2.default
  };
},1023,[1024,1025,1050,1051,1052,1053]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var COLOR = "#169689";
  var DialogButton = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(DialogButton, _React$PureComponent);

    function DialogButton() {
      babelHelpers.classCallCheck(this, DialogButton);
      return babelHelpers.possibleConstructorReturn(this, (DialogButton.__proto__ || Object.getPrototypeOf(DialogButton)).apply(this, arguments));
    }

    babelHelpers.createClass(DialogButton, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            label = _props.label,
            color = _props.color,
            disabled = _props.disabled,
            bold = _props.bold,
            onPress = _props.onPress,
            style = _props.style,
            otherProps = babelHelpers.objectWithoutProperties(_props, ["label", "color", "disabled", "bold", "onPress", "style"]);
        var fontWeight = bold ? "600" : "normal";
        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            style: styles.button,
            onPress: onPress,
            disabled: disabled
          },
          _react2.default.createElement(
            _reactNative.Text,
            babelHelpers.extends({
              style: [styles.text, {
                color: color,
                fontWeight: fontWeight
              }, style]
            }, otherProps),
            label.toUpperCase()
          )
        );
      }
    }]);
    return DialogButton;
  }(_react2.default.PureComponent), _class.propTypes = babelHelpers.extends({}, _reactNative.Text.propTypes, {
    label: _propTypes2.default.string.isRequired,
    color: _propTypes2.default.string,
    bold: _propTypes2.default.bool,
    disabled: _propTypes2.default.bool,
    onPress: _propTypes2.default.func.isRequired
  }), _class.defaultProps = {
    color: COLOR,
    disabled: false
  }, _class.displayName = "DialogButton", _temp);
  exports.default = DialogButton;

  var styles = _reactNative.StyleSheet.create({
    button: {
      justifyContent: "center",
      alignItems: "center"
    },
    text: {
      textAlign: "center",
      backgroundColor: "transparent",
      padding: 8,
      fontSize: 14
    }
  });
},1024,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _reactNativeModal = _require(_dependencyMap[3]);

  var _reactNativeModal2 = babelHelpers.interopRequireDefault(_reactNativeModal);

  var IOS_MODAL_ANIMATION = {
    from: {
      opacity: 0,
      scale: 1.2
    },
    0.5: {
      opacity: 1
    },
    to: {
      opacity: 1,
      scale: 1
    }
  };
  var DialogContainer = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(DialogContainer, _React$PureComponent);

    function DialogContainer() {
      babelHelpers.classCallCheck(this, DialogContainer);
      return babelHelpers.possibleConstructorReturn(this, (DialogContainer.__proto__ || Object.getPrototypeOf(DialogContainer)).apply(this, arguments));
    }

    babelHelpers.createClass(DialogContainer, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            blurComponentIOS = _props.blurComponentIOS,
            _props$buttonSeparato = _props.buttonSeparatorStyle,
            buttonSeparatorStyle = _props$buttonSeparato === undefined ? {} : _props$buttonSeparato,
            children = _props.children,
            _props$contentStyle = _props.contentStyle,
            contentStyle = _props$contentStyle === undefined ? {} : _props$contentStyle,
            _props$footerStyle = _props.footerStyle,
            footerStyle = _props$footerStyle === undefined ? {} : _props$footerStyle,
            _props$headerStyle = _props.headerStyle,
            headerStyle = _props$headerStyle === undefined ? {} : _props$headerStyle,
            visible = _props.visible,
            otherProps = babelHelpers.objectWithoutProperties(_props, ["blurComponentIOS", "buttonSeparatorStyle", "children", "contentStyle", "footerStyle", "headerStyle", "visible"]);
        var titleChildrens = [];
        var descriptionChildrens = [];
        var buttonChildrens = [];
        var otherChildrens = [];

        _react2.default.Children.forEach(children, function (child) {
          if (!child) {
            return;
          }

          if (child.type.name === "DialogTitle" || child.type.displayName === "DialogTitle") {
            titleChildrens.push(child);
          } else if (child.type.name === "DialogDescription" || child.type.displayName === "DialogDescription") {
            descriptionChildrens.push(child);
          } else if (child.type.name === "DialogButton" || child.type.displayName === "DialogButton") {
            buttonChildrens.push(child);
          } else {
            otherChildrens.push(child);
          }
        });

        return _react2.default.createElement(
          _reactNativeModal2.default,
          babelHelpers.extends({
            backdropOpacity: 0.3,
            style: styles.modal,
            isVisible: visible,
            animationIn: "zoomIn",
            animationOut: "fadeOut"
          }, otherProps),
          _react2.default.createElement(
            _reactNative.KeyboardAvoidingView,
            {
              behavior: undefined,
              style: styles.container
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: [styles.content, contentStyle]
              },
              false,
              false,
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: [styles.header, headerStyle]
                },
                titleChildrens,
                descriptionChildrens
              ),
              otherChildrens,
              Boolean(buttonChildrens.length) && _react2.default.createElement(
                _reactNative.View,
                {
                  style: [styles.footer, footerStyle]
                },
                buttonChildrens.map(function (x, i) {
                  return _react2.default.cloneElement(x, {
                    key: "dialog-button-" + i
                  });
                })
              )
            )
          )
        );
      }
    }]);
    return DialogContainer;
  }(_react2.default.PureComponent), _class.propTypes = {
    blurComponentIOS: _propTypes2.default.node,
    buttonSeparatorStyle: _propTypes2.default.object,
    children: _propTypes2.default.node.isRequired,
    contentStyle: _propTypes2.default.object,
    footerStyle: _propTypes2.default.object,
    headerStyle: _propTypes2.default.object,
    visible: _propTypes2.default.bool
  }, _class.defaultProps = {
    visible: false
  }, _temp);
  exports.default = DialogContainer;

  var styles = _reactNative.StyleSheet.create({
    modal: {
      flex: 1,
      marginLeft: 0,
      marginRight: 0,
      marginTop: 0,
      marginBottom: 0
    },
    container: {
      justifyContent: "center",
      alignItems: "center"
    },
    blur: {
      position: "absolute",
      backgroundColor: "rgb(255,255,255)",
      top: 0,
      left: 0,
      bottom: 0,
      right: 0
    },
    content: {
      flexDirection: "column",
      borderRadius: 3,
      padding: 16,
      margin: 16,
      backgroundColor: "white",
      overflow: "hidden",
      elevation: 4,
      minWidth: 300
    },
    header: {
      margin: 12
    },
    footer: {
      flexDirection: "row",
      alignItems: "center",
      justifyContent: "flex-end",
      marginTop: 4
    },
    buttonSeparator: {
      height: "100%",
      backgroundColor: "#A9ADAE",
      width: _reactNative.StyleSheet.hairlineWidth
    }
  });
},1025,[103,121,14,1026]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ReactNativeModal = undefined;

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _propTypes = _require(_dependencyMap[2]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNativeAnimatable = _require(_dependencyMap[3]);

  var _animations = _require(_dependencyMap[4]);

  var ANIMATION_DEFINITIONS = babelHelpers.interopRequireWildcard(_animations);

  var _indexStyle = _require(_dependencyMap[5]);

  var _indexStyle2 = babelHelpers.interopRequireDefault(_indexStyle);

  (0, _reactNativeAnimatable.initializeRegistryWithDefinitions)(ANIMATION_DEFINITIONS);

  var makeAnimation = function makeAnimation(name, obj) {
    (0, _reactNativeAnimatable.registerAnimation)(name, (0, _reactNativeAnimatable.createAnimation)(obj));
  };

  var isObject = function isObject(obj) {
    return obj !== null && typeof obj === "object";
  };

  var ReactNativeModal = (_temp = _class = function (_Component) {
    babelHelpers.inherits(ReactNativeModal, _Component);

    function ReactNativeModal(props) {
      babelHelpers.classCallCheck(this, ReactNativeModal);

      var _this = babelHelpers.possibleConstructorReturn(this, (ReactNativeModal.__proto__ || Object.getPrototypeOf(ReactNativeModal)).call(this, props));

      _initialiseProps.call(_this);

      _this.buildAnimations(props);

      if (_this.state.isSwipeable) {
        _this.state = babelHelpers.extends({}, _this.state, {
          pan: new _reactNative.Animated.ValueXY()
        });

        _this.buildPanResponder();
      }

      if (_this.props.isVisible) {
        _this.state = babelHelpers.extends({}, _this.state, {
          isVisible: true,
          showContent: true
        });
      }

      return _this;
    }

    babelHelpers.createClass(ReactNativeModal, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (!this.state.isVisible && nextProps.isVisible) {
          this.setState({
            isVisible: true,
            showContent: true
          });
        }

        if (this.props.animationIn !== nextProps.animationIn || this.props.animationOut !== nextProps.animationOut) {
          this.buildAnimations(nextProps);
        }

        if (this.props.backdropOpacity !== nextProps.backdropOpacity && this.backdropRef) {
          this.backdropRef.transitionTo({
            opacity: nextProps.backdropOpacity
          }, this.props.backdropTransitionInTiming);
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.state.isVisible) {
          this.open();
        }

        _reactNative.DeviceEventEmitter.addListener("didUpdateDimensions", this.handleDimensionsUpdate);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _reactNative.DeviceEventEmitter.removeListener("didUpdateDimensions", this.handleDimensionsUpdate);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (this.props.isVisible && !prevProps.isVisible) {
          this.open();
        } else if (!this.props.isVisible && prevProps.isVisible) {
          this._close();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            animationIn = _props.animationIn,
            animationInTiming = _props.animationInTiming,
            animationOut = _props.animationOut,
            animationOutTiming = _props.animationOutTiming,
            avoidKeyboard = _props.avoidKeyboard,
            backdropColor = _props.backdropColor,
            backdropOpacity = _props.backdropOpacity,
            backdropTransitionInTiming = _props.backdropTransitionInTiming,
            backdropTransitionOutTiming = _props.backdropTransitionOutTiming,
            children = _props.children,
            isVisible = _props.isVisible,
            onModalShow = _props.onModalShow,
            onBackdropPress = _props.onBackdropPress,
            onBackButtonPress = _props.onBackButtonPress,
            useNativeDriver = _props.useNativeDriver,
            style = _props.style,
            otherProps = babelHelpers.objectWithoutProperties(_props, ["animationIn", "animationInTiming", "animationOut", "animationOutTiming", "avoidKeyboard", "backdropColor", "backdropOpacity", "backdropTransitionInTiming", "backdropTransitionOutTiming", "children", "isVisible", "onModalShow", "onBackdropPress", "onBackButtonPress", "useNativeDriver", "style"]);
        var _state = this.state,
            deviceWidth = _state.deviceWidth,
            deviceHeight = _state.deviceHeight;
        var computedStyle = [{
          margin: deviceWidth * 0.05,
          transform: [{
            translateY: 0
          }]
        }, _indexStyle2.default.content, style];
        var panHandlers = {};
        var panPosition = {};

        if (this.state.isSwipeable) {
          panHandlers = babelHelpers.extends({}, this.panResponder.panHandlers);
          panPosition = this.state.pan.getLayout();
        }

        var _children = this.props.hideModalContentWhileAnimating && this.props.useNativeDriver && !this.state.showContent ? _react2.default.createElement(_reactNativeAnimatable.View, null) : children;

        var containerView = _react2.default.createElement(
          _reactNativeAnimatable.View,
          babelHelpers.extends({}, panHandlers, {
            ref: function ref(_ref) {
              return _this2.contentRef = _ref;
            },
            style: [panPosition, computedStyle],
            pointerEvents: "box-none",
            useNativeDriver: useNativeDriver
          }, otherProps),
          _children
        );

        return _react2.default.createElement(
          _reactNative.Modal,
          babelHelpers.extends({
            transparent: true,
            animationType: "none",
            visible: this.state.isVisible,
            onRequestClose: onBackButtonPress
          }, otherProps),
          _react2.default.createElement(
            _reactNative.TouchableWithoutFeedback,
            {
              onPress: onBackdropPress
            },
            _react2.default.createElement(_reactNativeAnimatable.View, {
              ref: function ref(_ref2) {
                return _this2.backdropRef = _ref2;
              },
              useNativeDriver: useNativeDriver,
              style: [_indexStyle2.default.backdrop, {
                backgroundColor: this.state.showContent ? backdropColor : "transparent",
                width: deviceWidth,
                height: deviceHeight
              }]
            })
          ),
          avoidKeyboard && _react2.default.createElement(
            _reactNative.KeyboardAvoidingView,
            {
              behavior: null,
              pointerEvents: "box-none",
              style: computedStyle.concat([{
                margin: 0
              }])
            },
            containerView
          ),
          !avoidKeyboard && containerView
        );
      }
    }]);
    return ReactNativeModal;
  }(_react.Component), _class.propTypes = {
    animationIn: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
    animationInTiming: _propTypes2.default.number,
    animationOut: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
    animationOutTiming: _propTypes2.default.number,
    avoidKeyboard: _propTypes2.default.bool,
    backdropColor: _propTypes2.default.string,
    backdropOpacity: _propTypes2.default.number,
    backdropTransitionInTiming: _propTypes2.default.number,
    backdropTransitionOutTiming: _propTypes2.default.number,
    children: _propTypes2.default.node.isRequired,
    isVisible: _propTypes2.default.bool.isRequired,
    hideModalContentWhileAnimating: _propTypes2.default.bool,
    onModalShow: _propTypes2.default.func,
    onModalHide: _propTypes2.default.func,
    onBackButtonPress: _propTypes2.default.func,
    onBackdropPress: _propTypes2.default.func,
    onSwipe: _propTypes2.default.func,
    swipeThreshold: _propTypes2.default.number,
    swipeDirection: _propTypes2.default.oneOf(["up", "down", "left", "right"]),
    useNativeDriver: _propTypes2.default.bool,
    style: _propTypes2.default.any,
    scrollTo: _propTypes2.default.func,
    scrollOffset: _propTypes2.default.number,
    scrollOffsetMax: _propTypes2.default.number,
    supportedOrientations: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(["portrait", "portrait-upside-down", "landscape", "landscape-left", "landscape-right"]))
  }, _class.defaultProps = {
    animationIn: "slideInUp",
    animationInTiming: 300,
    animationOut: "slideOutDown",
    animationOutTiming: 300,
    avoidKeyboard: false,
    backdropColor: "black",
    backdropOpacity: 0.7,
    backdropTransitionInTiming: 300,
    backdropTransitionOutTiming: 300,
    onModalShow: function onModalShow() {
      return null;
    },
    onModalHide: function onModalHide() {
      return null;
    },
    isVisible: false,
    hideModalContentWhileAnimating: false,
    onBackdropPress: function onBackdropPress() {
      return null;
    },
    onBackButtonPress: function onBackButtonPress() {
      return null;
    },
    swipeThreshold: 100,
    useNativeDriver: false,
    scrollTo: null,
    scrollOffset: 0,
    scrollOffsetMax: 0,
    supportedOrientations: ["portrait", "landscape"]
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.state = {
      showContent: true,
      isVisible: false,
      deviceWidth: _reactNative.Dimensions.get("window").width,
      deviceHeight: _reactNative.Dimensions.get("window").height,
      isSwipeable: this.props.swipeDirection ? true : false,
      pan: null
    };
    this.transitionLock = null;
    this.inSwipeClosingState = false;

    this.buildPanResponder = function () {
      var animEvt = null;

      if (_this3.props.swipeDirection === "right" || _this3.props.swipeDirection === "left") {
        animEvt = _reactNative.Animated.event([null, {
          dx: _this3.state.pan.x
        }]);
      } else {
        animEvt = _reactNative.Animated.event([null, {
          dy: _this3.state.pan.y
        }]);
      }

      _this3.panResponder = _reactNative.PanResponder.create({
        onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
          if (_this3.props.scrollTo) {
            if (_this3.props.scrollOffset > 0) {
              return false;
            }
          }

          return true;
        },
        onPanResponderMove: function onPanResponderMove(evt, gestureState) {
          var accDistance = _this3.getAccDistancePerDirection(gestureState);

          var newOpacityFactor = 1 - accDistance / _this3.state.deviceWidth;

          if (_this3.isSwipeDirectionAllowed(gestureState)) {
            _this3.backdropRef && _this3.backdropRef.transitionTo({
              opacity: _this3.props.backdropOpacity * newOpacityFactor
            });
            animEvt(evt, gestureState);
          } else {
            if (_this3.props.scrollTo) {
              var offsetY = -gestureState.dy;

              if (offsetY > _this3.props.scrollOffsetMax) {
                offsetY -= (offsetY - _this3.props.scrollOffsetMax) / 2;
              }

              _this3.props.scrollTo({
                y: offsetY,
                animated: false
              });
            }
          }
        },
        onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {
          var accDistance = _this3.getAccDistancePerDirection(gestureState);

          if (accDistance > _this3.props.swipeThreshold) {
            if (_this3.props.onSwipe) {
              _this3.inSwipeClosingState = true;

              _this3.props.onSwipe();

              return;
            }
          }

          if (_this3.backdropRef) {
            _this3.backdropRef.transitionTo({
              opacity: _this3.props.backdropOpacity
            }, _this3.props.backdropTransitionInTiming);
          }

          _reactNative.Animated.spring(_this3.state.pan, {
            toValue: {
              x: 0,
              y: 0
            },
            bounciness: 0
          }).start();

          if (_this3.props.scrollOffset > _this3.props.scrollOffsetMax) {
            _this3.props.scrollTo({
              y: _this3.props.scrollOffsetMax,
              animated: true
            });
          }
        }
      });
    };

    this.getAccDistancePerDirection = function (gestureState) {
      switch (_this3.props.swipeDirection) {
        case "up":
          return -gestureState.dy;

        case "down":
          return gestureState.dy;

        case "right":
          return gestureState.dx;

        case "left":
          return -gestureState.dx;

        default:
          return 0;
      }
    };

    this.isSwipeDirectionAllowed = function (_ref3) {
      var dy = _ref3.dy,
          dx = _ref3.dx;
      var draggedDown = dy > 0;
      var draggedUp = dy < 0;
      var draggedLeft = dx < 0;
      var draggedRight = dx > 0;

      if (_this3.props.swipeDirection === "up" && draggedUp) {
        return true;
      } else if (_this3.props.swipeDirection === "down" && draggedDown) {
        return true;
      } else if (_this3.props.swipeDirection === "right" && draggedRight) {
        return true;
      } else if (_this3.props.swipeDirection === "left" && draggedLeft) {
        return true;
      }

      return false;
    };

    this.buildAnimations = function (props) {
      var animationIn = props.animationIn;
      var animationOut = props.animationOut;

      if (isObject(animationIn)) {
        var animationName = JSON.stringify(animationIn);
        makeAnimation(animationName, animationIn);
        animationIn = animationName;
      }

      if (isObject(animationOut)) {
        var _animationName = JSON.stringify(animationOut);

        makeAnimation(_animationName, animationOut);
        animationOut = _animationName;
      }

      _this3.animationIn = animationIn;
      _this3.animationOut = animationOut;
    };

    this.handleDimensionsUpdate = function (dimensionsUpdate) {
      var deviceWidth = _reactNative.Dimensions.get("window").width;

      var deviceHeight = _reactNative.Dimensions.get("window").height;

      if (deviceWidth !== _this3.state.deviceWidth || deviceHeight !== _this3.state.deviceHeight) {
        _this3.setState({
          deviceWidth: deviceWidth,
          deviceHeight: deviceHeight
        });
      }
    };

    this.open = function () {
      if (_this3.transitionLock) return;
      _this3.transitionLock = true;

      if (_this3.backdropRef) {
        _this3.backdropRef.transitionTo({
          opacity: _this3.props.backdropOpacity
        }, _this3.props.backdropTransitionInTiming);
      }

      if (_this3.state.isSwipeable) {
        _this3.state.pan.setValue({
          x: 0,
          y: 0
        });
      }

      if (_this3.contentRef) {
        _this3.contentRef[_this3.animationIn](_this3.props.animationInTiming).then(function () {
          _this3.transitionLock = false;

          if (!_this3.props.isVisible) {
            _this3._close();
          } else {
            _this3.props.onModalShow();
          }
        });
      }
    };

    this._close = function () {
      if (_this3.transitionLock) return;
      _this3.transitionLock = true;

      if (_this3.backdropRef) {
        _this3.backdropRef.transitionTo({
          opacity: 0
        }, _this3.props.backdropTransitionOutTiming);
      }

      var animationOut = _this3.animationOut;

      if (_this3.inSwipeClosingState) {
        _this3.inSwipeClosingState = false;

        if (_this3.props.swipeDirection === "up") {
          animationOut = "slideOutUp";
        } else if (_this3.props.swipeDirection === "down") {
          animationOut = "slideOutDown";
        } else if (_this3.props.swipeDirection === "right") {
          animationOut = "slideOutRight";
        } else if (_this3.props.swipeDirection === "left") {
          animationOut = "slideOutLeft";
        }
      }

      if (_this3.contentRef) {
        _this3.contentRef[animationOut](_this3.props.animationOutTiming).then(function () {
          _this3.transitionLock = false;

          if (_this3.props.isVisible) {
            _this3.open();
          } else {
            _this3.setState({
              showContent: false
            }, function () {
              _this3.setState({
                isVisible: false
              });
            });

            _this3.props.onModalHide();
          }
        });
      }
    };
  }, _temp);
  exports.default = ReactNativeModal;
  exports.ReactNativeModal = ReactNativeModal;
},1026,[103,14,121,1027,1048,1049]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initializeRegistryWithDefinitions = exports.registerAnimation = exports.createAnimation = exports.Image = exports.Text = exports.View = exports.createAnimatableComponent = undefined;

  var _createAnimation = _require(_dependencyMap[0]);

  Object.defineProperty(exports, "createAnimation", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_createAnimation).default;
    }
  });

  var _registry = _require(_dependencyMap[1]);

  Object.defineProperty(exports, "registerAnimation", {
    enumerable: true,
    get: function get() {
      return _registry.registerAnimation;
    }
  });
  Object.defineProperty(exports, "initializeRegistryWithDefinitions", {
    enumerable: true,
    get: function get() {
      return _registry.initializeRegistryWithDefinitions;
    }
  });

  var _reactNative = _require(_dependencyMap[2]);

  var _createAnimatableComponent = _require(_dependencyMap[3]);

  var _createAnimatableComponent2 = babelHelpers.interopRequireDefault(_createAnimatableComponent);

  var _definitions = _require(_dependencyMap[4]);

  var ANIMATION_DEFINITIONS = babelHelpers.interopRequireWildcard(_definitions);
  (0, _registry.initializeRegistryWithDefinitions)(ANIMATION_DEFINITIONS);
  var createAnimatableComponent = exports.createAnimatableComponent = _createAnimatableComponent2.default;
  var View = exports.View = (0, _createAnimatableComponent2.default)(_reactNative.View);
  var Text = exports.Text = (0, _createAnimatableComponent2.default)(_reactNative.Text);
  var Image = exports.Image = (0, _createAnimatableComponent2.default)(_reactNative.Image);
},1027,[1028,1030,14,1031,1036]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createAnimation;

  var _flattenStyle = _require(_dependencyMap[0]);

  var _flattenStyle2 = babelHelpers.interopRequireDefault(_flattenStyle);

  function compareNumbers(a, b) {
    return a - b;
  }

  function notNull(value) {
    return value !== null;
  }

  function parsePosition(value) {
    if (value === 'from') {
      return 0;
    } else if (value === 'to') {
      return 1;
    }

    var parsed = parseFloat(value, 10);

    if (isNaN(parsed) || parsed < 0 || parsed > 1) {
      return null;
    }

    return parsed;
  }

  var cache = {};

  function createAnimation(definition) {
    var cacheKey = JSON.stringify(definition);

    if (cache[cacheKey]) {
      return cache[cacheKey];
    }

    var positions = Object.keys(definition).map(parsePosition).filter(notNull);
    positions.sort(compareNumbers);

    if (positions.length < 2) {
      throw new Error('Animation definitions must have at least two values.');
    }

    var compiled = {};

    if (definition.easing) {
      compiled.easing = definition.easing;
    }

    if (definition.style) {
      compiled.style = definition.style;
    }

    var _loop = function _loop(i) {
      var position = positions[i];
      var keyframe = definition[position];

      if (!keyframe) {
        if (position === 0) {
          keyframe = definition.from;
        } else if (position === 1) {
          keyframe = definition.to;
        }
      }

      if (!keyframe) {
        throw new Error('Missing animation keyframe, this should not happen');
      }

      keyframe = (0, _flattenStyle2.default)(keyframe);
      Object.keys(keyframe).forEach(function (key) {
        if (!(key in compiled)) {
          compiled[key] = {
            inputRange: [],
            outputRange: []
          };
        }

        compiled[key].inputRange.push(position);
        compiled[key].outputRange.push(keyframe[key]);
      });
    };

    for (var i = 0; i < positions.length; i += 1) {
      _loop(i);
    }

    cache[cacheKey] = compiled;
    return compiled;
  }
},1028,[1029]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = flattenStyle;

  var _reactNative = _require(_dependencyMap[0]);

  function flattenStyle(style) {
    var flatStyle = babelHelpers.extends({}, _reactNative.StyleSheet.flatten(style));

    if (flatStyle.transform) {
      flatStyle.transform.forEach(function (transform) {
        var key = Object.keys(transform)[0];
        flatStyle[key] = transform[key];
      });
      delete flatStyle.transform;
    }

    return flatStyle;
  }
},1029,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.registerAnimation = registerAnimation;
  exports.getAnimationByName = getAnimationByName;
  exports.getAnimationNames = getAnimationNames;
  exports.initializeRegistryWithDefinitions = initializeRegistryWithDefinitions;

  var _createAnimation = _require(_dependencyMap[0]);

  var _createAnimation2 = babelHelpers.interopRequireDefault(_createAnimation);

  var animationRegistry = {};

  function registerAnimation(animationName, animation) {
    animationRegistry[animationName] = animation;
  }

  function getAnimationByName(animationName) {
    return animationRegistry[animationName];
  }

  function getAnimationNames() {
    return Object.keys(animationRegistry);
  }

  function initializeRegistryWithDefinitions(definitions) {
    Object.keys(definitions).forEach(function (animationName) {
      registerAnimation(animationName, (0, _createAnimation2.default)(definitions[animationName]));
    });
  }
},1030,[1028]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createAnimatableComponent;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var _wrapStyleTransforms = _require(_dependencyMap[3]);

  var _wrapStyleTransforms2 = babelHelpers.interopRequireDefault(_wrapStyleTransforms);

  var _getStyleValues = _require(_dependencyMap[4]);

  var _getStyleValues2 = babelHelpers.interopRequireDefault(_getStyleValues);

  var _flattenStyle = _require(_dependencyMap[5]);

  var _flattenStyle2 = babelHelpers.interopRequireDefault(_flattenStyle);

  var _createAnimation = _require(_dependencyMap[6]);

  var _createAnimation2 = babelHelpers.interopRequireDefault(_createAnimation);

  var _registry = _require(_dependencyMap[7]);

  var _easing = _require(_dependencyMap[8]);

  var _easing2 = babelHelpers.interopRequireDefault(_easing);

  var INTERPOLATION_STYLE_PROPERTIES = ['rotate', 'rotateX', 'rotateY', 'rotateZ', 'skewX', 'skewY', 'transformMatrix', 'backgroundColor', 'borderColor', 'borderTopColor', 'borderRightColor', 'borderBottomColor', 'borderLeftColor', 'shadowColor', 'color', 'textDecorationColor', 'tintColor'];
  var ZERO_CLAMPED_STYLE_PROPERTIES = ['width', 'height'];

  function omit(keys, source) {
    var filtered = {};
    Object.keys(source).forEach(function (key) {
      if (keys.indexOf(key) === -1) {
        filtered[key] = source[key];
      }
    });
    return filtered;
  }

  function deepEquals(a, b) {
    return a === b || JSON.stringify(a) === JSON.stringify(b);
  }

  function getAnimationTarget(iteration, direction) {
    switch (direction) {
      case 'reverse':
        return 0;

      case 'alternate':
        return iteration % 2 ? 0 : 1;

      case 'alternate-reverse':
        return iteration % 2 ? 1 : 0;

      case 'normal':
      default:
        return 1;
    }
  }

  function getAnimationOrigin(iteration, direction) {
    return getAnimationTarget(iteration, direction) ? 0 : 1;
  }

  function getCompiledAnimation(animation) {
    if (typeof animation === 'string') {
      var compiledAnimation = (0, _registry.getAnimationByName)(animation);

      if (!compiledAnimation) {
        throw new Error("No animation registred by the name of " + animation);
      }

      return compiledAnimation;
    }

    return (0, _createAnimation2.default)(animation);
  }

  function makeInterpolatedStyle(compiledAnimation, animationValue) {
    var style = {};
    Object.keys(compiledAnimation).forEach(function (key) {
      if (key === 'style') {
        babelHelpers.extends(style, compiledAnimation.style);
      } else if (key !== 'easing') {
        style[key] = animationValue.interpolate(compiledAnimation[key]);
      }
    });
    return (0, _wrapStyleTransforms2.default)(style);
  }

  function transitionToValue(property, transitionValue, toValue, duration, easing) {
    var useNativeDriver = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
    var delay = arguments[6];
    var onTransitionBegin = arguments[7];
    var onTransitionEnd = arguments[8];
    var animation = duration || easing || delay ? _reactNative.Animated.timing(transitionValue, {
      toValue: toValue,
      delay: delay,
      duration: duration || 1000,
      easing: typeof easing === 'function' ? easing : _easing2.default[easing || 'ease'],
      useNativeDriver: useNativeDriver
    }) : _reactNative.Animated.spring(transitionValue, {
      toValue: toValue,
      useNativeDriver: useNativeDriver
    });
    setTimeout(function () {
      return onTransitionBegin(property);
    }, delay);
    animation.start(function () {
      return onTransitionEnd(property);
    });
  }

  function createAnimatableComponent(WrappedComponent) {
    var _class, _temp, _initialiseProps;

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';

    var Animatable = _reactNative.Animated.createAnimatedComponent(WrappedComponent);

    return _temp = _class = function (_Component) {
      babelHelpers.inherits(AnimatableComponent, _Component);

      function AnimatableComponent(props) {
        babelHelpers.classCallCheck(this, AnimatableComponent);

        var _this = babelHelpers.possibleConstructorReturn(this, (AnimatableComponent.__proto__ || Object.getPrototypeOf(AnimatableComponent)).call(this, props));

        _initialiseProps.call(_this);

        var animationValue = new _reactNative.Animated.Value(getAnimationOrigin(0, _this.props.direction));
        var animationStyle = {};
        var compiledAnimation = {};

        if (props.animation) {
          compiledAnimation = getCompiledAnimation(props.animation);
          animationStyle = makeInterpolatedStyle(compiledAnimation, animationValue);
        }

        _this.state = {
          animationValue: animationValue,
          animationStyle: animationStyle,
          compiledAnimation: compiledAnimation,
          transitionStyle: {},
          transitionValues: {},
          currentTransitionValues: {}
        };

        if (props.transition) {
          _this.state = babelHelpers.extends({}, _this.state, _this.initializeTransitionState(props.transition));
        }

        _this.delayTimer = null;
        (0, _registry.getAnimationNames)().forEach(function (animationName) {
          if (!(animationName in _this)) {
            _this[animationName] = _this.animate.bind(_this, animationName);
          }
        });
        return _this;
      }

      babelHelpers.createClass(AnimatableComponent, [{
        key: "initializeTransitionState",
        value: function initializeTransitionState(transitionKeys) {
          var transitionValues = {};
          var styleValues = {};
          var currentTransitionValues = (0, _getStyleValues2.default)(transitionKeys, this.props.style);
          Object.keys(currentTransitionValues).forEach(function (key) {
            var value = currentTransitionValues[key];

            if (INTERPOLATION_STYLE_PROPERTIES.indexOf(key) !== -1 || typeof value !== 'number') {
              transitionValues[key] = new _reactNative.Animated.Value(0);
              styleValues[key] = value;
            } else {
              var animationValue = new _reactNative.Animated.Value(value);
              transitionValues[key] = animationValue;
              styleValues[key] = animationValue;
            }
          });
          return {
            currentTransitionValues: currentTransitionValues,
            transitionStyle: styleValues,
            transitionValues: transitionValues
          };
        }
      }, {
        key: "getTransitionState",
        value: function getTransitionState(keys) {
          var _this2 = this;

          var transitionKeys = typeof keys === 'string' ? [keys] : keys;
          var _state = this.state,
              transitionValues = _state.transitionValues,
              currentTransitionValues = _state.currentTransitionValues,
              transitionStyle = _state.transitionStyle;
          var missingKeys = transitionKeys.filter(function (key) {
            return !_this2.state.transitionValues[key];
          });

          if (missingKeys.length) {
            var transitionState = this.initializeTransitionState(missingKeys);
            transitionValues = babelHelpers.extends({}, transitionValues, transitionState.transitionValues);
            currentTransitionValues = babelHelpers.extends({}, currentTransitionValues, transitionState.currentTransitionValues);
            transitionStyle = babelHelpers.extends({}, transitionStyle, transitionState.transitionStyle);
          }

          return {
            transitionValues: transitionValues,
            currentTransitionValues: currentTransitionValues,
            transitionStyle: transitionStyle
          };
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(nativeProps) {
          if (this.ref) {
            this.ref.setNativeProps(nativeProps);
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this3 = this;

          var _props = this.props,
              animation = _props.animation,
              duration = _props.duration,
              delay = _props.delay,
              onAnimationBegin = _props.onAnimationBegin,
              iterationDelay = _props.iterationDelay;

          if (animation) {
            var startAnimation = function startAnimation() {
              onAnimationBegin();

              _this3.startAnimation(duration, 0, iterationDelay, function (endState) {
                return _this3.props.onAnimationEnd(endState);
              });

              _this3.delayTimer = null;
            };

            if (delay) {
              this.delayTimer = setTimeout(startAnimation, delay);
            } else {
              startAnimation();
            }
          }
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(props) {
          var _this4 = this;

          var animation = props.animation,
              delay = props.delay,
              duration = props.duration,
              easing = props.easing,
              transition = props.transition,
              onAnimationBegin = props.onAnimationBegin;

          if (transition) {
            var values = (0, _getStyleValues2.default)(transition, props.style);
            this.transitionTo(values, duration, easing, delay);
          } else if (!deepEquals(animation, this.props.animation)) {
            if (animation) {
              if (this.delayTimer) {
                this.setAnimation(animation);
              } else {
                onAnimationBegin();
                this.animate(animation, duration).then(function (endState) {
                  return _this4.props.onAnimationEnd(endState);
                });
              }
            } else {
              this.stopAnimation();
            }
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.delayTimer) {
            clearTimeout(this.delayTimer);
          }
        }
      }, {
        key: "setAnimation",
        value: function setAnimation(animation, callback) {
          var compiledAnimation = getCompiledAnimation(animation);
          var animationStyle = makeInterpolatedStyle(compiledAnimation, this.state.animationValue);
          this.setState({
            animationStyle: animationStyle,
            compiledAnimation: compiledAnimation
          }, callback);
        }
      }, {
        key: "animate",
        value: function animate(animation, duration, iterationDelay) {
          var _this5 = this;

          return new Promise(function (resolve) {
            _this5.setAnimation(animation, function () {
              _this5.startAnimation(duration, 0, iterationDelay, resolve);
            });
          });
        }
      }, {
        key: "stopAnimation",
        value: function stopAnimation() {
          this.setState({
            scheduledAnimation: false,
            animationStyle: {}
          });
          this.state.animationValue.stopAnimation();

          if (this.delayTimer) {
            clearTimeout(this.delayTimer);
            this.delayTimer = null;
          }
        }
      }, {
        key: "startAnimation",
        value: function startAnimation(duration, iteration, iterationDelay, callback) {
          var _this6 = this;

          var _state2 = this.state,
              animationValue = _state2.animationValue,
              compiledAnimation = _state2.compiledAnimation;
          var _props2 = this.props,
              direction = _props2.direction,
              iterationCount = _props2.iterationCount,
              useNativeDriver = _props2.useNativeDriver;
          var easing = this.props.easing || compiledAnimation.easing || 'ease';
          var currentIteration = iteration || 0;
          var fromValue = getAnimationOrigin(currentIteration, direction);
          var toValue = getAnimationTarget(currentIteration, direction);
          animationValue.setValue(fromValue);

          if (typeof easing === 'string') {
            easing = _easing2.default[easing];
          }

          var reversed = direction === 'reverse' || direction === 'alternate' && !toValue || direction === 'alternate-reverse' && !toValue;

          if (reversed) {
            easing = _reactNative.Easing.out(easing);
          }

          var config = {
            toValue: toValue,
            easing: easing,
            isInteraction: iterationCount <= 1,
            duration: duration || this.props.duration || 1000,
            useNativeDriver: useNativeDriver,
            delay: iterationDelay || 0
          };

          _reactNative.Animated.timing(animationValue, config).start(function (endState) {
            currentIteration += 1;

            if (endState.finished && _this6.props.animation && (iterationCount === 'infinite' || currentIteration < iterationCount)) {
              _this6.startAnimation(duration, currentIteration, iterationDelay, callback);
            } else if (callback) {
              callback(endState);
            }
          });
        }
      }, {
        key: "transition",
        value: function transition(fromValues, toValues, duration, easing) {
          var _this7 = this;

          var fromValuesFlat = (0, _flattenStyle2.default)(fromValues);
          var toValuesFlat = (0, _flattenStyle2.default)(toValues);
          var transitionKeys = Object.keys(toValuesFlat);

          var _getTransitionState = this.getTransitionState(transitionKeys),
              transitionValues = _getTransitionState.transitionValues,
              currentTransitionValues = _getTransitionState.currentTransitionValues,
              transitionStyle = _getTransitionState.transitionStyle;

          transitionKeys.forEach(function (property) {
            var fromValue = fromValuesFlat[property];
            var toValue = toValuesFlat[property];
            var transitionValue = transitionValues[property];

            if (!transitionValue) {
              transitionValue = new _reactNative.Animated.Value(0);
            }

            var needsInterpolation = INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1 || typeof value !== 'number';
            var needsZeroClamping = ZERO_CLAMPED_STYLE_PROPERTIES.indexOf(property) !== -1;

            if (needsInterpolation) {
              transitionValue.setValue(0);
              transitionStyle[property] = transitionValue.interpolate({
                inputRange: [0, 1],
                outputRange: [fromValue, toValue]
              });
              currentTransitionValues[property] = toValue;
              toValuesFlat[property] = 1;
            } else {
              if (needsZeroClamping) {
                transitionStyle[property] = transitionValue.interpolate({
                  inputRange: [0, 1],
                  outputRange: [0, 1],
                  extrapolateLeft: 'clamp'
                });
                currentTransitionValues[property] = toValue;
              } else {
                transitionStyle[property] = transitionValue;
              }

              transitionValue.setValue(fromValue);
            }
          });
          this.setState({
            transitionValues: transitionValues,
            transitionStyle: transitionStyle,
            currentTransitionValues: currentTransitionValues
          }, function () {
            _this7.transitionToValues(toValuesFlat, duration || _this7.props.duration, easing, _this7.props.delay);
          });
        }
      }, {
        key: "transitionTo",
        value: function transitionTo(toValues, duration, easing, delay) {
          var _this8 = this;

          var currentTransitionValues = this.state.currentTransitionValues;
          var toValuesFlat = (0, _flattenStyle2.default)(toValues);
          var transitions = {
            from: {},
            to: {}
          };
          Object.keys(toValuesFlat).forEach(function (property) {
            var toValue = toValuesFlat[property];
            var needsInterpolation = INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1 || typeof value !== 'number';
            var needsZeroClamping = ZERO_CLAMPED_STYLE_PROPERTIES.indexOf(property) !== -1;
            var transitionStyle = _this8.state.transitionStyle[property];
            var transitionValue = _this8.state.transitionValues[property];

            if (!needsInterpolation && !needsZeroClamping && transitionStyle && transitionStyle === transitionValue) {
              transitionToValue(property, transitionValue, toValue, duration, easing, _this8.props.useNativeDriver, delay, function (prop) {
                return _this8.props.onTransitionBegin(prop);
              }, function (prop) {
                return _this8.props.onTransitionEnd(prop);
              });
            } else {
              var currentTransitionValue = currentTransitionValues[property];

              if (typeof currentTransitionValue === 'undefined' && _this8.props.style) {
                var style = (0, _getStyleValues2.default)(property, _this8.props.style);
                currentTransitionValue = style[property];
              }

              transitions.from[property] = currentTransitionValue;
              transitions.to[property] = toValue;
            }
          });

          if (Object.keys(transitions.from).length) {
            this.transition(transitions.from, transitions.to, duration, easing);
          }
        }
      }, {
        key: "transitionToValues",
        value: function transitionToValues(toValues, duration, easing, delay) {
          var _this9 = this;

          Object.keys(toValues).forEach(function (property) {
            var transitionValue = _this9.state.transitionValues[property];
            var toValue = toValues[property];
            transitionToValue(property, transitionValue, toValue, duration, easing, _this9.props.useNativeDriver, delay, function (prop) {
              return _this9.props.onTransitionBegin(prop);
            }, function (prop) {
              return _this9.props.onTransitionEnd(prop);
            });
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _props3 = this.props,
              style = _props3.style,
              animation = _props3.animation,
              transition = _props3.transition;

          if (animation && transition) {
            throw new Error('You cannot combine animation and transition props');
          }

          var restProps = omit(['animation', 'duration', 'direction', 'delay', 'easing', 'iterationCount', 'iterationDelay', 'onAnimationBegin', 'onAnimationEnd', 'onTransitionBegin', 'onTransitionEnd', 'style', 'transition', 'useNativeDriver'], this.props);
          return _react2.default.createElement(Animatable, babelHelpers.extends({
            ref: this.handleRef,
            style: [style, this.state.animationStyle, (0, _wrapStyleTransforms2.default)(this.state.transitionStyle)]
          }, restProps));
        }
      }]);
      return AnimatableComponent;
    }(_react.Component), _class.displayName = "withAnimatable(" + wrappedComponentName + ")", _class.propTypes = {
      animation: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
      duration: _propTypes2.default.number,
      direction: _propTypes2.default.oneOf(['normal', 'reverse', 'alternate', 'alternate-reverse']),
      delay: _propTypes2.default.number,
      easing: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(Object.keys(_easing2.default)), _propTypes2.default.func]),
      iterationCount: function iterationCount(props, propName) {
        var val = props[propName];

        if (val !== 'infinite' && !(typeof val === 'number' && val >= 1)) {
          return new Error('iterationCount must be a positive number or "infinite"');
        }

        return null;
      },
      iterationDelay: _propTypes2.default.number,
      onAnimationBegin: _propTypes2.default.func,
      onAnimationEnd: _propTypes2.default.func,
      onTransitionBegin: _propTypes2.default.func,
      onTransitionEnd: _propTypes2.default.func,
      style: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array, _propTypes2.default.object]),
      transition: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
      useNativeDriver: _propTypes2.default.bool
    }, _class.defaultProps = {
      animation: undefined,
      delay: 0,
      direction: 'normal',
      duration: undefined,
      easing: undefined,
      iterationCount: 1,
      iterationDelay: 0,
      onAnimationBegin: function onAnimationBegin() {},
      onAnimationEnd: function onAnimationEnd() {},
      onTransitionBegin: function onTransitionBegin() {},
      onTransitionEnd: function onTransitionEnd() {},
      style: undefined,
      transition: undefined,
      useNativeDriver: false
    }, _initialiseProps = function _initialiseProps() {
      var _this10 = this;

      this.ref = null;

      this.handleRef = function (ref) {
        _this10.ref = ref;
      };
    }, _temp;
  }
},1031,[103,121,14,1032,1033,1029,1028,1030,1035]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = wrapStyleTransforms;
  var TRANSFORM_STYLE_PROPERTIES = ['perspective', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'skewX', 'skewY', 'translateX', 'translateY'];

  function wrapStyleTransforms(style) {
    var wrapped = {};
    Object.keys(style).forEach(function (key) {
      if (TRANSFORM_STYLE_PROPERTIES.indexOf(key) !== -1) {
        if (!wrapped.transform) {
          wrapped.transform = [];
        }

        wrapped.transform.push(babelHelpers.defineProperty({}, key, style[key]));
      } else {
        wrapped[key] = style[key];
      }
    });
    return wrapped;
  }
},1032,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getStyleValues;

  var _flattenStyle = _require(_dependencyMap[0]);

  var _flattenStyle2 = babelHelpers.interopRequireDefault(_flattenStyle);

  var _getDefaultStyleValue = _require(_dependencyMap[1]);

  var _getDefaultStyleValue2 = babelHelpers.interopRequireDefault(_getDefaultStyleValue);

  function getStyleValues(keys, style) {
    var values = {};
    var flatStyle = (0, _flattenStyle2.default)(style);
    (typeof keys === 'string' ? [keys] : keys).forEach(function (key) {
      values[key] = key in flatStyle ? flatStyle[key] : (0, _getDefaultStyleValue2.default)(key, flatStyle);
    });
    return values;
  }
},1033,[1029,1034]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getDefaultStyleValue;
  var DIRECTIONAL_FALLBACKS = {
    Top: ['Vertical', ''],
    Bottom: ['Vertical', ''],
    Vertical: [''],
    Left: ['Horizontal', ''],
    Right: ['Horizontal', ''],
    Horizontal: ['']
  };
  var DIRECTIONAL_SUFFICES = Object.keys(DIRECTIONAL_FALLBACKS);

  function getDefaultStyleValue(key, flatStyle) {
    if (key === 'backgroundColor') {
      return 'rgba(0,0,0,0)';
    }

    if (key === 'color' || key.indexOf('Color') !== -1) {
      return 'rgba(0,0,0,1)';
    }

    if (key.indexOf('rotate') === 0 || key.indexOf('skew') === 0) {
      return '0deg';
    }

    if (key === 'opacity' || key.indexOf('scale') === 0) {
      return 1;
    }

    if (key === 'fontSize') {
      return 14;
    }

    if (key.indexOf('margin') === 0 || key.indexOf('padding') === 0) {
      for (var suffix, i = 0; i < DIRECTIONAL_SUFFICES.length; i++) {
        suffix = DIRECTIONAL_SUFFICES[i];

        if (key.substr(-suffix.length) === suffix) {
          var prefix = key.substr(0, key.length - suffix.length);
          var fallbacks = DIRECTIONAL_FALLBACKS[suffix];

          for (var fallback, j = 0; j < fallbacks.length; j++) {
            fallback = prefix + fallbacks[j];

            if (fallback in flatStyle) {
              return flatStyle[fallback];
            }
          }

          break;
        }
      }
    }

    return 0;
  }
},1034,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  var EASING_FUNCTIONS = {
    linear: _reactNative.Easing.linear,
    ease: _reactNative.Easing.bezier(0.25, 0.1, 0.25, 1),
    'ease-in': _reactNative.Easing.bezier(0.42, 0, 1, 1),
    'ease-out': _reactNative.Easing.bezier(0, 0, 0.58, 1),
    'ease-in-out': _reactNative.Easing.bezier(0.42, 0, 0.58, 1),
    'ease-in-cubic': _reactNative.Easing.bezier(0.55, 0.055, 0.675, 0.19),
    'ease-out-cubic': _reactNative.Easing.bezier(0.215, 0.61, 0.355, 1.0),
    'ease-in-out-cubic': _reactNative.Easing.bezier(0.645, 0.045, 0.355, 1.0),
    'ease-in-circ': _reactNative.Easing.bezier(0.6, 0.04, 0.98, 0.335),
    'ease-out-circ': _reactNative.Easing.bezier(0.075, 0.82, 0.165, 1.0),
    'ease-in-out-circ': _reactNative.Easing.bezier(0.785, 0.135, 0.15, 0.86),
    'ease-in-expo': _reactNative.Easing.bezier(0.95, 0.05, 0.795, 0.035),
    'ease-out-expo': _reactNative.Easing.bezier(0.19, 1.0, 0.22, 1.0),
    'ease-in-out-expo': _reactNative.Easing.bezier(1.0, 0.0, 0.0, 1.0),
    'ease-in-quad': _reactNative.Easing.bezier(0.55, 0.085, 0.68, 0.53),
    'ease-out-quad': _reactNative.Easing.bezier(0.25, 0.46, 0.45, 0.94),
    'ease-in-out-quad': _reactNative.Easing.bezier(0.455, 0.03, 0.515, 0.955),
    'ease-in-quart': _reactNative.Easing.bezier(0.895, 0.03, 0.685, 0.22),
    'ease-out-quart': _reactNative.Easing.bezier(0.165, 0.84, 0.44, 1.0),
    'ease-in-out-quart': _reactNative.Easing.bezier(0.77, 0.0, 0.175, 1.0),
    'ease-in-quint': _reactNative.Easing.bezier(0.755, 0.05, 0.855, 0.06),
    'ease-out-quint': _reactNative.Easing.bezier(0.23, 1.0, 0.32, 1.0),
    'ease-in-out-quint': _reactNative.Easing.bezier(0.86, 0.0, 0.07, 1.0),
    'ease-in-sine': _reactNative.Easing.bezier(0.47, 0.0, 0.745, 0.715),
    'ease-out-sine': _reactNative.Easing.bezier(0.39, 0.575, 0.565, 1.0),
    'ease-in-out-sine': _reactNative.Easing.bezier(0.445, 0.05, 0.55, 0.95),
    'ease-in-back': _reactNative.Easing.bezier(0.6, -0.28, 0.735, 0.045),
    'ease-out-back': _reactNative.Easing.bezier(0.175, 0.885, 0.32, 1.275),
    'ease-in-out-back': _reactNative.Easing.bezier(0.68, -0.55, 0.265, 1.55)
  };
  exports.default = EASING_FUNCTIONS;
},1035,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _attentionSeekers = _require(_dependencyMap[0]);

  Object.keys(_attentionSeekers).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _attentionSeekers[key];
      }
    });
  });

  var _bouncingEntrances = _require(_dependencyMap[1]);

  Object.keys(_bouncingEntrances).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _bouncingEntrances[key];
      }
    });
  });

  var _bouncingExits = _require(_dependencyMap[2]);

  Object.keys(_bouncingExits).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _bouncingExits[key];
      }
    });
  });

  var _fadingEntrances = _require(_dependencyMap[3]);

  Object.keys(_fadingEntrances).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _fadingEntrances[key];
      }
    });
  });

  var _fadingExits = _require(_dependencyMap[4]);

  Object.keys(_fadingExits).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _fadingExits[key];
      }
    });
  });

  var _flippers = _require(_dependencyMap[5]);

  Object.keys(_flippers).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _flippers[key];
      }
    });
  });

  var _lightspeed = _require(_dependencyMap[6]);

  Object.keys(_lightspeed).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _lightspeed[key];
      }
    });
  });

  var _slidingEntrances = _require(_dependencyMap[7]);

  Object.keys(_slidingEntrances).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _slidingEntrances[key];
      }
    });
  });

  var _slidingExits = _require(_dependencyMap[8]);

  Object.keys(_slidingExits).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _slidingExits[key];
      }
    });
  });

  var _zoomingEntrances = _require(_dependencyMap[9]);

  Object.keys(_zoomingEntrances).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _zoomingEntrances[key];
      }
    });
  });

  var _zoomingExits = _require(_dependencyMap[10]);

  Object.keys(_zoomingExits).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _zoomingExits[key];
      }
    });
  });
},1036,[1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var bounce = exports.bounce = {
    0: {
      translateY: 0
    },
    0.2: {
      translateY: 0
    },
    0.4: {
      translateY: -30
    },
    0.43: {
      translateY: -30
    },
    0.53: {
      translateY: 0
    },
    0.7: {
      translateY: -15
    },
    0.8: {
      translateY: 0
    },
    0.9: {
      translateY: -4
    },
    1: {
      translateY: 0
    }
  };
  var flash = exports.flash = {
    0: {
      opacity: 1
    },
    0.25: {
      opacity: 0
    },
    0.5: {
      opacity: 1
    },
    0.75: {
      opacity: 0
    },
    1: {
      opacity: 1
    }
  };
  var jello = exports.jello = {
    0: {
      skewX: '0deg',
      skewY: '0deg'
    },
    0.111: {
      skewX: '0deg',
      skewY: '0deg'
    },
    0.222: {
      skewX: '-12.5deg',
      skewY: '-12.5deg'
    },
    0.333: {
      skewX: '6.25deg',
      skewY: '6.25deg'
    },
    0.444: {
      skewX: '-3.125deg',
      skewY: '-3.125deg'
    },
    0.555: {
      skewX: '1.5625deg',
      skewY: '1.5625deg'
    },
    0.666: {
      skewX: '-0.78125deg',
      skewY: '-0.78125deg'
    },
    0.777: {
      skewX: '0.390625deg',
      skewY: '0.390625deg'
    },
    0.888: {
      skewX: '-0.1953125deg',
      skewY: '-0.1953125deg'
    },
    1: {
      skewX: '0deg',
      skewY: '0deg'
    }
  };
  var pulse = exports.pulse = {
    0: {
      scale: 1
    },
    0.5: {
      scale: 1.05
    },
    1: {
      scale: 1
    }
  };
  var rotate = exports.rotate = {
    0: {
      rotate: '0deg'
    },
    0.25: {
      rotate: '90deg'
    },
    0.5: {
      rotate: '180deg'
    },
    0.75: {
      rotate: '270deg'
    },
    1: {
      rotate: '360deg'
    }
  };
  var shake = exports.shake = {
    0: {
      translateX: 0
    },
    0.1: {
      translateX: -10
    },
    0.2: {
      translateX: 10
    },
    0.3: {
      translateX: -10
    },
    0.4: {
      translateX: 10
    },
    0.5: {
      translateX: -10
    },
    0.6: {
      translateX: 10
    },
    0.7: {
      translateX: -10
    },
    0.8: {
      translateX: 10
    },
    0.9: {
      translateX: -10
    },
    1: {
      translateX: 0
    }
  };
  var swing = exports.swing = {
    0: {
      rotate: '0deg'
    },
    0.2: {
      rotate: '15deg'
    },
    0.4: {
      rotate: '-10deg'
    },
    0.6: {
      rotate: '5deg'
    },
    0.8: {
      rotate: '-5deg'
    },
    1: {
      rotate: '0deg'
    }
  };
  var rubberBand = exports.rubberBand = {
    0: {
      scaleX: 1,
      scaleY: 1
    },
    0.3: {
      scaleX: 1.25,
      scaleY: 0.75
    },
    0.4: {
      scaleX: 0.75,
      scaleY: 1.25
    },
    0.5: {
      scaleX: 1.15,
      scaleY: 0.85
    },
    0.65: {
      scaleX: 0.95,
      scaleY: 1.05
    },
    0.75: {
      scaleX: 1.05,
      scaleY: 0.95
    },
    1: {
      scaleX: 1,
      scaleY: 1
    }
  };
  var tada = exports.tada = {
    0: {
      scale: 1,
      rotate: '0deg'
    },
    0.1: {
      scale: 0.9,
      rotate: '-3deg'
    },
    0.2: {
      scale: 0.9,
      rotate: '-3deg'
    },
    0.3: {
      scale: 1.1,
      rotate: '-3deg'
    },
    0.4: {
      rotate: '3deg'
    },
    0.5: {
      rotate: '-3deg'
    },
    0.6: {
      rotate: '3deg'
    },
    0.7: {
      rotate: '-3deg'
    },
    0.8: {
      rotate: '3deg'
    },
    0.9: {
      scale: 1.1,
      rotate: '3deg'
    },
    1: {
      scale: 1,
      rotate: '0deg'
    }
  };
  var wobble = exports.wobble = {
    0: {
      translateX: 0,
      rotate: '0deg'
    },
    0.15: {
      translateX: -25,
      rotate: '-5deg'
    },
    0.3: {
      translateX: 20,
      rotate: '3deg'
    },
    0.45: {
      translateX: -15,
      rotate: '-3deg'
    },
    0.6: {
      translateX: 10,
      rotate: '2deg'
    },
    0.75: {
      translateX: -5,
      rotate: '-1deg'
    },
    1: {
      translateX: 0,
      rotate: '0deg'
    }
  };
},1037,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var bounceIn = exports.bounceIn = {
    0: {
      opacity: 0,
      scale: 0.3
    },
    0.2: {
      scale: 1.1
    },
    0.4: {
      scale: 0.9
    },
    0.6: {
      opacity: 1,
      scale: 1.03
    },
    0.8: {
      scale: 0.97
    },
    1: {
      opacity: 1,
      scale: 1
    }
  };
  var bounceInUp = exports.bounceInUp = {
    0: {
      opacity: 0,
      translateY: 800
    },
    0.6: {
      opacity: 1,
      translateY: -25
    },
    0.75: {
      translateY: 10
    },
    0.9: {
      translateY: -5
    },
    1: {
      translateY: 0
    }
  };
  var bounceInDown = exports.bounceInDown = {
    0: {
      opacity: 0,
      translateY: -800
    },
    0.6: {
      opacity: 1,
      translateY: 25
    },
    0.75: {
      translateY: -10
    },
    0.9: {
      translateY: 5
    },
    1: {
      translateY: 0
    }
  };
  var bounceInRight = exports.bounceInRight = {
    0: {
      opacity: 0,
      translateX: 600
    },
    0.6: {
      opacity: 1,
      translateX: -20
    },
    0.75: {
      translateX: 8
    },
    0.9: {
      translateX: -4
    },
    1: {
      translateX: 0
    }
  };
  var bounceInLeft = exports.bounceInLeft = {
    0: {
      opacity: 0,
      translateX: -600
    },
    0.6: {
      opacity: 1,
      translateX: 20
    },
    0.75: {
      translateX: -8
    },
    0.9: {
      translateX: 4
    },
    1: {
      translateX: 0
    }
  };
},1038,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var bounceOut = exports.bounceOut = {
    0: {
      opacity: 1,
      scale: 1
    },
    0.2: {
      scale: 0.9
    },
    0.5: {
      opacity: 1,
      scale: 1.11
    },
    0.55: {
      scale: 1.11
    },
    1: {
      opacity: 0,
      scale: 0.3
    }
  };
  var bounceOutUp = exports.bounceOutUp = {
    0: {
      opacity: 1,
      translateY: 0
    },
    0.2: {
      opacity: 1,
      translateY: -10
    },
    0.4: {
      translateY: 20
    },
    0.45: {
      translateY: 20
    },
    0.55: {
      opacity: 1
    },
    1: {
      opacity: 0,
      translateY: -800
    }
  };
  var bounceOutDown = exports.bounceOutDown = {
    0: {
      opacity: 1,
      translateY: 0
    },
    0.2: {
      opacity: 1,
      translateY: 10
    },
    0.4: {
      translateY: -20
    },
    0.45: {
      translateY: -20
    },
    0.55: {
      opacity: 1
    },
    1: {
      opacity: 0,
      translateY: 800
    }
  };
  var bounceOutRight = exports.bounceOutRight = {
    0: {
      opacity: 1,
      translateX: 0
    },
    0.2: {
      opacity: 1,
      translateX: 10
    },
    0.4: {
      translateX: -20
    },
    0.45: {
      translateX: -20
    },
    0.55: {
      opacity: 1
    },
    1: {
      opacity: 0,
      translateX: 600
    }
  };
  var bounceOutLeft = exports.bounceOutLeft = {
    0: {
      opacity: 1,
      translateX: 0
    },
    0.2: {
      opacity: 1,
      translateX: -10
    },
    0.4: {
      translateX: 20
    },
    0.45: {
      translateX: 20
    },
    0.55: {
      opacity: 1
    },
    1: {
      opacity: 0,
      translateX: -600
    }
  };
},1039,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function makeFadeInTranslation(translationType, fromValue) {
    return {
      from: babelHelpers.defineProperty({
        opacity: 0
      }, translationType, fromValue),
      to: babelHelpers.defineProperty({
        opacity: 1
      }, translationType, 0)
    };
  }

  var fadeIn = exports.fadeIn = {
    from: {
      opacity: 0
    },
    to: {
      opacity: 1
    }
  };
  var fadeInDown = exports.fadeInDown = makeFadeInTranslation('translateY', -100);
  var fadeInUp = exports.fadeInUp = makeFadeInTranslation('translateY', 100);
  var fadeInLeft = exports.fadeInLeft = makeFadeInTranslation('translateX', -100);
  var fadeInRight = exports.fadeInRight = makeFadeInTranslation('translateX', 100);
  var fadeInDownBig = exports.fadeInDownBig = makeFadeInTranslation('translateY', -500);
  var fadeInUpBig = exports.fadeInUpBig = makeFadeInTranslation('translateY', 500);
  var fadeInLeftBig = exports.fadeInLeftBig = makeFadeInTranslation('translateX', -500);
  var fadeInRightBig = exports.fadeInRightBig = makeFadeInTranslation('translateX', 500);
},1040,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function makeFadeOutTranslation(translationType, toValue) {
    return {
      from: babelHelpers.defineProperty({
        opacity: 1
      }, translationType, 0),
      to: babelHelpers.defineProperty({
        opacity: 0
      }, translationType, toValue)
    };
  }

  var fadeOut = exports.fadeOut = {
    from: {
      opacity: 1
    },
    to: {
      opacity: 0
    }
  };
  var fadeOutDown = exports.fadeOutDown = makeFadeOutTranslation('translateY', 100);
  var fadeOutUp = exports.fadeOutUp = makeFadeOutTranslation('translateY', -100);
  var fadeOutLeft = exports.fadeOutLeft = makeFadeOutTranslation('translateX', -100);
  var fadeOutRight = exports.fadeOutRight = makeFadeOutTranslation('translateX', 100);
  var fadeOutDownBig = exports.fadeOutDownBig = makeFadeOutTranslation('translateY', 500);
  var fadeOutUpBig = exports.fadeOutUpBig = makeFadeOutTranslation('translateY', -500);
  var fadeOutLeftBig = exports.fadeOutLeftBig = makeFadeOutTranslation('translateX', -500);
  var fadeOutRightBig = exports.fadeOutRightBig = makeFadeOutTranslation('translateX', 500);
},1041,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var flipInX = exports.flipInX = {
    easing: 'ease-in',
    style: {
      backfaceVisibility: 'visible',
      perspective: 400
    },
    0: {
      opacity: 0,
      rotateX: '90deg'
    },
    0.4: {
      rotateX: '-20deg'
    },
    0.6: {
      opacity: 1,
      rotateX: '10deg'
    },
    0.8: {
      rotateX: '-5deg'
    },
    1: {
      opacity: 1,
      rotateX: '0deg'
    }
  };
  var flipInY = exports.flipInY = {
    easing: 'ease-in',
    style: {
      backfaceVisibility: 'visible',
      perspective: 400
    },
    0: {
      opacity: 0,
      rotateY: '90deg'
    },
    0.4: {
      rotateY: '-20deg'
    },
    0.6: {
      opacity: 1,
      rotateY: '10deg'
    },
    0.8: {
      rotateY: '-5deg'
    },
    1: {
      opacity: 1,
      rotateY: '0deg'
    }
  };
  var flipOutX = exports.flipOutX = {
    style: {
      backfaceVisibility: 'visible',
      perspective: 400
    },
    0: {
      opacity: 1,
      rotateX: '0deg'
    },
    0.3: {
      opacity: 1,
      rotateX: '-20deg'
    },
    1: {
      opacity: 0,
      rotateX: '90deg'
    }
  };
  var flipOutY = exports.flipOutY = {
    style: {
      backfaceVisibility: 'visible',
      perspective: 400
    },
    0: {
      opacity: 1,
      rotateY: '0deg'
    },
    0.3: {
      opacity: 1,
      rotateY: '-20deg'
    },
    1: {
      opacity: 0,
      rotateY: '90deg'
    }
  };
},1042,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var lightSpeedIn = exports.lightSpeedIn = {
    easing: 'ease-out',
    0: {
      opacity: 0,
      translateX: 200,
      skewX: '-30deg'
    },
    0.6: {
      opacity: 1,
      translateX: 0,
      skewX: '20deg'
    },
    0.8: {
      skewX: '-5deg'
    },
    1: {
      opacity: 1,
      translateX: 0,
      skewX: '0deg'
    }
  };
  var lightSpeedOut = exports.lightSpeedOut = {
    easing: 'ease-in',
    0: {
      opacity: 1,
      translateX: 0,
      skewX: '0deg'
    },
    1: {
      opacity: 0,
      translateX: 200,
      skewX: '30deg'
    }
  };
},1043,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function makeSlideInTranslation(translationType, fromValue) {
    return {
      from: babelHelpers.defineProperty({}, translationType, fromValue),
      to: babelHelpers.defineProperty({}, translationType, 0)
    };
  }

  var slideInDown = exports.slideInDown = makeSlideInTranslation('translateY', -100);
  var slideInUp = exports.slideInUp = makeSlideInTranslation('translateY', 100);
  var slideInLeft = exports.slideInLeft = makeSlideInTranslation('translateX', -100);
  var slideInRight = exports.slideInRight = makeSlideInTranslation('translateX', 100);
},1044,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function makeSlideOutTranslation(translationType, fromValue) {
    return {
      from: babelHelpers.defineProperty({}, translationType, 0),
      to: babelHelpers.defineProperty({}, translationType, fromValue)
    };
  }

  var slideOutDown = exports.slideOutDown = makeSlideOutTranslation('translateY', 100);
  var slideOutUp = exports.slideOutUp = makeSlideOutTranslation('translateY', -100);
  var slideOutLeft = exports.slideOutLeft = makeSlideOutTranslation('translateX', -100);
  var slideOutRight = exports.slideOutRight = makeSlideOutTranslation('translateX', 100);
},1045,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.zoomInRight = exports.zoomInLeft = exports.zoomInUp = exports.zoomInDown = exports.zoomIn = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  function makeZoomInTranslation(translationType, pivotPoint) {
    var modifier = Math.min(1, Math.max(-1, pivotPoint));
    return {
      easing: _reactNative.Easing.bezier(0.175, 0.885, 0.32, 1),
      0: babelHelpers.defineProperty({
        opacity: 0,
        scale: 0.1
      }, translationType, modifier * -1000),
      0.6: babelHelpers.defineProperty({
        opacity: 1,
        scale: 0.457
      }, translationType, pivotPoint),
      1: babelHelpers.defineProperty({
        scale: 1
      }, translationType, 0)
    };
  }

  var zoomIn = exports.zoomIn = {
    from: {
      opacity: 0,
      scale: 0.3
    },
    0.5: {
      opacity: 1
    },
    to: {
      opacity: 1,
      scale: 1
    }
  };
  var zoomInDown = exports.zoomInDown = makeZoomInTranslation('translateY', 60);
  var zoomInUp = exports.zoomInUp = makeZoomInTranslation('translateY', -60);
  var zoomInLeft = exports.zoomInLeft = makeZoomInTranslation('translateX', 10);
  var zoomInRight = exports.zoomInRight = makeZoomInTranslation('translateX', -10);
},1046,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.zoomOutRight = exports.zoomOutLeft = exports.zoomOutUp = exports.zoomOutDown = exports.zoomOut = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  function makeZoomOutTranslation(translationType, pivotPoint) {
    var modifier = Math.min(1, Math.max(-1, pivotPoint));
    return {
      easing: _reactNative.Easing.bezier(0.175, 0.885, 0.32, 1),
      0: babelHelpers.defineProperty({
        opacity: 1,
        scale: 1
      }, translationType, 0),
      0.4: babelHelpers.defineProperty({
        opacity: 1,
        scale: 0.457
      }, translationType, pivotPoint),
      1: babelHelpers.defineProperty({
        opacity: 0,
        scale: 0.1
      }, translationType, modifier * -1000)
    };
  }

  var zoomOut = exports.zoomOut = {
    from: {
      opacity: 1,
      scale: 1
    },
    0.5: {
      opacity: 1,
      scale: 0.3
    },
    to: {
      opacity: 0,
      scale: 0
    }
  };
  var zoomOutDown = exports.zoomOutDown = makeZoomOutTranslation('translateY', 60);
  var zoomOutUp = exports.zoomOutUp = makeZoomOutTranslation('translateY', -60);
  var zoomOutLeft = exports.zoomOutLeft = makeZoomOutTranslation('translateX', 10);
  var zoomOutRight = exports.zoomOutRight = makeZoomOutTranslation('translateX', -10);
},1047,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.slideOutRight = exports.slideOutLeft = exports.slideOutUp = exports.slideOutDown = exports.slideInRight = exports.slideInLeft = exports.slideInUp = exports.slideInDown = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  var _Dimensions$get = _reactNative.Dimensions.get("window"),
      height = _Dimensions$get.height,
      width = _Dimensions$get.width;

  var makeSlideTranslation = function makeSlideTranslation(translationType, fromValue, toValue) {
    return {
      from: babelHelpers.defineProperty({}, translationType, fromValue),
      to: babelHelpers.defineProperty({}, translationType, toValue)
    };
  };

  var slideInDown = exports.slideInDown = makeSlideTranslation("translateY", -height, 0);
  var slideInUp = exports.slideInUp = makeSlideTranslation("translateY", height, 0);
  var slideInLeft = exports.slideInLeft = makeSlideTranslation("translateX", -width, 0);
  var slideInRight = exports.slideInRight = makeSlideTranslation("translateX", width, 0);
  var slideOutDown = exports.slideOutDown = makeSlideTranslation("translateY", 0, height);
  var slideOutUp = exports.slideOutUp = makeSlideTranslation("translateY", 0, -height);
  var slideOutLeft = exports.slideOutLeft = makeSlideTranslation("translateX", 0, -width);
  var slideOutRight = exports.slideOutRight = makeSlideTranslation("translateX", 0, width);
},1048,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0]);

  exports.default = _reactNative.StyleSheet.create({
    backdrop: {
      position: "absolute",
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      opacity: 0,
      backgroundColor: "black"
    },
    content: {
      flex: 1,
      justifyContent: "center"
    }
  });
},1049,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var DialogDescription = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(DialogDescription, _React$PureComponent);

    function DialogDescription() {
      babelHelpers.classCallCheck(this, DialogDescription);
      return babelHelpers.possibleConstructorReturn(this, (DialogDescription.__proto__ || Object.getPrototypeOf(DialogDescription)).apply(this, arguments));
    }

    babelHelpers.createClass(DialogDescription, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            children = _props.children,
            otherProps = babelHelpers.objectWithoutProperties(_props, ["style", "children"]);
        return _react2.default.createElement(
          _reactNative.Text,
          babelHelpers.extends({
            style: [styles.text, style]
          }, otherProps),
          children
        );
      }
    }]);
    return DialogDescription;
  }(_react2.default.PureComponent), _class.propTypes = babelHelpers.extends({}, _reactNative.Text.propTypes, {
    style: _propTypes2.default.any,
    children: _propTypes2.default.string.isRequired
  }), _class.displayName = "DialogDescription", _temp);
  exports.default = DialogDescription;

  var styles = _reactNative.StyleSheet.create({
    text: {
      color: "#33383D",
      fontSize: 16,
      marginTop: 10
    }
  });
},1050,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var DialogInput = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(DialogInput, _React$PureComponent);

    function DialogInput() {
      babelHelpers.classCallCheck(this, DialogInput);
      return babelHelpers.possibleConstructorReturn(this, (DialogInput.__proto__ || Object.getPrototypeOf(DialogInput)).apply(this, arguments));
    }

    babelHelpers.createClass(DialogInput, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            label = _props.label,
            style = _props.style,
            wrapperStyle = _props.wrapperStyle,
            textInputRef = _props.textInputRef,
            multiline = _props.multiline,
            numberOfLines = _props.numberOfLines,
            otherProps = babelHelpers.objectWithoutProperties(_props, ["label", "style", "wrapperStyle", "textInputRef", "multiline", "numberOfLines"]);
        var lines = multiline && numberOfLines || 1;
        var height = 18 + 22 * lines;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.textInputWrapper, wrapperStyle]
          },
          label && _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.label
            },
            label
          ),
          _react2.default.createElement(_reactNative.TextInput, babelHelpers.extends({
            ref: textInputRef,
            style: [styles.textInput, style, {
              height: height
            }],
            multiline: multiline,
            numberOfLines: numberOfLines
          }, otherProps))
        );
      }
    }]);
    return DialogInput;
  }(_react2.default.PureComponent), _class.propTypes = babelHelpers.extends({}, _reactNative.TextInput.propTypes, {
    label: _propTypes2.default.string,
    style: _propTypes2.default.any,
    textInputRef: _propTypes2.default.any,
    wrapperStyle: _propTypes2.default.any,
    numberOfLines: _propTypes2.default.number,
    multiline: _propTypes2.default.bool
  }), _class.displayName = "DialogInput", _temp);
  exports.default = DialogInput;

  var styles = _reactNative.StyleSheet.create({
    textInputWrapper: {
      marginHorizontal: 10,
      marginBottom: 20
    },
    label: {
      color: "rgba(0, 0, 0, 0.5)",
      fontSize: 14
    },
    textInput: {
      marginLeft: -4,
      paddingLeft: 4
    }
  });
},1051,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var DialogSwitch = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(DialogSwitch, _React$PureComponent);

    function DialogSwitch() {
      babelHelpers.classCallCheck(this, DialogSwitch);
      return babelHelpers.possibleConstructorReturn(this, (DialogSwitch.__proto__ || Object.getPrototypeOf(DialogSwitch)).apply(this, arguments));
    }

    babelHelpers.createClass(DialogSwitch, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            label = _props.label,
            otherProps = babelHelpers.objectWithoutProperties(_props, ["label"]);
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.switchWrapper
          },
          _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.label
            },
            label
          ),
          _react2.default.createElement(_reactNative.Switch, otherProps)
        );
      }
    }]);
    return DialogSwitch;
  }(_react2.default.PureComponent), _class.propTypes = babelHelpers.extends({}, _reactNative.Switch.propTypes, {
    label: _propTypes2.default.string
  }), _class.displayName = "DialogSwitch", _temp);
  exports.default = DialogSwitch;

  var styles = _reactNative.StyleSheet.create({
    switchWrapper: {
      flexDirection: "row",
      justifyContent: "space-between",
      alignItems: "center",
      marginHorizontal: 10,
      marginBottom: 20
    },
    label: {
      flex: 1,
      paddingRight: 8,
      fontSize: 16,
      color: "#33383D"
    }
  });
},1052,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2]);

  var DialogTitle = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(DialogTitle, _React$PureComponent);

    function DialogTitle() {
      babelHelpers.classCallCheck(this, DialogTitle);
      return babelHelpers.possibleConstructorReturn(this, (DialogTitle.__proto__ || Object.getPrototypeOf(DialogTitle)).apply(this, arguments));
    }

    babelHelpers.createClass(DialogTitle, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            children = _props.children,
            otherProps = babelHelpers.objectWithoutProperties(_props, ["style", "children"]);
        return _react2.default.createElement(
          _reactNative.Text,
          babelHelpers.extends({
            style: [styles.text, style]
          }, otherProps),
          children
        );
      }
    }]);
    return DialogTitle;
  }(_react2.default.PureComponent), _class.propTypes = babelHelpers.extends({}, _reactNative.Text.propTypes, {
    style: _propTypes2.default.any,
    children: _propTypes2.default.string.isRequired
  }), _class.displayName = "DialogTitle", _temp);
  exports.default = DialogTitle;

  var styles = _reactNative.StyleSheet.create({
    text: {
      fontWeight: "500",
      fontSize: 18
    }
  });
},1053,[103,121,14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _Styles = _require(_dependencyMap[3]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _ItemCard = _require(_dependencyMap[4]);

  var History = function (_React$Component) {
    babelHelpers.inherits(History, _React$Component);

    function History(props) {
      babelHelpers.classCallCheck(this, History);

      var _this = babelHelpers.possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, props));

      _this.state = {
        itemsSub: props.itemsSub
      };
      return _this;
    }

    babelHelpers.createClass(History, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.props.navigation.addListener('didBlur', function (payload) {
          console.log('Stopping history subscription');

          _this2.state.itemsSub.stop();

          if (_this2.props.itemsSub) _this2.props.itemsSub.stop();
        });
        this.props.navigation.addListener('willFocus', function () {
          _this2.setState({
            itemsSub: _reactNativeMeteor2.default.subscribe('items')
          });
        });
      }
    }, {
      key: "renderRow",
      value: function renderRow(item) {
        return _react2.default.createElement(_ItemCard.ItemCard, babelHelpers.extends({
          item: item
        }, this.props));
      }
    }, {
      key: "render",
      value: function render() {
        var loaded = this.props;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          !loaded ? _react2.default.createElement(
            _reactNative.Text,
            null,
            "Loading Items..."
          ) : _react2.default.createElement(_reactNativeMeteor.MeteorListView, {
            collection: "Items",
            enableEmptySections: true,
            contentContainerStyle: styles.list,
            style: styles.listView,
            options: {
              sort: {
                createdAt: -1
              }
            },
            renderRow: this.renderRow.bind(this)
          })
        );
      }
    }]);
    return History;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: _Styles2.default.colors.white,
      flex: 1,
      paddingTop: 9,
      paddingVertical: 8
    },
    list: {
      alignItems: 'flex-start',
      justifyContent: 'center',
      flexDirection: 'row',
      flexWrap: 'wrap'
    },
    listContainer: {},
    listView: {},
    noItems: {
      alignSelf: 'center'
    }
  });

  exports.default = (0, _reactNativeMeteor.withTracker)(function (props) {
    var itemsSub = void 0;
    var loaded = void 0;

    if (props.navigation.isFocused()) {
      itemsSub = _reactNativeMeteor2.default.subscribe('items');
      loaded = itemsSub.ready();
    }

    return {
      loaded: loaded,
      itemsSub: itemsSub
    };
  })(History);
},1054,[103,14,858,1015,1055]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ItemCard = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeActionsheet = _require(_dependencyMap[2]);

  var _reactNativeActionsheet2 = babelHelpers.interopRequireDefault(_reactNativeActionsheet);

  var _Styles = _require(_dependencyMap[3]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _Icon = _require(_dependencyMap[4]);

  var _AddToCollect = _require(_dependencyMap[5]);

  var _AddToCollect2 = babelHelpers.interopRequireDefault(_AddToCollect);

  var ItemCard = exports.ItemCard = function (_React$Component) {
    babelHelpers.inherits(ItemCard, _React$Component);

    function ItemCard(props) {
      babelHelpers.classCallCheck(this, ItemCard);

      var _this = babelHelpers.possibleConstructorReturn(this, (ItemCard.__proto__ || Object.getPrototypeOf(ItemCard)).call(this, props));

      _this.showActionSheet = function () {
        _this.ActionSheet.show();
      };

      _this.handleMenuSelect.bind(_this);

      _this.showAddToCollect.bind(_this);

      _this.hideAddToCollect.bind(_this);

      _this.state = {
        addToCollectShowing: false
      };
      return _this;
    }

    babelHelpers.createClass(ItemCard, [{
      key: "handleRowPress",
      value: function handleRowPress(item) {
        var navigate = this.props.navigation.navigate;

        if (this.props.collect) {
          navigate('Item', {
            itemId: item._id,
            collectId: this.props.collect._id
          });
        } else {
          navigate('Item', {
            itemId: item._id
          });
        }
      }
    }, {
      key: "hideAddToCollect",
      value: function hideAddToCollect() {
        this.setState({
          addToCollectShowing: false
        });
      }
    }, {
      key: "showAddToCollect",
      value: function showAddToCollect() {
        this.setState({
          addToCollectShowing: true
        });
      }
    }, {
      key: "handleMenuSelect",
      value: function handleMenuSelect(selected) {
        if (selected === 0) this.showAddToCollect();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var item = this.props.item;
        var addToCollectShowing = this.state.addToCollectShowing;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.card
          },
          _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              style: styles.link,
              onPress: function onPress() {
                _this2.handleRowPress(item);
              }
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.imageContainer
              },
              _react2.default.createElement(_Icon.Heart, {
                style: styles.heart
              }),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.image
                },
                "Image"
              )
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.info
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.text, styles.name]
                },
                item.name
              ),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.text
                },
                item.retailer
              ),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.text
                },
                "$",
                item.price
              ),
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  style: styles.menuToggle,
                  onPress: this.showActionSheet
                },
                _react2.default.createElement(_Icon.Menu, null)
              )
            ),
            _react2.default.createElement(_reactNativeActionsheet2.default, {
              ref: function ref(o) {
                return _this2.ActionSheet = o;
              },
              options: ['Add to Collection', 'Cancel'],
              cancelButtonIndex: 1,
              onPress: function onPress(index) {
                _this2.handleMenuSelect(index);
              }
            }),
            _react2.default.createElement(_AddToCollect2.default, babelHelpers.extends({
              show: addToCollectShowing,
              onHideRequest: this.hideAddToCollect.bind(this)
            }, this.props))
          )
        );
      }
    }]);
    return ItemCard;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    card: {
      flex: 1,
      flexBasis: .5,
      marginVertical: 8,
      marginHorizontal: 9,
      minWidth: 160,
      maxWidth: '50%'
    },
    link: {
      backgroundColor: _Styles2.default.colors.white,
      borderWidth: 1,
      borderColor: _Styles2.default.colors.light
    },
    imageContainer: {
      alignItems: 'center',
      justifyContent: 'center',
      borderBottomWidth: 1,
      borderBottomColor: _Styles2.default.colors.light,
      aspectRatio: 1.2
    },
    menuToggle: {
      position: 'absolute',
      bottom: 8,
      right: 8,
      justifyContent: 'center',
      height: 16
    },
    heart: {
      position: 'absolute',
      left: 8,
      top: 8
    },
    info: {
      padding: 8,
      alignItems: 'flex-start'
    },
    name: {
      fontWeight: 'bold'
    },
    text: {
      color: _Styles2.default.colors.gray
    }
  });
},1055,[103,14,1056,1015,1019,1062]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ActionSheetCustom = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  var _ActionSheetIOS2 = _require(_dependencyMap[1]);

  var _ActionSheetIOS3 = babelHelpers.interopRequireDefault(_ActionSheetIOS2);

  var _ActionSheetCustom2 = _require(_dependencyMap[2]);

  var _ActionSheetCustom3 = babelHelpers.interopRequireDefault(_ActionSheetCustom2);

  var ActionSheetCustom = exports.ActionSheetCustom = _ActionSheetCustom3.default;
  var ActionSheet = void 0;
  {
    ActionSheet = _ActionSheetCustom3.default;
  }
  exports.default = ActionSheet;
},1056,[14,1057,1059]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _options = _require(_dependencyMap[2]);

  var _options2 = babelHelpers.interopRequireDefault(_options);

  var ActionSheet = function (_React$Component) {
    babelHelpers.inherits(ActionSheet, _React$Component);

    function ActionSheet() {
      babelHelpers.classCallCheck(this, ActionSheet);
      return babelHelpers.possibleConstructorReturn(this, (ActionSheet.__proto__ || Object.getPrototypeOf(ActionSheet)).apply(this, arguments));
    }

    babelHelpers.createClass(ActionSheet, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate() {
        return false;
      }
    }, {
      key: "show",
      value: function show() {
        var props = this.props;
        var options = {};

        _options2.default.forEach(function (name) {
          var value = props[name];

          if (typeof value !== 'undefined') {
            options[name] = value;
          }
        });

        var callback = options.onPress;
        delete options.onPress;

        _reactNative.ActionSheetIOS.showActionSheetWithOptions(options, callback);
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return ActionSheet;
  }(_react2.default.Component);

  exports.default = ActionSheet;
},1057,[103,14,1058]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ['options', 'cancelButtonIndex', 'destructiveButtonIndex', 'title', 'message', 'tintColor', 'onPress'];
},1058,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _utils = _require(_dependencyMap[2]);

  var utils = babelHelpers.interopRequireWildcard(_utils);

  var _styles = _require(_dependencyMap[3]);

  var _styles2 = babelHelpers.interopRequireDefault(_styles);

  var WARN_COLOR = '#FF3B30';
  var MAX_HEIGHT = _reactNative.Dimensions.get('window').height * 0.7;
  var ActionSheet = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(ActionSheet, _React$Component);

    function ActionSheet(props) {
      babelHelpers.classCallCheck(this, ActionSheet);

      var _this = babelHelpers.possibleConstructorReturn(this, (ActionSheet.__proto__ || Object.getPrototypeOf(ActionSheet)).call(this, props));

      _this.show = function () {
        _this.setState({
          visible: true
        }, function () {
          _this._showSheet();
        });
      };

      _this.hide = function (index) {
        _this._hideSheet(function () {
          _this.setState({
            visible: false
          }, function () {
            _this.props.onPress(index);
          });
        });
      };

      _this._cancel = function () {
        var cancelButtonIndex = _this.props.cancelButtonIndex;

        if (utils.isset(cancelButtonIndex)) {
          _this.hide(cancelButtonIndex);
        }
      };

      _this._showSheet = function () {
        _reactNative.Animated.timing(_this.state.sheetAnim, {
          toValue: 0,
          duration: 250,
          easing: _reactNative.Easing.out(_reactNative.Easing.ease)
        }).start();
      };

      _this.scrollEnabled = false;
      _this.translateY = _this._calculateHeight(props);
      _this.state = {
        visible: false,
        sheetAnim: new _reactNative.Animated.Value(_this.translateY)
      };
      return _this;
    }

    babelHelpers.createClass(ActionSheet, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        this.translateY = this._calculateHeight(nextProps);
      }
    }, {
      key: "_hideSheet",
      value: function _hideSheet(callback) {
        _reactNative.Animated.timing(this.state.sheetAnim, {
          toValue: this.translateY,
          duration: 200
        }).start(callback);
      }
    }, {
      key: "_calculateHeight",
      value: function _calculateHeight(props) {
        var styles = this.styles;

        var getHeight = function getHeight(name) {
          var style = styles[name][styles[name].length - 1];
          var h = 0;
          ['height', 'marginTop', 'marginBottom'].forEach(function (attrName) {
            if (typeof style[attrName] !== 'undefined') {
              h += style[attrName];
            }
          });
          return h;
        };

        var height = 0;
        if (props.title) height += getHeight('titleBox');
        if (props.message) height += getHeight('messageBox');

        if (utils.isset(props.cancelButtonIndex)) {
          height += getHeight('cancelButtonBox');
          height += (props.options.length - 1) * getHeight('buttonBox');
        } else {
          height += props.options.length * getHeight('buttonBox');
        }

        if (height > MAX_HEIGHT) {
          this.scrollEnabled = true;
          height = MAX_HEIGHT;
        } else {
          this.scrollEnabled = false;
        }

        return height;
      }
    }, {
      key: "_renderTitle",
      value: function _renderTitle() {
        var title = this.props.title;
        var styles = this.styles;
        if (!title) return null;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.titleBox
          },
          _react2.default.isValidElement(title) ? title : _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.titleText
            },
            title
          )
        );
      }
    }, {
      key: "_renderMessage",
      value: function _renderMessage() {
        var message = this.props.message;
        var styles = this.styles;
        if (!message) return null;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.messageBox
          },
          _react2.default.isValidElement(message) ? message : _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.messageText
            },
            message
          )
        );
      }
    }, {
      key: "_renderCancelButton",
      value: function _renderCancelButton() {
        var _props = this.props,
            options = _props.options,
            cancelButtonIndex = _props.cancelButtonIndex;
        if (!utils.isset(cancelButtonIndex)) return null;
        return this._createButton(options[cancelButtonIndex], cancelButtonIndex);
      }
    }, {
      key: "_createButton",
      value: function _createButton(title, index) {
        var _this2 = this;

        var styles = this.styles;
        var _props2 = this.props,
            buttonUnderlayColor = _props2.buttonUnderlayColor,
            cancelButtonIndex = _props2.cancelButtonIndex,
            destructiveButtonIndex = _props2.destructiveButtonIndex,
            tintColor = _props2.tintColor;
        var fontColor = destructiveButtonIndex === index ? WARN_COLOR : tintColor;
        var buttonBoxStyle = cancelButtonIndex === index ? styles.cancelButtonBox : styles.buttonBox;
        return _react2.default.createElement(
          _reactNative.TouchableHighlight,
          {
            key: index,
            activeOpacity: 1,
            underlayColor: buttonUnderlayColor,
            style: buttonBoxStyle,
            onPress: function onPress() {
              return _this2.hide(index);
            }
          },
          _react2.default.isValidElement(title) ? title : _react2.default.createElement(
            _reactNative.Text,
            {
              style: [styles.buttonText, {
                color: fontColor
              }]
            },
            title
          )
        );
      }
    }, {
      key: "_renderOptions",
      value: function _renderOptions() {
        var _this3 = this;

        var cancelButtonIndex = this.props.cancelButtonIndex;
        return this.props.options.map(function (title, index) {
          return cancelButtonIndex === index ? null : _this3._createButton(title, index);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var styles = this.styles;
        var _state = this.state,
            visible = _state.visible,
            sheetAnim = _state.sheetAnim;
        return _react2.default.createElement(
          _reactNative.Modal,
          {
            visible: visible,
            animationType: "none",
            transparent: true,
            onRequestClose: this._cancel
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.wrapper]
            },
            _react2.default.createElement(_reactNative.Text, {
              style: [styles.overlay],
              onPress: this._cancel
            }),
            _react2.default.createElement(
              _reactNative.Animated.View,
              {
                style: [styles.body, {
                  height: this.translateY,
                  transform: [{
                    translateY: sheetAnim
                  }]
                }]
              },
              this._renderTitle(),
              this._renderMessage(),
              _react2.default.createElement(
                _reactNative.ScrollView,
                {
                  scrollEnabled: this.scrollEnabled
                },
                this._renderOptions()
              ),
              this._renderCancelButton()
            )
          )
        );
      }
    }, {
      key: "styles",
      get: function get() {
        var styles = this.props.styles;
        var obj = {};
        Object.keys(_styles2.default).forEach(function (key) {
          var arr = [_styles2.default[key]];

          if (styles[key]) {
            arr.push(styles[key]);
          }

          obj[key] = arr;
        });
        return obj;
      }
    }]);
    return ActionSheet;
  }(_react2.default.Component), _class.defaultProps = {
    tintColor: '#007AFF',
    buttonUnderlayColor: '#F4F4F4',
    onPress: function onPress() {},
    styles: {}
  }, _temp);
  exports.default = ActionSheet;
},1059,[103,14,1060,1061]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isset = isset;
  exports.merge = merge;

  function isset(prop) {
    return typeof prop !== 'undefined';
  }

  function merge(target, source) {
    Object.keys(source).forEach(function (key) {
      if (Object.prototype.toString.call(source).slice(8, -1) === 'Object') {
        target[key] = merge(target[key] || {}, source[key]);
      } else {
        target[key] = source[key];
      }
    });
    return target;
  }
},1060,[]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.hairlineWidth = undefined;

  var _reactNative = _require(_dependencyMap[0]);

  var hairlineWidth = exports.hairlineWidth = _reactNative.StyleSheet.hairlineWidth;
  exports.default = {
    overlay: {
      position: 'absolute',
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      opacity: 0.4,
      backgroundColor: '#000'
    },
    wrapper: {
      flex: 1,
      flexDirection: 'row'
    },
    body: {
      flex: 1,
      alignSelf: 'flex-end',
      backgroundColor: '#e5e5e5'
    },
    titleBox: {
      height: 40,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#fff'
    },
    titleText: {
      color: '#757575',
      fontSize: 14
    },
    messageBox: {
      height: 30,
      paddingLeft: 10,
      paddingRight: 10,
      paddingBottom: 10,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#fff'
    },
    messageText: {
      color: '#9a9a9a',
      fontSize: 12
    },
    buttonBox: {
      height: 50,
      marginTop: hairlineWidth,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#fff'
    },
    buttonText: {
      fontSize: 18
    },
    cancelButtonBox: {
      height: 50,
      marginTop: 6,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#fff'
    }
  };
},1061,[14]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _Styles = _require(_dependencyMap[2]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _reactNativeMeteor = _require(_dependencyMap[3]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _AddCollect = _require(_dependencyMap[4]);

  var _AddCollect2 = babelHelpers.interopRequireDefault(_AddCollect);

  var AddToCollect = function (_React$Component) {
    babelHelpers.inherits(AddToCollect, _React$Component);

    function AddToCollect(props) {
      babelHelpers.classCallCheck(this, AddToCollect);

      var _this = babelHelpers.possibleConstructorReturn(this, (AddToCollect.__proto__ || Object.getPrototypeOf(AddToCollect)).call(this, props));

      _this.onClose = function () {
        console.log('closing modal');
      };

      _this.isSelected = function (collection, item) {
        return collection.items && collection.items.indexOf(item._id) > -1;
      };

      _this.handleRowPress.bind(_this);

      _this.handleAddPress.bind(_this);

      _this.card.bind(_this);

      _this.state = {
        showAddDialog: false
      };
      return _this;
    }

    babelHelpers.createClass(AddToCollect, [{
      key: "handleRowPress",
      value: function handleRowPress(collection, item) {
        if (this.isSelected(collection, item)) {
          _reactNativeMeteor2.default.call('collects.remove.item', collection._id, item._id, function (err, data) {
            if (err) console.error(err);
          });
        } else {
          _reactNativeMeteor2.default.call('collects.add.item', collection._id, item._id, function (err, data) {
            if (err) console.error(err);
          });
        }
      }
    }, {
      key: "handleAddPress",
      value: function handleAddPress() {
        this.setState(function (state) {
          return {
            showAddDialog: !state.showAddDialog
          };
        });
      }
    }, {
      key: "card",
      value: function card(collection) {
        var _this2 = this;

        var item = this.props.item;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.card,
            key: collection._id
          },
          _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              style: styles.link,
              onPress: function onPress() {
                _this2.handleRowPress(collection, item);
              }
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.image
              },
              _react2.default.createElement(
                _reactNative.Text,
                null,
                "Image"
              )
            ),
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.name
              },
              collection.name
            ),
            this.isSelected(collection, item) && _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.selected
              },
              "Check"
            )
          )
        );
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _props = this.props,
            show = _props.show,
            onHideRequest = _props.onHideRequest,
            loaded = _props.loaded,
            collects = _props.collects;
        var showAddDialog = this.state.showAddDialog;
        return _react2.default.createElement(
          _reactNative.Modal,
          {
            visible: show,
            animationType: 'slide',
            presentationStyle: 'pageSheet',
            onRequestClose: this.onClose
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.view
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.top
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.title
                },
                "My Collections"
              ),
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  style: styles.done,
                  onPress: onHideRequest
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.doneText
                  },
                  "Done"
                )
              )
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.content
              },
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  onPress: function onPress() {
                    _this3.handleAddPress();
                  }
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.add
                  },
                  "Create a new collection"
                )
              ),
              !loaded && _react2.default.createElement(
                _reactNative.Text,
                null,
                "Loading Collections..."
              ),
              _react2.default.createElement(_reactNativeMeteor.MeteorComplexListView, {
                elements: function elements() {
                  return collects;
                },
                enableEmptySections: true,
                style: styles.list,
                options: {
                  sort: {
                    createdAt: -1
                  }
                },
                renderRow: this.card.bind(this)
              }),
              _react2.default.createElement(_AddCollect2.default, babelHelpers.extends({
                visible: showAddDialog,
                redirect: false,
                hide: function hide() {
                  _this3.handleAddPress();
                }
              }, this.props))
            )
          )
        );
      }
    }]);
    return AddToCollect;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    view: {
      backgroundColor: _Styles2.default.colors.white,
      flex: 1
    },
    top: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      marginVertical: 20
    },
    done: {
      position: 'absolute',
      right: 20
    },
    doneText: {
      fontWeight: 'bold',
      color: _Styles2.default.colors.teal
    },
    list: {
      marginHorizontal: 22,
      borderTopColor: _Styles2.default.colors.light,
      borderTopWidth: 1
    },
    card: {
      borderBottomColor: _Styles2.default.colors.light,
      borderBottomWidth: 1,
      flexDirection: 'row',
      alignItems: 'center'
    },
    link: {
      paddingVertical: 22,
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center'
    },
    add: {
      color: _Styles2.default.colors.teal,
      padding: 22,
      fontWeight: "600",
      fontSize: _Styles2.default.text_1,
      borderTopColor: _Styles2.default.colors.light,
      borderTopWidth: 1
    },
    name: {
      fontSize: 18,
      fontWeight: 'bold',
      marginLeft: 20,
      color: _Styles2.default.colors.gray
    },
    selected: {
      marginLeft: 'auto',
      fontWeight: 'bold',
      color: _Styles2.default.colors.teal
    },
    image: {
      borderColor: _Styles2.default.colors.light,
      borderWidth: 1,
      width: 80,
      height: 80,
      alignItems: 'center',
      justifyContent: 'center'
    }
  });

  exports.default = (0, _reactNativeMeteor.withTracker)(function () {
    var subscription = _reactNativeMeteor2.default.subscribe('collects');

    return {
      loaded: subscription.ready(),
      collects: _reactNativeMeteor2.default.collection('Collects').find()
    };
  })(AddToCollect);
},1062,[103,14,1015,858,1022]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var Loader = (0, _reactNativeMeteor.connectMeteor)(_class = function (_React$Component) {
    babelHelpers.inherits(Loader, _React$Component);

    function Loader(props) {
      var _this2 = this;

      babelHelpers.classCallCheck(this, Loader);

      var _this = babelHelpers.possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));

      _this._bootstrapAsync = function _callee() {
        var navigate;
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                navigate = _this.props.navigation.navigate;
                _context.next = 3;
                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('reactnativemeteor_usertoken').then(function (token) {
                  navigate(token ? 'Main' : 'Auth');
                }).catch(function (err) {
                  console.error(err);
                }));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this2);
      };

      return _this;
    }

    babelHelpers.createClass(Loader, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._bootstrapAsync();
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          null,
          _react2.default.createElement(
            _reactNative.Text,
            null,
            "Loading.."
          )
        );
      }
    }]);
    return Loader;
  }(_react2.default.Component)) || _class;

  exports.default = Loader;
},1063,[103,14,858]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var Welcome = (0, _reactNativeMeteor.connectMeteor)(_class = function (_React$Component) {
    babelHelpers.inherits(Welcome, _React$Component);

    function Welcome(props) {
      babelHelpers.classCallCheck(this, Welcome);
      return babelHelpers.possibleConstructorReturn(this, (Welcome.__proto__ || Object.getPrototypeOf(Welcome)).call(this, props));
    }

    babelHelpers.createClass(Welcome, [{
      key: "render",
      value: function render() {
        var navigate = this.props.navigation.navigate;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.Text,
            null,
            "Profile Builder"
          ),
          _react2.default.createElement(
            _reactNative.Button,
            {
              onPress: function onPress() {
                navigate('Home');
              },
              title: 'Back'
            },
            "Home"
          )
        );
      }
    }]);
    return Welcome;
  }(_react2.default.Component)) || _class;

  exports.default = Welcome;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      justifyContent: 'center'
    }
  });
},1064,[103,14,858]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _Styles = _require(_dependencyMap[3]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _ItemCard = _require(_dependencyMap[4]);

  var Collect = function (_React$Component) {
    babelHelpers.inherits(Collect, _React$Component);

    function Collect(props) {
      babelHelpers.classCallCheck(this, Collect);

      var _this = babelHelpers.possibleConstructorReturn(this, (Collect.__proto__ || Object.getPrototypeOf(Collect)).call(this, props));

      _this.state = {
        collectsSub: props.collectsSub
      };
      return _this;
    }

    babelHelpers.createClass(Collect, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var navigation = this.props.navigation;
        navigation.addListener('didBlur', function () {
          console.log('Stopping collect subscription', _this2.props.collectsSub);

          _this2.state.collectsSub.stop();

          _this2.props.collectsSub.stop();
        });
        navigation.addListener('willFocus', function () {
          _this2.setState({
            collectsSub: _reactNativeMeteor2.default.subscribe('collect.view', navigation.getParam('_id'))
          });
        });
      }
    }, {
      key: "renderRow",
      value: function renderRow(item) {
        return _react2.default.createElement(_ItemCard.ItemCard, babelHelpers.extends({
          item: item
        }, this.props));
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            loaded = _props.loaded,
            collect = _props.collect;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          !loaded ? _react2.default.createElement(
            _reactNative.Text,
            null,
            "Loading Collection..."
          ) : _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.listContainer
            },
            !collect.items > 0 ? _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.noItems
              },
              "No Products in this Collection"
            ) : _react2.default.createElement(_reactNativeMeteor.MeteorListView, {
              collection: "Items",
              enableEmptySections: true,
              contentContainerStyle: styles.list,
              style: styles.listView,
              options: {
                sort: {
                  createdAt: -1
                }
              },
              renderRow: this.renderRow.bind(this)
            })
          )
        );
      }
    }]);
    return Collect;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: _Styles2.default.colors.white,
      flex: 1,
      paddingTop: 9,
      paddingVertical: 8
    },
    list: {
      alignItems: 'flex-start',
      justifyContent: 'center',
      flexDirection: 'row',
      flexWrap: 'wrap'
    },
    listContainer: {},
    listView: {},
    noItems: {
      alignSelf: 'center'
    }
  });

  exports.default = (0, _reactNativeMeteor.withTracker)(function (props) {
    var collectId = props.navigation.getParam('_id');
    var collectsSub = void 0;
    var collect = void 0;
    var loaded = void 0;

    if (props.navigation.isFocused()) {
      collectsSub = _reactNativeMeteor2.default.subscribe('collect.view', collectId);
      collect = _reactNativeMeteor2.default.collection('Collects').findOne(collectId);
      loaded = collectsSub.ready();
    }

    return {
      loaded: loaded,
      collectsSub: collectsSub,
      collect: collect
    };
  })(Collect);
},1065,[103,14,858,1015,1055]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var EditCollect = function (_React$Component) {
    babelHelpers.inherits(EditCollect, _React$Component);

    function EditCollect(props) {
      babelHelpers.classCallCheck(this, EditCollect);

      var _this = babelHelpers.possibleConstructorReturn(this, (EditCollect.__proto__ || Object.getPrototypeOf(EditCollect)).call(this, props));

      _this.state = {
        _id: '',
        name: ''
      };
      return _this;
    }

    babelHelpers.createClass(EditCollect, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _id = this.props.navigation.getParam('_id');

        var name = this.props.navigation.getParam('name');
        this.setState({
          _id: _id,
          name: name
        });
      }
    }, {
      key: "updateCollection",
      value: function updateCollection(collection, nav) {
        _reactNativeMeteor2.default.call('collects.update', collection);

        nav('Collection', collection);
      }
    }, {
      key: "handleButtonPress",
      value: function handleButtonPress() {
        var _state = this.state,
            _id = _state._id,
            name = _state.name;
        var navigate = this.props.navigation.navigate;
        var collection = {
          _id: _id,
          name: name
        };
        this.updateCollection(collection, navigate);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.Text,
            null,
            "Add New Collection"
          ),
          _react2.default.createElement(
            _reactNative.View,
            null,
            _react2.default.createElement(
              _reactNative.Text,
              null,
              "Name"
            ),
            _react2.default.createElement(_reactNative.TextInput, {
              onChangeText: function onChangeText(name) {
                return _this2.setState({
                  name: name
                });
              },
              value: this.state.name
            }),
            _react2.default.createElement(_reactNative.Button, {
              onPress: this.handleButtonPress.bind(this),
              title: "Create",
              accessibilityLabel: "Create Collection"
            })
          )
        );
      }
    }]);
    return EditCollect;
  }(_react2.default.Component);

  exports.default = EditCollect;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      justifyContent: 'center'
    }
  });
},1066,[103,14,858]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _Styles = _require(_dependencyMap[3]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _Icon = _require(_dependencyMap[4]);

  var _AddToCollect = _require(_dependencyMap[5]);

  var _AddToCollect2 = babelHelpers.interopRequireDefault(_AddToCollect);

  var Item = function (_React$Component) {
    babelHelpers.inherits(Item, _React$Component);

    function Item(props) {
      babelHelpers.classCallCheck(this, Item);

      var _this = babelHelpers.possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));

      _this.state = {
        addToCollectShowing: false,
        itemsSub: props.itemsSub,
        loaded: props.loaded
      };
      return _this;
    }

    babelHelpers.createClass(Item, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.props.navigation.addListener('didBlur', function () {
          console.log('Stopping item subscription');

          _this2.state.itemsSub.stop();

          if (_this2.props.itemsSub) _this2.props.itemsSub.stop();
        });
        this.props.navigation.addListener('willFocus', function () {
          var itemId = _this2.props.navigation.getParam('itemId');

          _this2.setState({
            itemsSub: _reactNativeMeteor2.default.subscribe('item.view', itemId)
          });
        });
      }
    }, {
      key: "handleLink",
      value: function handleLink() {
        console.log('Open item.link in browser');
      }
    }, {
      key: "hideAddToCollect",
      value: function hideAddToCollect() {
        this.setState({
          addToCollectShowing: false
        });
      }
    }, {
      key: "handleAdd",
      value: function handleAdd() {
        this.setState({
          addToCollectShowing: true
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            item = _props.item,
            loaded = _props.loaded;
        var addToCollectShowing = this.state.addToCollectShowing;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          !loaded ? _react2.default.createElement(
            _reactNative.Text,
            null,
            "Loading Item..."
          ) : _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.item
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.imageContainer
              },
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.image
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  null,
                  "Image"
                ),
                _react2.default.createElement(_Icon.Heart, {
                  style: styles.heart
                })
              )
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.info
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.name, styles.text]
                },
                item.name
              ),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.retailer, styles.text]
                },
                item.retailer
              ),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.description, styles.text]
                },
                item.description
              ),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.price, styles.text]
                },
                "$",
                item.price
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.buttons
                },
                _react2.default.createElement(
                  _reactNative.TouchableOpacity,
                  {
                    style: [styles.button, styles.red],
                    onPress: this.handleAdd.bind(this)
                  },
                  _react2.default.createElement(
                    _reactNative.Text,
                    {
                      style: styles.buttonText
                    },
                    "Add to Collection"
                  )
                ),
                _react2.default.createElement(
                  _reactNative.TouchableOpacity,
                  {
                    style: styles.button,
                    onPress: this.handleLink.bind(this)
                  },
                  _react2.default.createElement(
                    _reactNative.Text,
                    {
                      style: styles.buttonText
                    },
                    "Go To Site"
                  )
                )
              )
            )
          ),
          _react2.default.createElement(_AddToCollect2.default, babelHelpers.extends({
            show: addToCollectShowing,
            onHideRequest: this.hideAddToCollect.bind(this)
          }, this.props))
        );
      }
    }]);
    return Item;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      backgroundColor: _Styles2.default.colors.white
    },
    item: {
      flex: 1
    },
    image: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: _Styles2.default.colors.light,
      elevation: 4,
      shadowColor: _Styles2.default.colors.gray,
      shadowRadius: 12,
      shadowOpacity: 0.2,
      aspectRatio: 1
    },
    imageContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      padding: 60
    },
    info: {
      flex: 1,
      padding: 20,
      paddingVertical: 40
    },
    text: {
      fontSize: 20,
      paddingHorizontal: 4,
      lineHeight: 28
    },
    name: {
      fontWeight: 'bold'
    },
    retailer: {
      fontWeight: '200'
    },
    buttons: {
      flexDirection: 'row',
      paddingVertical: 34,
      justifyContent: 'center'
    },
    button: {
      flex: 1,
      paddingHorizontal: 16,
      justifyContent: 'center',
      alignItems: 'center',
      marginHorizontal: 8,
      backgroundColor: _Styles2.default.colors.green,
      borderRadius: 10,
      height: 44,
      maxWidth: 200
    },
    red: {
      backgroundColor: _Styles2.default.colors.red
    },
    buttonText: {
      textAlign: 'center',
      color: _Styles2.default.colors.white,
      fontWeight: 'bold'
    },
    heart: {
      position: 'absolute',
      left: 8,
      top: 8
    }
  });

  exports.default = (0, _reactNativeMeteor.withTracker)(function (props) {
    var itemId = props.navigation.getParam('itemId');
    var itemsSub = void 0;
    var item = void 0;
    var loaded = void 0;

    if (props.navigation.isFocused()) {
      itemsSub = _reactNativeMeteor2.default.subscribe('item.view', itemId);
      item = _reactNativeMeteor2.default.collection('Items').findOne(itemId);
      loaded = itemsSub.ready();
    }

    return {
      loaded: loaded,
      item: item,
      itemsSub: itemsSub
    };
  })(Item);
},1067,[103,14,858,1015,1019,1062]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var AddItem = function (_React$Component) {
    babelHelpers.inherits(AddItem, _React$Component);

    function AddItem(props) {
      babelHelpers.classCallCheck(this, AddItem);

      var _this = babelHelpers.possibleConstructorReturn(this, (AddItem.__proto__ || Object.getPrototypeOf(AddItem)).call(this, props));

      _this.state = {
        name: '',
        description: '',
        retailer: '',
        price: ''
      };
      return _this;
    }

    babelHelpers.createClass(AddItem, [{
      key: "createNewItem",
      value: function createNewItem(item, nav) {
        var collect = this.props.navigation.getParam('collect');

        _reactNativeMeteor2.default.call('items.insert', item, function () {
          nav('Collection', {
            _id: collect._id
          });
        });
      }
    }, {
      key: "handleButtonPress",
      value: function handleButtonPress() {
        var name = this.state.name;
        var navigation = this.props.navigation;
        var collect = navigation.getParam('collect');
        var item = {
          name: name,
          description: description,
          retailer: retailer,
          price: price,
          collections: [collect._id]
        };
        this.createNewItem(item, navigation.navigate);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var collect = this.props.navigation.getParam('collect');
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.Text,
            null,
            "Add New Item to ",
            collect.name
          ),
          _react2.default.createElement(
            _reactNative.View,
            null,
            _react2.default.createElement(
              _reactNative.Text,
              null,
              "Name"
            ),
            _react2.default.createElement(_reactNative.TextInput, {
              onChangeText: function onChangeText(name) {
                return _this2.setState({
                  name: name
                });
              },
              value: this.state.name
            }),
            _react2.default.createElement(
              _reactNative.Text,
              null,
              "Description"
            ),
            _react2.default.createElement(_reactNative.TextInput, {
              onChangeText: function onChangeText(name) {
                return _this2.setState({
                  name: name
                });
              },
              value: this.state.description
            }),
            _react2.default.createElement(
              _reactNative.Text,
              null,
              "Retailer"
            ),
            _react2.default.createElement(_reactNative.TextInput, {
              onChangeText: function onChangeText(name) {
                return _this2.setState({
                  name: name
                });
              },
              value: this.state.retailer
            }),
            _react2.default.createElement(
              _reactNative.Text,
              null,
              "Price"
            ),
            _react2.default.createElement(_reactNative.TextInput, {
              onChangeText: function onChangeText(name) {
                return _this2.setState({
                  name: name
                });
              },
              value: this.state.price
            }),
            _react2.default.createElement(_reactNative.Button, {
              onPress: this.handleButtonPress.bind(this),
              title: "Create",
              accessibilityLabel: "Create Item"
            })
          )
        );
      }
    }]);
    return AddItem;
  }(_react2.default.Component);

  exports.default = AddItem;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      justifyContent: 'center'
    }
  });
},1068,[103,14,858]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _Styles = _require(_dependencyMap[3]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _reactNativeDialog = _require(_dependencyMap[4]);

  var _reactNativeDialog2 = babelHelpers.interopRequireDefault(_reactNativeDialog);

  var Settings = (0, _reactNativeMeteor.connectMeteor)(_class = function (_React$Component) {
    babelHelpers.inherits(Settings, _React$Component);

    function Settings(props) {
      var _this2 = this;

      babelHelpers.classCallCheck(this, Settings);

      var _this = babelHelpers.possibleConstructorReturn(this, (Settings.__proto__ || Object.getPrototypeOf(Settings)).call(this, props));

      _this._signOutAsync = function _callee() {
        var navigate;
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                navigate = _this.props.navigation.navigate;
                _context.next = 3;
                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.clear());

              case 3:
                navigate('Auth');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this2);
      };

      _this.state = {
        emailDialog: false,
        passwordDialog: false,
        passConfirmDialog: false,
        email: '',
        password: '',
        newPass: '',
        passConfirm: ''
      };

      _this.hideAllDialogs.bind(_this);

      _this.delay.bind(_this);

      return _this;
    }

    babelHelpers.createClass(Settings, [{
      key: "delay",
      value: function delay(func) {
        setTimeout(func, 600);
      }
    }, {
      key: "hideAllDialogs",
      value: function hideAllDialogs() {
        this.setState(function () {
          return {
            emailDialog: false
          };
        });
        this.setState(function () {
          return {
            passwordDialog: false
          };
        });
        this.setState(function () {
          return {
            passConfirmDialog: false
          };
        });
      }
    }, {
      key: "handleCancelPress",
      value: function handleCancelPress() {
        this.hideAllDialogs();
      }
    }, {
      key: "handleSaveEmailPress",
      value: function handleSaveEmailPress() {
        var _this3 = this;

        var email = this.state.email;
        var user = this.props.user;
        var profile = {
          emailAddress: email,
          profile: user.profile
        };

        _reactNativeMeteor2.default.call('users.editProfile', profile, function (error) {
          if (error) {
            _this3.hideAllDialogs();

            _this3.delay(function () {
              _reactNative.Alert.alert('Error', error.reason, [{
                text: 'Ok'
              }]);
            });
          }
        });

        this.hideAllDialogs();
      }
    }, {
      key: "handleSavePasswordPress",
      value: function handleSavePasswordPress() {
        var _this4 = this;

        this.setState(function () {
          return {
            passwordDialog: false
          };
        });
        this.delay(function () {
          _this4.setState(function () {
            return {
              passConfirmDialog: true
            };
          });
        });
      }
    }, {
      key: "handleConfirmSavePasswordPress",
      value: function handleConfirmSavePasswordPress() {
        var _this5 = this;

        var _state = this.state,
            password = _state.password,
            newPass = _state.newPass,
            passConfirm = _state.passConfirm;

        if (newPass === passConfirm) {
          _reactNativeMeteor.Accounts.changePassword(password, newPass, function (error) {
            if (error) {
              _this5.hideAllDialogs();

              _this5.delay(function () {
                _reactNative.Alert.alert('Error', error.reason, [{
                  text: 'Ok'
                }]);
              });
            }
          });

          this.hideAllDialogs();
        }
      }
    }, {
      key: "handleEditEmailPress",
      value: function handleEditEmailPress() {
        this.setState(function () {
          return {
            emailDialog: true
          };
        });
      }
    }, {
      key: "handleEditPasswordPress",
      value: function handleEditPasswordPress() {
        this.setState(function () {
          return {
            passwordDialog: true
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this6 = this;

        var _state2 = this.state,
            emailDialog = _state2.emailDialog,
            email = _state2.email,
            passwordDialog = _state2.passwordDialog,
            password = _state2.password,
            passConfirmDialog = _state2.passConfirmDialog,
            passConfirm = _state2.passConfirm,
            newPass = _state2.newPass;
        var user = this.props.user;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.logoBox
            },
            _react2.default.createElement(_reactNative.Image, {
              source: _require(_dependencyMap[5])
            })
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.selector
            },
            _react2.default.createElement(
              _reactNative.TouchableOpacity,
              {
                style: styles.option,
                onPress: this.handleEditEmailPress.bind(this)
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.header
                },
                "Email"
              ),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.light
                },
                user.emails[0].address
              )
            ),
            _react2.default.createElement(
              _reactNative.TouchableOpacity,
              {
                style: [styles.option, styles.lastOption],
                onPress: this.handleEditPasswordPress.bind(this)
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.header
                },
                "Password"
              ),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.light
                },
                "******"
              )
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.buttons
            },
            _react2.default.createElement(
              _reactNative.TouchableOpacity,
              {
                style: [styles.button, styles.red],
                onPress: this._signOutAsync
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.buttonText
                },
                "Logout"
              )
            )
          ),
          _react2.default.createElement(
            _reactNativeDialog2.default.Container,
            {
              visible: emailDialog,
              useNativeDriver: true
            },
            _react2.default.createElement(
              _reactNativeDialog2.default.Title,
              null,
              "Change your Email"
            ),
            _react2.default.createElement(
              _reactNativeDialog2.default.Description,
              null,
              "Enter your new email address below"
            ),
            _react2.default.createElement(_reactNativeDialog2.default.Input, {
              value: email,
              onChangeText: function onChangeText(email) {
                return _this6.setState({
                  email: email
                });
              }
            }),
            _react2.default.createElement(_reactNativeDialog2.default.Button, {
              label: "Save",
              onPress: this.handleSaveEmailPress.bind(this)
            }),
            _react2.default.createElement(_reactNativeDialog2.default.Button, {
              label: "Cancel",
              onPress: this.handleCancelPress.bind(this)
            })
          ),
          _react2.default.createElement(
            _reactNativeDialog2.default.Container,
            {
              visible: passwordDialog,
              useNativeDriver: true
            },
            _react2.default.createElement(
              _reactNativeDialog2.default.Title,
              null,
              "Change your Password"
            ),
            _react2.default.createElement(
              _reactNativeDialog2.default.Description,
              null,
              "Enter your current password below"
            ),
            _react2.default.createElement(_reactNativeDialog2.default.Input, {
              value: password,
              secureTextEntry: true,
              onChangeText: function onChangeText(password) {
                return _this6.setState({
                  password: password
                });
              }
            }),
            _react2.default.createElement(_reactNativeDialog2.default.Button, {
              label: "Next",
              onPress: this.handleSavePasswordPress.bind(this)
            }),
            _react2.default.createElement(_reactNativeDialog2.default.Button, {
              label: "Cancel",
              onPress: this.handleCancelPress.bind(this)
            })
          ),
          _react2.default.createElement(
            _reactNativeDialog2.default.Container,
            {
              visible: passConfirmDialog,
              useNativeDriver: true
            },
            _react2.default.createElement(
              _reactNativeDialog2.default.Title,
              null,
              "Change your Password"
            ),
            _react2.default.createElement(
              _reactNativeDialog2.default.Description,
              null,
              "Enter your new password below"
            ),
            _react2.default.createElement(_reactNativeDialog2.default.Input, {
              value: newPass,
              secureTextEntry: true,
              label: 'New Password',
              onChangeText: function onChangeText(newPass) {
                return _this6.setState({
                  newPass: newPass
                });
              }
            }),
            _react2.default.createElement(_reactNativeDialog2.default.Input, {
              value: passConfirm,
              secureTextEntry: true,
              label: 'Confirm Password',
              onChangeText: function onChangeText(passConfirm) {
                return _this6.setState({
                  passConfirm: passConfirm
                });
              }
            }),
            _react2.default.createElement(_reactNativeDialog2.default.Button, {
              label: "Save",
              onPress: this.handleConfirmSavePasswordPress.bind(this)
            }),
            _react2.default.createElement(_reactNativeDialog2.default.Button, {
              label: "Cancel",
              onPress: this.handleCancelPress.bind(this)
            })
          )
        );
      }
    }]);
    return Settings;
  }(_react2.default.Component)) || _class;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      justifyContent: 'center'
    },
    logoBox: {
      justifyContent: 'center',
      alignItems: 'center',
      flex: 1
    },
    selector: {
      flex: 1
    },
    option: {
      borderTopWidth: 1,
      borderTopColor: _Styles2.default.colors.light,
      paddingVertical: 20,
      marginHorizontal: 28,
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    header: {
      fontWeight: 'bold'
    },
    light: {
      opacity: .6
    },
    buttons: {
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center'
    },
    button: {
      flex: 1,
      maxWidth: 200,
      paddingHorizontal: 16,
      justifyContent: 'center',
      alignItems: 'center',
      marginHorizontal: 8,
      backgroundColor: _Styles2.default.colors.salmon,
      borderRadius: 10,
      height: 44
    },
    lastOption: {
      borderBottomWidth: 1,
      borderBottomColor: _Styles2.default.colors.light
    },
    buttonText: {
      textAlign: 'center',
      color: _Styles2.default.colors.white,
      fontWeight: 'bold'
    }
  });

  exports.default = (0, _reactNativeMeteor.withTracker)(function () {
    var subscription = _reactNativeMeteor2.default.subscribe('users.editProfile');

    return {
      loaded: subscription.ready(),
      user: _reactNativeMeteor2.default.user()
    };
  })(Settings);
},1069,[103,14,858,1015,1023,1016]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _Styles = _require(_dependencyMap[2]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _Icon = _require(_dependencyMap[3]);

  var ShareLauncher = function (_React$Component) {
    babelHelpers.inherits(ShareLauncher, _React$Component);

    function ShareLauncher(props) {
      babelHelpers.classCallCheck(this, ShareLauncher);
      return babelHelpers.possibleConstructorReturn(this, (ShareLauncher.__proto__ || Object.getPrototypeOf(ShareLauncher)).call(this, props));
    }

    babelHelpers.createClass(ShareLauncher, [{
      key: "gotoSettings",
      value: function gotoSettings() {
        var navigate = this.props.navigation.navigate;
        navigate('Settings');
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              onPress: this.gotoSettings.bind(this),
              style: styles.button
            },
            _react2.default.createElement(_Icon.Share, null)
          )
        );
      }
    }]);
    return ShareLauncher;
  }(_react2.default.Component);

  exports.default = ShareLauncher;

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: _Styles2.default.colors.salmon,
      alignSelf: 'center',
      flex: 1,
      flexDirection: 'row'
    },
    button: {
      marginRight: 20
    }
  });
},1070,[103,14,1015,1019]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _Styles = _require(_dependencyMap[2]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var Entry = function (_React$Component) {
    babelHelpers.inherits(Entry, _React$Component);

    function Entry(props) {
      babelHelpers.classCallCheck(this, Entry);
      return babelHelpers.possibleConstructorReturn(this, (Entry.__proto__ || Object.getPrototypeOf(Entry)).call(this, props));
    }

    babelHelpers.createClass(Entry, [{
      key: "handleRegisterPress",
      value: function handleRegisterPress() {
        var navigate = this.props.navigation.navigate;
        navigate('Register');
      }
    }, {
      key: "handleSignInPress",
      value: function handleSignInPress() {
        var navigate = this.props.navigation.navigate;
        navigate('Login');
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.logo
            },
            _react2.default.createElement(_reactNative.Image, {
              source: _require(_dependencyMap[3])
            })
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.bottom
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.text
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.title
                },
                "Welcome to Clutch,"
              ),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.subTitle
                },
                "your new personal assistant"
              )
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.buttons
              },
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  style: [styles.button],
                  onPress: this.handleRegisterPress.bind(this)
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.buttonText
                  },
                  "Register"
                )
              ),
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  style: [styles.button, styles.signInButton],
                  onPress: this.handleSignInPress.bind(this)
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.buttonText
                  },
                  "Sign In"
                )
              )
            )
          )
        );
      }
    }]);
    return Entry;
  }(_react2.default.Component);

  exports.default = Entry;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'center',
      backgroundColor: _Styles2.default.colors.white
    },
    backgroundImage: {
      position: 'absolute',
      top: 0,
      left: 0,
      height: '100%',
      width: '100%'
    },
    logo: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center'
    },
    bottom: {
      flex: 1,
      alignItems: 'center'
    },
    text: {
      alignItems: 'center',
      marginBottom: 62
    },
    title: {
      fontWeight: 'bold',
      fontSize: 32
    },
    subTitle: {
      fontSize: 20
    },
    buttons: {
      alignItems: 'center'
    },
    button: {
      maxWidth: 260,
      minWidth: 260,
      marginBottom: 26,
      paddingVertical: 16,
      justifyContent: 'center',
      alignItems: 'center',
      marginHorizontal: 8,
      backgroundColor: _Styles2.default.colors.salmon,
      borderRadius: 10
    },
    buttonText: {
      textAlign: 'center',
      color: _Styles2.default.colors.white,
      fontWeight: 'bold',
      fontSize: 20
    },
    signInButton: {
      backgroundColor: _Styles2.default.colors.teal
    }
  });
},1071,[103,14,1015,1016]);
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _reactNativeMeteor = _require(_dependencyMap[2]);

  var _reactNativeMeteor2 = babelHelpers.interopRequireDefault(_reactNativeMeteor);

  var _Styles = _require(_dependencyMap[3]);

  var _Styles2 = babelHelpers.interopRequireDefault(_Styles);

  var _ItemCard = _require(_dependencyMap[4]);

  var Results = function (_React$Component) {
    babelHelpers.inherits(Results, _React$Component);

    function Results(props) {
      babelHelpers.classCallCheck(this, Results);

      var _this = babelHelpers.possibleConstructorReturn(this, (Results.__proto__ || Object.getPrototypeOf(Results)).call(this, props));

      _this.state = {
        itemsSub: props.itemsSub
      };
      return _this;
    }

    babelHelpers.createClass(Results, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.props.navigation.addListener('didBlur', function () {
          console.log('Stopping result subscription');

          _this2.state.itemsSub.stop();

          if (_this2.props.itemsSub) _this2.props.itemsSub.stop();
        });
        this.props.navigation.addListener('willFocus', function () {
          _this2.setState({
            itemsSub: _reactNativeMeteor2.default.subscribe('items.search', _this2.props.navigation.getParam('searchText'))
          });
        });
      }
    }, {
      key: "renderRow",
      value: function renderRow(item) {
        return _react2.default.createElement(_ItemCard.ItemCard, babelHelpers.extends({
          item: item
        }, this.props));
      }
    }, {
      key: "render",
      value: function render() {
        var loaded = this.props;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          !loaded ? _react2.default.createElement(
            _reactNative.Text,
            null,
            "Loading Items..."
          ) : _react2.default.createElement(_reactNativeMeteor.MeteorListView, {
            collection: "Items",
            enableEmptySections: true,
            contentContainerStyle: styles.list,
            style: styles.listView,
            options: {
              sort: {
                createdAt: -1
              }
            },
            renderRow: this.renderRow.bind(this)
          })
        );
      }
    }]);
    return Results;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: _Styles2.default.colors.white,
      flex: 1,
      paddingTop: 9,
      paddingVertical: 8
    },
    list: {
      alignItems: 'flex-start',
      justifyContent: 'center',
      flexDirection: 'row',
      flexWrap: 'wrap'
    },
    listContainer: {},
    listView: {},
    noItems: {
      alignSelf: 'center'
    }
  });

  exports.default = (0, _reactNativeMeteor.withTracker)(function (props) {
    var itemsSub = void 0;
    var loaded = void 0;

    if (props.navigation.isFocused()) {
      itemsSub = _reactNativeMeteor2.default.subscribe('items.search', props.navigation.getParam('searchText'));
      loaded = itemsSub.ready();
    }

    return {
      loaded: loaded,
      itemsSub: itemsSub
    };
  })(Results);
},1072,[103,14,858,1015,1055]);
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/assets/images",
    "width": 973,
    "height": 161,
    "scales": [1],
    "hash": "6d28223b7376d520c226a92faf7962b1",
    "name": "hbg",
    "type": "png",
    "fileHashes": ["6d28223b7376d520c226a92faf7962b1"]
  });
},1073,[154]);
require(48);
require(11);
//# sourceMappingURL=http://127.0.0.1:19001/./node_modules/react-native-scripts/build/bin/crna-entry.map?dev=false&hot=false&assetPlugin=%2FUsers%2Fjeff%2FApps%2Fclutchapp%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js&platform=android